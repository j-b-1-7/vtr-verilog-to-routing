`include "defs.vh"

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE4(

	//////////// CLOCK //////////
	GCLKIN,
	GCLKOUT_FPGA,
	OSC_50_BANK2,
	OSC_50_BANK3,
	OSC_50_BANK4,
	OSC_50_BANK5,
	OSC_50_BANK6,
	OSC_50_BANK7,
	PLL_CLKIN_p,

	//////////// 3-Ports High-Speed USB OTG //////////
	OTG_A,
	OTG_CS_n,
	OTG_D,
	OTG_DC_DACK,
	OTG_DC_DREQ,
	OTG_DC_IRQ,
	OTG_HC_DACK,
	OTG_HC_DREQ,
	OTG_HC_IRQ,
	OTG_OE_n,
	OTG_RESET_n,
	OTG_WE_n,

	//////////// DDR2 SODIMM, DDR2 SODIMM_0 //////////
	M1_DDR2_addr,
	M1_DDR2_ba,
	M1_DDR2_cas_n,
	M1_DDR2_cke,
	M1_DDR2_clk,
	M1_DDR2_clk_n,
	M1_DDR2_cs_n,
	M1_DDR2_dm,
	M1_DDR2_dq,
	M1_DDR2_dqs,
	M1_DDR2_dqsn,
	M1_DDR2_odt,
	M1_DDR2_ras_n,
	M1_DDR2_SA,
	M1_DDR2_SCL,
	M1_DDR2_SDA,
	M1_DDR2_we_n 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input		          		GCLKIN;
output		          		GCLKOUT_FPGA;
input		          		OSC_50_BANK2;
input		          		OSC_50_BANK3;
input		          		OSC_50_BANK4;
input		          		OSC_50_BANK5;
input		          		OSC_50_BANK6;
input		          		OSC_50_BANK7;
input		          		PLL_CLKIN_p;

//////////// 3-Ports High-Speed USB OTG //////////
output		    [17:1]		OTG_A;
output		          		OTG_CS_n;
inout		    [31:0]		OTG_D;
output		          		OTG_DC_DACK;
input		          		OTG_DC_DREQ;
input		          		OTG_DC_IRQ;
output		          		OTG_HC_DACK;
input		          		OTG_HC_DREQ;
input		          		OTG_HC_IRQ;
output		          		OTG_OE_n;
output		          		OTG_RESET_n;
output		          		OTG_WE_n;

//////////// DDR2 SODIMM, DDR2 SODIMM_0 //////////
output		    [15:0]		M1_DDR2_addr;
output		     [2:0]		M1_DDR2_ba;
output		          		M1_DDR2_cas_n;
output		     [1:0]		M1_DDR2_cke;
inout		     [1:0]		M1_DDR2_clk;
inout		     [1:0]		M1_DDR2_clk_n;
output		     [1:0]		M1_DDR2_cs_n;
output		     [7:0]		M1_DDR2_dm;
inout		    [63:0]		M1_DDR2_dq;
inout		     [7:0]		M1_DDR2_dqs;
inout		     [7:0]		M1_DDR2_dqsn;
output		     [1:0]		M1_DDR2_odt;
output		          		M1_DDR2_ras_n;
output		     [1:0]		M1_DDR2_SA;
output		          		M1_DDR2_SCL;
inout		          		M1_DDR2_SDA;
output		          		M1_DDR2_we_n;


//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================

//
// Reset generator
//

reg reset_n;
reg [3:0] reset_n_counter;

initial begin
	reset_n = 1'b0;
	reset_n_counter = 4'd0;
end

always @ (posedge OSC_50_BANK3) begin
	if (reset_n == 1'b0) begin
		reset_n_counter <= reset_n_counter + 4'd1;
	end
	
	if (reset_n_counter == 4'b1111) begin
		reset_n <= 1'b1;
	end
end

//
// Clock generator
//

wire clk150;
wire clk300;
the_pll the_pll_inst
(
	.inclk0(OSC_50_BANK3),
	.c0(clk150),
	.c1(clk300),
	.areset(~reset_n)
);


//
// DDR Controller
//

wire clk_ddr;

assign DDR2_SDA = 1'bz;
assign DDR2_SCL = 1'b0;

wire [`MEM_ADDRBITS-1:0] ddr_addr;
wire [15:0] ddr_be;
wire ddr_burstbegin;
wire [`MEM_WIDTH-1:0] ddr_rdata;
wire [`MEM_WIDTH-1:0] ddr_wdata;
wire ddr_rdata_valid;
wire ddr_read_req;
wire [3:0] ddr_size;
wire ddr_ready;
wire ddr_write_req;
wire ddr_init_done;

ddr ddr_inst
(
	.pll_ref_clk (OSC_50_BANK4),
	.phy_clk (clk_ddr),
	.global_reset_n (reset_n),
	.soft_reset_n (1'b1),
	
	.local_address (ddr_addr),
	.local_be (ddr_be),
	.local_burstbegin (ddr_burstbegin),
	.local_rdata (ddr_rdata),
	.local_rdata_valid (ddr_rdata_valid),
	.local_read_req (ddr_read_req),
	.local_ready (ddr_ready),
	.local_size (ddr_size),
	.local_wdata (ddr_wdata),
	.local_write_req (ddr_write_req),
	.local_init_done(ddr_init_done),
	
	.mem_addr (M1_DDR2_addr),
	.mem_ba (M1_DDR2_ba),
	.mem_cas_n (M1_DDR2_cas_n),
	.mem_cke (M1_DDR2_cke),
	.mem_clk (M1_DDR2_clk),
	.mem_clk_n (M1_DDR2_clk_n),
	.mem_cs_n (M1_DDR2_cs_n),
	.mem_dm (M1_DDR2_dm),
	.mem_dq (M1_DDR2_dq),
	.mem_dqs (M1_DDR2_dqs),
	.mem_dqsn (M1_DDR2_dqsn),
	.mem_odt (M1_DDR2_odt),
	.mem_ras_n (M1_DDR2_ras_n),
	.mem_we_n (M1_DDR2_we_n),
	
	.oct_ctl_rs_value (14'b0),
	.oct_ctl_rt_value (14'b0)
);


//
// Portmux
//

wire [31:0] outdata;
wire outdata_want;
wire outdata_have;
wire [31:0] indata;
wire indata_want;
wire indata_have;
wire [63:0] dbg_outdata;
wire [31:0] dbg_indata;
wire dbg_indata_have;
wire dbg_indata_want;

/*usb_portmux usb_portmux_inst
(
	.reset_n(reset_n),
	.clk(clk150),
	.o_outdata(outdata),
	.i_outdata_want(outdata_want),
	.o_outdata_ready(outdata_have),
	.i_indata(indata),
	.o_indata_want(indata_want),
	.i_indata_ready(indata_have),
	
	.o_dbg_outdata(dbg_outdata),
	.i_dbg_indata(dbg_indata),
	.i_dbg_indata_have(dbg_indata_have),
	.o_dbg_indata_want(dbg_indata_want),
	
	.OSC1_50(OSC_50_BANK3),
	.OTG_D(OTG_D),
	.OTG_A(OTG_A),
	.OTG_CS_n(OTG_CS_n),
	.OTG_WE_n(OTG_WE_n),
	.OTG_OE_n(OTG_OE_n),
	.OTG_HC_IRQ(OTG_HC_IRQ),
	.OTG_DC_IRQ(OTG_DC_IRQ),
	.OTG_RESET_n(OTG_RESET_n),
	.OTG_HC_DREQ(OTG_HC_DREQ),
	.OTG_HC_DACK(OTG_HC_DACK),
	.OTG_DC_DREQ(OTG_DC_DREQ),
	.OTG_DC_DACK(OTG_DC_DACK)
);*/

//
// Main system
//

mmm_hard mmm_hard_inst
(
	.i_clk300(clk300),
	.i_clk150(clk150),
	.i_clk_ddr(clk_ddr),
	.i_reset(~reset_n),
	
	.i_indata(indata),
	.i_indata_have(indata_have),
	.o_indata_want(indata_want),
	
	.o_outdata(outdata),
	.o_outdata_have(outdata_have),
	.i_outdata_want(outdata_want),
	
	.o_dbg_outdata(dbg_outdata),
	.i_dbg_indata(dbg_indata),
	.i_dbg_indata_have(dbg_indata_have),
	.o_dbg_indata_want(dbg_indata_want),
	
	.o_ddr_addr(ddr_addr),
	.i_ddr_rdata(ddr_rdata),
	.o_ddr_wdata(ddr_wdata),
	.i_ddr_ready(ddr_ready),
	.o_ddr_burstbegin(ddr_burstbegin),
	.o_ddr_size(ddr_size),
	.o_ddr_read_req(ddr_read_req),
	.o_ddr_write_req(ddr_write_req),
	.i_ddr_rdata_valid(ddr_rdata_valid),
	.o_ddr_be(ddr_be),
	.i_ddr_init_done(ddr_init_done)
);

endmodule
