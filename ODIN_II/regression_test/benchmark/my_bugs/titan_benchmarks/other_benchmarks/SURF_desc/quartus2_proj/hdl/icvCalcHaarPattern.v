// ==============================================================
// RTL generated by AutoESL - High-Level Synthesis System (C, C++, SystemC)
// Version: 2011.1
// Copyright (C) 2011 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module icvCalcHaarPattern (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        origin_address0,
        origin_ce0,
        origin_q0,
        origin_address1,
        origin_ce1,
        origin_q1,
        tmp_18,
        tmp_19,
        f_p0_address0,
        f_p0_ce0,
        f_p0_q0,
        f_p1_address0,
        f_p1_ce0,
        f_p1_q0,
        f_p2_address0,
        f_p2_ce0,
        f_p2_q0,
        f_p3_address0,
        f_p3_ce0,
        f_p3_q0,
        f_w_address0,
        f_w_ce0,
        f_w_q0,
        ap_return
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output  [18:0] origin_address0;
output   origin_ce0;
input  [31:0] origin_q0;
output  [18:0] origin_address1;
output   origin_ce1;
input  [31:0] origin_q1;
input  [31:0] tmp_18;
input  [31:0] tmp_19;
output  [0:0] f_p0_address0;
output   f_p0_ce0;
input  [31:0] f_p0_q0;
output  [0:0] f_p1_address0;
output   f_p1_ce0;
input  [31:0] f_p1_q0;
output  [0:0] f_p2_address0;
output   f_p2_ce0;
input  [31:0] f_p2_q0;
output  [0:0] f_p3_address0;
output   f_p3_ce0;
input  [31:0] f_p3_q0;
output  [0:0] f_w_address0;
output   f_w_ce0;
input  [31:0] f_w_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg[18:0] origin_address0;
reg origin_ce0;
reg[18:0] origin_address1;
reg origin_ce1;
reg f_p0_ce0;
reg f_p1_ce0;
reg f_p2_ce0;
reg f_p3_ce0;
reg f_w_ce0;
reg   [2:0] ap_CS_fsm;
reg   [31:0] d_reg_157;
reg   [1:0] k_reg_169;
reg   [10:0] tmp_19_cast5_reg_339;
wire   [0:0] exitcond_fu_197_p2;
reg   [0:0] exitcond_reg_347;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it2;
reg    ap_reg_ppiten_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond_reg_347_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_reg_347_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_reg_347_pp0_it3;
reg   [1:0] k_1_reg_351;
reg   [31:0] origin_addr9_reg_361;
reg   [10:0] sum4_reg_399;
reg   [10:0] sum6_reg_404;
reg   [31:0] f_w_load_reg_409;
reg   [31:0] ap_reg_ppstg_f_w_load_reg_409_pp0_it1;
reg   [31:0] tmp_5_reg_424;
reg   [31:0] tmp_7_reg_429;
wire   [31:0] grp_fu_190_p1;
reg   [31:0] tmp_8_reg_439;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] tmp_9_reg_444;
wire   [31:0] grp_fu_181_p2;
reg   [1:0] k_phi_fu_173_p4;
wire   [63:0] tmp_fu_209_p1;
wire   [63:0] tmp_1_fu_241_p1;
wire   [63:0] tmp_2_fu_264_p1;
wire   [63:0] tmp_3_fu_295_p1;
wire   [63:0] tmp_4_fu_308_p1;
wire   [31:0] grp_fu_181_p0;
wire   [31:0] grp_fu_181_p1;
wire   [31:0] grp_fu_186_p0;
wire   [31:0] grp_fu_186_p1;
wire   [63:0] grp_fu_190_p0;
wire   [10:0] tmp_1_cast_fu_223_p1;
wire   [10:0] sum_fu_227_p2;
wire   [31:0] origin_addr_fu_236_p1;
wire   [31:0] origin_addr_fu_236_p2;
wire   [10:0] tmp_2_cast_fu_246_p1;
wire   [10:0] sum2_fu_250_p2;
wire   [31:0] origin_addr7_fu_259_p1;
wire   [31:0] origin_addr7_fu_259_p2;
wire   [10:0] tmp_3_cast_fu_269_p1;
wire   [10:0] tmp_4_cast_fu_278_p1;
wire   [31:0] origin_addr4_fu_290_p1;
wire   [31:0] origin_addr4_fu_290_p2;
wire   [31:0] origin_addr1_fu_303_p1;
wire   [31:0] origin_addr1_fu_303_p2;
wire   [31:0] tmp_6_fu_319_p2;
wire    grp_fu_181_ce;
wire    grp_fu_186_ce;
wire    grp_fu_190_ce;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st0_fsm_0 = 3'b000;
parameter    ap_ST_st1_fsm_1 = 3'b001;
parameter    ap_ST_pp0_stg0_fsm_2 = 3'b010;
parameter    ap_ST_pp0_stg1_fsm_3 = 3'b011;
parameter    ap_ST_pp0_stg2_fsm_4 = 3'b100;
parameter    ap_ST_pp0_stg3_fsm_5 = 3'b101;
parameter    ap_ST_st18_fsm_6 = 3'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b01;
parameter    ap_const_lv32_281 = 32'b00000000000000000000001010000001;
parameter    ap_true = 1'b1;


icvCalcHaarPattern_grp_fu_181_ACMP_fadd_39 #(
    .ID( 39 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
icvCalcHaarPattern_grp_fu_181_ACMP_fadd_39_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_181_p0 ),
    .din1( grp_fu_181_p1 ),
    .ce( grp_fu_181_ce ),
    .dout( grp_fu_181_p2 )
);

icvCalcHaarPattern_grp_fu_186_ACMP_fmul_40 #(
    .ID( 40 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
icvCalcHaarPattern_grp_fu_186_ACMP_fmul_40_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_186_p0 ),
    .din1( grp_fu_186_p1 ),
    .ce( grp_fu_186_ce ),
    .dout( grp_fu_186_p2 )
);

icvCalcHaarPattern_grp_fu_190_ACMP_sitofp_41 #(
    .ID( 41 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
icvCalcHaarPattern_grp_fu_190_ACMP_sitofp_41_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_190_p0 ),
    .ce( grp_fu_190_ce ),
    .dout( grp_fu_190_p1 )
);



/// ap_CS_fsm assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_197_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((exitcond_reg_347 == ap_const_lv1_0) & (ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_ST_st1_fsm_1 == ap_CS_fsm) | ((ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm) & ~(exitcond_reg_347 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if ((ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if ((ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm)) begin
        ap_reg_ppstg_exitcond_reg_347_pp0_it1 <= exitcond_reg_347;
    end
    if ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm)) begin
        ap_reg_ppstg_exitcond_reg_347_pp0_it2 <= ap_reg_ppstg_exitcond_reg_347_pp0_it1;
    end
    if ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm)) begin
        ap_reg_ppstg_exitcond_reg_347_pp0_it3 <= ap_reg_ppstg_exitcond_reg_347_pp0_it2;
    end
    if ((ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm)) begin
        ap_reg_ppstg_f_w_load_reg_409_pp0_it1 <= f_w_load_reg_409;
    end
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & (ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm) & (ap_reg_ppstg_exitcond_reg_347_pp0_it3 == ap_const_lv1_0))) begin
        d_reg_157 <= grp_fu_181_p2;
    end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        d_reg_157 <= ap_const_lv32_0;
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        exitcond_reg_347 <= (k_phi_fu_173_p4 == ap_const_lv2_2? 1'b1: 1'b0);
    end
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm) & (exitcond_reg_347 == ap_const_lv1_0))) begin
        f_w_load_reg_409 <= f_w_q0;
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        k_1_reg_351 <= (k_phi_fu_173_p4 + ap_const_lv2_1);
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_reg_347 == ap_const_lv1_0))) begin
        k_reg_169 <= k_1_reg_351;
    end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        k_reg_169 <= ap_const_lv2_0;
    end
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_197_p2 == ap_const_lv1_0))) begin
        origin_addr9_reg_361 <= (tmp_18 * $signed('h281));
    end
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm) & (exitcond_reg_347 == ap_const_lv1_0))) begin
        sum4_reg_399 <= (tmp_3_cast_fu_269_p1 + tmp_19_cast5_reg_339);
    end
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm) & (exitcond_reg_347 == ap_const_lv1_0))) begin
        sum6_reg_404 <= (tmp_4_cast_fu_278_p1 + tmp_19_cast5_reg_339);
    end
    if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        tmp_19_cast5_reg_339 <= tmp_19[10:0];
    end
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_reg_347 == ap_const_lv1_0) & (ap_ST_pp0_stg2_fsm_4 == ap_CS_fsm))) begin
        tmp_5_reg_424 <= (origin_q1 + origin_q0);
    end
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_reg_347 == ap_const_lv1_0) & (ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm))) begin
        tmp_7_reg_429 <= (tmp_6_fu_319_p2 - origin_q1);
    end
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm) & (ap_reg_ppstg_exitcond_reg_347_pp0_it1 == ap_const_lv1_0))) begin
        tmp_8_reg_439 <= grp_fu_190_p1;
    end
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm) & (ap_reg_ppstg_exitcond_reg_347_pp0_it2 == ap_const_lv1_0))) begin
        tmp_9_reg_444 <= grp_fu_186_p2;
    end
end

/// ap_NS_fsm assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_197_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp0_it3)
begin
    if ((ap_ST_pp0_stg2_fsm_4 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_pp0_stg3_fsm_5;
    end else if ((ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_pp0_stg2_fsm_4;
    end else if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_197_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        ap_NS_fsm = ap_ST_pp0_stg1_fsm_3;
    end else if ((((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_197_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & (ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        ap_NS_fsm = ap_ST_st18_fsm_6;
    end else if (((ap_ST_st18_fsm_6 == ap_CS_fsm) & ~(ap_const_logic_1 == ap_start))) begin
        ap_NS_fsm = ap_ST_st0_fsm_0;
    end else if (((ap_ST_st1_fsm_1 == ap_CS_fsm) | ((ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & (ap_ST_pp0_stg3_fsm_5 == ap_CS_fsm) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
    end else if ((((ap_ST_st0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_start)) | ((ap_ST_st18_fsm_6 == ap_CS_fsm) & (ap_const_logic_1 == ap_start)))) begin
        ap_NS_fsm = ap_ST_st1_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st0_fsm_0 == ap_CS_fsm) | (ap_ST_st18_fsm_6 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st0_fsm_0 == ap_CS_fsm)) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// f_p0_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_197_p2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_197_p2 == ap_const_lv1_0))) begin
        f_p0_ce0 = ap_const_logic_1;
    end else begin
        f_p0_ce0 = ap_const_logic_0;
    end
end

/// f_p1_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_197_p2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_197_p2 == ap_const_lv1_0))) begin
        f_p1_ce0 = ap_const_logic_1;
    end else begin
        f_p1_ce0 = ap_const_logic_0;
    end
end

/// f_p2_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_197_p2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_197_p2 == ap_const_lv1_0))) begin
        f_p2_ce0 = ap_const_logic_1;
    end else begin
        f_p2_ce0 = ap_const_logic_0;
    end
end

/// f_p3_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_197_p2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_197_p2 == ap_const_lv1_0))) begin
        f_p3_ce0 = ap_const_logic_1;
    end else begin
        f_p3_ce0 = ap_const_logic_0;
    end
end

/// f_w_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_197_p2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_197_p2 == ap_const_lv1_0))) begin
        f_w_ce0 = ap_const_logic_1;
    end else begin
        f_w_ce0 = ap_const_logic_0;
    end
end

/// k_phi_fu_173_p4 assign process. ///
always @ (ap_CS_fsm or k_reg_169 or exitcond_reg_347 or ap_reg_ppiten_pp0_it1 or k_1_reg_351)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_reg_347 == ap_const_lv1_0))) begin
        k_phi_fu_173_p4 = k_1_reg_351;
    end else begin
        k_phi_fu_173_p4 = k_reg_169;
    end
end

/// origin_address0 assign process. ///
always @ (ap_CS_fsm or exitcond_reg_347 or ap_reg_ppiten_pp0_it0 or tmp_1_fu_241_p1 or tmp_3_fu_295_p1)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_reg_347 == ap_const_lv1_0) & (ap_ST_pp0_stg2_fsm_4 == ap_CS_fsm))) begin
        origin_address0 = tmp_3_fu_295_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm) & (exitcond_reg_347 == ap_const_lv1_0))) begin
        origin_address0 = tmp_1_fu_241_p1;
    end else begin
        origin_address0 = tmp_3_fu_295_p1;
    end
end

/// origin_address1 assign process. ///
always @ (ap_CS_fsm or exitcond_reg_347 or ap_reg_ppiten_pp0_it0 or tmp_2_fu_264_p1 or tmp_4_fu_308_p1)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_reg_347 == ap_const_lv1_0) & (ap_ST_pp0_stg2_fsm_4 == ap_CS_fsm))) begin
        origin_address1 = tmp_4_fu_308_p1;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm) & (exitcond_reg_347 == ap_const_lv1_0))) begin
        origin_address1 = tmp_2_fu_264_p1;
    end else begin
        origin_address1 = tmp_4_fu_308_p1;
    end
end

/// origin_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_reg_347 or ap_reg_ppiten_pp0_it0)
begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm) & (exitcond_reg_347 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_reg_347 == ap_const_lv1_0) & (ap_ST_pp0_stg2_fsm_4 == ap_CS_fsm)))) begin
        origin_ce0 = ap_const_logic_1;
    end else begin
        origin_ce0 = ap_const_logic_0;
    end
end

/// origin_ce1 assign process. ///
always @ (ap_CS_fsm or exitcond_reg_347 or ap_reg_ppiten_pp0_it0)
begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_ST_pp0_stg1_fsm_3 == ap_CS_fsm) & (exitcond_reg_347 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_reg_347 == ap_const_lv1_0) & (ap_ST_pp0_stg2_fsm_4 == ap_CS_fsm)))) begin
        origin_ce1 = ap_const_logic_1;
    end else begin
        origin_ce1 = ap_const_logic_0;
    end
end
assign ap_return = d_reg_157;
assign exitcond_fu_197_p2 = (k_phi_fu_173_p4 == ap_const_lv2_2? 1'b1: 1'b0);
assign f_p0_address0 = tmp_fu_209_p1;
assign f_p1_address0 = tmp_fu_209_p1;
assign f_p2_address0 = tmp_fu_209_p1;
assign f_p3_address0 = tmp_fu_209_p1;
assign f_w_address0 = tmp_fu_209_p1;
assign grp_fu_181_ce = ap_const_logic_1;
assign grp_fu_181_p0 = tmp_9_reg_444;
assign grp_fu_181_p1 = d_reg_157;
assign grp_fu_186_ce = ap_const_logic_1;
assign grp_fu_186_p0 = tmp_8_reg_439;
assign grp_fu_186_p1 = ap_reg_ppstg_f_w_load_reg_409_pp0_it1;
assign grp_fu_190_ce = ap_const_logic_1;
assign grp_fu_190_p0 = {{32{tmp_7_reg_429[31]}}, {tmp_7_reg_429}};
assign origin_addr1_fu_303_p1 = {{21{sum6_reg_404[10]}}, {sum6_reg_404}};
assign origin_addr1_fu_303_p2 = (origin_addr9_reg_361 + origin_addr1_fu_303_p1);
assign origin_addr4_fu_290_p1 = {{21{sum4_reg_399[10]}}, {sum4_reg_399}};
assign origin_addr4_fu_290_p2 = (origin_addr9_reg_361 + origin_addr4_fu_290_p1);
assign origin_addr7_fu_259_p1 = {{21{sum2_fu_250_p2[10]}}, {sum2_fu_250_p2}};
assign origin_addr7_fu_259_p2 = (origin_addr9_reg_361 + origin_addr7_fu_259_p1);
assign origin_addr_fu_236_p1 = {{21{sum_fu_227_p2[10]}}, {sum_fu_227_p2}};
assign origin_addr_fu_236_p2 = (origin_addr9_reg_361 + origin_addr_fu_236_p1);
assign sum2_fu_250_p2 = (tmp_2_cast_fu_246_p1 + tmp_19_cast5_reg_339);
assign sum_fu_227_p2 = (tmp_1_cast_fu_223_p1 + tmp_19_cast5_reg_339);
assign tmp_1_cast_fu_223_p1 = f_p0_q0[10:0];
assign tmp_1_fu_241_p1 = {{32{origin_addr_fu_236_p2[31]}}, {origin_addr_fu_236_p2}};
assign tmp_2_cast_fu_246_p1 = f_p3_q0[10:0];
assign tmp_2_fu_264_p1 = {{32{origin_addr7_fu_259_p2[31]}}, {origin_addr7_fu_259_p2}};
assign tmp_3_cast_fu_269_p1 = f_p1_q0[10:0];
assign tmp_3_fu_295_p1 = {{32{origin_addr4_fu_290_p2[31]}}, {origin_addr4_fu_290_p2}};
assign tmp_4_cast_fu_278_p1 = f_p2_q0[10:0];
assign tmp_4_fu_308_p1 = {{32{origin_addr1_fu_303_p2[31]}}, {origin_addr1_fu_303_p2}};
assign tmp_6_fu_319_p2 = (tmp_5_reg_424 - origin_q0);
assign tmp_fu_209_p1 = {{62{1'b0}}, {k_phi_fu_173_p4}};


endmodule //icvCalcHaarPattern

