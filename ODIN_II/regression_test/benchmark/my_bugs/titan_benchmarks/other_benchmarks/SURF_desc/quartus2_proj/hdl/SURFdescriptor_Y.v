// ==============================================================
// File generated by AutoESL - High-Level Synthesis System (C, C++, SystemC)
// Version: 2011.1
// Copyright (C) 2011 Xilinx Inc. All rights reserved.
// 
// ==============================================================



`timescale 1 ns / 1 ps




module SURFdescriptor_Y_core (q, ra, ce, clk
, d, wa, we);
   parameter READ_PORT_COUNT=32'd1;
   parameter WRITE_PORT_COUNT=32'd1;
   parameter DATA_WIDTH=32'd32;
   parameter ADDRESS_WIDTH=32'd7;
   parameter WORD_COUNT=32'd113;

   output [READ_PORT_COUNT*DATA_WIDTH-1:0] q;
   input [READ_PORT_COUNT*ADDRESS_WIDTH-1:0]  ra;
   input [READ_PORT_COUNT-1:0]  ce;
   input [WRITE_PORT_COUNT*DATA_WIDTH-1:0] d;
   input [WRITE_PORT_COUNT*ADDRESS_WIDTH-1:0] wa;
   input [WRITE_PORT_COUNT-1:0]               we;
   input                                      clk;

   integer                                    i,j,k;

   reg [DATA_WIDTH-1:0]                       mem [0:WORD_COUNT-1];
   reg [ADDRESS_WIDTH-1:0]                    rat;
   reg [ADDRESS_WIDTH-1:0]                    rai [READ_PORT_COUNT-1:0];
   reg [ADDRESS_WIDTH-1:0]                    rai_reg [READ_PORT_COUNT-1:0];
   reg [READ_PORT_COUNT*DATA_WIDTH-1:0]       qi;
   reg [DATA_WIDTH-1:0]                       qt;
   reg [DATA_WIDTH-1:0]                       di [WRITE_PORT_COUNT-1:0];
   reg [DATA_WIDTH-1:0]                       dt;
   reg [ADDRESS_WIDTH-1:0]                    wat;
   reg [ADDRESS_WIDTH-1:0]                    wai [WRITE_PORT_COUNT-1:0];


   initial begin
        mem[0] = 32'b00000000000000000000000000000000;
        mem[1] = 32'b00000000000000000000000000000000;
        mem[2] = 32'b00000000000000000000000000000000;
        mem[3] = 32'b00000000000000000000000000000000;
        mem[4] = 32'b00000000000000000000000000000000;
        mem[5] = 32'b00000000000000000000000000000000;
        mem[6] = 32'b00000000000000000000000000000000;
        mem[7] = 32'b00000000000000000000000000000000;
        mem[8] = 32'b00000000000000000000000000000000;
        mem[9] = 32'b00000000000000000000000000000000;
        mem[10] = 32'b00000000000000000000000000000000;
        mem[11] = 32'b00000000000000000000000000000000;
        mem[12] = 32'b00000000000000000000000000000000;
        mem[13] = 32'b00000000000000000000000000000000;
        mem[14] = 32'b00000000000000000000000000000000;
        mem[15] = 32'b00000000000000000000000000000000;
        mem[16] = 32'b00000000000000000000000000000000;
        mem[17] = 32'b00000000000000000000000000000000;
        mem[18] = 32'b00000000000000000000000000000000;
        mem[19] = 32'b00000000000000000000000000000000;
        mem[20] = 32'b00000000000000000000000000000000;
        mem[21] = 32'b00000000000000000000000000000000;
        mem[22] = 32'b00000000000000000000000000000000;
        mem[23] = 32'b00000000000000000000000000000000;
        mem[24] = 32'b00000000000000000000000000000000;
        mem[25] = 32'b00000000000000000000000000000000;
        mem[26] = 32'b00000000000000000000000000000000;
        mem[27] = 32'b00000000000000000000000000000000;
        mem[28] = 32'b00000000000000000000000000000000;
        mem[29] = 32'b00000000000000000000000000000000;
        mem[30] = 32'b00000000000000000000000000000000;
        mem[31] = 32'b00000000000000000000000000000000;
        mem[32] = 32'b00000000000000000000000000000000;
        mem[33] = 32'b00000000000000000000000000000000;
        mem[34] = 32'b00000000000000000000000000000000;
        mem[35] = 32'b00000000000000000000000000000000;
        mem[36] = 32'b00000000000000000000000000000000;
        mem[37] = 32'b00000000000000000000000000000000;
        mem[38] = 32'b00000000000000000000000000000000;
        mem[39] = 32'b00000000000000000000000000000000;
        mem[40] = 32'b00000000000000000000000000000000;
        mem[41] = 32'b00000000000000000000000000000000;
        mem[42] = 32'b00000000000000000000000000000000;
        mem[43] = 32'b00000000000000000000000000000000;
        mem[44] = 32'b00000000000000000000000000000000;
        mem[45] = 32'b00000000000000000000000000000000;
        mem[46] = 32'b00000000000000000000000000000000;
        mem[47] = 32'b00000000000000000000000000000000;
        mem[48] = 32'b00000000000000000000000000000000;
        mem[49] = 32'b00000000000000000000000000000000;
        mem[50] = 32'b00000000000000000000000000000000;
        mem[51] = 32'b00000000000000000000000000000000;
        mem[52] = 32'b00000000000000000000000000000000;
        mem[53] = 32'b00000000000000000000000000000000;
        mem[54] = 32'b00000000000000000000000000000000;
        mem[55] = 32'b00000000000000000000000000000000;
        mem[56] = 32'b00000000000000000000000000000000;
        mem[57] = 32'b00000000000000000000000000000000;
        mem[58] = 32'b00000000000000000000000000000000;
        mem[59] = 32'b00000000000000000000000000000000;
        mem[60] = 32'b00000000000000000000000000000000;
        mem[61] = 32'b00000000000000000000000000000000;
        mem[62] = 32'b00000000000000000000000000000000;
        mem[63] = 32'b00000000000000000000000000000000;
        mem[64] = 32'b00000000000000000000000000000000;
        mem[65] = 32'b00000000000000000000000000000000;
        mem[66] = 32'b00000000000000000000000000000000;
        mem[67] = 32'b00000000000000000000000000000000;
        mem[68] = 32'b00000000000000000000000000000000;
        mem[69] = 32'b00000000000000000000000000000000;
        mem[70] = 32'b00000000000000000000000000000000;
        mem[71] = 32'b00000000000000000000000000000000;
        mem[72] = 32'b00000000000000000000000000000000;
        mem[73] = 32'b00000000000000000000000000000000;
        mem[74] = 32'b00000000000000000000000000000000;
        mem[75] = 32'b00000000000000000000000000000000;
        mem[76] = 32'b00000000000000000000000000000000;
        mem[77] = 32'b00000000000000000000000000000000;
        mem[78] = 32'b00000000000000000000000000000000;
        mem[79] = 32'b00000000000000000000000000000000;
        mem[80] = 32'b00000000000000000000000000000000;
        mem[81] = 32'b00000000000000000000000000000000;
        mem[82] = 32'b00000000000000000000000000000000;
        mem[83] = 32'b00000000000000000000000000000000;
        mem[84] = 32'b00000000000000000000000000000000;
        mem[85] = 32'b00000000000000000000000000000000;
        mem[86] = 32'b00000000000000000000000000000000;
        mem[87] = 32'b00000000000000000000000000000000;
        mem[88] = 32'b00000000000000000000000000000000;
        mem[89] = 32'b00000000000000000000000000000000;
        mem[90] = 32'b00000000000000000000000000000000;
        mem[91] = 32'b00000000000000000000000000000000;
        mem[92] = 32'b00000000000000000000000000000000;
        mem[93] = 32'b00000000000000000000000000000000;
        mem[94] = 32'b00000000000000000000000000000000;
        mem[95] = 32'b00000000000000000000000000000000;
        mem[96] = 32'b00000000000000000000000000000000;
        mem[97] = 32'b00000000000000000000000000000000;
        mem[98] = 32'b00000000000000000000000000000000;
        mem[99] = 32'b00000000000000000000000000000000;
        mem[100] = 32'b00000000000000000000000000000000;
        mem[101] = 32'b00000000000000000000000000000000;
        mem[102] = 32'b00000000000000000000000000000000;
        mem[103] = 32'b00000000000000000000000000000000;
        mem[104] = 32'b00000000000000000000000000000000;
        mem[105] = 32'b00000000000000000000000000000000;
        mem[106] = 32'b00000000000000000000000000000000;
        mem[107] = 32'b00000000000000000000000000000000;
        mem[108] = 32'b00000000000000000000000000000000;
        mem[109] = 32'b00000000000000000000000000000000;
        mem[110] = 32'b00000000000000000000000000000000;
        mem[111] = 32'b00000000000000000000000000000000;
        mem[112] = 32'b00000000000000000000000000000000;
   end


   // Split input data
   always @ (d) begin
      for (i=0;i<WRITE_PORT_COUNT;i=i+1) begin
         for (j=0;j<DATA_WIDTH;j=j+1) begin
            dt[j]=d[i*DATA_WIDTH+j];
         end
         di[i]=dt;
      end
   end

   // Split write addresses
   always @ (wa) begin
      for (i=0;i<WRITE_PORT_COUNT;i=i+1) begin
         for (j=0;j<ADDRESS_WIDTH;j=j+1) begin
            wat[j]=wa[i*ADDRESS_WIDTH+j];
         end
         wai[i]=wat;
      end
   end

   // Write memory
   always @ (posedge clk) begin
     for (j=0;j<WRITE_PORT_COUNT;j=j+1) begin
        if (we[j]) begin
           mem[wai[j]] <= di[j];
        end
     end
   end

   // Split read addresses
   always @ (ra) begin
      for (i=0;i<READ_PORT_COUNT;i=i+1) begin
         for (j=0;j<ADDRESS_WIDTH;j=j+1) begin
            rat[j]=ra[i*ADDRESS_WIDTH+j];
         end
         rai[i]=rat;
      end
   end

   // guide read addresses using CE
   always @ (posedge clk) begin
      for (i=0;i<READ_PORT_COUNT;i=i+1) begin
         if ( ce[i] ) begin
            rai_reg[i] <= rai[i];
         end
      end
   end


   // Memory read
    genvar x;
    generate
        for (x = 0; x < READ_PORT_COUNT; x = x + 1) begin : gen_q
            assign q[x*DATA_WIDTH+DATA_WIDTH-1:x*DATA_WIDTH] = (rai_reg[x]<WORD_COUNT)?
                mem[rai_reg[x]] : {DATA_WIDTH{1'b0}};
        end
    endgenerate

endmodule


module SURFdescriptor_Y (
    address0,
    ce0,
    q0,
    we0,
    d0,


    clk);


parameter DataWidth = 32'd32;
parameter AddressRange = 32'd113;
parameter AddressWidth = 32'd7;

input[AddressWidth-1:0] address0;
input ce0;
output[DataWidth-1:0] q0;
input we0;
input[DataWidth-1:0] d0;
input clk;


reg[DataWidth-1:0] q0;
wire[1 * DataWidth - 1:0] mem_q;
wire[DataWidth - 1:0] mem_q0;
wire[1 - 1:0] mem_we;
wire[1 * DataWidth - 1:0] mem_d;
wire[1 * AddressWidth - 1:0] mem_wa;
wire[1 * AddressWidth - 1:0]  mem_ra;
wire[1 - 1:0]  mem_ce;


SURFdescriptor_Y_core #(
    .READ_PORT_COUNT( 1 ),
    .WRITE_PORT_COUNT( 1 ),
    .DATA_WIDTH( DataWidth ),
    .ADDRESS_WIDTH( AddressWidth ),
    .WORD_COUNT( AddressRange ))
core_inst (
    .q( mem_q ),
    .ra( mem_ra ),
    .ce( mem_ce ),
    .d( mem_d ),
    .wa( mem_wa ),
    .we( mem_we ),
    .clk( clk ));


assign mem_q0 =  mem_q[1 * DataWidth - 1 : 0 * DataWidth];

always @ (mem_q0) begin
        q0 = mem_q0;
end

assign mem_ra = {address0};
assign mem_ce = {ce0};

assign mem_we[0] = we0;

assign mem_d = {d0};

assign mem_wa = {address0};

endmodule
