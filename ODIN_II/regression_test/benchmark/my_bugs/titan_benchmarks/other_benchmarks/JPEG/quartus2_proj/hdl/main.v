//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 2.0 (http://legup.org)
// University of Toronto
// Date: Fri Jul  6 17:21:11 2012
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 55
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
//   %QuantBuff = alloca [64 x i32], align 4
`define TAG_decode_block_0_QuantBuff `MEMORY_CONTROLLER_TAG_SIZE'd52
`define TAG_decode_block_0_QuantBuff_a {`TAG_decode_block_0_QuantBuff, 23'b0}
// @CurHuffReadBuf = internal unnamed_addr global i8* null, align 4

`define TAG_g_CurHuffReadBuf `MEMORY_CONTROLLER_TAG_SIZE'd34
`define TAG_g_CurHuffReadBuf_a {`TAG_g_CurHuffReadBuf, 23'b0}
// @JpegFileBuf = internal global [5310 x i8] zeroinitializer, align 1

`define TAG_g_JpegFileBuf `MEMORY_CONTROLLER_TAG_SIZE'd51
`define TAG_g_JpegFileBuf_a {`TAG_g_JpegFileBuf, 23'b0}
// @OutData_comp_buf = internal global [3 x [5310 x i8]] zeroinitializer, align 1

`define TAG_g_OutData_comp_buf `MEMORY_CONTROLLER_TAG_SIZE'd35
`define TAG_g_OutData_comp_buf_a {`TAG_g_OutData_comp_buf, 23'b0}
// @OutData_comp_hpos = internal global [3 x i32] zeroinitializer, align 4

`define TAG_g_OutData_comp_hpos `MEMORY_CONTROLLER_TAG_SIZE'd50
`define TAG_g_OutData_comp_hpos_a {`TAG_g_OutData_comp_hpos, 23'b0}
// @OutData_comp_vpos = internal global [3 x i32] zeroinitializer, align 4

`define TAG_g_OutData_comp_vpos `MEMORY_CONTROLLER_TAG_SIZE'd49
`define TAG_g_OutData_comp_vpos_a {`TAG_g_OutData_comp_vpos, 23'b0}
// @bit_set_mask = internal unnamed_addr constant [32 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768, i32 65536, i32 131072, i32 262144, i32 524288, i32 1048576, i32 2097152, i32 4194304, i32 8388608, i32 16777216, i32 33554432, i32 67108864, i32 134217728, i32 268435456, i32 536870912, i32 1073741824, i32 -2147483648], align 4

`define TAG_g_bit_set_mask `MEMORY_CONTROLLER_TAG_SIZE'd36
`define TAG_g_bit_set_mask_a {`TAG_g_bit_set_mask, 23'b0}
// @current_read_byte = internal unnamed_addr global i32 0, align 4

`define TAG_g_current_read_byte `MEMORY_CONTROLLER_TAG_SIZE'd39
`define TAG_g_current_read_byte_a {`TAG_g_current_read_byte, 23'b0}
// @extend_mask = internal unnamed_addr constant [20 x i32] [i32 -2, i32 -4, i32 -8, i32 -16, i32 -32, i32 -64, i32 -128, i32 -256, i32 -512, i32 -1024, i32 -2048, i32 -4096, i32 -8192, i32 -16384, i32 -32768, i32 -65536, i32 -131072, i32 -262144, i32 -524288, i32 -1048576], align 4

`define TAG_g_extend_mask `MEMORY_CONTROLLER_TAG_SIZE'd44
`define TAG_g_extend_mask_a {`TAG_g_extend_mask, 23'b0}
// @hana_bmp = internal unnamed_addr constant [3 x [5310 x i8]] [[5310 x i8] c"\BC\D1\BE\99\8Fg\95\C0\AC\9D\BD\C0\A4\C3\BC\B5\C1\A7\BC\D2\B1\8E%\0A\1F('4 \1D\22\0E\0A\12\0E\1A\07l\B5\BE\B5\7F[cI$\0B$B]ZA3 $#&58#\19\19 1)6 \1F\1F\22\18\19&+ \0B\09\0D\14\19\17\11\10\12\1E\19!-$\1D\A6\C1eZ\AA\81\92\D5\A9X\91\C7\CF\A5\89q\C9\9B\8B\D1\BF\C9\ABg3\1D\11\09\1D+!$\18\0E\18\18\04l\B9\B4\BA\BC\B7\C3\C0l0KgUE1.7,*23)\1E\12\0E\1E006\22(&$\1F\1C47-\0F\0E\10\17\15\0F\0B\11\19\1F\1A,I\22'\91\84.\B5\CD\D1\BB\AA\8C84\8Ez\B0\C6S\9A\D7\C8\D1\B8\A4\C4\AE\807YL\1C&/.#\1B'\1F\10:t\89\A9\B8\B4\AF\A6xI[aT $>:()0- \14\0F\10\0C\1B\18$(\10\22\18\16!=A7\12\15\16\1D\13\12\0F\15\1C!\1D0K$&o\0F>\E2\CF\BB\CD\BC=\02\0D\1F\09i\8C1\18\BF\D1\C6\BA\B8\93uY:\8A\B3\87>43\17\14\22\1C\1A\0A*p\97\9D\8Bzq6OT`.\13 5:(('&\15\15\11\17\06ne\0E\12\07\0F\1B\07\1B@F?\16\1E &\16\08\0A\12\14\1A\1B+:,(\8B\8C\81\9Cq\B1\D7\AEoe$\0E\14\8BbjQ%a\DF\C8\D9\95\99\94\83F\92\B2\AC\83P\0D\11+\10\12\14\18b\82\A3\90UGQNXD\1D'8;1()'\14\0B?P\01Y\B3\BA`\00%\0F\15\14\1B@LI\1D\1F!+\22\0D\0C\13\10\10\0E\1C&<2\B3\C4\D9\847y\D5\B4\B1\B7\AEf\A1\B6\8C\93\C5\CE\A4\D6\D9\AF(\8D\AE\B7{Daw{~1\15'\11\17\1C\0E{\95\C2\C1_KIF?;207:*06 $\0CU\9Fn}\B1\BB\89\196:7\12\13;ML\22\1E 0/\22\12\0D\0D\0C\05\0C\1249\88\86\AF\D6\86\A1\BE\8D\B1\BD\8D\A4\CB\B3\B9\90I\8D\CE\94\B5\C0qE\95\B0\8DtS.epO\1F\19(\1E\1A\0Cb\A2\C3\D7z7A=D@.DACP8$,/\1B7\B1\C8\AF\A9\B2\9Cr~k=.2<NL.*0;:-\19\14\16\1A\13\13\0F8:)r\C4\C3\D0\C5\BA\B0\AE\CCy\88\D0\CD\C9V\0C\BE\B4\B1\94\B2\DD\91a\92\88\99\A9\8A\93\BF\A79/\A8|!\056\BD\B4\C5\BC\88D6?2NSJPZ:,<-,\12\80\C2\B0\C9\CB\C4\AF\8Ek=,=JVS>@GH??7941'$\18=9\13K\C2\A5\A8\BA\C4\BB\CB\CFVA\82\C0\D6\B8\90\AE\B4\D1\93Llt\9B\9A\BB\AC\B3\B4\BB\C7\CC96\A5\7F/ZC\BD\B3\AA\D6\C3\9Fg( @aB55CM./'\0A5z\97\CA\D5\D6\BC\A1\91j<:N]aefVUG927664+(\15\16q\0B.Bh\8C\A4\A7\B1\D2Gsi\BE\A3\B5\BB\B8\8E\B1k\CF\80qy\9C\99\8F\A1\9A\A5\B6\B67-t*4x^}\B4\BB\BA\C7\BF\BAN\00+`vR\13LLG7\1D\09\08;o\A8\BD\CD\BB\A6\8Ao2)7L^kte\5CH32/'+%\1D(\19\1BdD3.8Q\5C\98\B0\CAG\8E\CF\C4\C5\90\B5\B5ixO@\B3pfa@?3^\B4\A4\93%D\A9^da\8A\01D\B2\B5\AD\A6\B6\A33w\A5\BB\BBA'ORG\0F\0E\0A\0C@\90\B9\B0tF<)'\19\17+?VnndK1\1B \1B\12\15$%\1D ]>\22\1FG>f\AF\90j:\C9\AA\BF\BD\A7n\AA\AE\86yT\A1xU>@+\09N\BA\B9\AA\14d\B4\9F\B0\AC\BDdj\A9\AA\99\B4\BD\BB\BF\96g\8A\9B}1M=>H\17\12\15\1B'RP55GT:!\04\12#?exkF'\1C\1D\19\1C\18 !\22\1Fb; \11\22\1CEy\1A.L\ACk\13\8E\99\88\92\D6\A5\BB\CF\B3~?Q&-&a\AD\B8\9B\18d\CE\B0\C6\CE\E2\98k\81\99\92\BC\BB\AA\B3\B3|\9B\B3\9A]IAQB9\14:<$/8\191JZU,\08\0C\180SzxW%\1D\1C\17\17\14\1D\1F\17\14a3\09\0F\0E\10\17X %K0\12\11\18\C5\C8\AA\C4\BF\CA\CD\B6d8#\1Cq\5CG]VV\22N\BA\C2\B6\C1\B4\A5NVz@i\C3\A3\94\BC\94\96\96vx_IMKF?O_@R;\1F\14+F]T\1D\1D,>Npx],\22\22#\11\11\1C\14\17\1AU:\15\18\1D\11\0D\1F\0D\15Y\1F-\13\15\92\E1\D2\CE\B9B\A4\B7\BF\95<Bw4J7\8E\9E\14K\9A\A1\C9\93\8A\B6\8FzT\15t\AE\AE\A8\C6\80IN\A6\9FNI5$q|X\80\7FjB\09\17\14)JYA4>I?[ob6F=?<2\1D\16\19\1C%P\19\17\10\04\0B\16\0D\16V\1D\122\19\08w\A3\A0\B9\A1\9E\BD\B3\84wt'\81\AB\89\B4\AE\13u\C2\C0\C1\AE\9Fw\A5\B1\A8,y\A1\B9\C8\C2\A7RR\A2\A2J37\0Fc\9Cv\7F\B1\A3H\09\0D\0A\05%GMFm\8D{\85\89uIOESPRC/\1C\1A\0DM\17\12\0F\10\10\22!\15U\0E\00%,\00\B3\E1\BB\CE\D1\8D\95N9?H\81\9F\A4mas\1F$[\19]\D7ld\B4\B5xDR\A8\C3\C2\95\B9\B3\83H\83K7. =\90\96\81\C4\B6yWQ\06\05\14&8d\99\AC\CC\CC\C6\D4V A3;9;43,+\1E \142F1\13\1A(EdK2(\12d\C0hdiv\83\81*L#I|\92h\01\1CKb\C5\A6\B1\D4\C9\AF\AE\C0\8Ec!W\D8\BD\C1\D1\B9\BC~~\5CV:#\1Ct\AE\B5\BC\B4\A6\88V\10\01\00\06\17?g\88\AE\C0\9B\C6\AD#\10*3(&:+,\1A\1D\19\0E%K#;\13;=e7QO\1D0VmQB\BB\8F\B6\8E\0D\02'N\90i\1C\22T\1B]\FD\A9\F2]\D8\A1\9B\C2\E7\8B\07[\CD\CC\E2\B8\DF\EA\BEp\5C+%\14\84\C2\C6\CB\AE\8A:\07\00\1Afn[yx\84m\AB\A7\A5\D9\B0RMD3\16&,,\05\16\1D\1D\07c\1E\8Be5<d\87L@ $36Wo\93\F0\BA\AC\CD.\00.\15\0B>%-\1A\00.\C2\BA<\EFb\8C\C0y\13\B2\A4^\B7CW\C2\C2\C4\BES\22 8U\AB\B6\AF\CE\99=\01\06@\A1\C6\B3\AC\B3\AAp\A2\DD\BF\B9\B5\88ZV9\1D\1B,+5\14\0C\12!`8\9C\8B\84=/uqe$\1B\05?\A6{\15\A3\CF\E0\B4\81\D4\9F\C1\CD*\143\17\1B\110\F04\B1\B1\95@\01\8C\BA\B4\CC\D3\D5e\BB\C6\96:p\81V7?MJf\92\9Ac50\1CW\B3\B1\AF\B2\AFt\86\9D\B2\C1\B4\94}U\1C\14\12:;\1F+\0AG\B1\92-\99v\B8\8D3\1B8M-\1EH\91\9FZX\A8\8E\B7\D4V\AD\CC\C9\84\00!1\15\09\00}\BE=Q\B1_H\17\0F`\AD\D6\B4\E5\DA\BA\B9\DFH\92\A0\81V>NB]oqZIRJ\03B\96\BF\B5hxZtr}\ABz\84B\15\19\1B;<%!\0D\1A\C9\BF4\AA\89\BD\D9\D0\98\1Ao(\0A\94\A9\A2\99\86\CC\CB\AB\92=e\CA\8E\00\09,6\13\0C\00$\A7R\1C\D9{f\0C5\17\00/\00\C3\C2\BC\AC\B0\AE=e\9D\88m(,}\92\93\80MaqS6\AC\BE\A5\9F\BFUA?!-?<!\15\13\10?=\22390$\89\18zZ\E6\C2\D2\BEP*3\12\95\D3\9F'{\AC`?\09J*\94\E0w\0054\1E\00+\BDu^%\9F\9D\D6g\16\1E\0D:<,Cd\A8\A3\B36\8B\DB\C1qD\8C\8F\8D\A5y~W\92|_\A6\A7\82\9C\BDl*+)\11(\1E\1D\17\13\12=<\0D#^z2u\CD\AC\93l\DD\BA\B7\89&%\1Fj\D0\9C\12\AF\E5\8B\00irc\0C\92\8D\A24*\00>\B1\BA\88^ {\92\D2\C1l\A8\91\08\C1$=E=\A6\9C\CB\7F\C3\E4\92\A9\8DZ\88m_bZ\99\8FVRa`c\7F\84&.$\1E\18#\17\19\1B\0C\10\1E\0E\00\04\16r\99\9E\AD\BC\BC/p\F8m\CD.\22O\B5j,\B6\C9\8D\00\96\AC~\AA\A0\86zk7\CCm>\98\EB\5C&\86e\B7\D9\94\98\9Fs\BF\B0\9B\90_>4\BA\92\D8\B2\FB`I~\8A8a7gx~I0\2290\8D\8A9!\22#\17\16\1F\1C\14\17!\1E.\01\13\1D\1B|\A4\AC\CA\DA\B0d\18n\BD2,%c\1D\1Fb\A40G\C5\99\CA\A7\9C\C4\C08\80\D9\AF}\991j\0F\80\EF\B6\C3\AB\5C%nVv\94b7\22\1E\150\E8\D1jWk\AC\1EGVXH>1B.@PDLo-*#\22\1C\1A1+\16\1D  \90)\00\15\02\00X\A0\A7\C0\A8W\00\A9\EB2#\16\0Cb\00\17=\00G5\F0\90\CE\B2\BC\E1\C8\A7\CE\DFv\0CKm$Q\E1\C2\90\B6I  p\A7]2,\1E\113+]uqI\D2\A2cWWA\22\22\16\15#Hgc:8/-(\1A\1E\22>9 %\1E\1E\B7p\00\08\0B\1A\00w\CD\94\D2\00<\E1S:#\1E\06%=\07i\1F$\07Y\E5\AB\AC\C3\DB\D3\AF\B1\DB\90J/j%2\C2\BCdS\19@1\BB\AF\84\19+\19 0\1EJlZ\8B\D2\C5\83jO*V@#$&D]Wg6W))\15\18\1D=:&7\14\1E\91L\05\0A\02#\00\91\BF\D7;\05\96\B3\89.,\18\09\18F>\15\0BA\8DW\7F\AD\8B\A9l\D4\B5\96\C2\CA\9AR:P<Y\8DT\00hh\1AR\A1U\0C\10<LH\02R|a\A2\F1\B9t\91*1XD*\14\1BAUdO]:L\1E\16\15\1C=:%A \1Cc(\05\09\0B\17*\DC\C4\FF\00\1A\E2\A4\82n\1D\1F\00\1FF)%'f~\9C\D1\9E\D7\F9\E2\DE\C3\E8\E2\CA\A3]?T3\83\9D\00\8BKr;\0B|^\1CEna/,\91hc'\B5\BC\B9\B76\12'.C-\07g\A3\86mMK(\1A\16\18#>@%2 \1F\87h\0A\02\14\14\1A\00\1E\0E\15O\88le&8\16\19\1FA=\0E\16;w:RbJ)\9D\C8HR\DA\9D\A6yRq\11\9E\D1\92\7F>~8\07FbaIIb\04\A6ju*%\01\B6\CB\B2<\1E\19-7)\16@\B7\C5\B4aB'\22\15\16(8D,\1F\1F!U >\00\14\11#,\13\17\00\93\D0IU\0EF\09$%:N\17/\04\0B\14\03>A\12\92\C5\86o\C0\DF\BA\A0\7F}<\AB\D2\D4\CF\A8\AE\90\BF\00\94x#B\1DO\B6_G\19^rG\A6\BF\93`\18\14/\1F'(p\A8\D1\98M'\11\0C\1D3AJ,\0F\07\15QB\0C(\00\0DZ\18\13#\01\95/\5C[\07D\0A,\1C\1C_\00\A0j\0E\1D\0CE+\15\F5\BFz\C3\E5\D1\CF\9Ba\8A\FE\AFv\F7\D9\D9\B7^ksBf\8A\0D\10\9C\80/\16\0F,\A2\8A\9B\A5\A7\ACX\03#\1F\87\86\B4\9B\C0\BE\A55\09\11\1C5KNF7\1E&9q\07!\0A\1FE\17*\0D\1C\08\017\1B;=\1B)!\0D%(\84\8F\08\16\10,XTH\98\A8\AC\C1\93\C9\B2e\00\E0\E7\FA0\03\C1\E9<N!\9F\8F\D4\002\00\09\0BK'AC\C6\C8\918RO\142S'i3F\B9\D2\D0\BD9\0F\19);HPp\1F$@ra\00\18X\95\1C\0F.\10\096>\01\00n?\10\1B!8\17\11\00+.B>\0C\7F\A7\BD9\FB\E3z\02\00\07D6_P\F7\A5\D4@o>\DB2\7F+S8$\111B{oy\91\7F\AF\BBT`_\0F!8\82\82\CE\A8\BB\CE\B3\90-+\1B\18Knz#\1D^IK\86\0D\22PJ\0Byo-3\1D\22\BE\D5z\11\19\19\0Bns!,B\0A+\05Bs\859J\F4\82\00#\10\14Y*<\E6\DBN\C5\EB\8B\93.\0AzuoZ68CR:\10\8B\91\9E\D2g\12%0# %\09!#x\A1\AFyD.\0E\168gzG\5CWS\00\5C\7F\14,\0Fv|yP/S\95\8C\B6A\11\1A1Af\BAt\16\82\0D\00?(7\18e\0A\1C\82\02\15.\08/:z\FB\13j\D0\B4\D4e\067\5C>}AY'\22\1E\02!oVw\D5\00\A3]\11\19#\1B\1B%#?i\AA}2\18\02\10+RNbaX\12\1B\00o|\17\22\8F\D7\9C\B9\9F|n\5C\A1@\16\0F;BAN9#\16*\0CX\00\17!wS+\00\12 6\1627\03%\9D@\00\0B\92\16BcD\5CNF\A7\1A\18\07\0C,<\05W\904\C2\AAU\19\1C\1E\0F\19\16\155|~R6\0C\1C$8=gk\87\0D\19)\18\8E-\1C\13\F3\CA\BA\AA\EB`o\8CP,\08#\15d\14\0F\09\00\0B%\00\1F\01g\8Ed\00\0CV(h>\0C\14023\135\8E\13<TdC?]X\02)\16\16\1C*2(,#Vx\8Bw9\12\14\08\02\12\16\07&3C:<[&0Gjr\A8\F8F\14)\00\138m0\D1\BD\9Cy\FB\AC\CAu\82s>\11Q\10+\BF\A5C\02\120\B2\A0r\00\8F\CC\BB\A9+($.#N9\06\11V\B4\1Eg\1C\17sb>\14A:7HVRQPA\179\5C\9A@aN:(!+['\19\0A IH!18\0C\00N\8C\BE\00\5Cl\12\0D\8B\C4\C7\D7:J]\D7\AD`:U_\151R\00f\DB\BE\96\03\97\7F\9E\9D\00\CD\DD\AD\BCg+0$H[{k8\09]\02X\0EQ`I<\14>-6D)9\1F\18<Z\084S\81\C3\81]NX\83lh4\1D/YM34T\01\03ZF\82\01\8A\C1\CC\85\9F\AF\B8\DCMg\B6\B9\D1\83h,0-\1AJ\16\00\88\DF\BB\B4\A2D\E291\A9\98\D6\D6\B2\152,<5Qg=& \162\02C\AC\B7\B1\1B#\17\0F\0ErP(-\1C\0C\09V\AC\AF\B7\B7}W}X\82Z;\12AoN%\22<\01\05\0C\1E\08\11\17|\C4\DF\D4\92y\C6\E6\E6\A2\D4\83C#'\0E\1E\11&+\BA\C0\B3\DA\B8\D8\F9\1E\16\05+\AD\A5\9C\005\05:4Dg\1F)\0E\10P \0Ec\F8\C3Vh\BC\CAWR\B6\8CY\14\12\12/0l\E1\B0\C6\CEbauZG)\0E*c5\1D\1C)\07\00\1Ff\1A6\09\00\9C\C5\E3\C7\CB\C8\EB\C2\8A\CA\9F\0E/ \004$\0Cl\96\A4\B3\B3b\9D\CF\01\0E\00gv\98\9F\00\22\99`M\7F\12\04g\13\1AN@\A1\E54\00\00D\A9\82\E7H\D0\C5|\05.]/GT7\E5\CA\CCaq\96\9A\88\8A\84}4I\16K)\16\00YK8IL\88q\E2\B5\86\B0\D6\D6g\96\87\D5\00/\12\05\0F5\18\1C?\7F\C6\C5\AB\A1\DB\CC\1E\00u]n\9A4\95^g\8F\91\00\7F\92}C\B3\B4k\00\09Y\C3\00\D1\9A\8C\C3\97\EB\A9\02-1G\9A\94\B0\BD\DAkG\BC\C7\97K5PJ2D\15D8\04\0B !M\87\C5\C0\B4\93\CF[\93\8D\C3\B6ad\93\01,\14\0C\0D\08! \19\1ERs\96\D2\C0\DF\D6\00-\C6\B1\B9\DCW\5C\844\A9\BA\9A\A6:)X-\14\18W\FFR\A2\BE\E6\D4\C0\C1\F1S\13.>\81\B4\A8\B6\E4\EDe\07\AE\BF\AB\A4mC\0A;<\1B\1F6\0F\0CU\1F\89\5C\AD\CA\C0\BC\EB\1A[\DD\9F\D0\B5\18\0B\13\0C\12\04\0EA\19(\1AnL\86m\CB\C0\A0\ABC\00\F7\C7\D4\F1\A6\8D\8DJ\1C\D9\CE\BF\0B@0gd<<\E6{1\83z\AE\D7\00wh\00k\88W\5Ct\82Ob\F9\82\CF\D5\A0\00\00\13!:M)'?\11\12WHxYJ\DE\DD\AF\B6\D3\DF\AB\E1\C1\88\08\0C\0B\0F\00\0D\01R\19\22-\AFP\9B>\A3\A2\85\00\8D\AC\C0\C8G\92\F8\C3\8C\B5\F0\9D\D8\D3\02UqY\1A\A0\E0\A8\99aQ\C1*\C9\03\D1\BEZG\81Y??j\04\04\D2\B1\D6\9C\EC&\0B\07\19_`)1=@\816|g`_\B9\12\93\D0\B8\A0\B9\A8\D1\00\0F\16\07\15\1A\1B\15\04\1E\18\8D\A5\BCm-~y\8F\B4\BA\C1\E7\A4D\08\A4\C1q|\8D\AF\A8\E3~$4\00\A0\88\BB\CBj\AAR;8\CB\E8\AA\98b*,Ob\849\0BX\C6\C1\ADV\A5\F6?!\0CI8*)1z|miQT\16HA\94\C3\DC\B8\D3\87\CA4\00\0E ./,\19#\1D\19&D\089NY\87,\8B\A5\BE\AA\CAY\C7\C1\C8\88\80\9Bb$\C5\EA:\00%Hr\EF\A15\00\13\00?\A3\9A\B8\96Ybhf{J\07Y\06~\E88\11>\C6uiC%\1C+2\1C\83\8D/\1C#[F#\10\16\CE\BCAT\C8\8Em\1A%\15\06\1D\05\1E\0F\11\1F\0B\0B+>&\08\14^f\B2\A1\9C\92\EB\AD\9D\87ob\18'#&\D4s\000?\14\EE\00\05\0C\01\12\22\86\8F\CF>Ua}\9A@\004\09#:d\16\13\19f\D61. 74.1\8C\89;\17\08Wn\00\17\02\1A\A2%Y1\BEvO\03\0B\11\15\15\0B\15\04.\11\17-3.\1A6\00\0D\FE\E9\B8\D0\96\F0\A8\90S\08\04\EC\CC\06\B8\00\22;4\0F\00\19-\03\0B7\1Chv\B6\1BD^\9E\82\0Av;\1E)?\15\12+,\0B`\07,33-35m\93D\00\01\00[A\07\0AKoJ\18\C7\8F\8Dc\00\0A/\0C\16\19\10\10&\0A\05<Y\08\15D\127\EB\DB\FF\C3k\FF\D3\C0z\0B\A3\A6\B2\17L#!O\190\0E,\0D\0D\13\07\1A<GS\1B3\85{\00]h\13'  \1F\00\02\15h\06\8C+# *!6\88\90\13\18\06\00\02/\04\13EXb\84\DB\C7atS\00\12\12\08\14\1B\0C\0E\0D\14C\04\0C/\09\19\10L\ACU\17\19b\C4\B8J\13\B1\8D\DA\F2[\BB\80Uk\D8\5C\00\10\0F\0B9U\125\92\17VU\03X: 3\1D\10\0A*\C8\9B\A8$a\15\16\1B\1D1*\1D\98\9D\1A\0B\0F\0A\0C\0C\0A\19PPM\1B_\A1sh\15\11\0C\0F(\0E\12\0D\04s\D4m\C0!\1E7.\1B\0FO \DE>\08\06\8F\A8\A0\AC\B2\B3UUA\CDx7\89\D1\0B\0E\00Mx\22'K1)4\12+[C\0E\0F\06\16\1Ak?\1C\00' \18\1D\14 \1F'-\98\9B\0F\0D\00\00\0E\0C\04\22>5]8I\06'xn\00\10\00\00\09\0D\00 \BC(\CF\F3\E2\00\06\0E\14`/\18\B3\F8+\06V\DC\96\B3\CF\A3\A2\8A\CC\D2J+\C6\A6\BE\D3\AE\074'\228\1E\1F\0B3?7;WSF,2\1B \22# &\1F!\1A;9-4CI\00\00\06\03\0B\08\02\05,#\AA3L:\8DR\0F\00\00\10!<\05\00<\AE\C5i\E2\F4\F2\00\00RA\1B\10-\A4\00\00\83qqH\D7\BF\CD\AE\C7\D0\89\00\CF\AF\EA\D2\F0:#\1A\22\19\14\0C8<\12\16\16\1A.B^OV\1E\10\12\1D\16PM9\1E8&-FL[\02\04\09\12\01\03\04\00\00}c\1A\02\00\00\07\06\06\1C`>\04\16\1F\1D\F9\F9\D1\A4\EC\EF\A4\CE\AE\07B\A8\00\07\8C\00\C1\EF2\DA\B9\97\CF\D8\AD\BDK\DC\CB\A8\E0\CD\80\00'\14\03*34,\17\0C\0A\0A\14)\0A!\22>D\19\12NVUEQ1%#S[", [5310 x i8] c"\BF\D5\C2\9B\8Fc\93\BC\AF\A1\C1\C2\A4\BF\BA\B1\C1\A5\B9\D3\BC\92/\12\1F&$5+!,\16\13\1A\11\18\08k\BB\D2\BE\87^aJ#\118TjbMC.( 8B@/)'$.*7!!%&\1E$',!\0D\0F\11\1A$$\1B\15\13\1C\15\1B&1'\A7\BFbW\AC\88\96\D4\AAV\8E\C4\D1\AC\8Dp\C8\97\88\CF\BE\C6\ADj2\19\0E\07\1C(#'!\18\1D\18\01j\C1\C7\C3\C6\BC\C3\BDj8^vZI=?F4-A8-*#\1D&36;$/2-&&:</\16\1A\19\1E\1F\18\12\13\17\1B\13%A'(\8D\81/\AF\CA\D9\C2\AB\8855\88w\B8\CDT\9A\D6\C7\D0\B6\A2\BE\AA\806XK\1A$)*.&/!\0D?\83\A0\B4\C3\BC\B1\A3}XrjZ'0NH.)93' \1F\1E\12\1B\1B*/\1A0&!*@G>\1C#$(\1C\15\12\16\1A\1F\19.H\22\22p\0C=\DE\CE\C5\D2\BC>\00\0C\1B\08s\911\17\BF\D4\C5\B9\B6\8DnX:\8D\B2\86<.,\22\1E' \1B\109\85\A2\A7\90~r<^ik; /EF)#23\22$!#\07id\10\17\10\19&\11%?HD\1F(+0 \0E\0F\17\18\1E\1F/@&!\96\8C\7F\96q\BB\DB\A7ze\22\08\14\95fcQ$e\DC\C2\D1\8F\95\94\82J\8F\AC\A4}L\19\18.\12\14\14\1Bj\8E\AA\93WIQQ`W,7IH5'':#\1BP]\05X\B1\BC`\00,\19\1D\1C\22BLH$))3)\13\14\1A\19\1B\19'1E9\C7\CA\DB\88:|\D3\AD\C5\BD\B0j\A4\B9\8A\8C\C4\C9\A5\D1\D8\A7#\8D\AD\B2|?`ov~=\1B(\13\19\1C\0E}\A1\C8\C2aMIFA?4>JG022$&\1Ah\ACt\7F\AD\BC\8D >@A\1C\18<QS*$*:4'\19\16\17\18\11\19\1F67\9D\90\B5\DC\8C\AB\C6\8B\C6\C7\93\AA\D1\BD\C1\8EJ\8C\CB\92\B7\BFsE\96\AF\8ArU-gp\5C%\1A*\1F\1A\0Db\AF\C9\D8|8A>DB3OKGQ8#.4&A\B5\C9\AF\A8\B2\A5\83\8CtH:9<W]<3;GA1\1E\1A\1F$\1D\1D\19438v\C6\CC\DD\D6\CB\BB\BD\D0{\91\DD\DE\DAa\0B\C0\B3\AD\90\B5\E5\92`\94\87\95\A5\8D\9B\C0\B5@2\A9v\1C\053\CB\BB\C8\BD\82?6<'MYU_a?61,2\1D\8F\C9\B5\D3\CC\CB\BE\A2{J8IK]bRPTTK@9=;81+\1F61\16O\C6\A7\A8\B6\C2\B7\CE\D3ZC\82\BC\D4\B4\90\AC\B1\D2\9EPv|\9B\98\B8\AD\BE\B8\C5\CF\D5A9\A3\80.`W\C6\BB\AD\D4\C4\9Em<2MiNECGJ@</\16E\88\9B\C7\D6\D7\BD\A3\97nBEO^bglZ[RF<<740%!\22 r\09+?j\93\A8\A6\B2\D0Dpk\C5\A7\B4\BA\B4\8B\AFj\CC\82tx\98\96\8D\A0\97\A7\B9\BFA2t'2\80q\86\BE\C0\BA\C4\BD\C2a\0F0d\82c\22TOV<!\15\19Jw\AB\C3\D2\BD\AD\96x93=Q`r\80ncR<91%'\1E\16 \1E\1C`A4(5Yc\99\AC\C7H\88\CC\CC\CC\91\B5\B4hwM>\ADlf`?>1\5C\AE\A0\9E0L\AB[ip\A1\0CO\BA\B7\AA\AB\C5\BA<}\AC\C7\CBO-O[M\16\1A\1A\1AF\90\BC\B6{PJ72\22\1A1F`||oT4\1E!\19\10\11\22\22\1B\1C^;!\1BFHk\AF\91g9\C5\A9\C9\C2\A7m\AA\B1\85xR\9BqT>C*\08L\B4\B2\B5\1Ei\B8\A0\B6\BB\D2ot\AE\AE\9A\BA\CC\D0\CA\A3t\99\AB\892HHKU&\22!\1C\22QR:>Q_D+\03\14(Ho\83uP-!\22\1D \1C$'\1C\18m;\1E\0B\22&Ir%.J\A6k\1D\92\92\88\91\DA\A2\B5\C7\ADz?P** Y\A7\B4\A7\1Fg\D0\B2\C6\D1\EA\A4r\84\9B\94\BC\BE\B2\C6\C2\8C\AC\C0\9E\5CGT`RJ!>;\2218\188Tb]3\0A\0C\177]\82\80^+%# \22\1F(* \1Bu9\0B\13\11\13\15Q4+M4\15\14\16\BE\C7\A5\C5\BA\C9\C5\B1d7\1E\1Dl[?XVb(O\BC\C4\B6\C1\B6\B1TW|Bi\C3\A5\98\BE\A2\A9\A3|z[MOYYLUa<S?&\1C1PgY\1E!3FTz\82b1)+-\1D\1D)!\19\18jD\1B\1E#\1B\15\1D\22\1F_%3\1D\1D\90\E2\D1\CB\B7D\A3\B9\BF\96;?u6I9\8E\AB\1AL\9C\A2\C9\94\8A\C3\95{V\16t\AF\AE\AA\CB\8BSR\A7\9FMK:/{\80Y\80~jK\1A%\1D4V`A=OWHf{i:KCHF<' \15\154T\1B \1D\15\1C!\1C\1AX&\1FC*\13v\A5\9F\B5\9D\A1\C5\B4\83ys#}\AE\91\B5\BC\1Ax\C3\BA\BC\AE\9C\85\AC\B4\A9&t\A1\B6\BD\C1\AD]a\A9\A7T(6\15n\AB}\84\BB\A4O\18!\1A\121SNM|\A1\8B\92\95\81JQIZW\5CJ6\15\12\16[\22%\1B\1B\182*#`!\0B04\09\B4\E2\BC\D0\DD\95\98T:@I\83\AB\ACpg\85!\22W\1Cd\D9cv\B6\B3tGY\AA\BA\BF\94\BA\B7\89P\82J4-!A\96\9E\80\C3\B6y]X\0E\06\13%8d\9F\B3\D4\CD\C5\D3_'I:BAD@<36.'\1B9P4\1D%8LkR<+\1Ck\C0gcj|\8D\891L\22H}\98r\09,Ob\C6\AB\B4\D4\C5\BF\B2\C0\8Fh$W\D4\BD\C8\D2\BA\BF\8A\80\5CVA$\1Dw\BA\B7\BC\B7\AA\8CZ\15\03\00\07\1ACk\8C\B3\C2\9B\C7\AE&\14.5.,@33'+!\14&P)I IEk8VU+8^pNE\C1\8E\B6\96\15\05$Q\96h\1C6_\19[\FE\A7\F4Y\EC\AC\99\C0\E8\89\09W\C8\CE\E5\B7\E2\F0\C6xW-(\13\87\C8\CE\D3\AF\90>\08\00\1Cfl\5C\7F|\85n\AD\A7\A3\D6\AFRNE5\18(34\14#$!\03`!\9AtBCh\83IC/)6:Xr\9F\F3\C2\B1\D02\001!\0EF<;\1F\010\C0\BE<\FFp\91\C1{\11\B6\A4^\B5CU\C8\C3\CD\C5S  6[\AC\BF\B6\CB\9E=\00\04D\A2\CB\B0\B1\B3\A9n\A6\DE\C4\C1\BC\8E]V6\1A\1757?\19\0C\0E\1F`8\A9\95\89=+sqe1%\0AD\AC|\1A\A3\CF\EA\B9\86\DA\A0\C6\CD*$9\1A \1B3\F38\C1\B7\98E\0B\8F\BD\B8\C9\D4\D4f\C2\C9\9FCm\82U8FPSo\97\A2c40\1EY\BF\B6\B7\B2\AEt\88\9F\BE\CF\C1\9F\86Y\1F\18\17;>&2\12H\B1\93/\A1}\BF\954\1B9O5,U\95\A3ZV\A7\91\C5\E1Z\B1\CC\C7\83\00$5 \16\07\80\C5JT\B5jU$\12g\BA\D6\B0\E8\E0\BF\BD\ECR\92\9C\84\5CCROgw{^JTQ\0BL\9E\C9\B9iza||\91\BD\89\8FJ\1D\22&?@& \16!\CA\C27\B0\8A\BC\E2\D7\99\1Dr.\1A\A4\B6\AB\9C\86\D1\CF\BB\A2Jn\CD\8E\03\0D$8\19\18\0C&\AEZ\14\DB\81r\1A7\1E\027\00\C8\C5\C2\B1\BC\B0Eb\A2\8Bs-8\7F\95\99\87Oex]A\AF\C4\AC\A1\C3\5CKJ/;KH-!#\22AC$3A8,\8E\16}\5C\E6\CA\DA\C6U(6#\A1\E3\A1\22y\AFfP\15Z,\8F\DEz\02+4$\09?\BEwa\1B\9F\A3\E9{\17 \108@/?e\B1\A8\B74\8F\DE\BDrM\91\93\95\A9\81\84V\8A}k\AE\AB\8A\A2\BCd+72\1C4*)$\22\22CB\161i\8D>\80\D5\BC\9Cz\E8\CD\C3\94.5 k\D1\9E\1E\B7\E8\91\00jse\18\9A\90\A8F,\00:\B4\C1\8AU2}\90\CE\C4s\AA\88\05\C0%AKE\A5\9B\C8~\C4\E8\98\B1\8CY\88meib\9A\8EURafj\87\85%--% *\1E!$\18\19%\19\10\0B\1Dy\A3\A1\B7\C7\CC6w\FFw\D08)O\B4i-\BC\D3\95\04\96\AB}\AB\A6\90\82{;\CCnC\9B\EBX6\8Ae\B8\DE\97\98\9Bs\C6\B1\9C\93k@4\BA\99\D9\B3\FElK~\8D<e;lz~J3&=4\92\8C9\22#&\1B\1A!\22\1A\1D)%;\0F\1B#\1C\81\AA\BA\D7\E8\B8j\19s\C3@4-f\1A\22h\A30O\CD\9C\C7\AA\A2\C3\C0L\8B\D7\AD~\973f#\8B\ED\B4\C4\A9^!iXy\93e=*&\102\EB\D0m]s\B4\1FMZYI@1@/FTEMq-( !\1C\1B2-\18\1F'(\9F6\00\19\00\00[\AF\B6\CD\AF[\00\A6\EEA(\19\10c\02#@\04L8\F4\91\D1\BE\BF\E9\DF\B5\D3\E0x\0AOm;_\E6\C3\92\B4M  n\A7[8-'\183)]swJ\DB\A9`\5CW@ &\17\1A Mgb8<020!$%>6\1D!'*\C1u\00\04\09\1A\00\84\D7\99\D2\00:\E1SG-#\0B+>\0Ci\1F.\0C^\EB\AC\B1\C3\DB\E3\B5\B4\E0\9AM2n58\C5\C1nV\1CD.\BC\AE\85 .\22)-\1FIma\8E\DB\CE\88rO)VB%0+L]Vg8Y57\22#&A=*<\15!\98S\0D\0B\02$\00\99\C6\DEC\06\96\B4\8B6:%\0D\1CF<\14\0EO\9A[\83\AD\89\A8o\D7\B9\A1\CF\D7\9DYGS@d\9Aa\01ou\1AN\A4[\11\14IVH\00U\82f\A6\FE\C3|\9B.2ZK2\1E#KYeQdBV2($'EB.L$ d'\0E\10\0C\1A-\E2\C5\FE\09!\E3\A7\85t-/\0D(I)*+v\8E\A9\DA\A1\D7\FE\E6\D6\C5\EE\EE\D8\A5dGL5\89\A9\0A\8DRzC\08\81a\22Jzc7)\96ki,\C1\BE\BC\BD=\14+5M8\0Am\AA\88qTU3($$/JL5D\22%\89h\12\0A\1C\19\18\00 \0E\1DW\90qc)I\22)!<;\11\1CL\83JT]H,\A3\BEHX\ED\B1\A7{Ug\11\A4\E4\A6\80@\816\0BI^bRNf\02\AAmq+.\06\BA\D3\B6D$\18%85\1ED\BF\CB\B3YC3+ \224DQ;/%'a+G\0E\1D\13#-\1F\22\09\A1\D9KU\0F[\1A2(;S\1A0\19\1C\22\06?F\15\93\C9\86m\C2\E3\BD\A0|\81<\A9\D4\D8\D2\A8\AB\8C\BD\00\99\81*?\17K\B4^L\22eoA\A2\B7\94j \15.&# q\B2\D9\99L.!#*6FP4\16\17,VN\1A9\08\1Ae\1E\18/\0F\A6<if\0DW\1F:\22!g\03\A3}#+\12J3\1B\F8\BE}\C5\EE\D9\D2\A0c\89\FF\B1\7F\FF\DC\DE\B9^kqGu\95\13\0B\9C\80-\1B\1E7\A8\85\9C\A6\AB\B3X\00\19\11\88\87\B8\A2\C0\B8\9B'\15!&9II>-+)?~\15.\12-T\1F0\1A*\15\09E*CJ-8+\16+/\87\9C\1A%\1A5^[K\9B\AA\B2\CB\9E\D2\B7f\03\E2\ED\FF;\0C\C6\EA7O&\A7\A0\E3\070\00\0A\10S8PM\C4\C9\96>ZQ\0E'>(n9N\BB\CC\C5\A89\0F\1F5DOZv$*G\7Ft\0D\1E\5C\9B\1C\16;#\18<B\07\00}O!(*? \19\0B;?OG\13\88\AF\BC>\FF\ED\85\0A\05\0DC;cZ\FF\AD\DCFqA\E0C\92<]<&\146S\8E\80\83\95\8B\B8\BEVbZ\08\15D\8B\85\D0\AA\B6\C7\A7\8B$--'X\82\8B+$iUY\91\14 PF\16\85}8:\1B\22\BA\DC\84\22) \0Eqs(6S\1A2\08Es\84:J\FA\8C\0A2\1A\13Z*B\F0\E7]\CF\EF\90\9B>\19\8B\84\7F^;@SaK\1F\9B\9F\A8\DBo\17(/$./\12)({\A0\B0{7.\1F\17,`nSle_\07]\80\11*\07\84\88\82Q0P\93\84\BCO!.<Bk\B6z$\92!\0A@-3\1Bf\0A\1F\8B\10\228\0B0:}\FF!w\DA\BC\DCj\0CAdIzIa,((\0A,l\5C\81\E0\00\A4`\13\1F)%&($Bk\B0\82 \17\1A\14#UJlea $\03ox\12 \98\E5\A5\BC\9FxiZ\AAP!\1DC?AKB3!8\14U\00\14#}U0\01\16(9\1889\08*\A1H\00\0F\95\18FgC\5CEJ\AA\1C\1C\0B\0B,3\0Ad\9D:\C6\AEW\1A!+\1C\1F\1A\197}}40('%LOef\97\1E\1C-\1C\95/##\FF\CD\BE\AE\F2bv\94`;\161\17_\0E\17\19\08\193\00\1A\00i\92f\00\0EX*f@\10\16145\153\8F\13=XdB=ZY\02*\1A\16\1B(/1<,Xy\8Dw4\1B$\11\04\13\18\07!B-5TV\131Fbh\B4\FFO\222\00\139y;\DA\CB\A5{\FB\AD\DF\86\90v?\16T\11@\D0\B3F\03\173\B3\A4r\00\91\D0\BE\A9(,$,%R<\06\0ER\B2\1Dl%\1Ep\5C:\12@?@OSLMHB!A]\99G]F;2),Z.)!-LM'9?\1C\0DS\98\CC\0Aiy\1D\13\90\D0\D5\E8GWh\DD\C0uH[d\1D7U\0D{\E9\C4\9B\0B\9D\82\9D\A0\00\D6\E5\B0\C1i*3&Qc~p:\09]\00]\1D\5CfD<\14<2EO/4 \19@a\08.Is\C4\82aUX}bZ@-9]K.,J\0E\06`S\90\0E\92\CF\DB\8D\A5\BC\C6\E9Uu\C5\C1\DE\95w693!M#\0A\97\E9\C4\BA\A9G\E5;7\B3\A3\DF\DB\B3\1842F@Zl>!!\1B:\13R\B6\B5\AC\1C(\1F \1D|N)2\22\14\0BP\A1\9A\B8\BC\83_\7FRwE;\12G{W,,B\06\0B\13+\1B \1D\80\CA\DF\DB\9F\8C\D5\EC\EA\A8\D4\92S44\17%\1A.:\CA\D1\C0\E3\BF\E1\FF\1D\1B\095\B8\AD\A4\034\0A>>Oo'/\10\13U1!t\FF\C7Xk\C1\DBjc\C0\90e\1D\15\141+e\D5\BC\CF\D1dcpS;$\05,uD*0:\0F\06*r(A\10\00\9C\C1\EE\D3\D9\D3\F2\C0\8A\C6\A6\18@0\077'\0Cs\A0\B5\C3\BAe\A0\CF\00\0F\00m\80\A4\AE\07!\9A`S\89\1E\13q\17\1FVP\B0\F6C\0C\00I\B1\92\F6Y\DF\D5\8A\0F7e4JS8\F3\D4\D5iv\99\99\89\8Cw}EJ\0AD\1D\22\0DgWAJM\85o\DA\C3\92\B9\D7\D7d\94\7F\DB\0D?&\10\10:\14\22M\8F\DA\D0\AC\A6\D7\CF\1F\00xf|\A7>\98_g\92\9A\0A\8C\9C\85K\B8\BAu\05\14V\CB\08\D6\A0\96\CB\A2\E8\AF\0C84H\9D\96\B6\C3\E4vJ\BD\CA\99Q:>IJH\0DG4\0E\0F)/V\8A\C5\BC\AF\91\D8i\9C\90\C3\B2\5Cb\9C\117\22\14\0A\08\1E)))`{\93\D2\BD\E1\DC\002\CB\B5\C1\DFYb\869\AE\BE\A2\A9>,Z1\18\17W\F6V\A5\C0\EA\D8\BF\C1\E8X ;D\85\B8\AA\B7\E9\FAr\0D\B2\C3\AD\A5l%\04WG\1C3H\0D\07e0\8C`\B1\D1\C2\C3\FB+^\E1\A3\D7\B7\1F\13#\1B \12\10<\130*}Z\94o\C6\BA\A2\AFE\00\F9\C9\D6\EF\A8\91\8FK\1E\DB\D0\BD\0C@1kd;:\E3|1\84~\AE\D6\00tq\0Et\8AX^t}Xr\FF\84\D0\D7\A0\00\09\00\1CRH\16(>\09\08j[\84_G\DD\DA\BB\C9\E6\EB\B1\DE\C0\85\14\15\18\1F\0C\17\00[!+:\BF^\A5:\AC\AA\89\00\84\AB\BE\C7F\8E\FC\C2\83\B4\EE\9C\D7\CF\03WpT\12\9F\DB\A2\9AcP\BC\22\C8\00\CB\C8jR\8Da??h\0E\14\DD\BD\DE\9C\EC$\00\02\19[U\17\1D+0|E\8DucZ\BA\13\98\DF\C9\AE\BC\A3\D2\00\14 \12!'%\16\0C%\22\98\B1\C9w.\86\80\97\B5\B5\C2\E8\A8H\06\AC\C2l}\8E\B3\AC\E1\82)9\03\9F\8C\BB\C9n\AFW>7\CF\E8\A8\A0n27Zj\8CA\13d\CE\CC\B8^\AD\FE:'\19Q8#!,zxtt`]\16OG\97\CA\E7\C7\DC\87\D1:\00\14+982\1C)&\1F1O\11?Q_\90:\8E\A4\C0\AF\D3_\C8\CF\CB\87\82\A0k*\C6\F3E\06/P}\F3\A2>\05\1F\04G\AE\9E\B9\A1emtt\89X\15d\12\89\F4F\1FL\D4yyY6&,1\1Ex{8%-aC\22\14\19\D7\C5KZ\C5\8Dq\1D+\1E\10$\09!\10\1A%\14\152B)\09\1Dlm\B6\A6\9F\96\EC\AA\AB\8Esg\1B+$#\D4x\089J$\FA\08\05\11\0B\1B-\96\9B\D9Pcm\8A\ABT\07B\1B1Fq'''t\DDCF7I@8<xw?\1D\11_o\00\1A\0F\1E\A8.a2\BCy\5C\0B\14\1A\18\15\0D\13\076\1A 030\189\03\12\FF\EC\B6\CB\92\E9\AB\95V\0B\02\E7\C8\00\B4\00)?;\1B\07\22)\03\12;#t\80\BF-Pi\AC\92 \87K05J#\22A=\1B_\12>DA5:>h\99B\04\09\04]:\05\0EItR \C9\88\8Bg\05\139\0D\13\16\0B\10/\13\0F=V\05\10D\0D:\F1\DE\FD\B7h\FA\CE\C3\80\0E\A0\9A\AF\0FG\22%Q\1D7\164\08\0C\17\09\1ECO[-?\92\88\08sz!9,-,\0C\18'v\05\96=4*,\227\95\98\10\1C\0D\03\04*\06\1AB\5Ci\89\DD\C2c{Z\05\1F\15\03\0A\18\0C\15\16!F\00\02,\09\11\11U\B3R\0C\14]\BC\B9S\1A\AE\82\D5\EDV\BA\84Vo\E1f\07\0B\0E\0F:Y\1B?\9B+cb\11jN0>1\1D\178\DA\AF\B8/^ ),*7.\22\98\96\19\0D\15\10\0F\06\0A\1BORS!b\9Bsj \1C\1A\11$\04\11\0B\0F~\E2o\BC\17\1D5(\1D\1DX\1E\D68\01\00\91\B6\A9\AA\AA\ADNP@\D4{=\93\DD\15\09\00T{(1W;>A\1F:mW \1B\1B#'zQ0\0F3\22'4).',3\90\96\22 \0A\03\0B\0B\01.QHi>F\05$\84w\07 \09\09\05\16\06)\C98\DD\FD\DE\03\0E\12\13W.\16\B2\F7'\0AU\D3\95\B1\CE\A2\9E\8B\CE\D1E#\C5\A1\B8\D4\B0\06/\1F!3\18)\1B>K?;WQP<='(\22#\1E\16\1A!\160'\19\223D\0A\0A\14\06\06\09\03\0A;4\B86G;\8EW\19\09\0C\1D+=\0D\01F\B9\D1v\EC\F5\FA\01\02S<\1C\111\A8\00\06\84lrI\DB\C3\CB\B2\CC\D5\8C\00\D3\AF\E8\D6\F5?&\19&\19\12\14DD\1D!\1E\226JjWa)\18\1A%\11VZA\1E1\1E(FHb\0D\13\12\12\08\09\07\03\08\8Cl\1A\09\03\00\0D\11\11%fA\0A\1F%(\FF\FF\D7\A7\F2\F8\B2\D1\AD\09G\B1\00\08\9A\03\C0\F17\E3\BF\98\D8\E3\B9\C7S\E7\CF\A9\E9\D8\8C\06/\1F\07+>@7#\1A\18\18\224\16,.LR' RfkV[2$%HI", [5310 x i8] c"\EC\DE\B4\96\A9\95\BB\D4\DC\AA\B3\BD\BE\F1\E2\C9\C1\BD\D8\E7\9E\93\0C\00\1F>CI\0D\22\09\00\00\03\180\1C\93\D3\9F\A9pey^K)\05 ?=%\1F\13\19\19\04\17\1B\07\05\0C\15'.2\1B\0A\00\15\14\00+'\1B\00\00\00\10\00\09\03\00\01\0D\09\0F\1C\16\0F\B9\CCkh\B9\8E\AF\FE\BCc\97\D5\DE\B2\A6\9A\DA\BC\B3\F4\DD\F5\BCaD>9,;W2\1E\0C\00\170.\99\CB\99\AE\AC\B6\DB\EA\99B0=B1\0F\153'\1C\08 \15\00\00\0A\19\22*4\1F\0E\00\02\14\0E.5*\00\00\00\0C\07\05\02\05\0B\12\0D\1F>\11\16\A8z\0F\C9\F7\DB\D4\D7\A3.\15\A2\A4\BA\DF\80\B6\F8\E7\F0\DE\C7\EC\CD\9CXxkBIWM \15 .8UbX\A6\B2\AD\BE\CE\937*=4\06\0C*;<A\0C\0D\06\00\00\11 3.&\1D\00\00\00\00\0FSC,\00\00\00\00\01\00\00\06\0D\12\0E\22?\13\16r\1F9\F9\ED\BD\E7\E0@\12\086'k\A6U6\D9\D9\E4\DB\CD\BB\A4wT\92\D1\A8S\5Cb\1C\1D*,7\1C\1CL\9C\A6\93\8A\8EHA0C\05\00\08\142EK\0A\00\00\00\00\0F#\91\8E'\13\00\00\00\00\00i_@\00\00\00\00\00\00\00\00\00\05\06\16&\1A\17\92\AE\94\C2\89\98\DC\D3v\8774,rg\8FwLh\FF\F2\FF\BF\B6\BA\AAM\BE\DC\DF\ADm\15(M+*6<u\8A\BA\B2p_srk\1F\0D\1D\1D\1A$,*\02\04\01$/\00]\B4\C9|\0C\0B\00\00\00\00OhV\03\00\00\00\00\00\00\00\00\00\00\09\132)\A2\E2\E7\89C\81\EB\CC\A0\D5\BCk\AD\BE\A2\AB\E3\FF\BB\F9\EA\E0K\A9\CC\E8\92gr\A8\9E\9A95T,%>@\A4\9D\E2\EEzYkxhdmI\1D\1B\0C\1AAI_%;\80Pg\BC\C1\7F\00\17\1A\05\00\00AC1\03\00\00\00\00\07\00\00\00\00\00\00\04(+e\88\AB\CE\8A\A2\C8\B3\8E\BF\89\9C\CF\B4\C3\B6`\AB\E6\AA\B2\CD\80k\AC\CE\A5\8AP;t\96U=9912)\86\A8\E1\F7\8BJYZhNPeURUBM:Q<K\C0\CD\B9\D2\CC\8A;[a\1E\00\0FV<\15\0B \11\07\17\10\00\00\04\0A\03\03\00+-\0Fw\C5\AF\C2\B6\A9\BF\94\D1zt\C2\BE\B8e*\BB\C3\D0\B1\BA\DA\B0\7F\8F\97\B8\C6\92\90\DE\A4RA\BB\A6D\1Fj\BA\CD\D7\CF\B2gPsOm{W4QU@YLT\1Fd\B9\CB\DD\E8\D3\97eW/\12#ge;\15,9.%\16\12\1A\19\17\0F\09\000.CX\B8\A2\C2\E8\EA\CF\FB\DCL>\9C\EE\FC\CC\90\C4\D0\E6\80QSc\9B\B0\D7\C1\A0\B9\A2\B6\C0*@\BB\94Vx$\B1\A4\B4\EC\D8\C6\85\09\00\22D&!(8C\0C\11\0A\00!m\8C\C0\DA\D2\B7\8Cq]8\1DSY\5CPFIQ*+$&%%$\19\17\07\08\84\164Pw\99\C1\D0\C4\DDM\81x\CB\C0\DE\CC\D9\B6\D4\89\FB\91k\8A\BD\C1\B2\BF\C6\B6\B0\AA',\8CTa\8ACq\A4\BA\D2\F1\EC\CC3\00\18LT9\0FG>\1D$\09\00\007j\9A\B7\CB\B8\8CXM'\1B1J[QBCQ:))#\19\1E\18\10\1D\08\0A{:\14Bb[u\C5\C7\C0(\A2\F9\CE\DE\BD\D1\D6\88\97uc\DB\8F\82\82_^Y\81\DC\C3\90\1F=\B8\86\7FOY\00>\AB\C4\D5\C1\A4r\0FW\8B\A3\A7B;g.'\00\00\00\0DT\A8\CF\B2i-\0F\00\0A\07--4=AAG9\1F\0B\11\0C\03\06\16\19\0C\10`N\1D6e@\80\D3\93z5\E0\C8\C1\D7\CB\8C\C4\B6\A4\9Ai\C9\A7sXHI*c\E2\E8\AF\1Dl\C4\BC\C2\9E\99is\B1\BA\B6\C6\AF\97\A2mHrzuNp \15)\00\00\0D8J{i6\1F\1D%\0F\00-+$);I@\1B\0B\01\04\02\07\03\0B\0D\10\0Ei]37:\03J\9E!P_\D2\83\00\93\BE\AE\B9\DD\D1\E5\FF\DD\9Bex-YP\94\D7\D5\A3/\86\E9\C8\E8\F2\F5\A0\82\A3\B4\AA\DE\DF\BD\8E\A3r\80\92\8DaJ\1CA8\1E\00-@%>T&\17\18'!\00\17(%\16!GD\1B\05\00\01\01\04\01\0A\0C\0D\0BPQ\17\14\1A\18-p\0FCY5\1E\19.\DD\E6\DB\DB\E2\DB\FE\D9\80VT3\94mx\80r^B{\D5\D0\D8\F3\DD\ADn\83\95N\8B\F5\CC\BD\F7\AD|wXbjr\88d, 1IKX1\04\00\0B\14 !#\13\11\1F.>;*\11\0A\0E\13\05\05\0E\06\0B\0C2<\11\10!\12\17E\00\17U\171\14\1F\B8\F8\F0\E6\CF?\B1\C6\E5\ACZZ\8D1WF\B4\A42k\AB\B4\E1\B0\AE\BC\AD\9Ae(\8C\CB\D2\B6\E8\A1]]\AB\A9wWWE\85\8B]\8A\A8\840\00\00\0A\0A\166[\22\07&5<;?\19+'-,\22\0D\05\0C\0F\0BU\1A\03\02\00\00%\00\1BW\09\04#\08\17\95\A0\AF\D8\BE\A6\BA\D2\A2t\83F\9E\B3\86\D3\AB,\87\D5\EA\E4\C8\D3t\BE\C3\BBV\9C\BB\ED\E5\E1\CF_6\99\BD^PV7p\80m\9A\C5\C0W\00\00\00\00\0B-jUUdgwo[ *&86:(\14\0F\0F\007(\08\0D\0D#\15\0B\00f\04\00\22?\00\C8\F8\D0\E7\B7\88\ABTNV]\9A\85\9F\83g_77\89G\81\FF\A2P\CC\C8\A6rv\D1\F9\EA\BE\D6\C3\877\92\5C_W=M\94\85\90\D5\D8\9D]P\00\18\18!Z\88\9F\AB\C5\DF\CA\CFD\06\22\11\19\18\17\0E!\12%\09D5AH_)\14\13i\85Z4V([\DA\89\8D\88|s~!fDr\9B\98X\00\0FXb\C0\AE\D7\EC\DE\A2\BB\C0\89kGo\ED\D9\C1\EE\D9\D0d\8Cvr:@<\88\94\C3\D6\BE\B6\97e\18\12\09\01!Ov\97\B6\D1\A5\C1\B2\1D\00\0B\0D\02\00\10\0C\0A\13\12. 8J7<\0C0RwJPc\1E+O\7F{X\BD\BA\DC\89\06\14Qd\92\94B\10Q$`\F9\BE\F3r\C6\9E\A4\C5\E3\A0\08p\F0\DD\F6\DF\F5\FC\B9m\7F<9;\9A\D4\C1\C8\C5\82?\1C\13(~\81rq}\99\82\B9\BF\B8\F5\BDH/\1D\06\00\00\0A\0B\00\1C4,&}D\97S;Ss\A6ff,-IFn{w\FF\C5\B5\E3>\14:\00!I\10 \1B\00\22\CB\B0D\DAU\8D\BCm\1C\A8\ACj\CC[\86\C6\EF\CC\CB_78gY\D8\BE\BC\F8\97G\12\19G\B6\C5\DD\AA\BD\BB\83\A9\F2\BE\B6\AAt><#\0B\0B\08\056.>@7l^\A0\8C\9Eo]\8B}\8B(\1C\1FJ\9E\90\1E\C7\FF\E1\CE\8C\CC\B4\CA\F1\5C\1A]E&\008\FFQ\B7\DB\C3K\00\94\D0\D1\DA\D6\E2|\BA\DC\9EJ~\84cN>cRv\91\8Bo:2\1Be\9B\B0\A0\BE\B4v\85\AB\9A\B4\A5\81kA\0A\00\00?5\04+\15f\C9\97E\A3[\B8\98R3=e7\11:\A0\A6r\88\D3\B4\AA\C6e\B4\E4\F9\AF E[4\0F\00\91\CF8u\DB~N\08#q\A8\D6\C9\D5\C6\AB\C0\C1G\92\B5qB/U$\5ChVMB<(\001\8F\A4\A8ab8ca^\8D^o1\06\07\06&\1D\04%\05+\E9\CB@\AEh\C1\D1\E1\B8&{,\00\80\88\8C\A1\A8\E6\E8\96~\1CO\D2\B0\18&9G;$\00<\B6d)\EA\A3~\03M&\0C\08\12\AA\B2\9E\9B\8E\C6\16w\84xO\17\0A\95\B8\95f7@L+\17\D2\C0\8B\89\9E0\19 \0E\18% \07\00\00\00\19\17\00)6B.\92;\84\1B\DC\BF\E4\C8YM=\00\97\A5\AEX\A1\D0t,\0B\1C9\C5\FF\9B\10\1F(>\00\00\DD\90\84\0F\93\BD\C9<693C(\14PUx\90\BA?w\C3\CEb\14y\96\A2\B2XXD\B1\7F9\BB\B4av\AA\8B-\05\13\00\04\00\00\00\00\00\15\12\00\0Dop0r\E0\9F}V\EE\B0\B5\869\184\81\E5\B5\00\AA\FB\91\12\80\87|\00\8D\A3\A8 B\12l\DF\DE\B1\94\0C\93\A5\FF\EF\90\D1\C70\EAAMI,\B5\AD\F3\A8\E0\F4\96\98\9Ck\AA\91eaS\AC\93Qt\85fbx\97*)\12\04\00\01\00\00\00\00\00\04\08\00(7\81\9B\CC\C3\B6\A7S\91\FFo\FBD\19i\D6\93K\BC\B9\8A\00\B0\CD\A7\C9\A6vw^D\CChF\BE\FFq\19\93e\B2\E1\BA\B0\B4\8F\BF\CD\BB\A4ELN\D6\92\F5\D2\FFFW\98\94HpFo\89\88D:2H?\95\9BC\1C'\1D\02\00\00\00\00\00\02\00'\00(/.{\B8\AD\C3\CF\C5v+m\D13'\1EuG5d\CFVB\BE\AB\F4\BD\9E\EF\E6&}\E2\B2y\AE2\7F\00}\F8\B9\BF\C0]:\91g\8A\BBxI\1D\1B8A\FC\F8\80if\A95?[m]LIUE8UYa}E=?/\12\00\0A\00\00\00\00\00~/\10$!\19~\AC\95\C6\BFf\1E\C3\FF>,,\1Cy\0B\00S\07PK\FF\A7\DA\96\D2\EC\B3\9A\CF\DBj\15Au\0FD\E2\BE\84\BF?(,\85\BF\8C6Y&\1E?@u\A4uv\DA\AF\8DUaR5)+\14MFqtM?D,%\0F\0A\06$#\0E\15\00\00\B8\8A06!&\22{\CE\AE\FF+R\EDy>$8\11\1DR\10\8DQ%!d\DD\C0\B5\E7\FF\D9\D9\DF\E6wRE\87+\5C\F0\C7K[/]?\BE\BC\9B\18A!0>!W\83Y\A1\DA\D5\82[[/X?1\0C%5i\5Ci5e\11\1C\06\05\0B)(\11\1E\19\18vL\10)\1A(\14\9B\A4\D7F$\AE\B8\A18\1F\0A\18\1F^n@14\7Ff\86\C5\BB\D4\92\F8\DF\B5\C8\BB\AEc5tfx\93E\12yc\1Ag\91A\00\17\1EKH\17BhR\A9\D3\B8mv\1D*B\22\19\03\14&H]9;);\00\00\00\07,+\13,\0B\00B,\00\1A+#6\E0\A3\FF\00+\FF\B0\8Er\08\0B\00\09NK?DQj{\BB\A6\F9\FF\FF\EB\D4\FF\FA\C1\BBlQaD\AB\B5\00\A3Z\84\14\1DcN\004Ly\08>xXE\16\93\D4\DF\B9\1C\00\06\09\1B\0E-i\89pL(#\09\07\01\00\07$$\06\10\00\00H^\07\14\1E\1D=\07\00\04\12a\92u\880%\18\00.rc2*(y\0Ca\93pM\B1\B2<r\CDr\C6\94x[\05\BE\C4g\9FY\A4A\00.oR\196i\0D\92R\82\1B\00\00\BD\E0\BF\1B\00\06L:\03+M\96\9F\A1\80E\01\0C\00\00\02\16&\12\08\00\001\096\00\0A\22%\1D\00\00\00~\C6ZW\002\00\0F-?=#O\00\00\00\0BC0\1E\B2\B1\90\92\D9\EE\D0\B8\9BiF\CE\EB\E3\E5\C0\CA\A5\C0\04\85b\096\01d\B7c8\03Df+\A3\E6\99G\13)<\04$Ov\8F\CC\ADZ\0C\04\00\00\0B\1E*\05\00\00\00P(\00\0F\00\00C\12\12\09\00|*MD\01:\00\17\14\0DR\00\B4`\00\08\046\1E\11\FF\C4v\D2\DD\CC\E5\99b\8F\FA\BEn\F2\EF\D7\B8fk\86C>w\00\05\A4\80B\17\00\19\86\7F\A0\AB\9C\94Z\1942\8C\8C\A9\83\C2\D4\B6H\07\00\00\00\0C\0F\00\00\00\005P\00\1D&\1E5,&\00\06\04\1D6\0BPP\07\17\11\01!(\96\A2\00\04\00 TTZ\92\A9\A8\B1\80\BD\B3h\00\E1\E3\EA\1D\00\C2\ECoS \9As\C4\00;2\0E\0AF\0B1(\CF\E5\9A43,\00\11QDr/'\96\B4\AF\BB;\00\00\07\17&&R\00\04Oc<\00,y\994\1E\1F\00\00J_\05\15v3\00\0C%7\0F\0A\04\1F\123B\0Bw\A0\CC:\FE\D2g\00\00\01S7b?\E4\A0\C3:~F\D9\0Fb\1A\5C;3\19/\1F^^\82\94s\B5\D1UMD\00\05,\88\98\CF\95\A0\AA\97x\00\06\05\06:O_\00\03oU>\83\04-8G\1C\85b**(\0A\BB\F8\8D\02\05*!v\8BD?3\00<\1BJ\8B\A4Ld\F6q\00\00\003lD>\D5\C3$\AA\F8\8A\84\0D\02xe>g5)\22J8\00Zn\8E\C6Z\00\15-\14\00\15\00\14\10h\9E\A0T\00\00\00\090XrE?f]\0C|\82\1A\13\04\85\86\87p2Y|\81\D4B\07\004ag\D9\92\17x\00\02_)V z&0v\00\00 \10DV\8E\EF\00K\C2\A3\B5V\0CBq;\A50:\18()\17\1E\97Ri\C2\0E\C2q*\1D\1F\0D\087BS\82\AEl\00\00\00\00\18DK8(p\05!\14\89\9D0.\A7\CA\A2\CD\B9\9D\87h\A9+\1D\10NtM^A\0E\1D+\1F\8A\0B'0ob4\05\22\1BH%*F\0C.\AD;\0F\0E\8A\0B8r}x~I\9F\0F\0E\16EHl\108o8\D2\B7n9'\00\00\1D&\22N\9C\A9>\1A\00\00\05\19%(,j\00?H5\9DV5\00\CD\F0\D9\C7\FA\89\88\973\1E\00\180\88*\1A\00\00\00\1A\17C\17\7F\9Bs\14%nA\95V\19#GKK,b\91\11/@\80bTe[\00\1C\022;?:,\0D\1Bd}\8CyR\16\00\00\10\17\17\09?I\18\0D\18,\00\00\10!7\84\E1>\00\1F\0E\15)I\19\C9\A8\92\8A\FD\9D\B6bm{C\00]0\17\AC\90K\07\01<\D2\8C|!\A8\DB\D1\C1G\14.Q<]O\1E-k\B5\22X\06\00gFS\15E+!.J6NwG\004q\A7%^u@\0F\1C@h\0C\0C\00\01!%\01\0A\1E\00\00Mr\A8\00W]\00\07\8A\AA\B1\BE5;F\D1\A3=%MP\08-f\00C\C6\B6\87\00\93\93\A3\99\0C\C5\D8\C3\BAh0,3@V\91i9\11]\15Y\00>D>D\14Q.\0E1\0D.$\1E1B\0AJd\94\C8\87R6Z\99}{2\00\05 \0E\00\00\19\00\00V%l\00\A6\C0\BC\9A\9B\8E\A2\D8if\A6\CE\E4oV\1C$)\1A\5C)\00v\CF\AF\B0\A2V\DC:-\99\85\CA\D7\B5\0F3(,\22Eh@Y%\15-\003\91\C0\E4 \22\12\00\00WYE6\18\00\008\8B\AD\D4\C0y8Z:aX=\00#M*\03\00\1E\00\00\1B\0F\00\00+\9D\C8\F7\E3\83T\B4\FA\FF\A6\EC\8B7\07\18\12\1D\09\1F3\AE\A4\A4\DE\B7\D0\F2-\17\08\1A\9A\A0\8B\00D\06=#1b\0E#\1D\18N\00\00R\FF\C6ep\BA\A7:A\BF\8FM\1A(\13\1C\15H\C5\A4\CC\E4cNZ6+\11\00\05M#\0C\00\0E\00\000r\0D3\00\0B\84\C2\F4\D3\BE\C5\E2\CDr\C7\C2! \0C\11J,$\8F\A9\95\9F\C4x\A5\E7 !\17ie\80u\00A\ACzOn\00\00L \19?\1F\99\E3$\00\09C\9Aa\DFF\C0\94Y\00\22P\1C7Q(\C2\BA\C0T^\86\97ye@K\1B<\0E<!\14\00hUFiO\8EX\D7\C4\90\BE\F6\D9m}|\F3\00%\00\08/67:@u\A5\C8\CB\A2\FA\D43\1B\89QG{&\9Ds\83\A3\85\00`\84l$\A4\BAv\12\06\81\B2\00\C2\A0\97\D8\94\FF\A5\00\1ACf\AE\AD\B4\B9\CCXY\DB\DB\B0O$\0E\10\0C%\0265\00\008\14S\9B\DF\E1\CD\9F\E7N\99\A1\DD\D7zp\9B\003\15\1F?\141(\04%S\86\C8\DE\D0\EE\CE\0C6\CF\C1\B4\EEfT\93=\B2\CA\95\B8=!M##Qs\FFU\9A\B3\DC\E3\F9\DD\FF^\00\0DB\91\C1\C1\D6\EF\CED\0B\BE\CC\C4\C4\98/\00&\1F\00\00\1E\00\008\00\AF{\CA\D9\E9\D5\CE\00\81\FC\BC\DF\DE1\16\00\00\05\00)e/3\00`?{\88\EF\D6\B8\B8R\14\FF\DF\ED\FF\BE\9A\9Ca5\F1\E7\EC\0E>#S\80[Q\EE~/vf\CA\F6\15\7Fl\00c\96\5C]v\9BSC\F1\90\D4\D6\A2\19\10\00\00\16\1E\00\00\08\00\002$vod\EF\FF\A3\91\AF\DD\C1\FB\D2\B0\00\00\04\05\00\0E8V.\16&\A5G\9Cu\A7\B7\A2\07\97\8D\C9\E9X\A6\FF\CA\96\96\F9\BE\E9\E7\00Luj7\9B\F1\BE\94XU\D2G\C4\14\E7\E1=*]JeW\7F'\00\B5\8D\C7\C2\FF;\00\00\006\1F\00\00\000_\1Ca\5Cr\82\BC)\AD\B6\9D\95\CB\CB\D4\14)\05\02\17\16\0D(\00-\07\88\A7\B8_@y\88\A4\C9\CD\B2\ED\B1T\1B\B9\D6\84m\93\BC\B8\F6\8B%5\0A\B1{\C7\E1w\ABSEI\BE\F4\C0\C4Z\19\0F:l\7F,7P\B5\A4\98`\A0\E9$\00\00 \00\00\00\00VSlfAJ .9\B8\C2\D9\A8\C9\91\B0,\1E\06\1A(%\18\13\1D\11\11 >\00%HS{-\9D\B6\BB\B3\CEo\E6\C2\DA\99}\A4f:\E4\F25\00$So\FF\D0=\00\07\00J\A0\B7\E7\A3OMPPpA\00f\00i\D0\22\065\B3^H+\16\03\0C\1B\09B;\1B\22%]`2\17(\BA\C2CV\E2\9Dt,!\0D\00\12\00\06\0B\00\1B\03\00 )\0E\04\00Ke\B9\A2\A6\A1\FF\D7\8A\86vc\226:P\FF\96\0A>D\00\E4\009/\0D 'o\85\CE&@El\89/\00+\00\0E\1ES\05\02\16]\BE\0F\12\09\0F\00\00\00;70\1B\0CTs\12\0F\00\0F\A6)V6\D1n0\00\03\09\11\00\00\14\00\1F\09\0F)\19\08\190\00\00\FA\E3\C3\EC\A0\FF\98}O\02\0F\FF\D6)\E6\1E3XE\03\00\0F[%\1CT-\5Ch\AC\008I\95u\00g'\00\1D*\0C\05\10\1D\00M\00\16 \10\00\04\05RiO\00\00\00Zc\1C\0DVmC\15\C6\B1\A2f\00\02\17\05\04\03\0F\12\1E\02\005G\00\14F\14)\E5\D5\FF\DFc\FF\D5\B2t\05\AB\C2\AA(pD1z6/\00\1B1.#27;8B\00+wt\00BR\00\05\18\12\18\00\00\00R\00W\03\08\00\00\00\0B`g\17\0E\05\06\01H\03\0AINa\8C\DA\E0`kS\00\00\04\00\13\13\0E\0E\05\005\00\0B'\0B \0B@\AC],\10s\CB\B3>\13\B9\A2\D1\FF~\DA\8F\86\8C\E0N\003.\1Ajv\1A'\80\00EF\00T(\09 \00\00\00\1F\C4\89\91\11;\00\00\00\00\00\00\00ZR\15\0A\13\0E\08*\14'KOQ\1F[\BF}v\10\0E\00\04\18\0C\00\19\00p\B1b\B0\1F\0BC,\18\00U)\EFB\22\04\8C\93\A6\B5\C3\B7ox`\DC\A8U\92\C5\001\1F\5C\A8@0?!\05#\04\1DU1\00\00\00\05\0C]9\0A\00\0F\00\00\00\00\00\00\00\00PU\00\00\00\13(\1D,\16\19\11[Nc\17Olb\00\06\00\00@\11\13\14\B5\1E\C6\F4\FF\00\1B+\1Bj\10!\D4\FF?#]\E6w\BC\F0\B4\B6\85\C3\D6[H\C1\B7\D4\CE\A5\0BED\1DI4B\00\16\1B(aohi\0F\15\00\11H;5\16\00\00\00\00\00\00\003'\00\00\00\15.\0B\19\1F\12\08\9FEo=\A4l\00\00\02\0C\13O\00\09+\A9\C7e\D4\FF\ED\09\0FgT\0C\16:\B4\13\13\98\84bN\E4\CF\E0\BB\C8\D1\93\10\C2\BB\FF\DF\F1;-+\15%*80+\00\01 \15!nV>9\09\1A\0D\10\00&%\10\00\00\00\00\22#Z\00\00\00\1C\00\00(\00\00mY$\00\00\1F\00\00\00\12L8\00\0A\17\17\F3\EF\BD\9E\E6\E3\A5\E0\BF\04K\AC\10&\8D\12\D2\EC;\DE\CF\B6\D7\D3\A1\BCV\D9\E8\D7\E8\C8t\002\11 Y@*\17\00\00\00\01\016\00\0C\0A(9\10\0075=68\12\0E\10\12\09"], align 1

`define TAG_g_hana_bmp `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_hana_bmp_a {`TAG_g_hana_bmp, 23'b0}
// @hana_jpg = internal unnamed_addr constant [5207 x i8] c}\01\02\03\00\04\11\05\12!1A\06\13Qa\07\22q\142\81\91\A1\08#B\B1\C1\15R\D1\F0$3br\82\09\0A\16\17\18\19\1A%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FF\C4\00\1F\01\00\03\01\01\01\01\01\01\01\01\01\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\FF\C4\00\B5\11\00\02\01\02\04\04\03\04\07\05\04\04\00\01\02w\00\01\02\03\11\04\05!1\06\12AQ\07aq\13\222\81\08\14B\91\A1\B1\C1\09#3R\F0\15br\D1\0A\16$4\E1%\F1\17\18\19\1A&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\82\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E2\E3\E4\E5\E6\E7\E8\E9\EA\F2\F3\F4\F5\F6\F7\F8\F9\FA\FF\DA\00\0C\03\01\00\02\11\03\11\00?\00\F5\AF\00Z\EA\17\B3\AF\8A<O1\F1\A4z\9B\CF\A9\E9\BE\22\B0g\16zlV\F1*[\DA\AC\0CI,\C7\CC&@\19d,x\E3\0B\C0\E8\BA7\ED;\A3M\E3M;[\F1\7F\855M\06\D2\D6\E2\F6;\B8D\F0\DDXKr\04\883\90V(\90<\98,U\BEQ\EC\BF*x3\F6\8B\F1\0F\C2_\88m\A4E\AC\EAg\C2\D1\DE,q\DA\C3u\98#\B6\91\8C\8C!\8D\B7\04C\BF  \00\02p:W\B0\F8\17\F6\C6\F0\C0\F1a\F1G\88\FC1,\1A\BF\8E\AE#\B6\BA\D5\12\FF\00\CB\B6\D2t\F5\8E;h\A4r\DC\C8\04\B0\B3HY@\0A\C4\8E\A5\1F\B7\0D\8E\A5\CF\19)k6\9B\BE\9A5\B7\9E\BD\FE\F3\17$\D2\E8}\0B\A9j\16\1E5\F8\18&\F1N\81\A4x\96MF\DA;\E9-t\EBi\EF\EDu\0ByD[\AF\E3\8Au\8EH\90\0D\D3\18\93,\81AR\E1\81?(\F8\93\F6a\F0\AB\93\A6\E8\CF\ACK\7Fs1k;\AB\0By/t\BB\A8\E5]\E9\11\5C\97\B7u\1F.r\C1\80\1DI\C0\FA\AB\C5\9E\0A\BA\D7\BE\C9\1B\F8\AA\D6\EEAcu5\BE\95gk\1D\C5\94\93\88\D53\05\C7\DD\B7<C\22\92\E1\882/(^\BC'\E1\87\C5O\8C\B0|G\82\D3\C4cV\9FE\B4i-f\D2\ACm\12[\95s\84\86m\EB\F2\ACFV`\1D\9F\0EU\8F@q\EA\CA\18Z\8B\92\B2Ml\B4\F4\D2\FD\1D\FF\00\22\BC\D9\F3O\C2\CDC\C7\1F\03\BE%\E9^+\83E}(C\A8\BF\87\EFn\AE\AD\9F\EC\F1\C9$\8A\B2\C5\B9\86\03\AA\ECoP;W\D6\1F\B5d+`\9AE\97\88\FC\09\A0\9B]P\C5\A8\B6\A5\16\9E\0C\DFhRCB\D2\E0a\F2\01 \9EGn\E3c\E1o\C3/\09|E\B6\F1/\8A|u>\BFn\D6~6\D7\E6\B8\85T\BA1i\96#\94\19\8D\DC(d%y\04\B1\07\1C\8E\B7\C3\FE(]Am>\0A|J\B5\D4\B5\D3\A9\D9\DF\ED\D4.\ED\A11j\91\C5\B5D\DEd` fY\10\02\83vv\93\8E\B5\E7R\C0\CA\AE\0EXjS\B7:\DE\D7\B5\FA|\CC\B5\94O\84<I\06\B3\ACG}\AB\5C\DA\AC\96\9206\A8\17\E4\B7\80\1C\02=s\EC;\F1\C5i|!\F8\07\E2\AF\8E\1A\F3\BE\9D\AC\DB\DA\C3\A4_Z\A6\A1n\087\11\D9I\9F\DFD\87\87;\94\A6\DE\C4\E7\9C`\FD\11\F1\13\E0\9F\82</\E1\F7\F0W\87m\AE\13Y\F0\ED\BCz\C5\AD\C5\C9\95\EE\1BO\09\FB\D5\B8\91\9B\CB~Y\86\11r\18\02\00\C1\AF\09\F8}\E1o\88V\9E;\8F\E2\0F\C2-@K<\12\AD\AC\D0)>K\DC\05\12$\05A\07k\0EA\CF^\87\9C\0F\03\0F\95\D5\C1b\A1N\B2RMtv\FC\EC\F4\EA\EC4\EF-t\B1\CE\FCm\F8\0B\F1\13\E1\7F\89\B5K{\AB5\B9\D2\22\BC[}>\EAX\D6)o\22\C2\95m\99\E0\E0\95=\06S#\AE+\99\F1w\81g\9B[\82\E6\C3M\91U\EC\95\B7\05\C0F\F9\BA\FE\95\EC?\17>>\F8\EB\E2\B7\8Auo\02\F8\DBQ\B7\D1om\8A\DB\C3k\0C*\B1\F9\E8\A0\EDgpd\CE}\FF\00\A8\A6|.\B6\F1\CE\B1\E1{\CB\1F\16\E8\B33\08d\FB-\D2[\B3)t\18 \B0\18\EF\EB^fsVP\C5?\AB\A7\EE\E8\D3\F3\FC\D7\99\A2i\E8\D9\F3v\9Bm\A8h\B7\D1\DDj\9AD\B3$3n\90\94;[\19\F5\EA+\AA\7F\11\F8vWi\17E\DA\1C\96\03j\F0\0F\E3Qj\BA7\8C[u\F5\D5\B5\CB\DA),\E2<\10\07Q\909\EE?\ADr\0F\1D\E1v)m1RN8#\8A\BAx\87k\E8_;\A7\A2G\AF\FC$\F8u\17\8En\AFo\F5\DD[K\83O\B3\B8\D2\AC^9\E4Xo$\8A\E2\EE\18D\D6\CA\E3\1B\11X\A3\15c\B0\B4}\B1\9FL\F8\A1\FB?M\F0\EF\C1V\97\FA\C6\89\F6\BD\13S\B3?\D8\BA\EA\98\18:\CD\03M\F6y\C0a\221\C6\E5#1\B9s\80K(\AE+\E1\BF\C4\8D[\E0g\ED\10\FE\13\F0\D6\A6\97^\16\83V\1Ar?\88\A5\FB'\D9,\AE\1E0\F2y\B20[`\AA\CC\CC\DC#\A2|\C3\A1\1FP|F\F1\EE\81\E3Mc\E2.\91\E1\BDoC\D4\FC\05\A0\F8j56\F1_\DB\CDay\AF\DD\C3!\86KI\1C\C8\B1\A5\BC,\F3J\B1\15_\B50\0F\B5\D0M_K\83\8E\1ExX\CA\1A\BB>\8B\AAo\CE\EB_\91\CE\E1k\A7\B8\BF\095_\88^)\B0\F0\96\A1\F1\93Z}WL\F1N\995\C8\B1\93X[x\E3\D3\E1\B6\1E]\E1Y\08Y\1C\80\B1\BA\E1T,\8D\B9\C3\90k\85\F1?\83\FC-\E1O\07\FC]\D5\FE\19\FCn\BB\D4|)\A4[\A3\C9\A5A\A5\BD\F4\F1\86\8D\02\B4\170L\825\F3\83\C4fua\09\8C\97iO\CD^%\E0\FF\00\DA\03\E2\87\84\ED\CC\9An\AF\0CI\E1\BD\1E\FF\00\C3\16\8B=\A2\C8#\B5\BC\1B\C6\C0\C5p\C2eP\C5\9B\05B\8CeJ\BF\D8\BF\00a\F8j\9E\11\F0\D6\9D\E2M\1F\C3\1An\B3\A6\DAG\A4\A0\B3\D7\AD\22\96{P\88\D0\A4r\CF,r,\B2\0F \14$o\957+H\85V-\B0S\86c\15\DA\1B\B6\9D\F5[][\C9\EF\AA\DCw\BA\B9\F3\AF\EC\CD\F1sT\D3<K\E2\AF\0C\CD\E1\0D\0A\FEC\E1\8DOS\B6\D6g\D2\FC\EB\BB\1B\B7\B21\ED\92l\11$w\12\98\D5\84\D8\05\C0\C3\1C\98d\F5\EF\8B\1F\17\BC-\A5x\A7\C0\9E,\BC\D2u?\0DxN\E8\8D[I\F1n\9Fl\D2KglaI\A1\D3\84 \B4N\A1'A6\E4\95\C8VU\89>\FAu\DF\13~\1Bh_\0B~\1D\CD\AB|\1A\9FH\16\F0\DE\DD\E8\FE'h\A4\82\E2}R\01 .\CF\1C_\BB\17Q\F9\9B7H\81\A3B\A2?/\E4e\E1\AC\BE x\93J\FD\9D\FC!\E1\7F\08xr\E2\0DN\E6K\9B\09u\B9F\FB;k\BBY\96\D7\CE]\E1\97sG\22\C2a\0A\A5\9F-\B7j\C8\E1a\E7W\0D(Q\A5S\9B\DD\BE\9EM-\15\FEW\D0\13\E5\F7d\B5G\B4\BF\8A\BE\1C|a\F0\A6\A6\DAn\A3\E1?\17\E2\C2V\D2\EDm#\B8\D2\B5\18o\17\CE\8E\7F1&gh\C4\CCG\96\EE\9BJ\C8\BB\81\18\91\BEx\F8Q\1E\B1\F03\C4\F1\F8\A2?\0E\1F\15\E8\9E<\10\BE\92\D1\C5-\B4k\229`\E8\85I\F9\06\EC\B9\00aA\CA\F7\E0\BCY\E3}O\C4>\1F\F0P\F8h\B6\B6z\A4\FAy\B7\D45Km>\0B\09,.-\94[\0BQ,gv\C5\8D\0Ch2Y\91W\92\0E\17\D9\FE\16\FC\5C\D4\FE%i>\09\F0?\C6\AF\14Xi\16\BA\AD\DD\ED\C4\17-\1A\C1>\BB$\8D$\96\CA\E5\00UY\DAH\F0\AA#YT\C2\18\16h\98c\88\CCiT\94SO\9A\FA?7m5\EC\9B\BA{|\8B\94Z\D5\1E[\F1\BF\C0\E3\C6?\1Dc\F1W\8C\FC=\ABj\1E\10\B5E\B8\9BJ\D3\9A+{\D8\92M\A2I\96h\F1\E6\95%\18\82A#\1E\A0\1F\A3\93[\D0?g=6\D2\185\1Dt\F8V\DDc\B7\BBcz\935\BD\C3\8D\F0\0C\9C\B6F\C6\DC1\B4\EF\03<\F1\F2\8F\C5}\7F\C6\BF\0E<c\AFx k\8E\9A\CC\16\E8/\05\CCj\EFw\1C\CB\E6\B8\CA\91\1A`0\04.9\C0\18\0A\B4\DB\9D\1F\C5\91\FC\1A\B7\D7\AE~\D6\BA\1F\89m\A32\DD\5C\93<l\D1\B9u\D8\D9&&\0C\A4\15\EB\80x\CA\A8<\F5\F3\08\C2SS\83rW\BF[.\97k\A6\DA\8D-9\91\8B\FBE\EB\7F\08d\D6f\F1\0F\C1\8DFE\8FW\BB72Z\012Gj\C7\E6\90\04\93;T\B9a\B0p\0E\ECq\8A\E2\AD\F5M-\E0\8D\E7K3+ .A\1F{\1C\FE\B5\CD\D8\E8v\FA\CC\1A\84\CF+F\22\965\0EO\0A\A5\B0\C4\8F\A63]:\F8#\C1\B1\01\19\F1\CD\BEPm\E0\8Cq_5\88\9D\1CD\DC\9A\E5\F2_\D3\1Cj$\BD\E4hx\8BD\F0\EC\DA\FE\BD\AF\DB\C7}v\FA\143\D9j6\80,r\C1; \84]\C6\1CbH\C5\C3\10\F1\FC\AD\1C\8F\B86\D9\03/\A7\FF\00\C33\FCg\F0\B7\84-\B4\81\AFF<\0B\AF\DB\DBk\17\D70D\B761}\A6(Q\AE\15#o2\E3t-\1Cp\BE\E8\C7\EFH\DC\8C\ECOU\F0\9B\C0^$\F8\EF\E3s\E2?\8A\DE\0F\D2\BCg\E1\D1\A7Z\E9W\DA\9F\9Fqc\A9\D8\8Bv\91b\B9\83\0Cf\95\D1\DAHK0\C9\8A\DD\17\92\BE[}W\A9\DD|=\D0t%\F1&\9Fq\AC}\8F\E1\D6\B5\A9Y\BD\B6\96\A2\CE\0Bx\84\9B/\8D\EA\A1+9B\AF\BB\04\0C\DC\B1\95v;\13\F4X\5C\05\E3*\94\FD\E8\B7\A5\9D\B4OU\D9\AD\F6\ECe\0Fy\DD\BB\1F\9D\BA\97\86\F4\AF\0F\FCo\D6\FC1m\E2KX\B4m3V.\D7\9A\B5\A1x\A6\8E9\BE\D1\E6\CBn\84\99#\DF\13n\0A\C3\F7{\B3\91\95<\FF\00\85\BCY\E1/\05x\F6\DF\C5.\FAu\C5\AD\B6\A3\1E\A7x4\DD\AB\05\B4\B0\DC\BB\C5\1D\BC2\A3\06\0A\C69U$\12!\87pq\94ll|r\F8\BBs\E3/\8A\1A\CC\B6\B7\16\17\F6\10\EA\DA\8C\B6\8Dnd\B8\B7\9DRi\13z\97fa\14\D1nc\FC;]I\1DZ\BE\BF\F8\11c\F0[\E2\AF\82\FC\03\A7^[j:\B7\88\FC*~\CBk\ACjJ\B6\BA\B5\94+\14\A0\B43\08\1A)\92\22\1B\CAG2\15\F2\B2K\BCjB\C0a\AF^q\A3-\22\EE\BE\FB=/}?\22i\DF\E18?\89\DF\B5\E7\88\AD|\14\9F\0F\BC\15\E0\AF\B0x\A3]\BF\9A\F7Q\83T\B33,\FAu\D8\DDmv\AD\03\A4\91\5C#\14\81\D6BWq&0\CAvG\B3\F0\83\F6\BE\D1\87\81c\B4\F1v\AB\A7\F8~\EBF6\16\B3XY\E9A\AD\F5%x\A5\8E\E2\F3P\88!\CC\B1Lb\90\C7\A7\B47\13\CA\E4\BAl;\E0\D1\F8E\1F\C6\FB\F7\F8\EB\F0\DA\F7\E1\F7\855\9F\12\DCj\0F4\96v,[M\92{\BD8%\893\19U\E4\B6\95 (\9F0e\F2\E52\FE\F0\92\BE5\E1\BF\D9\E7\C5\B7\82o\05\E8\B0iz\D6\A5v\91I\7Fk\7Ff\22kK=\CC\B2^\88\E4\1Ed\8B\1C\8A\B1\AE\C0\AD\BEdwX\95\B1]\15\E1\8B\A7(\FDV\F2[[kk\FDm\F9\1A7\AD\CB\BE?\93\C2^ \9F\5C\F0-\B6\B1u\AEi\B7\9Fek\8F\14\DD\DB\C9\0D\D2\DE\86P\B0\A5\B9(c\91mb\86\09\8B\87\91v\CF\08'1\AC\1E{\A1\F8\FF\00O\D0\BE%Z]x\F3P\BB\F1F\A4\B3Ci,\AA\D0%\8Ai\EC\88\B2C$1)\8Cl\8DB\18\D0++\AB.U\94\14\E8\BE\12\E9\16\13\F8\8B\C3\BA\A6\BD}w\F1\17[\D6$m\17J\D1,\EE%\B4\B7\96\F2e\8E\D2\07\B8\D5.\15E\ACB\08`+\B0K#\83\82\109a\EB\7F\0F\BFf\0F\01k\DAF\9F\E3\0Dg\C7\11\F8v\DAk\FB\AB}b\DE=z\D9\ACmZ{\B9\A0\B7\F2\DEEK\88\97\CFkr\AB1\DE\EB!G\D9*\18_\9AXj\D9\8E!\D4\82IG\A3v\DD\F5z\E9\F7\BB\5Cm\CDI4p\9F\B4L\D6\DF\1A4K\7F\1D\F8\1Et\D5-4=:\DBQ\BB\8AV\8A\19\ED\1Eg\9A'\B5D\00O*,P\A4\8E\8F&\E8\FC\E8\88/\92\AA\9F\06\FF\00i\EF\86\F3\E9\93\FC!\F8\89\E1\8BX\BC?\AC\A2[L\EDq\04V\B0\CAT\01(\8A\0Bx\8Ce\9D\E4b\E6F#\E5\0B\B7\15\85\F0W\C0z\CD\FF\00\C4\AB\9DM\F5K[\BD\17N\BC\D44\D5\8FV\BD{\08\B5;t\9C\C2TO\83$\8C@$\AB#,`\B0(w\15\AF\A0\FE*|\19\F06\A1\E2O\16x\97\C2\16\DAe\96\8F\A5h\10jW\1A\B4\D6\90\B6\9Fr&3\AB\B5\AC\FB\85\BF\96\BES,\9F\BD\01\1D\19I\DB\90j\8F\B6\C5M\D4\83I\FC-=S\B7Eu\B7M\CB\A74\9D\E4\AE|i\A2\D9h>\1F\F1\C6\A3\E1\9DKN\B9\BC\F0\A4\B7\93\C0\93\99\95\84\A03\18\D0H\BC6U}\89\EB\C5t\D2\F8\AB\C1\91J\F1\DA|9\F0B\C0\8CV%\97Q\888@x\0C3\D7\18\CDrwShv\DAe\AD\87\87\B5\18o\D2=jb\F7\A2\DDbF\90\A32\C4\02I\222\8C*\EFV \EF?\DD9\E6W\E0\ACZ\8A\8DA$\D5Qn\87\9C\15lr\00np\0Ey\1C\D7\CB\D5\A3\05^q\C4>F\9FGu\BF\935\E5\E4v\86\D6Ok\EEwZ\7F\EDC\E2\CF\0E\FD\A2\FB\C2z\80\D3u;9\A3\B3[x\96H\A1\D44\FF\00:96\F9\8A\DEnL\B0\A7\98\85\D7zH\FB\B7|\CB_[x\EB\E2\B6\BB\FBA\FC9\F1\F7\86$6>\1E\D3\A7\D2\B4\F5\86;m\5C\BD\E24\862\C8b$3\C4\B3G*\17\09\1Al\94\A9F\12\B9\87\F3W\C5\96\D0\E9\1E(\D5\EC\F4\E0\F1Ei\AB\5C\C1\0F\CE\CC\CA\91\CA\E1\06\E2I8\00rNx\AFG\F1W\8E<K\A3|(\F8i\E2\CD>\F6\14\D5\A7]G}\D3\D9\C3#\16\8E\F2\E1Q\F0\E8@u\120\0E\06\E1\C6\0F\CA\B8\FA\DC\1C\1E\1E\94\A9\D3\D9kn\8F\A3[7gs\99F\D7G\0E\F7\EF\A7\B2\88l\A0\86\E2\13\22;\A4\8CX\1F\99J\19\14\ED`F\FF\00\BB\F2\B2\B7\19\19\07\DC\B4\9F\8A_\19\FC#\E1\8F\0Cj\B3i\D7v\9A5\95\C4phS\CB\A0\BC\16\F2\DB\B2\CF\89\8C\B1*4\DB\D5\AEB\E6BY\BC\D2\8A[\CCj\F1\ED*\CA\DBV\F07\89|A\A9\C6n\B5/\ED\0B47R\B1i\08\9AW2\FC\C4\E7,FI\EB\C9\F55\FA\F1\FB.x3\C2\9F\13\7Fd\AF\87:'\8E\F4\0B=_O\F8\85\15\FE\99\E2;ic\0B\1D\F46R\5C\C3h\DBS\02)\A2\8E\DE\DDRx\F6\CA<\88\8E\FC\C6\A4pP\9DE7\1AN\DD\1F\E0\D7\AE\B6*\14\D4\93g\8B|3\F8\BB\F0?\C4\BF\B3\DE\8D\1F\8F<O\06\90\DA\95\EE\FF\00\14\E9\BAN\9Ds\15\C6\9B\22j)\9B\D9\EEm\22O.<\CB\04\D2\CB\88\F7<\FBQ\BC\C2\AE\9BZ\BF\8D>5k>?\F1>\B7\F0\E7\C4Z4zM\96\9Bm\E2\1B\0DRG{\8D?\C4\17\82&h\AD\C4\F7\12\C7o\1C/\14R,\D7^c\15\F3\90\0Cob<\07\F6\8F\F0\AE\8D\F0C^\F1\85\9F\C2\A8\EE\FC;\0D\B7\C2\FD*(\D6\DA\FAv\F95\0DS\EC\97\AA\DB\DD\B7\89afR\1B8c\BCa\C0j\FAO\E05\85\BE\8D\E0-%4\FF\005!\B7\D3|oa\15\BC\93<\B0,\1An\BFg\05\92\F9NJf8\DEA\BB\1B\98\BB\B3\96f$\FB8:\8E\A5G*\9B\AB'n\BA\FF\00\C1\B9J-\FB\B7\D8\F9\CBE\D6\FE#|$\F1\B7\8B~(|=\F8qi7\87d\B0\D5\AF\F4m*\EBQ\8AX\F4\DD\08$\91\A3\C3\E5\B1w\8E\19dYf\B6\8F'm\BBE!\1EZ\C8\BC\B7\EC\E7\F1\C3\C4\B6\9E9O\16\FCK\8EMkE\D5dkKa-\9D\B4p\C7*\5C[L\D3\C4\1B\08\B2\A9\B5\85\9As\CA<0\B1\93x\DD_\A1\BA\BF\86\B4+O\8CV\DA\AD\BE\9B\12\5C\E9\DE\0D\D4-m\9B\92\AB\14wZd\88\85O\CA\C1]\98\8D\C0\E3s\0E\84\8A\F8\03\FE\0A\0Fikc\FBTj\90X\C0\96\C9\A8Yi3\5C\88F\CF2G\0F\0B\B1\C7s\1C1\A9=N\DFRI\BCm9e\EB\DA\D2w\8A\96\CF\D3\CA\DD\CC\B9\A4\9D\AEV\F1/\C4-/[\F0\DD\F7\89\A5\BC6\DE\22\D5$}CR\98\EE\9E\DFMiT\ECX\D5\DBj\DDJ\C0\05n\91\A8\DF!\DD\B1Y>\1D|~\F8\A1\A3\F8\07\C3~\1F\F0\D4^\1A\B7\F0\7F\84o\AE\BE\DD\1D\FC\B6\B6\F6\BA\A4W\1B\D9\AC$\86w\DFu\0E\C9n\01\11$\B27\DA0\E1\D9\93w\85\F8\8FR\D44-Z\DA\1D\1E\FA\E2\CE8\D4\00\B0\C8Ts\C9'\D4\9C\9C\93\C9\EFW\EE/&\D7t=kR\D4\84oua0H%\8E%\84\80f*wl\03\7F\03\F8\B3\DC\F5&\BER8\BA\91\93\C4\C5\D9\CF{i\BE\BF\99\973VH\B5\E2\1B\9F\09=\ED\CD\8F\86t\D3\A5\E8\E6\F1\EE\ED\AC-\E73-\B9n\06\E7 \09%U\C2\B1\8Cye\95\CAnR\09\F5\1B\1F\DA?\C4\96VV\F6v\FF\00\0D\B4\C6\8A\08\92$;\E3\5C\AA\80\07\1B\B8\E0t\AE7\E2/\86t\1D\1FA\B4\9BL\D3\22\B7p\96\E8Y3\96\049\CBs\F3\1C\A8\E4\E4\F5\E7\93^\CD\E1\8F\02xZ\F3\C3zM\DD\CE\9A\EF4\F60I#}\A6Q\B9\9A5$\E06:\9A\F01R\85G\CD5}^\F7\FD\19\DDJ\B5X\D4\92R?\FF\D9", align 1

`define TAG_g_hana_jpg `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_hana_jpg_a {`TAG_g_hana_jpg, 23'b0}
// @izigzag_index = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 8, i32 16, i32 9, i32 2, i32 3, i32 10, i32 17, i32 24, i32 32, i32 25, i32 18, i32 11, i32 4, i32 5, i32 12, i32 19, i32 26, i32 33, i32 40, i32 48, i32 41, i32 34, i32 27, i32 20, i32 13, i32 6, i32 7, i32 14, i32 21, i32 28, i32 35, i32 42, i32 49, i32 56, i32 57, i32 50, i32 43, i32 36, i32 29, i32 22, i32 15, i32 23, i32 30, i32 37, i32 44, i32 51, i32 58, i32 59, i32 52, i32 45, i32 38, i32 31, i32 39, i32 46, i32 53, i32 60, i32 61, i32 54, i32 47, i32 55, i32 62, i32 63], align 4

`define TAG_g_izigzag_index `MEMORY_CONTROLLER_TAG_SIZE'd15
`define TAG_g_izigzag_index_a {`TAG_g_izigzag_index, 23'b0}
// @lmask = internal unnamed_addr constant [32 x i32] [i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535, i32 131071, i32 262143, i32 524287, i32 1048575, i32 2097151, i32 4194303, i32 8388607, i32 16777215, i32 33554431, i32 67108863, i32 134217727, i32 268435455, i32 536870911, i32 1073741823, i32 2147483647, i32 -1], align 4

`define TAG_g_lmask `MEMORY_CONTROLLER_TAG_SIZE'd37
`define TAG_g_lmask_a {`TAG_g_lmask, 23'b0}
// @main_result = internal unnamed_addr global i32 0, align 4

`define TAG_g_main_result `MEMORY_CONTROLLER_TAG_SIZE'd16
`define TAG_g_main_result_a {`TAG_g_main_result, 23'b0}
// @out_ac_tbl_no_get_sos = internal unnamed_addr constant [3 x i32] [i32 0, i32 1, i32 1], align 4

`define TAG_g_out_ac_tbl_no_get_sos `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_out_ac_tbl_no_get_sos_a {`TAG_g_out_ac_tbl_no_get_sos, 23'b0}
// @out_comp_id_get_sos = internal unnamed_addr constant [3 x i32] [i32 1, i32 2, i32 3], align 4

`define TAG_g_out_comp_id_get_sos `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_out_comp_id_get_sos_a {`TAG_g_out_comp_id_get_sos, 23'b0}
// @out_count_get_dht = internal unnamed_addr constant [4 x i32] [i32 12, i32 162, i32 12, i32 162], align 4

`define TAG_g_out_count_get_dht `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g_out_count_get_dht_a {`TAG_g_out_count_get_dht, 23'b0}
// @out_index_get_dht = internal unnamed_addr constant [4 x i32] [i32 0, i32 16, i32 1, i32 17], align 4

`define TAG_g_out_index_get_dht `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_out_index_get_dht_a {`TAG_g_out_index_get_dht, 23'b0}
// @out_index_get_sof = internal unnamed_addr constant [3 x i32] [i32 0, i32 1, i32 2], align 4

`define TAG_g_out_index_get_sof `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_out_index_get_sof_a {`TAG_g_out_index_get_sof, 23'b0}
// @out_length_get_dht = internal unnamed_addr constant [4 x i32] [i32 29, i32 179, i32 29, i32 179], align 4

`define TAG_g_out_length_get_dht `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_out_length_get_dht_a {`TAG_g_out_length_get_dht, 23'b0}
// @out_length_get_dqt = internal unnamed_addr constant [2 x i32] [i32 65, i32 65], align 4

`define TAG_g_out_length_get_dqt `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g_out_length_get_dqt_a {`TAG_g_out_length_get_dqt, 23'b0}
// @out_num_get_dht = internal unnamed_addr constant [2 x i32] [i32 0, i32 1], align 4

`define TAG_g_out_num_get_dht `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_g_out_num_get_dht_a {`TAG_g_out_num_get_dht, 23'b0}
// @out_prec_get_dht = internal unnamed_addr constant [2 x i32] zeroinitializer, align 4

`define TAG_g_out_prec_get_dht `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_g_out_prec_get_dht_a {`TAG_g_out_prec_get_dht, 23'b0}
// @out_unread_marker = internal unnamed_addr constant [10 x i32] [i32 216, i32 224, i32 219, i32 219, i32 192, i32 196, i32 196, i32 196, i32 196, i32 218], align 4

`define TAG_g_out_unread_marker `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_out_unread_marker_a {`TAG_g_out_unread_marker, 23'b0}
// @out_v_samp_factor_get_sof = internal unnamed_addr constant [3 x i32] [i32 2, i32 1, i32 1], align 4

`define TAG_g_out_v_samp_factor_get_sof `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_out_v_samp_factor_get_sof_a {`TAG_g_out_v_samp_factor_get_sof, 23'b0}
// @p_jinfo_MCUWidth = internal unnamed_addr global i32 0, align 4

`define TAG_g_p_jinfo_MCUWidth `MEMORY_CONTROLLER_TAG_SIZE'd32
`define TAG_g_p_jinfo_MCUWidth_a {`TAG_g_p_jinfo_MCUWidth, 23'b0}
// @p_jinfo_ac_dhuff_tbl_maxcode = internal global [2 x [36 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_ac_dhuff_tbl_maxcode `MEMORY_CONTROLLER_TAG_SIZE'd46
`define TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a {`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode, 23'b0}
// @p_jinfo_ac_dhuff_tbl_mincode = internal global [2 x [36 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_ac_dhuff_tbl_mincode `MEMORY_CONTROLLER_TAG_SIZE'd47
`define TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a {`TAG_g_p_jinfo_ac_dhuff_tbl_mincode, 23'b0}
// @p_jinfo_ac_dhuff_tbl_ml = internal unnamed_addr global [2 x i32] zeroinitializer, align 4

`define TAG_g_p_jinfo_ac_dhuff_tbl_ml `MEMORY_CONTROLLER_TAG_SIZE'd45
`define TAG_g_p_jinfo_ac_dhuff_tbl_ml_a {`TAG_g_p_jinfo_ac_dhuff_tbl_ml, 23'b0}
// @p_jinfo_ac_dhuff_tbl_valptr = internal global [2 x [36 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_ac_dhuff_tbl_valptr `MEMORY_CONTROLLER_TAG_SIZE'd48
`define TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a {`TAG_g_p_jinfo_ac_dhuff_tbl_valptr, 23'b0}
// @p_jinfo_ac_xhuff_tbl_bits = internal global [2 x [36 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_ac_xhuff_tbl_bits `MEMORY_CONTROLLER_TAG_SIZE'd26
`define TAG_g_p_jinfo_ac_xhuff_tbl_bits_a {`TAG_g_p_jinfo_ac_xhuff_tbl_bits, 23'b0}
// @p_jinfo_ac_xhuff_tbl_huffval = internal global [2 x [257 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_ac_xhuff_tbl_huffval `MEMORY_CONTROLLER_TAG_SIZE'd27
`define TAG_g_p_jinfo_ac_xhuff_tbl_huffval_a {`TAG_g_p_jinfo_ac_xhuff_tbl_huffval, 23'b0}
// @p_jinfo_comps_info_ac_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

`define TAG_g_p_jinfo_comps_info_ac_tbl_no `MEMORY_CONTROLLER_TAG_SIZE'd25
`define TAG_g_p_jinfo_comps_info_ac_tbl_no_a {`TAG_g_p_jinfo_comps_info_ac_tbl_no, 23'b0}
// @p_jinfo_comps_info_dc_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

`define TAG_g_p_jinfo_comps_info_dc_tbl_no `MEMORY_CONTROLLER_TAG_SIZE'd24
`define TAG_g_p_jinfo_comps_info_dc_tbl_no_a {`TAG_g_p_jinfo_comps_info_dc_tbl_no, 23'b0}
// @p_jinfo_comps_info_h_samp_factor = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

`define TAG_g_p_jinfo_comps_info_h_samp_factor `MEMORY_CONTROLLER_TAG_SIZE'd21
`define TAG_g_p_jinfo_comps_info_h_samp_factor_a {`TAG_g_p_jinfo_comps_info_h_samp_factor, 23'b0}
// @p_jinfo_comps_info_id = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

`define TAG_g_p_jinfo_comps_info_id `MEMORY_CONTROLLER_TAG_SIZE'd20
`define TAG_g_p_jinfo_comps_info_id_a {`TAG_g_p_jinfo_comps_info_id, 23'b0}
// @p_jinfo_comps_info_index = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

`define TAG_g_p_jinfo_comps_info_index `MEMORY_CONTROLLER_TAG_SIZE'd19
`define TAG_g_p_jinfo_comps_info_index_a {`TAG_g_p_jinfo_comps_info_index, 23'b0}
// @p_jinfo_comps_info_quant_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

`define TAG_g_p_jinfo_comps_info_quant_tbl_no `MEMORY_CONTROLLER_TAG_SIZE'd23
`define TAG_g_p_jinfo_comps_info_quant_tbl_no_a {`TAG_g_p_jinfo_comps_info_quant_tbl_no, 23'b0}
// @p_jinfo_comps_info_v_samp_factor = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

`define TAG_g_p_jinfo_comps_info_v_samp_factor `MEMORY_CONTROLLER_TAG_SIZE'd22
`define TAG_g_p_jinfo_comps_info_v_samp_factor_a {`TAG_g_p_jinfo_comps_info_v_samp_factor, 23'b0}
// @p_jinfo_dc_dhuff_tbl_maxcode = internal global [2 x [36 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_dc_dhuff_tbl_maxcode `MEMORY_CONTROLLER_TAG_SIZE'd41
`define TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a {`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode, 23'b0}
// @p_jinfo_dc_dhuff_tbl_mincode = internal global [2 x [36 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_dc_dhuff_tbl_mincode `MEMORY_CONTROLLER_TAG_SIZE'd42
`define TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a {`TAG_g_p_jinfo_dc_dhuff_tbl_mincode, 23'b0}
// @p_jinfo_dc_dhuff_tbl_ml = internal unnamed_addr global [2 x i32] zeroinitializer, align 4

`define TAG_g_p_jinfo_dc_dhuff_tbl_ml `MEMORY_CONTROLLER_TAG_SIZE'd40
`define TAG_g_p_jinfo_dc_dhuff_tbl_ml_a {`TAG_g_p_jinfo_dc_dhuff_tbl_ml, 23'b0}
// @p_jinfo_dc_dhuff_tbl_valptr = internal global [2 x [36 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_dc_dhuff_tbl_valptr `MEMORY_CONTROLLER_TAG_SIZE'd43
`define TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a {`TAG_g_p_jinfo_dc_dhuff_tbl_valptr, 23'b0}
// @p_jinfo_dc_xhuff_tbl_bits = internal global [2 x [36 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_dc_xhuff_tbl_bits `MEMORY_CONTROLLER_TAG_SIZE'd28
`define TAG_g_p_jinfo_dc_xhuff_tbl_bits_a {`TAG_g_p_jinfo_dc_xhuff_tbl_bits, 23'b0}
// @p_jinfo_dc_xhuff_tbl_huffval = internal global [2 x [257 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_dc_xhuff_tbl_huffval `MEMORY_CONTROLLER_TAG_SIZE'd29
`define TAG_g_p_jinfo_dc_xhuff_tbl_huffval_a {`TAG_g_p_jinfo_dc_xhuff_tbl_huffval, 23'b0}
// @p_jinfo_image_height = internal unnamed_addr global i16 0, align 2

`define TAG_g_p_jinfo_image_height `MEMORY_CONTROLLER_TAG_SIZE'd17
`define TAG_g_p_jinfo_image_height_a {`TAG_g_p_jinfo_image_height, 23'b0}
// @p_jinfo_image_width = internal unnamed_addr global i16 0, align 2

`define TAG_g_p_jinfo_image_width `MEMORY_CONTROLLER_TAG_SIZE'd18
`define TAG_g_p_jinfo_image_width_a {`TAG_g_p_jinfo_image_width, 23'b0}
// @p_jinfo_quant_tbl_quantval = internal unnamed_addr global [4 x [64 x i32]] zeroinitializer, align 4

`define TAG_g_p_jinfo_quant_tbl_quantval `MEMORY_CONTROLLER_TAG_SIZE'd30
`define TAG_g_p_jinfo_quant_tbl_quantval_a {`TAG_g_p_jinfo_quant_tbl_quantval, 23'b0}
// @read_position = internal unnamed_addr global i32 -1, align 4

`define TAG_g_read_position `MEMORY_CONTROLLER_TAG_SIZE'd38
`define TAG_g_read_position_a {`TAG_g_read_position, 23'b0}
// @rgb_buf = internal global [4 x [3 x [64 x i32]]] zeroinitializer, align 4

`define TAG_g_rgb_buf `MEMORY_CONTROLLER_TAG_SIZE'd33
`define TAG_g_rgb_buf_a {`TAG_g_rgb_buf, 23'b0}
// @zigzag_index = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 5, i32 6, i32 14, i32 15, i32 27, i32 28, i32 2, i32 4, i32 7, i32 13, i32 16, i32 26, i32 29, i32 42, i32 3, i32 8, i32 12, i32 17, i32 25, i32 30, i32 41, i32 43, i32 9, i32 11, i32 18, i32 24, i32 31, i32 40, i32 44, i32 53, i32 10, i32 19, i32 23, i32 32, i32 39, i32 45, i32 52, i32 54, i32 20, i32 22, i32 33, i32 38, i32 46, i32 51, i32 55, i32 60, i32 21, i32 34, i32 37, i32 47, i32 50, i32 56, i32 59, i32 61, i32 35, i32 36, i32 48, i32 49, i32 57, i32 58, i32 62, i32 63], align 4

`define TAG_g_zigzag_index `MEMORY_CONTROLLER_TAG_SIZE'd31
`define TAG_g_zigzag_index_a {`TAG_g_zigzag_index, 23'b0}
//   %huffcode = alloca [257 x i32], align 4
`define TAG_huff_make_dhuff_tb_0_huffcode `MEMORY_CONTROLLER_TAG_SIZE'd54
`define TAG_huff_make_dhuff_tb_0_huffcode_a {`TAG_huff_make_dhuff_tb_0_huffcode, 23'b0}
//   %huffsize = alloca [257 x i32], align 4
`define TAG_huff_make_dhuff_tb_0_huffsize `MEMORY_CONTROLLER_TAG_SIZE'd53
`define TAG_huff_make_dhuff_tb_0_huffsize_a {`TAG_huff_make_dhuff_tb_0_huffsize, 23'b0}
//   %HuffBuff.i.i = alloca [3 x [64 x i32]], align 4
`define TAG_main_0_HuffBuff_i_i `MEMORY_CONTROLLER_TAG_SIZE'd55
`define TAG_main_0_HuffBuff_i_i_a {`TAG_main_0_HuffBuff_i_i, 23'b0}
//   %IDCTBuff.i.i = alloca [6 x [64 x i32]], align 4
`define TAG_main_0_IDCTBuff_i_i `MEMORY_CONTROLLER_TAG_SIZE'd56
`define TAG_main_0_IDCTBuff_i_i_a {`TAG_main_0_IDCTBuff_i_i, 23'b0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;
wire memory_controller_enable;
wire memory_controller_write_enable;
wire memory_controller_waitrequest;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;
wire [1:0] memory_controller_size;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_address_a( memory_controller_address ),
	.memory_controller_address_b( memory_controller_address ),
	.memory_controller_enable( memory_controller_enable ),
	.memory_controller_write_enable_a( 1'd0 ),
	.memory_controller_write_enable_b( memory_controller_write_enable ),
	.memory_controller_in_a( memory_controller_in ),
	.memory_controller_in_b( memory_controller_in ),
	.memory_controller_size_a( memory_controller_size ),
	.memory_controller_size_b( memory_controller_size ),
	.memory_controller_out_reg_a(  ),
	.memory_controller_out_reg_b( memory_controller_out )
);

main main_inst(
	.clk( clk ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_address( memory_controller_address ),
	.memory_controller_enable( memory_controller_enable ),
	.memory_controller_write_enable( memory_controller_write_enable ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_in( memory_controller_in ),
	.memory_controller_size( memory_controller_size ),
	.memory_controller_out( memory_controller_out )
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable;
input memory_controller_write_enable_a;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_a;

input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_b;


reg [12:0] hana_jpg_address_a;
reg hana_jpg_write_enable_a;
reg [7:0] hana_jpg_in_a;
wire [7:0] hana_jpg_out_a;

reg [12:0] hana_jpg_address_b;
reg hana_jpg_write_enable_b;
reg [7:0] hana_jpg_in_b;
wire [7:0] hana_jpg_out_b;

// @hana_jpg = internal unnamed_addr constant [5207 x i8] c}\01\02\03\00\04\11\05\12!1A\06\13Qa\07\22q\142\81\91\A1\08#B\B1\C1\15R\D1\F0$3br\82\09\0A\16\17\18\19\1A%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FF\C4\00\1F\01\00\03\01\01\01\01\01\01\01\01\01\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\FF\C4\00\B5\11\00\02\01\02\04\04\03\04\07\05\04\04\00\01\02w\00\01\02\03\11\04\05!1\06\12AQ\07aq\13\222\81\08\14B\91\A1\B1\C1\09#3R\F0\15br\D1\0A\16$4\E1%\F1\17\18\19\1A&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\82\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E2\E3\E4\E5\E6\E7\E8\E9\EA\F2\F3\F4\F5\F6\F7\F8\F9\FA\FF\DA\00\0C\03\01\00\02\11\03\11\00?\00\F5\AF\00Z\EA\17\B3\AF\8A<O1\F1\A4z\9B\CF\A9\E9\BE\22\B0g\16zlV\F1*[\DA\AC\0CI,\C7\CC&@\19d,x\E3\0B\C0\E8\BA7\ED;\A3M\E3M;[\F1\7F\855M\06\D2\D6\E2\F6;\B8D\F0\DDXKr\04\883\90V(\90<\98,U\BEQ\EC\BF*x3\F6\8B\F1\0F\C2_\88m\A4E\AC\EAg\C2\D1\DE,q\DA\C3u\98#\B6\91\8C\8C!\8D\B7\04C\BF  \00\02p:W\B0\F8\17\F6\C6\F0\C0\F1a\F1G\88\FC1,\1A\BF\8E\AE#\B6\BA\D5\12\FF\00\CB\B6\D2t\F5\8E;h\A4r\DC\C8\04\B0\B3HY@\0A\C4\8E\A5\1F\B7\0D\8E\A5\CF\19)k6\9B\BE\9A5\B7\9E\BD\FE\F3\17$\D2\E8}\0B\A9j\16\1E5\F8\18&\F1N\81\A4x\96MF\DA;\E9-t\EBi\EF\EDu\0ByD[\AF\E3\8Au\8EH\90\0D\D3\18\93,\81AR\E1\81?(\F8\93\F6a\F0\AB\93\A6\E8\CF\ACK\7Fs1k;\AB\0By/t\BB\A8\E5]\E9\11\5C\97\B7u\1F.r\C1\80\1DI\C0\FA\AB\C5\9E\0A\BA\D7\BE\C9\1B\F8\AA\D6\EEAcu5\BE\95gk\1D\C5\94\93\88\D53\05\C7\DD\B7<C\22\92\E1\882/(^\BC'\E1\87\C5O\8C\B0|G\82\D3\C4cV\9FE\B4i-f\D2\ACm\12[\95s\84\86m\EB\F2\ACFV`\1D\9F\0EU\8F@q\EA\CA\18Z\8B\92\B2Ml\B4\F4\D2\FD\1D\FF\00\22\BC\D9\F3O\C2\CDC\C7\1F\03\BE%\E9^+\83E}(C\A8\BF\87\EFn\AE\AD\9F\EC\F1\C9$\8A\B2\C5\B9\86\03\AA\ECoP;W\D6\1F\B5d+`\9AE\97\88\FC\09\A0\9B]P\C5\A8\B6\A5\16\9E\0C\DFhRCB\D2\E0a\F2\01 \9EGn\E3c\E1o\C3/\09|E\B6\F1/\8A|u>\BFn\D6~6\D7\E6\B8\85T\BA1i\96#\94\19\8D\DC(d%y\04\B1\07\1C\8E\B7\C3\FE(]Am>\0A|J\B5\D4\B5\D3\A9\D9\DF\ED\D4.\ED\A11j\91\C5\B5D\DEd` fY\10\02\83vv\93\8E\B5\E7R\C0\CA\AE\0EXjS\B7:\DE\D7\B5\FA|\CC\B5\94O\84<I\06\B3\ACG}\AB\5C\DA\AC\96\9206\A8\17\E4\B7\80\1C\02=s\EC;\F1\C5i|!\F8\07\E2\AF\8E\1A\F3\BE\9D\AC\DB\DA\C3\A4_Z\A6\A1n\087\11\D9I\9F\DFD\87\87;\94\A6\DE\C4\E7\9C`\FD\11\F1\13\E0\9F\82</\E1\F7\F0W\87m\AE\13Y\F0\ED\BCz\C5\AD\C5\C9\95\EE\1BO\09\FB\D5\B8\91\9B\CB~Y\86\11r\18\02\00\C1\AF\09\F8}\E1o\88V\9E;\8F\E2\0F\C2-@K<\12\AD\AC\D0)>K\DC\05\12$\05A\07k\0EA\CF^\87\9C\0F\03\0F\95\D5\C1b\A1N\B2RMtv\FC\EC\F4\EA\EC4\EF-t\B1\CE\FCm\F8\0B\F1\13\E1\7F\89\B5K{\AB5\B9\D2\22\BC[}>\EAX\D6)o\22\C2\95m\99\E0\E0\95=\06S#\AE+\99\F1w\81g\9B[\82\E6\C3M\91U\EC\95\B7\05\C0F\F9\BA\FE\95\EC?\17>>\F8\EB\E2\B7\8Auo\02\F8\DBQ\B7\D1om\8A\DB\C3k\0C*\B1\F9\E8\A0\EDgpd\CE}\FF\00\A8\A6|.\B6\F1\CE\B1\E1{\CB\1F\16\E8\B33\08d\FB-\D2[\B3)t\18 \B0\18\EF\EB^fsVP\C5?\AB\A7\EE\E8\D3\F3\FC\D7\99\A2i\E8\D9\F3v\9Bm\A8h\B7\D1\DDj\9AD\B3$3n\90\94;[\19\F5\EA+\AA\7F\11\F8vWi\17E\DA\1C\96\03j\F0\0F\E3Qj\BA7\8C[u\F5\D5\B5\CB\DA),\E2<\10\07Q\909\EE?\ADr\0F\1D\E1v)m1RN8#\8A\BAx\87k\E8_;\A7\A2G\AF\FC$\F8u\17\8En\AFo\F5\DD[K\83O\B3\B8\D2\AC^9\E4Xo$\8A\E2\EE\18D\D6\CA\E3\1B\11X\A3\15c\B0\B4}\B1\9FL\F8\A1\FB?M\F0\EF\C1V\97\FA\C6\89\F6\BD\13S\B3?\D8\BA\EA\98\18:\CD\03M\F6y\C0a\221\C6\E5#1\B9s\80K(\AE+\E1\BF\C4\8D[\E0g\ED\10\FE\13\F0\D6\A6\97^\16\83V\1Ar?\88\A5\FB'\D9,\AE\1E0\F2y\B20[`\AA\CC\CC\DC#\A2|\C3\A1\1FP|F\F1\EE\81\E3Mc\E2.\91\E1\BDoC\D4\FC\05\A0\F8j56\F1_\DB\CDay\AF\DD\C3!\86KI\1C\C8\B1\A5\BC,\F3J\B1\15_\B50\0F\B5\D0M_K\83\8E\1ExX\CA\1A\BB>\8B\AAo\CE\EB_\91\CE\E1k\A7\B8\BF\095_\88^)\B0\F0\96\A1\F1\93Z}WL\F1N\995\C8\B1\93X[x\E3\D3\E1\B6\1E]\E1Y\08Y\1C\80\B1\BA\E1T,\8D\B9\C3\90k\85\F1?\83\FC-\E1O\07\FC]\D5\FE\19\FCn\BB\D4|)\A4[\A3\C9\A5A\A5\BD\F4\F1\86\8D\02\B4\170L\825\F3\83\C4fua\09\8C\97iO\CD^%\E0\FF\00\DA\03\E2\87\84\ED\CC\9An\AF\0CI\E1\BD\1E\FF\00\C3\16\8B=\A2\C8#\B5\BC\1B\C6\C0\C5p\C2eP\C5\9B\05B\8CeJ\BF\D8\BF\00a\F8j\9E\11\F0\D6\9D\E2M\1F\C3\1An\B3\A6\DAG\A4\A0\B3\D7\AD\22\96{P\88\D0\A4r\CF,r,\B2\0F \14$o\957+H\85V-\B0S\86c\15\DA\1B\B6\9D\F5[][\C9\EF\AA\DCw\BA\B9\F3\AF\EC\CD\F1sT\D3<K\E2\AF\0C\CD\E1\0D\0A\FEC\E1\8DOS\B6\D6g\D2\FC\EB\BB\1B\B7\B21\ED\92l\11$w\12\98\D5\84\D8\05\C0\C3\1C\98d\F5\EF\8B\1F\17\BC-\A5x\A7\C0\9E,\BC\D2u?\0DxN\E8\8D[I\F1n\9Fl\D2KglaI\A1\D3\84 \B4N\A1'A6\E4\95\C8VU\89>\FAu\DF\13~\1Bh_\0B~\1D\CD\AB|\1A\9FH\16\F0\DE\DD\E8\FE'h\A4\82\E2}R\01 .\CF\1C_\BB\17Q\F9\9B7H\81\A3B\A2?/\E4e\E1\AC\BE x\93J\FD\9D\FC!\E1\7F\08xr\E2\0DN\E6K\9B\09u\B9F\FB;k\BBY\96\D7\CE]\E1\97sG\22\C2a\0A\A5\9F-\B7j\C8\E1a\E7W\0D(Q\A5S\9B\DD\BE\9EM-\15\FEW\D0\13\E5\F7d\B5G\B4\BF\8A\BE\1C|a\F0\A6\A6\DAn\A3\E1?\17\E2\C2V\D2\EDm#\B8\D2\B5\18o\17\CE\8E\7F1&gh\C4\CCG\96\EE\9BJ\C8\BB\81\18\91\BEx\F8Q\1E\B1\F03\C4\F1\F8\A2?\0E\1F\15\E8\9E<\10\BE\92\D1\C5-\B4k\229`\E8\85I\F9\06\EC\B9\00aA\CA\F7\E0\BCY\E3}O\C4>\1F\F0P\F8h\B6\B6z\A4\FAy\B7\D45Km>\0B\09,.-\94[\0BQ,gv\C5\8D\0Ch2Y\91W\92\0E\17\D9\FE\16\FC\5C\D4\FE%i>\09\F0?\C6\AF\14Xi\16\BA\AD\DD\ED\C4\17-\1A\C1>\BB$\8D$\96\CA\E5\00UY\DAH\F0\AA#YT\C2\18\16h\98c\88\CCiT\94SO\9A\FA?7m5\EC\9B\BA{|\8B\94Z\D5\1E[\F1\BF\C0\E3\C6?\1Dc\F1W\8C\FC=\ABj\1E\10\B5E\B8\9BJ\D3\9A+{\D8\92M\A2I\96h\F1\E6\95%\18\82A#\1E\A0\1F\A3\93[\D0?g=6\D2\185\1Dt\F8V\DDc\B7\BBcz\935\BD\C3\8D\F0\0C\9C\B6F\C6\DC1\B4\EF\03<\F1\F2\8F\C5}\7F\C6\BF\0E<c\AFx k\8E\9A\CC\16\E8/\05\CCj\EFw\1C\CB\E6\B8\CA\91\1A`0\04.9\C0\18\0A\B4\DB\9D\1F\C5\91\FC\1A\B7\D7\AE~\D6\BA\1F\89m\A32\DD\5C\93<l\D1\B9u\D8\D9&&\0C\A4\15\EB\80x\CA\A8<\F5\F3\08\C2SS\83rW\BF[.\97k\A6\DA\8D-9\91\8B\FBE\EB\7F\08d\D6f\F1\0F\C1\8DFE\8FW\BB72Z\012Gj\C7\E6\90\04\93;T\B9a\B0p\0E\ECq\8A\E2\AD\F5M-\E0\8D\E7K3+ .A\1F{\1C\FE\B5\CD\D8\E8v\FA\CC\1A\84\CF+F\22\965\0EO\0A\A5\B0\C4\8F\A63]:\F8#\C1\B1\01\19\F1\CD\BEPm\E0\8Cq_5\88\9D\1CD\DC\9A\E5\F2_\D3\1Cj$\BD\E4hx\8BD\F0\EC\DA\FE\BD\AF\DB\C7}v\FA\143\D9j6\80,r\C1; \84]\C6\1CbH\C5\C3\10\F1\FC\AD\1C\8F\B86\D9\03/\A7\FF\00\C33\FCg\F0\B7\84-\B4\81\AFF<\0B\AF\DB\DBk\17\D70D\B761}\A6(Q\AE\15#o2\E3t-\1Cp\BE\E8\C7\EFH\DC\8C\ECOU\F0\9B\C0^$\F8\EF\E3s\E2?\8A\DE\0F\D2\BCg\E1\D1\A7Z\E9W\DA\9F\9Fqc\A9\D8\8Bv\91b\B9\83\0Cf\95\D1\DAHK0\C9\8A\DD\17\92\BE[}W\A9\DD|=\D0t%\F1&\9Fq\AC}\8F\E1\D6\B5\A9Y\BD\B6\96\A2\CE\0Bx\84\9B/\8D\EA\A1+9B\AF\BB\04\0C\DC\B1\95v;\13\F4X\5C\05\E3*\94\FD\E8\B7\A5\9D\B4OU\D9\AD\F6\ECe\0Fy\DD\BB\1F\9D\BA\97\86\F4\AF\0F\FCo\D6\FC1m\E2KX\B4m3V.\D7\9A\B5\A1x\A6\8E9\BE\D1\E6\CBn\84\99#\DF\13n\0A\C3\F7{\B3\91\95<\FF\00\85\BCY\E1/\05x\F6\DF\C5.\FAu\C5\AD\B6\A3\1E\A7x4\DD\AB\05\B4\B0\DC\BB\C5\1D\BC2\A3\06\0A\C69U$\12!\87pq\94ll|r\F8\BBs\E3/\8A\1A\CC\B6\B7\16\17\F6\10\EA\DA\8C\B6\8Dnd\B8\B7\9DRi\13z\97fa\14\D1nc\FC;]I\1DZ\BE\BF\F8\11c\F0[\E2\AF\82\FC\03\A7^[j:\B7\88\FC*~\CBk\ACjJ\B6\BA\B5\94+\14\A0\B43\08\1A)\92\22\1B\CAG2\15\F2\B2K\BCjB\C0a\AF^q\A3-\22\EE\BE\FB=/}?\22i\DF\E18?\89\DF\B5\E7\88\AD|\14\9F\0F\BC\15\E0\AF\B0x\A3]\BF\9A\F7Q\83T\B33,\FAu\D8\DDmv\AD\03\A4\91\5C#\14\81\D6BWq&0\CAvG\B3\F0\83\F6\BE\D1\87\81c\B4\F1v\AB\A7\F8~\EBF6\16\B3XY\E9A\AD\F5%x\A5\8E\E2\F3P\88!\CC\B1Lb\90\C7\A7\B47\13\CA\E4\BAl;\E0\D1\F8E\1F\C6\FB\F7\F8\EB\F0\DA\F7\E1\F7\855\9F\12\DCj\0F4\96v,[M\92{\BD8%\893\19U\E4\B6\95 (\9F0e\F2\E52\FE\F0\92\BE5\E1\BF\D9\E7\C5\B7\82o\05\E8\B0iz\D6\A5v\91I\7Fk\7Ff\22kK=\CC\B2^\88\E4\1Ed\8B\1C\8A\B1\AE\C0\AD\BEdwX\95\B1]\15\E1\8B\A7(\FDV\F2[[kk\FDm\F9\1A7\AD\CB\BE?\93\C2^ \9F\5C\F0-\B6\B1u\AEi\B7\9Fek\8F\14\DD\DB\C9\0D\D2\DE\86P\B0\A5\B9(c\91mb\86\09\8B\87\91v\CF\08'1\AC\1E{\A1\F8\FF\00O\D0\BE%Z]x\F3P\BB\F1F\A4\B3Ci,\AA\D0%\8Ai\EC\88\B2C$1)\8Cl\8DB\18\D0++\AB.U\94\14\E8\BE\12\E9\16\13\F8\8B\C3\BA\A6\BD}w\F1\17[\D6$m\17J\D1,\EE%\B4\B7\96\F2e\8E\D2\07\B8\D5.\15E\ACB\08`+\B0K#\83\82\109a\EB\7F\0F\BFf\0F\01k\DAF\9F\E3\0Dg\C7\11\F8v\DAk\FB\AB}b\DE=z\D9\ACmZ{\B9\A0\B7\F2\DEEK\88\97\CFkr\AB1\DE\EB!G\D9*\18_\9AXj\D9\8E!\D4\82IG\A3v\DD\F5z\E9\F7\BB\5Cm\CDI4p\9F\B4L\D6\DF\1A4K\7F\1D\F8\1Et\D5-4=:\DBQ\BB\8AV\8A\19\ED\1Eg\9A'\B5D\00O*,P\A4\8E\8F&\E8\FC\E8\88/\92\AA\9F\06\FF\00i\EF\86\F3\E9\93\FC!\F8\89\E1\8BX\BC?\AC\A2[L\EDq\04V\B0\CAT\01(\8A\0Bx\8Ce\9D\E4b\E6F#\E5\0B\B7\15\85\F0W\C0z\CD\FF\00\C4\AB\9DM\F5K[\BD\17N\BC\D44\D5\8FV\BD{\08\B5;t\9C\C2TO\83$\8C@$\AB#,`\B0(w\15\AF\A0\FE*|\19\F06\A1\E2O\16x\97\C2\16\DAe\96\8F\A5h\10jW\1A\B4\D6\90\B6\9Fr&3\AB\B5\AC\FB\85\BF\96\BES,\9F\BD\01\1D\19I\DB\90j\8F\B6\C5M\D4\83I\FC-=S\B7Eu\B7M\CB\A74\9D\E4\AE|i\A2\D9h>\1F\F1\C6\A3\E1\9DKN\B9\BC\F0\A4\B7\93\C0\93\99\95\84\A03\18\D0H\BC6U}\89\EB\C5t\D2\F8\AB\C1\91J\F1\DA|9\F0B\C0\8CV%\97Q\888@x\0C3\D7\18\CDrwShv\DAe\AD\87\87\B5\18o\D2=jb\F7\A2\DDbF\90\A32\C4\02I\222\8C*\EFV \EF?\DD9\E6W\E0\ACZ\8A\8DA$\D5Qn\87\9C\15lr\00np\0Ey\1C\D7\CB\D5\A3\05^q\C4>F\9FGu\BF\935\E5\E4v\86\D6Ok\EEwZ\7F\EDC\E2\CF\0E\FD\A2\FB\C2z\80\D3u;9\A3\B3[x\96H\A1\D44\FF\00:96\F9\8A\DEnL\B0\A7\98\85\D7zH\FB\B7|\CB_[x\EB\E2\B6\BB\FBA\FC9\F1\F7\86$6>\1E\D3\A7\D2\B4\F5\86;m\5C\BD\E24\862\C8b$3\C4\B3G*\17\09\1Al\94\A9F\12\B9\87\F3W\C5\96\D0\E9\1E(\D5\EC\F4\E0\F1Ei\AB\5C\C1\0F\CE\CC\CA\91\CA\E1\06\E2I8\00rNx\AFG\F1W\8E<K\A3|(\F8i\E2\CD>\F6\14\D5\A7]G}\D3\D9\C3#\16\8E\F2\E1Q\F0\E8@u\120\0E\06\E1\C6\0F\CA\B8\FA\DC\1C\1E\1E\94\A9\D3\D9kn\8F\A3[7gs\99F\D7G\0E\F7\EF\A7\B2\88l\A0\86\E2\13\22;\A4\8CX\1F\99J\19\14\ED`F\FF\00\BB\F2\B2\B7\19\19\07\DC\B4\9F\8A_\19\FC#\E1\8F\0Cj\B3i\D7v\9A5\95\C4phS\CB\A0\BC\16\F2\DB\B2\CF\89\8C\B1*4\DB\D5\AEB\E6BY\BC\D2\8A[\CCj\F1\ED*\CA\DBV\F07\89|A\A9\C6n\B5/\ED\0B47R\B1i\08\9AW2\FC\C4\E7,FI\EB\C9\F55\FA\F1\FB.x3\C2\9F\13\7Fd\AF\87:'\8E\F4\0B=_O\F8\85\15\FE\99\E2;ic\0B\1D\F46R\5C\C3h\DBS\02)\A2\8E\DE\DDRx\F6\CA<\88\8E\FC\C6\A4pP\9DE7\1AN\DD\1F\E0\D7\AE\B6*\14\D4\93g\8B|3\F8\BB\F0?\C4\BF\B3\DE\8D\1F\8F<O\06\90\DA\95\EE\FF\00\14\E9\BAN\9Ds\15\C6\9B\22j)\9B\D9\EEm\22O.<\CB\04\D2\CB\88\F7<\FBQ\BC\C2\AE\9BZ\BF\8D>5k>?\F1>\B7\F0\E7\C4Z4zM\96\9Bm\E2\1B\0DRG{\8D?\C4\17\82&h\AD\C4\F7\12\C7o\1C/\14R,\D7^c\15\F3\90\0Cob<\07\F6\8F\F0\AE\8D\F0C^\F1\85\9F\C2\A8\EE\FC;\0D\B7\C2\FD*(\D6\DA\FAv\F95\0DS\EC\97\AA\DB\DD\B7\89afR\1B8c\BCa\C0j\FAO\E05\85\BE\8D\E0-%4\FF\005!\B7\D3|oa\15\BC\93<\B0,\1An\BFg\05\92\F9NJf8\DEA\BB\1B\98\BB\B3\96f$\FB8:\8E\A5G*\9B\AB'n\BA\FF\00\C1\B9J-\FB\B7\D8\F9\CBE\D6\FE#|$\F1\B7\8B~(|=\F8qi7\87d\B0\D5\AF\F4m*\EBQ\8AX\F4\DD\08$\91\A3\C3\E5\B1w\8E\19dYf\B6\8F'm\BBE!\1EZ\C8\BC\B7\EC\E7\F1\C3\C4\B6\9E9O\16\FCK\8EMkE\D5dkKa-\9D\B4p\C7*\5C[L\D3\C4\1B\08\B2\A9\B5\85\9As\CA<0\B1\93x\DD_\A1\BA\BF\86\B4+O\8CV\DA\AD\BE\9B\12\5C\E9\DE\0D\D4-m\9B\92\AB\14wZd\88\85O\CA\C1]\98\8D\C0\E3s\0E\84\8A\F8\03\FE\0A\0Fikc\FBTj\90X\C0\96\C9\A8Yi3\5C\88F\CF2G\0F\0B\B1\C7s\1C1\A9=N\DFRI\BCm9e\EB\DA\D2w\8A\96\CF\D3\CA\DD\CC\B9\A4\9D\AEV\F1/\C4-/[\F0\DD\F7\89\A5\BC6\DE\22\D5$}CR\98\EE\9E\DFMiT\ECX\D5\DBj\DDJ\C0\05n\91\A8\DF!\DD\B1Y>\1D|~\F8\A1\A3\F8\07\C3~\1F\F0\D4^\1A\B7\F0\7F\84o\AE\BE\DD\1D\FC\B6\B6\F6\BA\A4W\1B\D9\AC$\86w\DFu\0E\C9n\01\11$\B27\DA0\E1\D9\93w\85\F8\8FR\D44-Z\DA\1D\1E\FA\E2\CE8\D4\00\B0\C8Ts\C9'\D4\9C\9C\93\C9\EFW\EE/&\D7t=kR\D4\84oua0H%\8E%\84\80f*wl\03\7F\03\F8\B3\DC\F5&\BER8\BA\91\93\C4\C5\D9\CF{i\BE\BF\99\973VH\B5\E2\1B\9F\09=\ED\CD\8F\86t\D3\A5\E8\E6\F1\EE\ED\AC-\E73-\B9n\06\E7 \09%U\C2\B1\8Cye\95\CAnR\09\F5\1B\1F\DA?\C4\96VV\F6v\FF\00\0D\B4\C6\8A\08\92$;\E3\5C\AA\80\07\1B\B8\E0t\AE7\E2/\86t\1D\1FA\B4\9BL\D3\22\B7p\96\E8Y3\96\049\CBs\F3\1C\A8\E4\E4\F5\E7\93^\CD\E1\8F\02xZ\F3\C3zM\DD\CE\9A\EF4\F60I#}\A6Q\B9\9A5$\E06:\9A\F01R\85G\CD5}^\F7\FD\19\DDJ\B5X\D4\92R?\FF\D9", align 1

ram_two_ports hana_jpg (
	.clk( clk ),
	.address_a( hana_jpg_address_a ),
	.wren_a( hana_jpg_write_enable_a ),
	.data_a( hana_jpg_in_a ),
	.address_b( hana_jpg_address_b ),
	.wren_b( hana_jpg_write_enable_b ),
	.data_b( hana_jpg_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( hana_jpg_out_a ),
	.q_b( hana_jpg_out_b)
);
defparam hana_jpg.width_a = 8;
defparam hana_jpg.widthad_a = 13;
defparam hana_jpg.width_b = 8;
defparam hana_jpg.widthad_b = 13;
defparam hana_jpg.width_be_a = 1;
defparam hana_jpg.width_be_b = 1;
defparam hana_jpg.numwords_a = 5207;
defparam hana_jpg.numwords_b = 5207;
defparam hana_jpg.init_file = "hana_jpg.mif";

reg [13:0] hana_bmp_address_a;
reg hana_bmp_write_enable_a;
reg [7:0] hana_bmp_in_a;
wire [7:0] hana_bmp_out_a;

reg [13:0] hana_bmp_address_b;
reg hana_bmp_write_enable_b;
reg [7:0] hana_bmp_in_b;
wire [7:0] hana_bmp_out_b;

// @hana_bmp = internal unnamed_addr constant [3 x [5310 x i8]] [[5310 x i8] c"\BC\D1\BE\99\8Fg\95\C0\AC\9D\BD\C0\A4\C3\BC\B5\C1\A7\BC\D2\B1\8E%\0A\1F('4 \1D\22\0E\0A\12\0E\1A\07l\B5\BE\B5\7F[cI$\0B$B]ZA3 $#&58#\19\19 1)6 \1F\1F\22\18\19&+ \0B\09\0D\14\19\17\11\10\12\1E\19!-$\1D\A6\C1eZ\AA\81\92\D5\A9X\91\C7\CF\A5\89q\C9\9B\8B\D1\BF\C9\ABg3\1D\11\09\1D+!$\18\0E\18\18\04l\B9\B4\BA\BC\B7\C3\C0l0KgUE1.7,*23)\1E\12\0E\1E006\22(&$\1F\1C47-\0F\0E\10\17\15\0F\0B\11\19\1F\1A,I\22'\91\84.\B5\CD\D1\BB\AA\8C84\8Ez\B0\C6S\9A\D7\C8\D1\B8\A4\C4\AE\807YL\1C&/.#\1B'\1F\10:t\89\A9\B8\B4\AF\A6xI[aT $>:()0- \14\0F\10\0C\1B\18$(\10\22\18\16!=A7\12\15\16\1D\13\12\0F\15\1C!\1D0K$&o\0F>\E2\CF\BB\CD\BC=\02\0D\1F\09i\8C1\18\BF\D1\C6\BA\B8\93uY:\8A\B3\87>43\17\14\22\1C\1A\0A*p\97\9D\8Bzq6OT`.\13 5:(('&\15\15\11\17\06ne\0E\12\07\0F\1B\07\1B@F?\16\1E &\16\08\0A\12\14\1A\1B+:,(\8B\8C\81\9Cq\B1\D7\AEoe$\0E\14\8BbjQ%a\DF\C8\D9\95\99\94\83F\92\B2\AC\83P\0D\11+\10\12\14\18b\82\A3\90UGQNXD\1D'8;1()'\14\0B?P\01Y\B3\BA`\00%\0F\15\14\1B@LI\1D\1F!+\22\0D\0C\13\10\10\0E\1C&<2\B3\C4\D9\847y\D5\B4\B1\B7\AEf\A1\B6\8C\93\C5\CE\A4\D6\D9\AF(\8D\AE\B7{Daw{~1\15'\11\17\1C\0E{\95\C2\C1_KIF?;207:*06 $\0CU\9Fn}\B1\BB\89\196:7\12\13;ML\22\1E 0/\22\12\0D\0D\0C\05\0C\1249\88\86\AF\D6\86\A1\BE\8D\B1\BD\8D\A4\CB\B3\B9\90I\8D\CE\94\B5\C0qE\95\B0\8DtS.epO\1F\19(\1E\1A\0Cb\A2\C3\D7z7A=D@.DACP8$,/\1B7\B1\C8\AF\A9\B2\9Cr~k=.2<NL.*0;:-\19\14\16\1A\13\13\0F8:)r\C4\C3\D0\C5\BA\B0\AE\CCy\88\D0\CD\C9V\0C\BE\B4\B1\94\B2\DD\91a\92\88\99\A9\8A\93\BF\A79/\A8|!\056\BD\B4\C5\BC\88D6?2NSJPZ:,<-,\12\80\C2\B0\C9\CB\C4\AF\8Ek=,=JVS>@GH??7941'$\18=9\13K\C2\A5\A8\BA\C4\BB\CB\CFVA\82\C0\D6\B8\90\AE\B4\D1\93Llt\9B\9A\BB\AC\B3\B4\BB\C7\CC96\A5\7F/ZC\BD\B3\AA\D6\C3\9Fg( @aB55CM./'\0A5z\97\CA\D5\D6\BC\A1\91j<:N]aefVUG927664+(\15\16q\0B.Bh\8C\A4\A7\B1\D2Gsi\BE\A3\B5\BB\B8\8E\B1k\CF\80qy\9C\99\8F\A1\9A\A5\B6\B67-t*4x^}\B4\BB\BA\C7\BF\BAN\00+`vR\13LLG7\1D\09\08;o\A8\BD\CD\BB\A6\8Ao2)7L^kte\5CH32/'+%\1D(\19\1BdD3.8Q\5C\98\B0\CAG\8E\CF\C4\C5\90\B5\B5ixO@\B3pfa@?3^\B4\A4\93%D\A9^da\8A\01D\B2\B5\AD\A6\B6\A33w\A5\BB\BBA'ORG\0F\0E\0A\0C@\90\B9\B0tF<)'\19\17+?VnndK1\1B \1B\12\15$%\1D ]>\22\1FG>f\AF\90j:\C9\AA\BF\BD\A7n\AA\AE\86yT\A1xU>@+\09N\BA\B9\AA\14d\B4\9F\B0\AC\BDdj\A9\AA\99\B4\BD\BB\BF\96g\8A\9B}1M=>H\17\12\15\1B'RP55GT:!\04\12#?exkF'\1C\1D\19\1C\18 !\22\1Fb; \11\22\1CEy\1A.L\ACk\13\8E\99\88\92\D6\A5\BB\CF\B3~?Q&-&a\AD\B8\9B\18d\CE\B0\C6\CE\E2\98k\81\99\92\BC\BB\AA\B3\B3|\9B\B3\9A]IAQB9\14:<$/8\191JZU,\08\0C\180SzxW%\1D\1C\17\17\14\1D\1F\17\14a3\09\0F\0E\10\17X %K0\12\11\18\C5\C8\AA\C4\BF\CA\CD\B6d8#\1Cq\5CG]VV\22N\BA\C2\B6\C1\B4\A5NVz@i\C3\A3\94\BC\94\96\96vx_IMKF?O_@R;\1F\14+F]T\1D\1D,>Npx],\22\22#\11\11\1C\14\17\1AU:\15\18\1D\11\0D\1F\0D\15Y\1F-\13\15\92\E1\D2\CE\B9B\A4\B7\BF\95<Bw4J7\8E\9E\14K\9A\A1\C9\93\8A\B6\8FzT\15t\AE\AE\A8\C6\80IN\A6\9FNI5$q|X\80\7FjB\09\17\14)JYA4>I?[ob6F=?<2\1D\16\19\1C%P\19\17\10\04\0B\16\0D\16V\1D\122\19\08w\A3\A0\B9\A1\9E\BD\B3\84wt'\81\AB\89\B4\AE\13u\C2\C0\C1\AE\9Fw\A5\B1\A8,y\A1\B9\C8\C2\A7RR\A2\A2J37\0Fc\9Cv\7F\B1\A3H\09\0D\0A\05%GMFm\8D{\85\89uIOESPRC/\1C\1A\0DM\17\12\0F\10\10\22!\15U\0E\00%,\00\B3\E1\BB\CE\D1\8D\95N9?H\81\9F\A4mas\1F$[\19]\D7ld\B4\B5xDR\A8\C3\C2\95\B9\B3\83H\83K7. =\90\96\81\C4\B6yWQ\06\05\14&8d\99\AC\CC\CC\C6\D4V A3;9;43,+\1E \142F1\13\1A(EdK2(\12d\C0hdiv\83\81*L#I|\92h\01\1CKb\C5\A6\B1\D4\C9\AF\AE\C0\8Ec!W\D8\BD\C1\D1\B9\BC~~\5CV:#\1Ct\AE\B5\BC\B4\A6\88V\10\01\00\06\17?g\88\AE\C0\9B\C6\AD#\10*3(&:+,\1A\1D\19\0E%K#;\13;=e7QO\1D0VmQB\BB\8F\B6\8E\0D\02'N\90i\1C\22T\1B]\FD\A9\F2]\D8\A1\9B\C2\E7\8B\07[\CD\CC\E2\B8\DF\EA\BEp\5C+%\14\84\C2\C6\CB\AE\8A:\07\00\1Afn[yx\84m\AB\A7\A5\D9\B0RMD3\16&,,\05\16\1D\1D\07c\1E\8Be5<d\87L@ $36Wo\93\F0\BA\AC\CD.\00.\15\0B>%-\1A\00.\C2\BA<\EFb\8C\C0y\13\B2\A4^\B7CW\C2\C2\C4\BES\22 8U\AB\B6\AF\CE\99=\01\06@\A1\C6\B3\AC\B3\AAp\A2\DD\BF\B9\B5\88ZV9\1D\1B,+5\14\0C\12!`8\9C\8B\84=/uqe$\1B\05?\A6{\15\A3\CF\E0\B4\81\D4\9F\C1\CD*\143\17\1B\110\F04\B1\B1\95@\01\8C\BA\B4\CC\D3\D5e\BB\C6\96:p\81V7?MJf\92\9Ac50\1CW\B3\B1\AF\B2\AFt\86\9D\B2\C1\B4\94}U\1C\14\12:;\1F+\0AG\B1\92-\99v\B8\8D3\1B8M-\1EH\91\9FZX\A8\8E\B7\D4V\AD\CC\C9\84\00!1\15\09\00}\BE=Q\B1_H\17\0F`\AD\D6\B4\E5\DA\BA\B9\DFH\92\A0\81V>NB]oqZIRJ\03B\96\BF\B5hxZtr}\ABz\84B\15\19\1B;<%!\0D\1A\C9\BF4\AA\89\BD\D9\D0\98\1Ao(\0A\94\A9\A2\99\86\CC\CB\AB\92=e\CA\8E\00\09,6\13\0C\00$\A7R\1C\D9{f\0C5\17\00/\00\C3\C2\BC\AC\B0\AE=e\9D\88m(,}\92\93\80MaqS6\AC\BE\A5\9F\BFUA?!-?<!\15\13\10?=\22390$\89\18zZ\E6\C2\D2\BEP*3\12\95\D3\9F'{\AC`?\09J*\94\E0w\0054\1E\00+\BDu^%\9F\9D\D6g\16\1E\0D:<,Cd\A8\A3\B36\8B\DB\C1qD\8C\8F\8D\A5y~W\92|_\A6\A7\82\9C\BDl*+)\11(\1E\1D\17\13\12=<\0D#^z2u\CD\AC\93l\DD\BA\B7\89&%\1Fj\D0\9C\12\AF\E5\8B\00irc\0C\92\8D\A24*\00>\B1\BA\88^ {\92\D2\C1l\A8\91\08\C1$=E=\A6\9C\CB\7F\C3\E4\92\A9\8DZ\88m_bZ\99\8FVRa`c\7F\84&.$\1E\18#\17\19\1B\0C\10\1E\0E\00\04\16r\99\9E\AD\BC\BC/p\F8m\CD.\22O\B5j,\B6\C9\8D\00\96\AC~\AA\A0\86zk7\CCm>\98\EB\5C&\86e\B7\D9\94\98\9Fs\BF\B0\9B\90_>4\BA\92\D8\B2\FB`I~\8A8a7gx~I0\2290\8D\8A9!\22#\17\16\1F\1C\14\17!\1E.\01\13\1D\1B|\A4\AC\CA\DA\B0d\18n\BD2,%c\1D\1Fb\A40G\C5\99\CA\A7\9C\C4\C08\80\D9\AF}\991j\0F\80\EF\B6\C3\AB\5C%nVv\94b7\22\1E\150\E8\D1jWk\AC\1EGVXH>1B.@PDLo-*#\22\1C\1A1+\16\1D  \90)\00\15\02\00X\A0\A7\C0\A8W\00\A9\EB2#\16\0Cb\00\17=\00G5\F0\90\CE\B2\BC\E1\C8\A7\CE\DFv\0CKm$Q\E1\C2\90\B6I  p\A7]2,\1E\113+]uqI\D2\A2cWWA\22\22\16\15#Hgc:8/-(\1A\1E\22>9 %\1E\1E\B7p\00\08\0B\1A\00w\CD\94\D2\00<\E1S:#\1E\06%=\07i\1F$\07Y\E5\AB\AC\C3\DB\D3\AF\B1\DB\90J/j%2\C2\BCdS\19@1\BB\AF\84\19+\19 0\1EJlZ\8B\D2\C5\83jO*V@#$&D]Wg6W))\15\18\1D=:&7\14\1E\91L\05\0A\02#\00\91\BF\D7;\05\96\B3\89.,\18\09\18F>\15\0BA\8DW\7F\AD\8B\A9l\D4\B5\96\C2\CA\9AR:P<Y\8DT\00hh\1AR\A1U\0C\10<LH\02R|a\A2\F1\B9t\91*1XD*\14\1BAUdO]:L\1E\16\15\1C=:%A \1Cc(\05\09\0B\17*\DC\C4\FF\00\1A\E2\A4\82n\1D\1F\00\1FF)%'f~\9C\D1\9E\D7\F9\E2\DE\C3\E8\E2\CA\A3]?T3\83\9D\00\8BKr;\0B|^\1CEna/,\91hc'\B5\BC\B9\B76\12'.C-\07g\A3\86mMK(\1A\16\18#>@%2 \1F\87h\0A\02\14\14\1A\00\1E\0E\15O\88le&8\16\19\1FA=\0E\16;w:RbJ)\9D\C8HR\DA\9D\A6yRq\11\9E\D1\92\7F>~8\07FbaIIb\04\A6ju*%\01\B6\CB\B2<\1E\19-7)\16@\B7\C5\B4aB'\22\15\16(8D,\1F\1F!U >\00\14\11#,\13\17\00\93\D0IU\0EF\09$%:N\17/\04\0B\14\03>A\12\92\C5\86o\C0\DF\BA\A0\7F}<\AB\D2\D4\CF\A8\AE\90\BF\00\94x#B\1DO\B6_G\19^rG\A6\BF\93`\18\14/\1F'(p\A8\D1\98M'\11\0C\1D3AJ,\0F\07\15QB\0C(\00\0DZ\18\13#\01\95/\5C[\07D\0A,\1C\1C_\00\A0j\0E\1D\0CE+\15\F5\BFz\C3\E5\D1\CF\9Ba\8A\FE\AFv\F7\D9\D9\B7^ksBf\8A\0D\10\9C\80/\16\0F,\A2\8A\9B\A5\A7\ACX\03#\1F\87\86\B4\9B\C0\BE\A55\09\11\1C5KNF7\1E&9q\07!\0A\1FE\17*\0D\1C\08\017\1B;=\1B)!\0D%(\84\8F\08\16\10,XTH\98\A8\AC\C1\93\C9\B2e\00\E0\E7\FA0\03\C1\E9<N!\9F\8F\D4\002\00\09\0BK'AC\C6\C8\918RO\142S'i3F\B9\D2\D0\BD9\0F\19);HPp\1F$@ra\00\18X\95\1C\0F.\10\096>\01\00n?\10\1B!8\17\11\00+.B>\0C\7F\A7\BD9\FB\E3z\02\00\07D6_P\F7\A5\D4@o>\DB2\7F+S8$\111B{oy\91\7F\AF\BBT`_\0F!8\82\82\CE\A8\BB\CE\B3\90-+\1B\18Knz#\1D^IK\86\0D\22PJ\0Byo-3\1D\22\BE\D5z\11\19\19\0Bns!,B\0A+\05Bs\859J\F4\82\00#\10\14Y*<\E6\DBN\C5\EB\8B\93.\0AzuoZ68CR:\10\8B\91\9E\D2g\12%0# %\09!#x\A1\AFyD.\0E\168gzG\5CWS\00\5C\7F\14,\0Fv|yP/S\95\8C\B6A\11\1A1Af\BAt\16\82\0D\00?(7\18e\0A\1C\82\02\15.\08/:z\FB\13j\D0\B4\D4e\067\5C>}AY'\22\1E\02!oVw\D5\00\A3]\11\19#\1B\1B%#?i\AA}2\18\02\10+RNbaX\12\1B\00o|\17\22\8F\D7\9C\B9\9F|n\5C\A1@\16\0F;BAN9#\16*\0CX\00\17!wS+\00\12 6\1627\03%\9D@\00\0B\92\16BcD\5CNF\A7\1A\18\07\0C,<\05W\904\C2\AAU\19\1C\1E\0F\19\16\155|~R6\0C\1C$8=gk\87\0D\19)\18\8E-\1C\13\F3\CA\BA\AA\EB`o\8CP,\08#\15d\14\0F\09\00\0B%\00\1F\01g\8Ed\00\0CV(h>\0C\14023\135\8E\13<TdC?]X\02)\16\16\1C*2(,#Vx\8Bw9\12\14\08\02\12\16\07&3C:<[&0Gjr\A8\F8F\14)\00\138m0\D1\BD\9Cy\FB\AC\CAu\82s>\11Q\10+\BF\A5C\02\120\B2\A0r\00\8F\CC\BB\A9+($.#N9\06\11V\B4\1Eg\1C\17sb>\14A:7HVRQPA\179\5C\9A@aN:(!+['\19\0A IH!18\0C\00N\8C\BE\00\5Cl\12\0D\8B\C4\C7\D7:J]\D7\AD`:U_\151R\00f\DB\BE\96\03\97\7F\9E\9D\00\CD\DD\AD\BCg+0$H[{k8\09]\02X\0EQ`I<\14>-6D)9\1F\18<Z\084S\81\C3\81]NX\83lh4\1D/YM34T\01\03ZF\82\01\8A\C1\CC\85\9F\AF\B8\DCMg\B6\B9\D1\83h,0-\1AJ\16\00\88\DF\BB\B4\A2D\E291\A9\98\D6\D6\B2\152,<5Qg=& \162\02C\AC\B7\B1\1B#\17\0F\0ErP(-\1C\0C\09V\AC\AF\B7\B7}W}X\82Z;\12AoN%\22<\01\05\0C\1E\08\11\17|\C4\DF\D4\92y\C6\E6\E6\A2\D4\83C#'\0E\1E\11&+\BA\C0\B3\DA\B8\D8\F9\1E\16\05+\AD\A5\9C\005\05:4Dg\1F)\0E\10P \0Ec\F8\C3Vh\BC\CAWR\B6\8CY\14\12\12/0l\E1\B0\C6\CEbauZG)\0E*c5\1D\1C)\07\00\1Ff\1A6\09\00\9C\C5\E3\C7\CB\C8\EB\C2\8A\CA\9F\0E/ \004$\0Cl\96\A4\B3\B3b\9D\CF\01\0E\00gv\98\9F\00\22\99`M\7F\12\04g\13\1AN@\A1\E54\00\00D\A9\82\E7H\D0\C5|\05.]/GT7\E5\CA\CCaq\96\9A\88\8A\84}4I\16K)\16\00YK8IL\88q\E2\B5\86\B0\D6\D6g\96\87\D5\00/\12\05\0F5\18\1C?\7F\C6\C5\AB\A1\DB\CC\1E\00u]n\9A4\95^g\8F\91\00\7F\92}C\B3\B4k\00\09Y\C3\00\D1\9A\8C\C3\97\EB\A9\02-1G\9A\94\B0\BD\DAkG\BC\C7\97K5PJ2D\15D8\04\0B !M\87\C5\C0\B4\93\CF[\93\8D\C3\B6ad\93\01,\14\0C\0D\08! \19\1ERs\96\D2\C0\DF\D6\00-\C6\B1\B9\DCW\5C\844\A9\BA\9A\A6:)X-\14\18W\FFR\A2\BE\E6\D4\C0\C1\F1S\13.>\81\B4\A8\B6\E4\EDe\07\AE\BF\AB\A4mC\0A;<\1B\1F6\0F\0CU\1F\89\5C\AD\CA\C0\BC\EB\1A[\DD\9F\D0\B5\18\0B\13\0C\12\04\0EA\19(\1AnL\86m\CB\C0\A0\ABC\00\F7\C7\D4\F1\A6\8D\8DJ\1C\D9\CE\BF\0B@0gd<<\E6{1\83z\AE\D7\00wh\00k\88W\5Ct\82Ob\F9\82\CF\D5\A0\00\00\13!:M)'?\11\12WHxYJ\DE\DD\AF\B6\D3\DF\AB\E1\C1\88\08\0C\0B\0F\00\0D\01R\19\22-\AFP\9B>\A3\A2\85\00\8D\AC\C0\C8G\92\F8\C3\8C\B5\F0\9D\D8\D3\02UqY\1A\A0\E0\A8\99aQ\C1*\C9\03\D1\BEZG\81Y??j\04\04\D2\B1\D6\9C\EC&\0B\07\19_`)1=@\816|g`_\B9\12\93\D0\B8\A0\B9\A8\D1\00\0F\16\07\15\1A\1B\15\04\1E\18\8D\A5\BCm-~y\8F\B4\BA\C1\E7\A4D\08\A4\C1q|\8D\AF\A8\E3~$4\00\A0\88\BB\CBj\AAR;8\CB\E8\AA\98b*,Ob\849\0BX\C6\C1\ADV\A5\F6?!\0CI8*)1z|miQT\16HA\94\C3\DC\B8\D3\87\CA4\00\0E ./,\19#\1D\19&D\089NY\87,\8B\A5\BE\AA\CAY\C7\C1\C8\88\80\9Bb$\C5\EA:\00%Hr\EF\A15\00\13\00?\A3\9A\B8\96Ybhf{J\07Y\06~\E88\11>\C6uiC%\1C+2\1C\83\8D/\1C#[F#\10\16\CE\BCAT\C8\8Em\1A%\15\06\1D\05\1E\0F\11\1F\0B\0B+>&\08\14^f\B2\A1\9C\92\EB\AD\9D\87ob\18'#&\D4s\000?\14\EE\00\05\0C\01\12\22\86\8F\CF>Ua}\9A@\004\09#:d\16\13\19f\D61. 74.1\8C\89;\17\08Wn\00\17\02\1A\A2%Y1\BEvO\03\0B\11\15\15\0B\15\04.\11\17-3.\1A6\00\0D\FE\E9\B8\D0\96\F0\A8\90S\08\04\EC\CC\06\B8\00\22;4\0F\00\19-\03\0B7\1Chv\B6\1BD^\9E\82\0Av;\1E)?\15\12+,\0B`\07,33-35m\93D\00\01\00[A\07\0AKoJ\18\C7\8F\8Dc\00\0A/\0C\16\19\10\10&\0A\05<Y\08\15D\127\EB\DB\FF\C3k\FF\D3\C0z\0B\A3\A6\B2\17L#!O\190\0E,\0D\0D\13\07\1A<GS\1B3\85{\00]h\13'  \1F\00\02\15h\06\8C+# *!6\88\90\13\18\06\00\02/\04\13EXb\84\DB\C7atS\00\12\12\08\14\1B\0C\0E\0D\14C\04\0C/\09\19\10L\ACU\17\19b\C4\B8J\13\B1\8D\DA\F2[\BB\80Uk\D8\5C\00\10\0F\0B9U\125\92\17VU\03X: 3\1D\10\0A*\C8\9B\A8$a\15\16\1B\1D1*\1D\98\9D\1A\0B\0F\0A\0C\0C\0A\19PPM\1B_\A1sh\15\11\0C\0F(\0E\12\0D\04s\D4m\C0!\1E7.\1B\0FO \DE>\08\06\8F\A8\A0\AC\B2\B3UUA\CDx7\89\D1\0B\0E\00Mx\22'K1)4\12+[C\0E\0F\06\16\1Ak?\1C\00' \18\1D\14 \1F'-\98\9B\0F\0D\00\00\0E\0C\04\22>5]8I\06'xn\00\10\00\00\09\0D\00 \BC(\CF\F3\E2\00\06\0E\14`/\18\B3\F8+\06V\DC\96\B3\CF\A3\A2\8A\CC\D2J+\C6\A6\BE\D3\AE\074'\228\1E\1F\0B3?7;WSF,2\1B \22# &\1F!\1A;9-4CI\00\00\06\03\0B\08\02\05,#\AA3L:\8DR\0F\00\00\10!<\05\00<\AE\C5i\E2\F4\F2\00\00RA\1B\10-\A4\00\00\83qqH\D7\BF\CD\AE\C7\D0\89\00\CF\AF\EA\D2\F0:#\1A\22\19\14\0C8<\12\16\16\1A.B^OV\1E\10\12\1D\16PM9\1E8&-FL[\02\04\09\12\01\03\04\00\00}c\1A\02\00\00\07\06\06\1C`>\04\16\1F\1D\F9\F9\D1\A4\EC\EF\A4\CE\AE\07B\A8\00\07\8C\00\C1\EF2\DA\B9\97\CF\D8\AD\BDK\DC\CB\A8\E0\CD\80\00'\14\03*34,\17\0C\0A\0A\14)\0A!\22>D\19\12NVUEQ1%#S[", [5310 x i8] c"\BF\D5\C2\9B\8Fc\93\BC\AF\A1\C1\C2\A4\BF\BA\B1\C1\A5\B9\D3\BC\92/\12\1F&$5+!,\16\13\1A\11\18\08k\BB\D2\BE\87^aJ#\118TjbMC.( 8B@/)'$.*7!!%&\1E$',!\0D\0F\11\1A$$\1B\15\13\1C\15\1B&1'\A7\BFbW\AC\88\96\D4\AAV\8E\C4\D1\AC\8Dp\C8\97\88\CF\BE\C6\ADj2\19\0E\07\1C(#'!\18\1D\18\01j\C1\C7\C3\C6\BC\C3\BDj8^vZI=?F4-A8-*#\1D&36;$/2-&&:</\16\1A\19\1E\1F\18\12\13\17\1B\13%A'(\8D\81/\AF\CA\D9\C2\AB\8855\88w\B8\CDT\9A\D6\C7\D0\B6\A2\BE\AA\806XK\1A$)*.&/!\0D?\83\A0\B4\C3\BC\B1\A3}XrjZ'0NH.)93' \1F\1E\12\1B\1B*/\1A0&!*@G>\1C#$(\1C\15\12\16\1A\1F\19.H\22\22p\0C=\DE\CE\C5\D2\BC>\00\0C\1B\08s\911\17\BF\D4\C5\B9\B6\8DnX:\8D\B2\86<.,\22\1E' \1B\109\85\A2\A7\90~r<^ik; /EF)#23\22$!#\07id\10\17\10\19&\11%?HD\1F(+0 \0E\0F\17\18\1E\1F/@&!\96\8C\7F\96q\BB\DB\A7ze\22\08\14\95fcQ$e\DC\C2\D1\8F\95\94\82J\8F\AC\A4}L\19\18.\12\14\14\1Bj\8E\AA\93WIQQ`W,7IH5'':#\1BP]\05X\B1\BC`\00,\19\1D\1C\22BLH$))3)\13\14\1A\19\1B\19'1E9\C7\CA\DB\88:|\D3\AD\C5\BD\B0j\A4\B9\8A\8C\C4\C9\A5\D1\D8\A7#\8D\AD\B2|?`ov~=\1B(\13\19\1C\0E}\A1\C8\C2aMIFA?4>JG022$&\1Ah\ACt\7F\AD\BC\8D >@A\1C\18<QS*$*:4'\19\16\17\18\11\19\1F67\9D\90\B5\DC\8C\AB\C6\8B\C6\C7\93\AA\D1\BD\C1\8EJ\8C\CB\92\B7\BFsE\96\AF\8ArU-gp\5C%\1A*\1F\1A\0Db\AF\C9\D8|8A>DB3OKGQ8#.4&A\B5\C9\AF\A8\B2\A5\83\8CtH:9<W]<3;GA1\1E\1A\1F$\1D\1D\19438v\C6\CC\DD\D6\CB\BB\BD\D0{\91\DD\DE\DAa\0B\C0\B3\AD\90\B5\E5\92`\94\87\95\A5\8D\9B\C0\B5@2\A9v\1C\053\CB\BB\C8\BD\82?6<'MYU_a?61,2\1D\8F\C9\B5\D3\CC\CB\BE\A2{J8IK]bRPTTK@9=;81+\1F61\16O\C6\A7\A8\B6\C2\B7\CE\D3ZC\82\BC\D4\B4\90\AC\B1\D2\9EPv|\9B\98\B8\AD\BE\B8\C5\CF\D5A9\A3\80.`W\C6\BB\AD\D4\C4\9Em<2MiNECGJ@</\16E\88\9B\C7\D6\D7\BD\A3\97nBEO^bglZ[RF<<740%!\22 r\09+?j\93\A8\A6\B2\D0Dpk\C5\A7\B4\BA\B4\8B\AFj\CC\82tx\98\96\8D\A0\97\A7\B9\BFA2t'2\80q\86\BE\C0\BA\C4\BD\C2a\0F0d\82c\22TOV<!\15\19Jw\AB\C3\D2\BD\AD\96x93=Q`r\80ncR<91%'\1E\16 \1E\1C`A4(5Yc\99\AC\C7H\88\CC\CC\CC\91\B5\B4hwM>\ADlf`?>1\5C\AE\A0\9E0L\AB[ip\A1\0CO\BA\B7\AA\AB\C5\BA<}\AC\C7\CBO-O[M\16\1A\1A\1AF\90\BC\B6{PJ72\22\1A1F`||oT4\1E!\19\10\11\22\22\1B\1C^;!\1BFHk\AF\91g9\C5\A9\C9\C2\A7m\AA\B1\85xR\9BqT>C*\08L\B4\B2\B5\1Ei\B8\A0\B6\BB\D2ot\AE\AE\9A\BA\CC\D0\CA\A3t\99\AB\892HHKU&\22!\1C\22QR:>Q_D+\03\14(Ho\83uP-!\22\1D \1C$'\1C\18m;\1E\0B\22&Ir%.J\A6k\1D\92\92\88\91\DA\A2\B5\C7\ADz?P** Y\A7\B4\A7\1Fg\D0\B2\C6\D1\EA\A4r\84\9B\94\BC\BE\B2\C6\C2\8C\AC\C0\9E\5CGT`RJ!>;\2218\188Tb]3\0A\0C\177]\82\80^+%# \22\1F(* \1Bu9\0B\13\11\13\15Q4+M4\15\14\16\BE\C7\A5\C5\BA\C9\C5\B1d7\1E\1Dl[?XVb(O\BC\C4\B6\C1\B6\B1TW|Bi\C3\A5\98\BE\A2\A9\A3|z[MOYYLUa<S?&\1C1PgY\1E!3FTz\82b1)+-\1D\1D)!\19\18jD\1B\1E#\1B\15\1D\22\1F_%3\1D\1D\90\E2\D1\CB\B7D\A3\B9\BF\96;?u6I9\8E\AB\1AL\9C\A2\C9\94\8A\C3\95{V\16t\AF\AE\AA\CB\8BSR\A7\9FMK:/{\80Y\80~jK\1A%\1D4V`A=OWHf{i:KCHF<' \15\154T\1B \1D\15\1C!\1C\1AX&\1FC*\13v\A5\9F\B5\9D\A1\C5\B4\83ys#}\AE\91\B5\BC\1Ax\C3\BA\BC\AE\9C\85\AC\B4\A9&t\A1\B6\BD\C1\AD]a\A9\A7T(6\15n\AB}\84\BB\A4O\18!\1A\121SNM|\A1\8B\92\95\81JQIZW\5CJ6\15\12\16[\22%\1B\1B\182*#`!\0B04\09\B4\E2\BC\D0\DD\95\98T:@I\83\AB\ACpg\85!\22W\1Cd\D9cv\B6\B3tGY\AA\BA\BF\94\BA\B7\89P\82J4-!A\96\9E\80\C3\B6y]X\0E\06\13%8d\9F\B3\D4\CD\C5\D3_'I:BAD@<36.'\1B9P4\1D%8LkR<+\1Ck\C0gcj|\8D\891L\22H}\98r\09,Ob\C6\AB\B4\D4\C5\BF\B2\C0\8Fh$W\D4\BD\C8\D2\BA\BF\8A\80\5CVA$\1Dw\BA\B7\BC\B7\AA\8CZ\15\03\00\07\1ACk\8C\B3\C2\9B\C7\AE&\14.5.,@33'+!\14&P)I IEk8VU+8^pNE\C1\8E\B6\96\15\05$Q\96h\1C6_\19[\FE\A7\F4Y\EC\AC\99\C0\E8\89\09W\C8\CE\E5\B7\E2\F0\C6xW-(\13\87\C8\CE\D3\AF\90>\08\00\1Cfl\5C\7F|\85n\AD\A7\A3\D6\AFRNE5\18(34\14#$!\03`!\9AtBCh\83IC/)6:Xr\9F\F3\C2\B1\D02\001!\0EF<;\1F\010\C0\BE<\FFp\91\C1{\11\B6\A4^\B5CU\C8\C3\CD\C5S  6[\AC\BF\B6\CB\9E=\00\04D\A2\CB\B0\B1\B3\A9n\A6\DE\C4\C1\BC\8E]V6\1A\1757?\19\0C\0E\1F`8\A9\95\89=+sqe1%\0AD\AC|\1A\A3\CF\EA\B9\86\DA\A0\C6\CD*$9\1A \1B3\F38\C1\B7\98E\0B\8F\BD\B8\C9\D4\D4f\C2\C9\9FCm\82U8FPSo\97\A2c40\1EY\BF\B6\B7\B2\AEt\88\9F\BE\CF\C1\9F\86Y\1F\18\17;>&2\12H\B1\93/\A1}\BF\954\1B9O5,U\95\A3ZV\A7\91\C5\E1Z\B1\CC\C7\83\00$5 \16\07\80\C5JT\B5jU$\12g\BA\D6\B0\E8\E0\BF\BD\ECR\92\9C\84\5CCROgw{^JTQ\0BL\9E\C9\B9iza||\91\BD\89\8FJ\1D\22&?@& \16!\CA\C27\B0\8A\BC\E2\D7\99\1Dr.\1A\A4\B6\AB\9C\86\D1\CF\BB\A2Jn\CD\8E\03\0D$8\19\18\0C&\AEZ\14\DB\81r\1A7\1E\027\00\C8\C5\C2\B1\BC\B0Eb\A2\8Bs-8\7F\95\99\87Oex]A\AF\C4\AC\A1\C3\5CKJ/;KH-!#\22AC$3A8,\8E\16}\5C\E6\CA\DA\C6U(6#\A1\E3\A1\22y\AFfP\15Z,\8F\DEz\02+4$\09?\BEwa\1B\9F\A3\E9{\17 \108@/?e\B1\A8\B74\8F\DE\BDrM\91\93\95\A9\81\84V\8A}k\AE\AB\8A\A2\BCd+72\1C4*)$\22\22CB\161i\8D>\80\D5\BC\9Cz\E8\CD\C3\94.5 k\D1\9E\1E\B7\E8\91\00jse\18\9A\90\A8F,\00:\B4\C1\8AU2}\90\CE\C4s\AA\88\05\C0%AKE\A5\9B\C8~\C4\E8\98\B1\8CY\88meib\9A\8EURafj\87\85%--% *\1E!$\18\19%\19\10\0B\1Dy\A3\A1\B7\C7\CC6w\FFw\D08)O\B4i-\BC\D3\95\04\96\AB}\AB\A6\90\82{;\CCnC\9B\EBX6\8Ae\B8\DE\97\98\9Bs\C6\B1\9C\93k@4\BA\99\D9\B3\FElK~\8D<e;lz~J3&=4\92\8C9\22#&\1B\1A!\22\1A\1D)%;\0F\1B#\1C\81\AA\BA\D7\E8\B8j\19s\C3@4-f\1A\22h\A30O\CD\9C\C7\AA\A2\C3\C0L\8B\D7\AD~\973f#\8B\ED\B4\C4\A9^!iXy\93e=*&\102\EB\D0m]s\B4\1FMZYI@1@/FTEMq-( !\1C\1B2-\18\1F'(\9F6\00\19\00\00[\AF\B6\CD\AF[\00\A6\EEA(\19\10c\02#@\04L8\F4\91\D1\BE\BF\E9\DF\B5\D3\E0x\0AOm;_\E6\C3\92\B4M  n\A7[8-'\183)]swJ\DB\A9`\5CW@ &\17\1A Mgb8<020!$%>6\1D!'*\C1u\00\04\09\1A\00\84\D7\99\D2\00:\E1SG-#\0B+>\0Ci\1F.\0C^\EB\AC\B1\C3\DB\E3\B5\B4\E0\9AM2n58\C5\C1nV\1CD.\BC\AE\85 .\22)-\1FIma\8E\DB\CE\88rO)VB%0+L]Vg8Y57\22#&A=*<\15!\98S\0D\0B\02$\00\99\C6\DEC\06\96\B4\8B6:%\0D\1CF<\14\0EO\9A[\83\AD\89\A8o\D7\B9\A1\CF\D7\9DYGS@d\9Aa\01ou\1AN\A4[\11\14IVH\00U\82f\A6\FE\C3|\9B.2ZK2\1E#KYeQdBV2($'EB.L$ d'\0E\10\0C\1A-\E2\C5\FE\09!\E3\A7\85t-/\0D(I)*+v\8E\A9\DA\A1\D7\FE\E6\D6\C5\EE\EE\D8\A5dGL5\89\A9\0A\8DRzC\08\81a\22Jzc7)\96ki,\C1\BE\BC\BD=\14+5M8\0Am\AA\88qTU3($$/JL5D\22%\89h\12\0A\1C\19\18\00 \0E\1DW\90qc)I\22)!<;\11\1CL\83JT]H,\A3\BEHX\ED\B1\A7{Ug\11\A4\E4\A6\80@\816\0BI^bRNf\02\AAmq+.\06\BA\D3\B6D$\18%85\1ED\BF\CB\B3YC3+ \224DQ;/%'a+G\0E\1D\13#-\1F\22\09\A1\D9KU\0F[\1A2(;S\1A0\19\1C\22\06?F\15\93\C9\86m\C2\E3\BD\A0|\81<\A9\D4\D8\D2\A8\AB\8C\BD\00\99\81*?\17K\B4^L\22eoA\A2\B7\94j \15.&# q\B2\D9\99L.!#*6FP4\16\17,VN\1A9\08\1Ae\1E\18/\0F\A6<if\0DW\1F:\22!g\03\A3}#+\12J3\1B\F8\BE}\C5\EE\D9\D2\A0c\89\FF\B1\7F\FF\DC\DE\B9^kqGu\95\13\0B\9C\80-\1B\1E7\A8\85\9C\A6\AB\B3X\00\19\11\88\87\B8\A2\C0\B8\9B'\15!&9II>-+)?~\15.\12-T\1F0\1A*\15\09E*CJ-8+\16+/\87\9C\1A%\1A5^[K\9B\AA\B2\CB\9E\D2\B7f\03\E2\ED\FF;\0C\C6\EA7O&\A7\A0\E3\070\00\0A\10S8PM\C4\C9\96>ZQ\0E'>(n9N\BB\CC\C5\A89\0F\1F5DOZv$*G\7Ft\0D\1E\5C\9B\1C\16;#\18<B\07\00}O!(*? \19\0B;?OG\13\88\AF\BC>\FF\ED\85\0A\05\0DC;cZ\FF\AD\DCFqA\E0C\92<]<&\146S\8E\80\83\95\8B\B8\BEVbZ\08\15D\8B\85\D0\AA\B6\C7\A7\8B$--'X\82\8B+$iUY\91\14 PF\16\85}8:\1B\22\BA\DC\84\22) \0Eqs(6S\1A2\08Es\84:J\FA\8C\0A2\1A\13Z*B\F0\E7]\CF\EF\90\9B>\19\8B\84\7F^;@SaK\1F\9B\9F\A8\DBo\17(/$./\12)({\A0\B0{7.\1F\17,`nSle_\07]\80\11*\07\84\88\82Q0P\93\84\BCO!.<Bk\B6z$\92!\0A@-3\1Bf\0A\1F\8B\10\228\0B0:}\FF!w\DA\BC\DCj\0CAdIzIa,((\0A,l\5C\81\E0\00\A4`\13\1F)%&($Bk\B0\82 \17\1A\14#UJlea $\03ox\12 \98\E5\A5\BC\9FxiZ\AAP!\1DC?AKB3!8\14U\00\14#}U0\01\16(9\1889\08*\A1H\00\0F\95\18FgC\5CEJ\AA\1C\1C\0B\0B,3\0Ad\9D:\C6\AEW\1A!+\1C\1F\1A\197}}40('%LOef\97\1E\1C-\1C\95/##\FF\CD\BE\AE\F2bv\94`;\161\17_\0E\17\19\08\193\00\1A\00i\92f\00\0EX*f@\10\16145\153\8F\13=XdB=ZY\02*\1A\16\1B(/1<,Xy\8Dw4\1B$\11\04\13\18\07!B-5TV\131Fbh\B4\FFO\222\00\139y;\DA\CB\A5{\FB\AD\DF\86\90v?\16T\11@\D0\B3F\03\173\B3\A4r\00\91\D0\BE\A9(,$,%R<\06\0ER\B2\1Dl%\1Ep\5C:\12@?@OSLMHB!A]\99G]F;2),Z.)!-LM'9?\1C\0DS\98\CC\0Aiy\1D\13\90\D0\D5\E8GWh\DD\C0uH[d\1D7U\0D{\E9\C4\9B\0B\9D\82\9D\A0\00\D6\E5\B0\C1i*3&Qc~p:\09]\00]\1D\5CfD<\14<2EO/4 \19@a\08.Is\C4\82aUX}bZ@-9]K.,J\0E\06`S\90\0E\92\CF\DB\8D\A5\BC\C6\E9Uu\C5\C1\DE\95w693!M#\0A\97\E9\C4\BA\A9G\E5;7\B3\A3\DF\DB\B3\1842F@Zl>!!\1B:\13R\B6\B5\AC\1C(\1F \1D|N)2\22\14\0BP\A1\9A\B8\BC\83_\7FRwE;\12G{W,,B\06\0B\13+\1B \1D\80\CA\DF\DB\9F\8C\D5\EC\EA\A8\D4\92S44\17%\1A.:\CA\D1\C0\E3\BF\E1\FF\1D\1B\095\B8\AD\A4\034\0A>>Oo'/\10\13U1!t\FF\C7Xk\C1\DBjc\C0\90e\1D\15\141+e\D5\BC\CF\D1dcpS;$\05,uD*0:\0F\06*r(A\10\00\9C\C1\EE\D3\D9\D3\F2\C0\8A\C6\A6\18@0\077'\0Cs\A0\B5\C3\BAe\A0\CF\00\0F\00m\80\A4\AE\07!\9A`S\89\1E\13q\17\1FVP\B0\F6C\0C\00I\B1\92\F6Y\DF\D5\8A\0F7e4JS8\F3\D4\D5iv\99\99\89\8Cw}EJ\0AD\1D\22\0DgWAJM\85o\DA\C3\92\B9\D7\D7d\94\7F\DB\0D?&\10\10:\14\22M\8F\DA\D0\AC\A6\D7\CF\1F\00xf|\A7>\98_g\92\9A\0A\8C\9C\85K\B8\BAu\05\14V\CB\08\D6\A0\96\CB\A2\E8\AF\0C84H\9D\96\B6\C3\E4vJ\BD\CA\99Q:>IJH\0DG4\0E\0F)/V\8A\C5\BC\AF\91\D8i\9C\90\C3\B2\5Cb\9C\117\22\14\0A\08\1E)))`{\93\D2\BD\E1\DC\002\CB\B5\C1\DFYb\869\AE\BE\A2\A9>,Z1\18\17W\F6V\A5\C0\EA\D8\BF\C1\E8X ;D\85\B8\AA\B7\E9\FAr\0D\B2\C3\AD\A5l%\04WG\1C3H\0D\07e0\8C`\B1\D1\C2\C3\FB+^\E1\A3\D7\B7\1F\13#\1B \12\10<\130*}Z\94o\C6\BA\A2\AFE\00\F9\C9\D6\EF\A8\91\8FK\1E\DB\D0\BD\0C@1kd;:\E3|1\84~\AE\D6\00tq\0Et\8AX^t}Xr\FF\84\D0\D7\A0\00\09\00\1CRH\16(>\09\08j[\84_G\DD\DA\BB\C9\E6\EB\B1\DE\C0\85\14\15\18\1F\0C\17\00[!+:\BF^\A5:\AC\AA\89\00\84\AB\BE\C7F\8E\FC\C2\83\B4\EE\9C\D7\CF\03WpT\12\9F\DB\A2\9AcP\BC\22\C8\00\CB\C8jR\8Da??h\0E\14\DD\BD\DE\9C\EC$\00\02\19[U\17\1D+0|E\8DucZ\BA\13\98\DF\C9\AE\BC\A3\D2\00\14 \12!'%\16\0C%\22\98\B1\C9w.\86\80\97\B5\B5\C2\E8\A8H\06\AC\C2l}\8E\B3\AC\E1\82)9\03\9F\8C\BB\C9n\AFW>7\CF\E8\A8\A0n27Zj\8CA\13d\CE\CC\B8^\AD\FE:'\19Q8#!,zxtt`]\16OG\97\CA\E7\C7\DC\87\D1:\00\14+982\1C)&\1F1O\11?Q_\90:\8E\A4\C0\AF\D3_\C8\CF\CB\87\82\A0k*\C6\F3E\06/P}\F3\A2>\05\1F\04G\AE\9E\B9\A1emtt\89X\15d\12\89\F4F\1FL\D4yyY6&,1\1Ex{8%-aC\22\14\19\D7\C5KZ\C5\8Dq\1D+\1E\10$\09!\10\1A%\14\152B)\09\1Dlm\B6\A6\9F\96\EC\AA\AB\8Esg\1B+$#\D4x\089J$\FA\08\05\11\0B\1B-\96\9B\D9Pcm\8A\ABT\07B\1B1Fq'''t\DDCF7I@8<xw?\1D\11_o\00\1A\0F\1E\A8.a2\BCy\5C\0B\14\1A\18\15\0D\13\076\1A 030\189\03\12\FF\EC\B6\CB\92\E9\AB\95V\0B\02\E7\C8\00\B4\00)?;\1B\07\22)\03\12;#t\80\BF-Pi\AC\92 \87K05J#\22A=\1B_\12>DA5:>h\99B\04\09\04]:\05\0EItR \C9\88\8Bg\05\139\0D\13\16\0B\10/\13\0F=V\05\10D\0D:\F1\DE\FD\B7h\FA\CE\C3\80\0E\A0\9A\AF\0FG\22%Q\1D7\164\08\0C\17\09\1ECO[-?\92\88\08sz!9,-,\0C\18'v\05\96=4*,\227\95\98\10\1C\0D\03\04*\06\1AB\5Ci\89\DD\C2c{Z\05\1F\15\03\0A\18\0C\15\16!F\00\02,\09\11\11U\B3R\0C\14]\BC\B9S\1A\AE\82\D5\EDV\BA\84Vo\E1f\07\0B\0E\0F:Y\1B?\9B+cb\11jN0>1\1D\178\DA\AF\B8/^ ),*7.\22\98\96\19\0D\15\10\0F\06\0A\1BORS!b\9Bsj \1C\1A\11$\04\11\0B\0F~\E2o\BC\17\1D5(\1D\1DX\1E\D68\01\00\91\B6\A9\AA\AA\ADNP@\D4{=\93\DD\15\09\00T{(1W;>A\1F:mW \1B\1B#'zQ0\0F3\22'4).',3\90\96\22 \0A\03\0B\0B\01.QHi>F\05$\84w\07 \09\09\05\16\06)\C98\DD\FD\DE\03\0E\12\13W.\16\B2\F7'\0AU\D3\95\B1\CE\A2\9E\8B\CE\D1E#\C5\A1\B8\D4\B0\06/\1F!3\18)\1B>K?;WQP<='(\22#\1E\16\1A!\160'\19\223D\0A\0A\14\06\06\09\03\0A;4\B86G;\8EW\19\09\0C\1D+=\0D\01F\B9\D1v\EC\F5\FA\01\02S<\1C\111\A8\00\06\84lrI\DB\C3\CB\B2\CC\D5\8C\00\D3\AF\E8\D6\F5?&\19&\19\12\14DD\1D!\1E\226JjWa)\18\1A%\11VZA\1E1\1E(FHb\0D\13\12\12\08\09\07\03\08\8Cl\1A\09\03\00\0D\11\11%fA\0A\1F%(\FF\FF\D7\A7\F2\F8\B2\D1\AD\09G\B1\00\08\9A\03\C0\F17\E3\BF\98\D8\E3\B9\C7S\E7\CF\A9\E9\D8\8C\06/\1F\07+>@7#\1A\18\18\224\16,.LR' RfkV[2$%HI", [5310 x i8] c"\EC\DE\B4\96\A9\95\BB\D4\DC\AA\B3\BD\BE\F1\E2\C9\C1\BD\D8\E7\9E\93\0C\00\1F>CI\0D\22\09\00\00\03\180\1C\93\D3\9F\A9pey^K)\05 ?=%\1F\13\19\19\04\17\1B\07\05\0C\15'.2\1B\0A\00\15\14\00+'\1B\00\00\00\10\00\09\03\00\01\0D\09\0F\1C\16\0F\B9\CCkh\B9\8E\AF\FE\BCc\97\D5\DE\B2\A6\9A\DA\BC\B3\F4\DD\F5\BCaD>9,;W2\1E\0C\00\170.\99\CB\99\AE\AC\B6\DB\EA\99B0=B1\0F\153'\1C\08 \15\00\00\0A\19\22*4\1F\0E\00\02\14\0E.5*\00\00\00\0C\07\05\02\05\0B\12\0D\1F>\11\16\A8z\0F\C9\F7\DB\D4\D7\A3.\15\A2\A4\BA\DF\80\B6\F8\E7\F0\DE\C7\EC\CD\9CXxkBIWM \15 .8UbX\A6\B2\AD\BE\CE\937*=4\06\0C*;<A\0C\0D\06\00\00\11 3.&\1D\00\00\00\00\0FSC,\00\00\00\00\01\00\00\06\0D\12\0E\22?\13\16r\1F9\F9\ED\BD\E7\E0@\12\086'k\A6U6\D9\D9\E4\DB\CD\BB\A4wT\92\D1\A8S\5Cb\1C\1D*,7\1C\1CL\9C\A6\93\8A\8EHA0C\05\00\08\142EK\0A\00\00\00\00\0F#\91\8E'\13\00\00\00\00\00i_@\00\00\00\00\00\00\00\00\00\05\06\16&\1A\17\92\AE\94\C2\89\98\DC\D3v\8774,rg\8FwLh\FF\F2\FF\BF\B6\BA\AAM\BE\DC\DF\ADm\15(M+*6<u\8A\BA\B2p_srk\1F\0D\1D\1D\1A$,*\02\04\01$/\00]\B4\C9|\0C\0B\00\00\00\00OhV\03\00\00\00\00\00\00\00\00\00\00\09\132)\A2\E2\E7\89C\81\EB\CC\A0\D5\BCk\AD\BE\A2\AB\E3\FF\BB\F9\EA\E0K\A9\CC\E8\92gr\A8\9E\9A95T,%>@\A4\9D\E2\EEzYkxhdmI\1D\1B\0C\1AAI_%;\80Pg\BC\C1\7F\00\17\1A\05\00\00AC1\03\00\00\00\00\07\00\00\00\00\00\00\04(+e\88\AB\CE\8A\A2\C8\B3\8E\BF\89\9C\CF\B4\C3\B6`\AB\E6\AA\B2\CD\80k\AC\CE\A5\8AP;t\96U=9912)\86\A8\E1\F7\8BJYZhNPeURUBM:Q<K\C0\CD\B9\D2\CC\8A;[a\1E\00\0FV<\15\0B \11\07\17\10\00\00\04\0A\03\03\00+-\0Fw\C5\AF\C2\B6\A9\BF\94\D1zt\C2\BE\B8e*\BB\C3\D0\B1\BA\DA\B0\7F\8F\97\B8\C6\92\90\DE\A4RA\BB\A6D\1Fj\BA\CD\D7\CF\B2gPsOm{W4QU@YLT\1Fd\B9\CB\DD\E8\D3\97eW/\12#ge;\15,9.%\16\12\1A\19\17\0F\09\000.CX\B8\A2\C2\E8\EA\CF\FB\DCL>\9C\EE\FC\CC\90\C4\D0\E6\80QSc\9B\B0\D7\C1\A0\B9\A2\B6\C0*@\BB\94Vx$\B1\A4\B4\EC\D8\C6\85\09\00\22D&!(8C\0C\11\0A\00!m\8C\C0\DA\D2\B7\8Cq]8\1DSY\5CPFIQ*+$&%%$\19\17\07\08\84\164Pw\99\C1\D0\C4\DDM\81x\CB\C0\DE\CC\D9\B6\D4\89\FB\91k\8A\BD\C1\B2\BF\C6\B6\B0\AA',\8CTa\8ACq\A4\BA\D2\F1\EC\CC3\00\18LT9\0FG>\1D$\09\00\007j\9A\B7\CB\B8\8CXM'\1B1J[QBCQ:))#\19\1E\18\10\1D\08\0A{:\14Bb[u\C5\C7\C0(\A2\F9\CE\DE\BD\D1\D6\88\97uc\DB\8F\82\82_^Y\81\DC\C3\90\1F=\B8\86\7FOY\00>\AB\C4\D5\C1\A4r\0FW\8B\A3\A7B;g.'\00\00\00\0DT\A8\CF\B2i-\0F\00\0A\07--4=AAG9\1F\0B\11\0C\03\06\16\19\0C\10`N\1D6e@\80\D3\93z5\E0\C8\C1\D7\CB\8C\C4\B6\A4\9Ai\C9\A7sXHI*c\E2\E8\AF\1Dl\C4\BC\C2\9E\99is\B1\BA\B6\C6\AF\97\A2mHrzuNp \15)\00\00\0D8J{i6\1F\1D%\0F\00-+$);I@\1B\0B\01\04\02\07\03\0B\0D\10\0Ei]37:\03J\9E!P_\D2\83\00\93\BE\AE\B9\DD\D1\E5\FF\DD\9Bex-YP\94\D7\D5\A3/\86\E9\C8\E8\F2\F5\A0\82\A3\B4\AA\DE\DF\BD\8E\A3r\80\92\8DaJ\1CA8\1E\00-@%>T&\17\18'!\00\17(%\16!GD\1B\05\00\01\01\04\01\0A\0C\0D\0BPQ\17\14\1A\18-p\0FCY5\1E\19.\DD\E6\DB\DB\E2\DB\FE\D9\80VT3\94mx\80r^B{\D5\D0\D8\F3\DD\ADn\83\95N\8B\F5\CC\BD\F7\AD|wXbjr\88d, 1IKX1\04\00\0B\14 !#\13\11\1F.>;*\11\0A\0E\13\05\05\0E\06\0B\0C2<\11\10!\12\17E\00\17U\171\14\1F\B8\F8\F0\E6\CF?\B1\C6\E5\ACZZ\8D1WF\B4\A42k\AB\B4\E1\B0\AE\BC\AD\9Ae(\8C\CB\D2\B6\E8\A1]]\AB\A9wWWE\85\8B]\8A\A8\840\00\00\0A\0A\166[\22\07&5<;?\19+'-,\22\0D\05\0C\0F\0BU\1A\03\02\00\00%\00\1BW\09\04#\08\17\95\A0\AF\D8\BE\A6\BA\D2\A2t\83F\9E\B3\86\D3\AB,\87\D5\EA\E4\C8\D3t\BE\C3\BBV\9C\BB\ED\E5\E1\CF_6\99\BD^PV7p\80m\9A\C5\C0W\00\00\00\00\0B-jUUdgwo[ *&86:(\14\0F\0F\007(\08\0D\0D#\15\0B\00f\04\00\22?\00\C8\F8\D0\E7\B7\88\ABTNV]\9A\85\9F\83g_77\89G\81\FF\A2P\CC\C8\A6rv\D1\F9\EA\BE\D6\C3\877\92\5C_W=M\94\85\90\D5\D8\9D]P\00\18\18!Z\88\9F\AB\C5\DF\CA\CFD\06\22\11\19\18\17\0E!\12%\09D5AH_)\14\13i\85Z4V([\DA\89\8D\88|s~!fDr\9B\98X\00\0FXb\C0\AE\D7\EC\DE\A2\BB\C0\89kGo\ED\D9\C1\EE\D9\D0d\8Cvr:@<\88\94\C3\D6\BE\B6\97e\18\12\09\01!Ov\97\B6\D1\A5\C1\B2\1D\00\0B\0D\02\00\10\0C\0A\13\12. 8J7<\0C0RwJPc\1E+O\7F{X\BD\BA\DC\89\06\14Qd\92\94B\10Q$`\F9\BE\F3r\C6\9E\A4\C5\E3\A0\08p\F0\DD\F6\DF\F5\FC\B9m\7F<9;\9A\D4\C1\C8\C5\82?\1C\13(~\81rq}\99\82\B9\BF\B8\F5\BDH/\1D\06\00\00\0A\0B\00\1C4,&}D\97S;Ss\A6ff,-IFn{w\FF\C5\B5\E3>\14:\00!I\10 \1B\00\22\CB\B0D\DAU\8D\BCm\1C\A8\ACj\CC[\86\C6\EF\CC\CB_78gY\D8\BE\BC\F8\97G\12\19G\B6\C5\DD\AA\BD\BB\83\A9\F2\BE\B6\AAt><#\0B\0B\08\056.>@7l^\A0\8C\9Eo]\8B}\8B(\1C\1FJ\9E\90\1E\C7\FF\E1\CE\8C\CC\B4\CA\F1\5C\1A]E&\008\FFQ\B7\DB\C3K\00\94\D0\D1\DA\D6\E2|\BA\DC\9EJ~\84cN>cRv\91\8Bo:2\1Be\9B\B0\A0\BE\B4v\85\AB\9A\B4\A5\81kA\0A\00\00?5\04+\15f\C9\97E\A3[\B8\98R3=e7\11:\A0\A6r\88\D3\B4\AA\C6e\B4\E4\F9\AF E[4\0F\00\91\CF8u\DB~N\08#q\A8\D6\C9\D5\C6\AB\C0\C1G\92\B5qB/U$\5ChVMB<(\001\8F\A4\A8ab8ca^\8D^o1\06\07\06&\1D\04%\05+\E9\CB@\AEh\C1\D1\E1\B8&{,\00\80\88\8C\A1\A8\E6\E8\96~\1CO\D2\B0\18&9G;$\00<\B6d)\EA\A3~\03M&\0C\08\12\AA\B2\9E\9B\8E\C6\16w\84xO\17\0A\95\B8\95f7@L+\17\D2\C0\8B\89\9E0\19 \0E\18% \07\00\00\00\19\17\00)6B.\92;\84\1B\DC\BF\E4\C8YM=\00\97\A5\AEX\A1\D0t,\0B\1C9\C5\FF\9B\10\1F(>\00\00\DD\90\84\0F\93\BD\C9<693C(\14PUx\90\BA?w\C3\CEb\14y\96\A2\B2XXD\B1\7F9\BB\B4av\AA\8B-\05\13\00\04\00\00\00\00\00\15\12\00\0Dop0r\E0\9F}V\EE\B0\B5\869\184\81\E5\B5\00\AA\FB\91\12\80\87|\00\8D\A3\A8 B\12l\DF\DE\B1\94\0C\93\A5\FF\EF\90\D1\C70\EAAMI,\B5\AD\F3\A8\E0\F4\96\98\9Ck\AA\91eaS\AC\93Qt\85fbx\97*)\12\04\00\01\00\00\00\00\00\04\08\00(7\81\9B\CC\C3\B6\A7S\91\FFo\FBD\19i\D6\93K\BC\B9\8A\00\B0\CD\A7\C9\A6vw^D\CChF\BE\FFq\19\93e\B2\E1\BA\B0\B4\8F\BF\CD\BB\A4ELN\D6\92\F5\D2\FFFW\98\94HpFo\89\88D:2H?\95\9BC\1C'\1D\02\00\00\00\00\00\02\00'\00(/.{\B8\AD\C3\CF\C5v+m\D13'\1EuG5d\CFVB\BE\AB\F4\BD\9E\EF\E6&}\E2\B2y\AE2\7F\00}\F8\B9\BF\C0]:\91g\8A\BBxI\1D\1B8A\FC\F8\80if\A95?[m]LIUE8UYa}E=?/\12\00\0A\00\00\00\00\00~/\10$!\19~\AC\95\C6\BFf\1E\C3\FF>,,\1Cy\0B\00S\07PK\FF\A7\DA\96\D2\EC\B3\9A\CF\DBj\15Au\0FD\E2\BE\84\BF?(,\85\BF\8C6Y&\1E?@u\A4uv\DA\AF\8DUaR5)+\14MFqtM?D,%\0F\0A\06$#\0E\15\00\00\B8\8A06!&\22{\CE\AE\FF+R\EDy>$8\11\1DR\10\8DQ%!d\DD\C0\B5\E7\FF\D9\D9\DF\E6wRE\87+\5C\F0\C7K[/]?\BE\BC\9B\18A!0>!W\83Y\A1\DA\D5\82[[/X?1\0C%5i\5Ci5e\11\1C\06\05\0B)(\11\1E\19\18vL\10)\1A(\14\9B\A4\D7F$\AE\B8\A18\1F\0A\18\1F^n@14\7Ff\86\C5\BB\D4\92\F8\DF\B5\C8\BB\AEc5tfx\93E\12yc\1Ag\91A\00\17\1EKH\17BhR\A9\D3\B8mv\1D*B\22\19\03\14&H]9;);\00\00\00\07,+\13,\0B\00B,\00\1A+#6\E0\A3\FF\00+\FF\B0\8Er\08\0B\00\09NK?DQj{\BB\A6\F9\FF\FF\EB\D4\FF\FA\C1\BBlQaD\AB\B5\00\A3Z\84\14\1DcN\004Ly\08>xXE\16\93\D4\DF\B9\1C\00\06\09\1B\0E-i\89pL(#\09\07\01\00\07$$\06\10\00\00H^\07\14\1E\1D=\07\00\04\12a\92u\880%\18\00.rc2*(y\0Ca\93pM\B1\B2<r\CDr\C6\94x[\05\BE\C4g\9FY\A4A\00.oR\196i\0D\92R\82\1B\00\00\BD\E0\BF\1B\00\06L:\03+M\96\9F\A1\80E\01\0C\00\00\02\16&\12\08\00\001\096\00\0A\22%\1D\00\00\00~\C6ZW\002\00\0F-?=#O\00\00\00\0BC0\1E\B2\B1\90\92\D9\EE\D0\B8\9BiF\CE\EB\E3\E5\C0\CA\A5\C0\04\85b\096\01d\B7c8\03Df+\A3\E6\99G\13)<\04$Ov\8F\CC\ADZ\0C\04\00\00\0B\1E*\05\00\00\00P(\00\0F\00\00C\12\12\09\00|*MD\01:\00\17\14\0DR\00\B4`\00\08\046\1E\11\FF\C4v\D2\DD\CC\E5\99b\8F\FA\BEn\F2\EF\D7\B8fk\86C>w\00\05\A4\80B\17\00\19\86\7F\A0\AB\9C\94Z\1942\8C\8C\A9\83\C2\D4\B6H\07\00\00\00\0C\0F\00\00\00\005P\00\1D&\1E5,&\00\06\04\1D6\0BPP\07\17\11\01!(\96\A2\00\04\00 TTZ\92\A9\A8\B1\80\BD\B3h\00\E1\E3\EA\1D\00\C2\ECoS \9As\C4\00;2\0E\0AF\0B1(\CF\E5\9A43,\00\11QDr/'\96\B4\AF\BB;\00\00\07\17&&R\00\04Oc<\00,y\994\1E\1F\00\00J_\05\15v3\00\0C%7\0F\0A\04\1F\123B\0Bw\A0\CC:\FE\D2g\00\00\01S7b?\E4\A0\C3:~F\D9\0Fb\1A\5C;3\19/\1F^^\82\94s\B5\D1UMD\00\05,\88\98\CF\95\A0\AA\97x\00\06\05\06:O_\00\03oU>\83\04-8G\1C\85b**(\0A\BB\F8\8D\02\05*!v\8BD?3\00<\1BJ\8B\A4Ld\F6q\00\00\003lD>\D5\C3$\AA\F8\8A\84\0D\02xe>g5)\22J8\00Zn\8E\C6Z\00\15-\14\00\15\00\14\10h\9E\A0T\00\00\00\090XrE?f]\0C|\82\1A\13\04\85\86\87p2Y|\81\D4B\07\004ag\D9\92\17x\00\02_)V z&0v\00\00 \10DV\8E\EF\00K\C2\A3\B5V\0CBq;\A50:\18()\17\1E\97Ri\C2\0E\C2q*\1D\1F\0D\087BS\82\AEl\00\00\00\00\18DK8(p\05!\14\89\9D0.\A7\CA\A2\CD\B9\9D\87h\A9+\1D\10NtM^A\0E\1D+\1F\8A\0B'0ob4\05\22\1BH%*F\0C.\AD;\0F\0E\8A\0B8r}x~I\9F\0F\0E\16EHl\108o8\D2\B7n9'\00\00\1D&\22N\9C\A9>\1A\00\00\05\19%(,j\00?H5\9DV5\00\CD\F0\D9\C7\FA\89\88\973\1E\00\180\88*\1A\00\00\00\1A\17C\17\7F\9Bs\14%nA\95V\19#GKK,b\91\11/@\80bTe[\00\1C\022;?:,\0D\1Bd}\8CyR\16\00\00\10\17\17\09?I\18\0D\18,\00\00\10!7\84\E1>\00\1F\0E\15)I\19\C9\A8\92\8A\FD\9D\B6bm{C\00]0\17\AC\90K\07\01<\D2\8C|!\A8\DB\D1\C1G\14.Q<]O\1E-k\B5\22X\06\00gFS\15E+!.J6NwG\004q\A7%^u@\0F\1C@h\0C\0C\00\01!%\01\0A\1E\00\00Mr\A8\00W]\00\07\8A\AA\B1\BE5;F\D1\A3=%MP\08-f\00C\C6\B6\87\00\93\93\A3\99\0C\C5\D8\C3\BAh0,3@V\91i9\11]\15Y\00>D>D\14Q.\0E1\0D.$\1E1B\0AJd\94\C8\87R6Z\99}{2\00\05 \0E\00\00\19\00\00V%l\00\A6\C0\BC\9A\9B\8E\A2\D8if\A6\CE\E4oV\1C$)\1A\5C)\00v\CF\AF\B0\A2V\DC:-\99\85\CA\D7\B5\0F3(,\22Eh@Y%\15-\003\91\C0\E4 \22\12\00\00WYE6\18\00\008\8B\AD\D4\C0y8Z:aX=\00#M*\03\00\1E\00\00\1B\0F\00\00+\9D\C8\F7\E3\83T\B4\FA\FF\A6\EC\8B7\07\18\12\1D\09\1F3\AE\A4\A4\DE\B7\D0\F2-\17\08\1A\9A\A0\8B\00D\06=#1b\0E#\1D\18N\00\00R\FF\C6ep\BA\A7:A\BF\8FM\1A(\13\1C\15H\C5\A4\CC\E4cNZ6+\11\00\05M#\0C\00\0E\00\000r\0D3\00\0B\84\C2\F4\D3\BE\C5\E2\CDr\C7\C2! \0C\11J,$\8F\A9\95\9F\C4x\A5\E7 !\17ie\80u\00A\ACzOn\00\00L \19?\1F\99\E3$\00\09C\9Aa\DFF\C0\94Y\00\22P\1C7Q(\C2\BA\C0T^\86\97ye@K\1B<\0E<!\14\00hUFiO\8EX\D7\C4\90\BE\F6\D9m}|\F3\00%\00\08/67:@u\A5\C8\CB\A2\FA\D43\1B\89QG{&\9Ds\83\A3\85\00`\84l$\A4\BAv\12\06\81\B2\00\C2\A0\97\D8\94\FF\A5\00\1ACf\AE\AD\B4\B9\CCXY\DB\DB\B0O$\0E\10\0C%\0265\00\008\14S\9B\DF\E1\CD\9F\E7N\99\A1\DD\D7zp\9B\003\15\1F?\141(\04%S\86\C8\DE\D0\EE\CE\0C6\CF\C1\B4\EEfT\93=\B2\CA\95\B8=!M##Qs\FFU\9A\B3\DC\E3\F9\DD\FF^\00\0DB\91\C1\C1\D6\EF\CED\0B\BE\CC\C4\C4\98/\00&\1F\00\00\1E\00\008\00\AF{\CA\D9\E9\D5\CE\00\81\FC\BC\DF\DE1\16\00\00\05\00)e/3\00`?{\88\EF\D6\B8\B8R\14\FF\DF\ED\FF\BE\9A\9Ca5\F1\E7\EC\0E>#S\80[Q\EE~/vf\CA\F6\15\7Fl\00c\96\5C]v\9BSC\F1\90\D4\D6\A2\19\10\00\00\16\1E\00\00\08\00\002$vod\EF\FF\A3\91\AF\DD\C1\FB\D2\B0\00\00\04\05\00\0E8V.\16&\A5G\9Cu\A7\B7\A2\07\97\8D\C9\E9X\A6\FF\CA\96\96\F9\BE\E9\E7\00Luj7\9B\F1\BE\94XU\D2G\C4\14\E7\E1=*]JeW\7F'\00\B5\8D\C7\C2\FF;\00\00\006\1F\00\00\000_\1Ca\5Cr\82\BC)\AD\B6\9D\95\CB\CB\D4\14)\05\02\17\16\0D(\00-\07\88\A7\B8_@y\88\A4\C9\CD\B2\ED\B1T\1B\B9\D6\84m\93\BC\B8\F6\8B%5\0A\B1{\C7\E1w\ABSEI\BE\F4\C0\C4Z\19\0F:l\7F,7P\B5\A4\98`\A0\E9$\00\00 \00\00\00\00VSlfAJ .9\B8\C2\D9\A8\C9\91\B0,\1E\06\1A(%\18\13\1D\11\11 >\00%HS{-\9D\B6\BB\B3\CEo\E6\C2\DA\99}\A4f:\E4\F25\00$So\FF\D0=\00\07\00J\A0\B7\E7\A3OMPPpA\00f\00i\D0\22\065\B3^H+\16\03\0C\1B\09B;\1B\22%]`2\17(\BA\C2CV\E2\9Dt,!\0D\00\12\00\06\0B\00\1B\03\00 )\0E\04\00Ke\B9\A2\A6\A1\FF\D7\8A\86vc\226:P\FF\96\0A>D\00\E4\009/\0D 'o\85\CE&@El\89/\00+\00\0E\1ES\05\02\16]\BE\0F\12\09\0F\00\00\00;70\1B\0CTs\12\0F\00\0F\A6)V6\D1n0\00\03\09\11\00\00\14\00\1F\09\0F)\19\08\190\00\00\FA\E3\C3\EC\A0\FF\98}O\02\0F\FF\D6)\E6\1E3XE\03\00\0F[%\1CT-\5Ch\AC\008I\95u\00g'\00\1D*\0C\05\10\1D\00M\00\16 \10\00\04\05RiO\00\00\00Zc\1C\0DVmC\15\C6\B1\A2f\00\02\17\05\04\03\0F\12\1E\02\005G\00\14F\14)\E5\D5\FF\DFc\FF\D5\B2t\05\AB\C2\AA(pD1z6/\00\1B1.#27;8B\00+wt\00BR\00\05\18\12\18\00\00\00R\00W\03\08\00\00\00\0B`g\17\0E\05\06\01H\03\0AINa\8C\DA\E0`kS\00\00\04\00\13\13\0E\0E\05\005\00\0B'\0B \0B@\AC],\10s\CB\B3>\13\B9\A2\D1\FF~\DA\8F\86\8C\E0N\003.\1Ajv\1A'\80\00EF\00T(\09 \00\00\00\1F\C4\89\91\11;\00\00\00\00\00\00\00ZR\15\0A\13\0E\08*\14'KOQ\1F[\BF}v\10\0E\00\04\18\0C\00\19\00p\B1b\B0\1F\0BC,\18\00U)\EFB\22\04\8C\93\A6\B5\C3\B7ox`\DC\A8U\92\C5\001\1F\5C\A8@0?!\05#\04\1DU1\00\00\00\05\0C]9\0A\00\0F\00\00\00\00\00\00\00\00PU\00\00\00\13(\1D,\16\19\11[Nc\17Olb\00\06\00\00@\11\13\14\B5\1E\C6\F4\FF\00\1B+\1Bj\10!\D4\FF?#]\E6w\BC\F0\B4\B6\85\C3\D6[H\C1\B7\D4\CE\A5\0BED\1DI4B\00\16\1B(aohi\0F\15\00\11H;5\16\00\00\00\00\00\00\003'\00\00\00\15.\0B\19\1F\12\08\9FEo=\A4l\00\00\02\0C\13O\00\09+\A9\C7e\D4\FF\ED\09\0FgT\0C\16:\B4\13\13\98\84bN\E4\CF\E0\BB\C8\D1\93\10\C2\BB\FF\DF\F1;-+\15%*80+\00\01 \15!nV>9\09\1A\0D\10\00&%\10\00\00\00\00\22#Z\00\00\00\1C\00\00(\00\00mY$\00\00\1F\00\00\00\12L8\00\0A\17\17\F3\EF\BD\9E\E6\E3\A5\E0\BF\04K\AC\10&\8D\12\D2\EC;\DE\CF\B6\D7\D3\A1\BCV\D9\E8\D7\E8\C8t\002\11 Y@*\17\00\00\00\01\016\00\0C\0A(9\10\0075=68\12\0E\10\12\09"], align 1

ram_two_ports hana_bmp (
	.clk( clk ),
	.address_a( hana_bmp_address_a ),
	.wren_a( hana_bmp_write_enable_a ),
	.data_a( hana_bmp_in_a ),
	.address_b( hana_bmp_address_b ),
	.wren_b( hana_bmp_write_enable_b ),
	.data_b( hana_bmp_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( hana_bmp_out_a ),
	.q_b( hana_bmp_out_b)
);
defparam hana_bmp.width_a = 8;
defparam hana_bmp.widthad_a = 14;
defparam hana_bmp.width_b = 8;
defparam hana_bmp.widthad_b = 14;
defparam hana_bmp.width_be_a = 1;
defparam hana_bmp.width_be_b = 1;
defparam hana_bmp.numwords_a = 15930;
defparam hana_bmp.numwords_b = 15930;
defparam hana_bmp.init_file = "hana_bmp.mif";

reg [3:0] out_unread_marker_address_a;
reg out_unread_marker_write_enable_a;
reg [31:0] out_unread_marker_in_a;
wire [31:0] out_unread_marker_out_a;

reg [3:0] out_unread_marker_address_b;
reg out_unread_marker_write_enable_b;
reg [31:0] out_unread_marker_in_b;
wire [31:0] out_unread_marker_out_b;

// @out_unread_marker = internal unnamed_addr constant [10 x i32] [i32 216, i32 224, i32 219, i32 219, i32 192, i32 196, i32 196, i32 196, i32 196, i32 218], align 4

ram_two_ports out_unread_marker (
	.clk( clk ),
	.address_a( out_unread_marker_address_a ),
	.wren_a( out_unread_marker_write_enable_a ),
	.data_a( out_unread_marker_in_a ),
	.address_b( out_unread_marker_address_b ),
	.wren_b( out_unread_marker_write_enable_b ),
	.data_b( out_unread_marker_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_unread_marker_out_a ),
	.q_b( out_unread_marker_out_b)
);
defparam out_unread_marker.width_a = 32;
defparam out_unread_marker.widthad_a = 4;
defparam out_unread_marker.width_b = 32;
defparam out_unread_marker.widthad_b = 4;
defparam out_unread_marker.width_be_a = 1;
defparam out_unread_marker.width_be_b = 1;
defparam out_unread_marker.numwords_a = 10;
defparam out_unread_marker.numwords_b = 10;
defparam out_unread_marker.init_file = "out_unread_marker.mif";

reg [1:0] out_index_get_sof_address_a;
reg out_index_get_sof_write_enable_a;
reg [31:0] out_index_get_sof_in_a;
wire [31:0] out_index_get_sof_out_a;

reg [1:0] out_index_get_sof_address_b;
reg out_index_get_sof_write_enable_b;
reg [31:0] out_index_get_sof_in_b;
wire [31:0] out_index_get_sof_out_b;

// @out_index_get_sof = internal unnamed_addr constant [3 x i32] [i32 0, i32 1, i32 2], align 4

ram_two_ports out_index_get_sof (
	.clk( clk ),
	.address_a( out_index_get_sof_address_a ),
	.wren_a( out_index_get_sof_write_enable_a ),
	.data_a( out_index_get_sof_in_a ),
	.address_b( out_index_get_sof_address_b ),
	.wren_b( out_index_get_sof_write_enable_b ),
	.data_b( out_index_get_sof_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_index_get_sof_out_a ),
	.q_b( out_index_get_sof_out_b)
);
defparam out_index_get_sof.width_a = 32;
defparam out_index_get_sof.widthad_a = 2;
defparam out_index_get_sof.width_b = 32;
defparam out_index_get_sof.widthad_b = 2;
defparam out_index_get_sof.width_be_a = 1;
defparam out_index_get_sof.width_be_b = 1;
defparam out_index_get_sof.numwords_a = 3;
defparam out_index_get_sof.numwords_b = 3;
defparam out_index_get_sof.init_file = "out_index_get_sof.mif";

reg [1:0] out_v_samp_factor_get_sof_address_a;
reg out_v_samp_factor_get_sof_write_enable_a;
reg [31:0] out_v_samp_factor_get_sof_in_a;
wire [31:0] out_v_samp_factor_get_sof_out_a;

reg [1:0] out_v_samp_factor_get_sof_address_b;
reg out_v_samp_factor_get_sof_write_enable_b;
reg [31:0] out_v_samp_factor_get_sof_in_b;
wire [31:0] out_v_samp_factor_get_sof_out_b;

// @out_v_samp_factor_get_sof = internal unnamed_addr constant [3 x i32] [i32 2, i32 1, i32 1], align 4

ram_two_ports out_v_samp_factor_get_sof (
	.clk( clk ),
	.address_a( out_v_samp_factor_get_sof_address_a ),
	.wren_a( out_v_samp_factor_get_sof_write_enable_a ),
	.data_a( out_v_samp_factor_get_sof_in_a ),
	.address_b( out_v_samp_factor_get_sof_address_b ),
	.wren_b( out_v_samp_factor_get_sof_write_enable_b ),
	.data_b( out_v_samp_factor_get_sof_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_v_samp_factor_get_sof_out_a ),
	.q_b( out_v_samp_factor_get_sof_out_b)
);
defparam out_v_samp_factor_get_sof.width_a = 32;
defparam out_v_samp_factor_get_sof.widthad_a = 2;
defparam out_v_samp_factor_get_sof.width_b = 32;
defparam out_v_samp_factor_get_sof.widthad_b = 2;
defparam out_v_samp_factor_get_sof.width_be_a = 1;
defparam out_v_samp_factor_get_sof.width_be_b = 1;
defparam out_v_samp_factor_get_sof.numwords_a = 3;
defparam out_v_samp_factor_get_sof.numwords_b = 3;
defparam out_v_samp_factor_get_sof.init_file = "out_v_samp_factor_get_sof.mif";

reg [1:0] out_comp_id_get_sos_address_a;
reg out_comp_id_get_sos_write_enable_a;
reg [31:0] out_comp_id_get_sos_in_a;
wire [31:0] out_comp_id_get_sos_out_a;

reg [1:0] out_comp_id_get_sos_address_b;
reg out_comp_id_get_sos_write_enable_b;
reg [31:0] out_comp_id_get_sos_in_b;
wire [31:0] out_comp_id_get_sos_out_b;

// @out_comp_id_get_sos = internal unnamed_addr constant [3 x i32] [i32 1, i32 2, i32 3], align 4

ram_two_ports out_comp_id_get_sos (
	.clk( clk ),
	.address_a( out_comp_id_get_sos_address_a ),
	.wren_a( out_comp_id_get_sos_write_enable_a ),
	.data_a( out_comp_id_get_sos_in_a ),
	.address_b( out_comp_id_get_sos_address_b ),
	.wren_b( out_comp_id_get_sos_write_enable_b ),
	.data_b( out_comp_id_get_sos_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_comp_id_get_sos_out_a ),
	.q_b( out_comp_id_get_sos_out_b)
);
defparam out_comp_id_get_sos.width_a = 32;
defparam out_comp_id_get_sos.widthad_a = 2;
defparam out_comp_id_get_sos.width_b = 32;
defparam out_comp_id_get_sos.widthad_b = 2;
defparam out_comp_id_get_sos.width_be_a = 1;
defparam out_comp_id_get_sos.width_be_b = 1;
defparam out_comp_id_get_sos.numwords_a = 3;
defparam out_comp_id_get_sos.numwords_b = 3;
defparam out_comp_id_get_sos.init_file = "out_comp_id_get_sos.mif";

reg [1:0] out_ac_tbl_no_get_sos_address_a;
reg out_ac_tbl_no_get_sos_write_enable_a;
reg [31:0] out_ac_tbl_no_get_sos_in_a;
wire [31:0] out_ac_tbl_no_get_sos_out_a;

reg [1:0] out_ac_tbl_no_get_sos_address_b;
reg out_ac_tbl_no_get_sos_write_enable_b;
reg [31:0] out_ac_tbl_no_get_sos_in_b;
wire [31:0] out_ac_tbl_no_get_sos_out_b;

// @out_ac_tbl_no_get_sos = internal unnamed_addr constant [3 x i32] [i32 0, i32 1, i32 1], align 4

ram_two_ports out_ac_tbl_no_get_sos (
	.clk( clk ),
	.address_a( out_ac_tbl_no_get_sos_address_a ),
	.wren_a( out_ac_tbl_no_get_sos_write_enable_a ),
	.data_a( out_ac_tbl_no_get_sos_in_a ),
	.address_b( out_ac_tbl_no_get_sos_address_b ),
	.wren_b( out_ac_tbl_no_get_sos_write_enable_b ),
	.data_b( out_ac_tbl_no_get_sos_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_ac_tbl_no_get_sos_out_a ),
	.q_b( out_ac_tbl_no_get_sos_out_b)
);
defparam out_ac_tbl_no_get_sos.width_a = 32;
defparam out_ac_tbl_no_get_sos.widthad_a = 2;
defparam out_ac_tbl_no_get_sos.width_b = 32;
defparam out_ac_tbl_no_get_sos.widthad_b = 2;
defparam out_ac_tbl_no_get_sos.width_be_a = 1;
defparam out_ac_tbl_no_get_sos.width_be_b = 1;
defparam out_ac_tbl_no_get_sos.numwords_a = 3;
defparam out_ac_tbl_no_get_sos.numwords_b = 3;
defparam out_ac_tbl_no_get_sos.init_file = "out_ac_tbl_no_get_sos.mif";

reg [1:0] out_length_get_dht_address_a;
reg out_length_get_dht_write_enable_a;
reg [31:0] out_length_get_dht_in_a;
wire [31:0] out_length_get_dht_out_a;

reg [1:0] out_length_get_dht_address_b;
reg out_length_get_dht_write_enable_b;
reg [31:0] out_length_get_dht_in_b;
wire [31:0] out_length_get_dht_out_b;

// @out_length_get_dht = internal unnamed_addr constant [4 x i32] [i32 29, i32 179, i32 29, i32 179], align 4

ram_two_ports out_length_get_dht (
	.clk( clk ),
	.address_a( out_length_get_dht_address_a ),
	.wren_a( out_length_get_dht_write_enable_a ),
	.data_a( out_length_get_dht_in_a ),
	.address_b( out_length_get_dht_address_b ),
	.wren_b( out_length_get_dht_write_enable_b ),
	.data_b( out_length_get_dht_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_length_get_dht_out_a ),
	.q_b( out_length_get_dht_out_b)
);
defparam out_length_get_dht.width_a = 32;
defparam out_length_get_dht.widthad_a = 2;
defparam out_length_get_dht.width_b = 32;
defparam out_length_get_dht.widthad_b = 2;
defparam out_length_get_dht.width_be_a = 1;
defparam out_length_get_dht.width_be_b = 1;
defparam out_length_get_dht.numwords_a = 4;
defparam out_length_get_dht.numwords_b = 4;
defparam out_length_get_dht.init_file = "out_length_get_dht.mif";

reg [1:0] out_index_get_dht_address_a;
reg out_index_get_dht_write_enable_a;
reg [31:0] out_index_get_dht_in_a;
wire [31:0] out_index_get_dht_out_a;

reg [1:0] out_index_get_dht_address_b;
reg out_index_get_dht_write_enable_b;
reg [31:0] out_index_get_dht_in_b;
wire [31:0] out_index_get_dht_out_b;

// @out_index_get_dht = internal unnamed_addr constant [4 x i32] [i32 0, i32 16, i32 1, i32 17], align 4

ram_two_ports out_index_get_dht (
	.clk( clk ),
	.address_a( out_index_get_dht_address_a ),
	.wren_a( out_index_get_dht_write_enable_a ),
	.data_a( out_index_get_dht_in_a ),
	.address_b( out_index_get_dht_address_b ),
	.wren_b( out_index_get_dht_write_enable_b ),
	.data_b( out_index_get_dht_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_index_get_dht_out_a ),
	.q_b( out_index_get_dht_out_b)
);
defparam out_index_get_dht.width_a = 32;
defparam out_index_get_dht.widthad_a = 2;
defparam out_index_get_dht.width_b = 32;
defparam out_index_get_dht.widthad_b = 2;
defparam out_index_get_dht.width_be_a = 1;
defparam out_index_get_dht.width_be_b = 1;
defparam out_index_get_dht.numwords_a = 4;
defparam out_index_get_dht.numwords_b = 4;
defparam out_index_get_dht.init_file = "out_index_get_dht.mif";

reg [1:0] out_count_get_dht_address_a;
reg out_count_get_dht_write_enable_a;
reg [31:0] out_count_get_dht_in_a;
wire [31:0] out_count_get_dht_out_a;

reg [1:0] out_count_get_dht_address_b;
reg out_count_get_dht_write_enable_b;
reg [31:0] out_count_get_dht_in_b;
wire [31:0] out_count_get_dht_out_b;

// @out_count_get_dht = internal unnamed_addr constant [4 x i32] [i32 12, i32 162, i32 12, i32 162], align 4

ram_two_ports out_count_get_dht (
	.clk( clk ),
	.address_a( out_count_get_dht_address_a ),
	.wren_a( out_count_get_dht_write_enable_a ),
	.data_a( out_count_get_dht_in_a ),
	.address_b( out_count_get_dht_address_b ),
	.wren_b( out_count_get_dht_write_enable_b ),
	.data_b( out_count_get_dht_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_count_get_dht_out_a ),
	.q_b( out_count_get_dht_out_b)
);
defparam out_count_get_dht.width_a = 32;
defparam out_count_get_dht.widthad_a = 2;
defparam out_count_get_dht.width_b = 32;
defparam out_count_get_dht.widthad_b = 2;
defparam out_count_get_dht.width_be_a = 1;
defparam out_count_get_dht.width_be_b = 1;
defparam out_count_get_dht.numwords_a = 4;
defparam out_count_get_dht.numwords_b = 4;
defparam out_count_get_dht.init_file = "out_count_get_dht.mif";

reg [0:0] out_length_get_dqt_address_a;
reg out_length_get_dqt_write_enable_a;
reg [31:0] out_length_get_dqt_in_a;
wire [31:0] out_length_get_dqt_out_a;

reg [0:0] out_length_get_dqt_address_b;
reg out_length_get_dqt_write_enable_b;
reg [31:0] out_length_get_dqt_in_b;
wire [31:0] out_length_get_dqt_out_b;

// @out_length_get_dqt = internal unnamed_addr constant [2 x i32] [i32 65, i32 65], align 4

ram_two_ports out_length_get_dqt (
	.clk( clk ),
	.address_a( out_length_get_dqt_address_a ),
	.wren_a( out_length_get_dqt_write_enable_a ),
	.data_a( out_length_get_dqt_in_a ),
	.address_b( out_length_get_dqt_address_b ),
	.wren_b( out_length_get_dqt_write_enable_b ),
	.data_b( out_length_get_dqt_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_length_get_dqt_out_a ),
	.q_b( out_length_get_dqt_out_b)
);
defparam out_length_get_dqt.width_a = 32;
defparam out_length_get_dqt.widthad_a = 1;
defparam out_length_get_dqt.width_b = 32;
defparam out_length_get_dqt.widthad_b = 1;
defparam out_length_get_dqt.width_be_a = 1;
defparam out_length_get_dqt.width_be_b = 1;
defparam out_length_get_dqt.numwords_a = 2;
defparam out_length_get_dqt.numwords_b = 2;
defparam out_length_get_dqt.init_file = "out_length_get_dqt.mif";

reg [0:0] out_prec_get_dht_address_a;
reg out_prec_get_dht_write_enable_a;
reg [31:0] out_prec_get_dht_in_a;
wire [31:0] out_prec_get_dht_out_a;

reg [0:0] out_prec_get_dht_address_b;
reg out_prec_get_dht_write_enable_b;
reg [31:0] out_prec_get_dht_in_b;
wire [31:0] out_prec_get_dht_out_b;

// @out_prec_get_dht = internal unnamed_addr constant [2 x i32] zeroinitializer, align 4

ram_two_ports out_prec_get_dht (
	.clk( clk ),
	.address_a( out_prec_get_dht_address_a ),
	.wren_a( out_prec_get_dht_write_enable_a ),
	.data_a( out_prec_get_dht_in_a ),
	.address_b( out_prec_get_dht_address_b ),
	.wren_b( out_prec_get_dht_write_enable_b ),
	.data_b( out_prec_get_dht_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_prec_get_dht_out_a ),
	.q_b( out_prec_get_dht_out_b)
);
defparam out_prec_get_dht.width_a = 32;
defparam out_prec_get_dht.widthad_a = 1;
defparam out_prec_get_dht.width_b = 32;
defparam out_prec_get_dht.widthad_b = 1;
defparam out_prec_get_dht.width_be_a = 1;
defparam out_prec_get_dht.width_be_b = 1;
defparam out_prec_get_dht.numwords_a = 2;
defparam out_prec_get_dht.numwords_b = 2;
defparam out_prec_get_dht.init_file = "out_prec_get_dht.mif";

reg [0:0] out_num_get_dht_address_a;
reg out_num_get_dht_write_enable_a;
reg [31:0] out_num_get_dht_in_a;
wire [31:0] out_num_get_dht_out_a;

reg [0:0] out_num_get_dht_address_b;
reg out_num_get_dht_write_enable_b;
reg [31:0] out_num_get_dht_in_b;
wire [31:0] out_num_get_dht_out_b;

// @out_num_get_dht = internal unnamed_addr constant [2 x i32] [i32 0, i32 1], align 4

ram_two_ports out_num_get_dht (
	.clk( clk ),
	.address_a( out_num_get_dht_address_a ),
	.wren_a( out_num_get_dht_write_enable_a ),
	.data_a( out_num_get_dht_in_a ),
	.address_b( out_num_get_dht_address_b ),
	.wren_b( out_num_get_dht_write_enable_b ),
	.data_b( out_num_get_dht_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( out_num_get_dht_out_a ),
	.q_b( out_num_get_dht_out_b)
);
defparam out_num_get_dht.width_a = 32;
defparam out_num_get_dht.widthad_a = 1;
defparam out_num_get_dht.width_b = 32;
defparam out_num_get_dht.widthad_b = 1;
defparam out_num_get_dht.width_be_a = 1;
defparam out_num_get_dht.width_be_b = 1;
defparam out_num_get_dht.numwords_a = 2;
defparam out_num_get_dht.numwords_b = 2;
defparam out_num_get_dht.init_file = "out_num_get_dht.mif";

reg [5:0] izigzag_index_address_a;
reg izigzag_index_write_enable_a;
reg [31:0] izigzag_index_in_a;
wire [31:0] izigzag_index_out_a;

reg [5:0] izigzag_index_address_b;
reg izigzag_index_write_enable_b;
reg [31:0] izigzag_index_in_b;
wire [31:0] izigzag_index_out_b;

// @izigzag_index = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 8, i32 16, i32 9, i32 2, i32 3, i32 10, i32 17, i32 24, i32 32, i32 25, i32 18, i32 11, i32 4, i32 5, i32 12, i32 19, i32 26, i32 33, i32 40, i32 48, i32 41, i32 34, i32 27, i32 20, i32 13, i32 6, i32 7, i32 14, i32 21, i32 28, i32 35, i32 42, i32 49, i32 56, i32 57, i32 50, i32 43, i32 36, i32 29, i32 22, i32 15, i32 23, i32 30, i32 37, i32 44, i32 51, i32 58, i32 59, i32 52, i32 45, i32 38, i32 31, i32 39, i32 46, i32 53, i32 60, i32 61, i32 54, i32 47, i32 55, i32 62, i32 63], align 4

ram_two_ports izigzag_index (
	.clk( clk ),
	.address_a( izigzag_index_address_a ),
	.wren_a( izigzag_index_write_enable_a ),
	.data_a( izigzag_index_in_a ),
	.address_b( izigzag_index_address_b ),
	.wren_b( izigzag_index_write_enable_b ),
	.data_b( izigzag_index_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( izigzag_index_out_a ),
	.q_b( izigzag_index_out_b)
);
defparam izigzag_index.width_a = 32;
defparam izigzag_index.widthad_a = 6;
defparam izigzag_index.width_b = 32;
defparam izigzag_index.widthad_b = 6;
defparam izigzag_index.width_be_a = 1;
defparam izigzag_index.width_be_b = 1;
defparam izigzag_index.numwords_a = 64;
defparam izigzag_index.numwords_b = 64;
defparam izigzag_index.init_file = "izigzag_index.mif";

reg [0:0] main_result_address_a;
reg main_result_write_enable_a;
reg [31:0] main_result_in_a;
wire [31:0] main_result_out_a;

reg [0:0] main_result_address_b;
reg main_result_write_enable_b;
reg [31:0] main_result_in_b;
wire [31:0] main_result_out_b;

// @main_result = internal unnamed_addr global i32 0, align 4

ram_two_ports main_result (
	.clk( clk ),
	.address_a( main_result_address_a ),
	.wren_a( main_result_write_enable_a ),
	.data_a( main_result_in_a ),
	.address_b( main_result_address_b ),
	.wren_b( main_result_write_enable_b ),
	.data_b( main_result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_result_out_a ),
	.q_b( main_result_out_b)
);
defparam main_result.width_a = 32;
defparam main_result.widthad_a = 1;
defparam main_result.width_b = 32;
defparam main_result.widthad_b = 1;
defparam main_result.width_be_a = 1;
defparam main_result.width_be_b = 1;
defparam main_result.numwords_a = 1;
defparam main_result.numwords_b = 1;
defparam main_result.init_file = "main_result.mif";

reg [0:0] p_jinfo_image_height_address_a;
reg p_jinfo_image_height_write_enable_a;
reg [15:0] p_jinfo_image_height_in_a;
wire [15:0] p_jinfo_image_height_out_a;

reg [0:0] p_jinfo_image_height_address_b;
reg p_jinfo_image_height_write_enable_b;
reg [15:0] p_jinfo_image_height_in_b;
wire [15:0] p_jinfo_image_height_out_b;

// @p_jinfo_image_height = internal unnamed_addr global i16 0, align 2

ram_two_ports p_jinfo_image_height (
	.clk( clk ),
	.address_a( p_jinfo_image_height_address_a ),
	.wren_a( p_jinfo_image_height_write_enable_a ),
	.data_a( p_jinfo_image_height_in_a ),
	.address_b( p_jinfo_image_height_address_b ),
	.wren_b( p_jinfo_image_height_write_enable_b ),
	.data_b( p_jinfo_image_height_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_image_height_out_a ),
	.q_b( p_jinfo_image_height_out_b)
);
defparam p_jinfo_image_height.width_a = 16;
defparam p_jinfo_image_height.widthad_a = 1;
defparam p_jinfo_image_height.width_b = 16;
defparam p_jinfo_image_height.widthad_b = 1;
defparam p_jinfo_image_height.width_be_a = 1;
defparam p_jinfo_image_height.width_be_b = 1;
defparam p_jinfo_image_height.numwords_a = 1;
defparam p_jinfo_image_height.numwords_b = 1;
defparam p_jinfo_image_height.init_file = "p_jinfo_image_height.mif";

reg [0:0] p_jinfo_image_width_address_a;
reg p_jinfo_image_width_write_enable_a;
reg [15:0] p_jinfo_image_width_in_a;
wire [15:0] p_jinfo_image_width_out_a;

reg [0:0] p_jinfo_image_width_address_b;
reg p_jinfo_image_width_write_enable_b;
reg [15:0] p_jinfo_image_width_in_b;
wire [15:0] p_jinfo_image_width_out_b;

// @p_jinfo_image_width = internal unnamed_addr global i16 0, align 2

ram_two_ports p_jinfo_image_width (
	.clk( clk ),
	.address_a( p_jinfo_image_width_address_a ),
	.wren_a( p_jinfo_image_width_write_enable_a ),
	.data_a( p_jinfo_image_width_in_a ),
	.address_b( p_jinfo_image_width_address_b ),
	.wren_b( p_jinfo_image_width_write_enable_b ),
	.data_b( p_jinfo_image_width_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_image_width_out_a ),
	.q_b( p_jinfo_image_width_out_b)
);
defparam p_jinfo_image_width.width_a = 16;
defparam p_jinfo_image_width.widthad_a = 1;
defparam p_jinfo_image_width.width_b = 16;
defparam p_jinfo_image_width.widthad_b = 1;
defparam p_jinfo_image_width.width_be_a = 1;
defparam p_jinfo_image_width.width_be_b = 1;
defparam p_jinfo_image_width.numwords_a = 1;
defparam p_jinfo_image_width.numwords_b = 1;
defparam p_jinfo_image_width.init_file = "p_jinfo_image_width.mif";

reg [1:0] p_jinfo_comps_info_index_address_a;
reg p_jinfo_comps_info_index_write_enable_a;
reg [7:0] p_jinfo_comps_info_index_in_a;
wire [7:0] p_jinfo_comps_info_index_out_a;

reg [1:0] p_jinfo_comps_info_index_address_b;
reg p_jinfo_comps_info_index_write_enable_b;
reg [7:0] p_jinfo_comps_info_index_in_b;
wire [7:0] p_jinfo_comps_info_index_out_b;

// @p_jinfo_comps_info_index = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

ram_two_ports p_jinfo_comps_info_index (
	.clk( clk ),
	.address_a( p_jinfo_comps_info_index_address_a ),
	.wren_a( p_jinfo_comps_info_index_write_enable_a ),
	.data_a( p_jinfo_comps_info_index_in_a ),
	.address_b( p_jinfo_comps_info_index_address_b ),
	.wren_b( p_jinfo_comps_info_index_write_enable_b ),
	.data_b( p_jinfo_comps_info_index_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_index_out_a ),
	.q_b( p_jinfo_comps_info_index_out_b)
);
defparam p_jinfo_comps_info_index.width_a = 8;
defparam p_jinfo_comps_info_index.widthad_a = 2;
defparam p_jinfo_comps_info_index.width_b = 8;
defparam p_jinfo_comps_info_index.widthad_b = 2;
defparam p_jinfo_comps_info_index.width_be_a = 1;
defparam p_jinfo_comps_info_index.width_be_b = 1;
defparam p_jinfo_comps_info_index.numwords_a = 3;
defparam p_jinfo_comps_info_index.numwords_b = 3;
defparam p_jinfo_comps_info_index.init_file = "p_jinfo_comps_info_index.mif";

reg [1:0] p_jinfo_comps_info_id_address_a;
reg p_jinfo_comps_info_id_write_enable_a;
reg [7:0] p_jinfo_comps_info_id_in_a;
wire [7:0] p_jinfo_comps_info_id_out_a;

reg [1:0] p_jinfo_comps_info_id_address_b;
reg p_jinfo_comps_info_id_write_enable_b;
reg [7:0] p_jinfo_comps_info_id_in_b;
wire [7:0] p_jinfo_comps_info_id_out_b;

// @p_jinfo_comps_info_id = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

ram_two_ports p_jinfo_comps_info_id (
	.clk( clk ),
	.address_a( p_jinfo_comps_info_id_address_a ),
	.wren_a( p_jinfo_comps_info_id_write_enable_a ),
	.data_a( p_jinfo_comps_info_id_in_a ),
	.address_b( p_jinfo_comps_info_id_address_b ),
	.wren_b( p_jinfo_comps_info_id_write_enable_b ),
	.data_b( p_jinfo_comps_info_id_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_id_out_a ),
	.q_b( p_jinfo_comps_info_id_out_b)
);
defparam p_jinfo_comps_info_id.width_a = 8;
defparam p_jinfo_comps_info_id.widthad_a = 2;
defparam p_jinfo_comps_info_id.width_b = 8;
defparam p_jinfo_comps_info_id.widthad_b = 2;
defparam p_jinfo_comps_info_id.width_be_a = 1;
defparam p_jinfo_comps_info_id.width_be_b = 1;
defparam p_jinfo_comps_info_id.numwords_a = 3;
defparam p_jinfo_comps_info_id.numwords_b = 3;
defparam p_jinfo_comps_info_id.init_file = "p_jinfo_comps_info_id.mif";

reg [1:0] p_jinfo_comps_info_h_samp_factor_address_a;
reg p_jinfo_comps_info_h_samp_factor_write_enable_a;
reg [7:0] p_jinfo_comps_info_h_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_a;

reg [1:0] p_jinfo_comps_info_h_samp_factor_address_b;
reg p_jinfo_comps_info_h_samp_factor_write_enable_b;
reg [7:0] p_jinfo_comps_info_h_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_h_samp_factor_out_b;

// @p_jinfo_comps_info_h_samp_factor = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

ram_two_ports p_jinfo_comps_info_h_samp_factor (
	.clk( clk ),
	.address_a( p_jinfo_comps_info_h_samp_factor_address_a ),
	.wren_a( p_jinfo_comps_info_h_samp_factor_write_enable_a ),
	.data_a( p_jinfo_comps_info_h_samp_factor_in_a ),
	.address_b( p_jinfo_comps_info_h_samp_factor_address_b ),
	.wren_b( p_jinfo_comps_info_h_samp_factor_write_enable_b ),
	.data_b( p_jinfo_comps_info_h_samp_factor_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_h_samp_factor_out_a ),
	.q_b( p_jinfo_comps_info_h_samp_factor_out_b)
);
defparam p_jinfo_comps_info_h_samp_factor.width_a = 8;
defparam p_jinfo_comps_info_h_samp_factor.widthad_a = 2;
defparam p_jinfo_comps_info_h_samp_factor.width_b = 8;
defparam p_jinfo_comps_info_h_samp_factor.widthad_b = 2;
defparam p_jinfo_comps_info_h_samp_factor.width_be_a = 1;
defparam p_jinfo_comps_info_h_samp_factor.width_be_b = 1;
defparam p_jinfo_comps_info_h_samp_factor.numwords_a = 3;
defparam p_jinfo_comps_info_h_samp_factor.numwords_b = 3;
defparam p_jinfo_comps_info_h_samp_factor.init_file = "p_jinfo_comps_info_h_samp_factor.mif";

reg [1:0] p_jinfo_comps_info_v_samp_factor_address_a;
reg p_jinfo_comps_info_v_samp_factor_write_enable_a;
reg [7:0] p_jinfo_comps_info_v_samp_factor_in_a;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_a;

reg [1:0] p_jinfo_comps_info_v_samp_factor_address_b;
reg p_jinfo_comps_info_v_samp_factor_write_enable_b;
reg [7:0] p_jinfo_comps_info_v_samp_factor_in_b;
wire [7:0] p_jinfo_comps_info_v_samp_factor_out_b;

// @p_jinfo_comps_info_v_samp_factor = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

ram_two_ports p_jinfo_comps_info_v_samp_factor (
	.clk( clk ),
	.address_a( p_jinfo_comps_info_v_samp_factor_address_a ),
	.wren_a( p_jinfo_comps_info_v_samp_factor_write_enable_a ),
	.data_a( p_jinfo_comps_info_v_samp_factor_in_a ),
	.address_b( p_jinfo_comps_info_v_samp_factor_address_b ),
	.wren_b( p_jinfo_comps_info_v_samp_factor_write_enable_b ),
	.data_b( p_jinfo_comps_info_v_samp_factor_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_v_samp_factor_out_a ),
	.q_b( p_jinfo_comps_info_v_samp_factor_out_b)
);
defparam p_jinfo_comps_info_v_samp_factor.width_a = 8;
defparam p_jinfo_comps_info_v_samp_factor.widthad_a = 2;
defparam p_jinfo_comps_info_v_samp_factor.width_b = 8;
defparam p_jinfo_comps_info_v_samp_factor.widthad_b = 2;
defparam p_jinfo_comps_info_v_samp_factor.width_be_a = 1;
defparam p_jinfo_comps_info_v_samp_factor.width_be_b = 1;
defparam p_jinfo_comps_info_v_samp_factor.numwords_a = 3;
defparam p_jinfo_comps_info_v_samp_factor.numwords_b = 3;
defparam p_jinfo_comps_info_v_samp_factor.init_file = "p_jinfo_comps_info_v_samp_factor.mif";

reg [1:0] p_jinfo_comps_info_quant_tbl_no_address_a;
reg p_jinfo_comps_info_quant_tbl_no_write_enable_a;
reg [7:0] p_jinfo_comps_info_quant_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_a;

reg [1:0] p_jinfo_comps_info_quant_tbl_no_address_b;
reg p_jinfo_comps_info_quant_tbl_no_write_enable_b;
reg [7:0] p_jinfo_comps_info_quant_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_quant_tbl_no_out_b;

// @p_jinfo_comps_info_quant_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

ram_two_ports p_jinfo_comps_info_quant_tbl_no (
	.clk( clk ),
	.address_a( p_jinfo_comps_info_quant_tbl_no_address_a ),
	.wren_a( p_jinfo_comps_info_quant_tbl_no_write_enable_a ),
	.data_a( p_jinfo_comps_info_quant_tbl_no_in_a ),
	.address_b( p_jinfo_comps_info_quant_tbl_no_address_b ),
	.wren_b( p_jinfo_comps_info_quant_tbl_no_write_enable_b ),
	.data_b( p_jinfo_comps_info_quant_tbl_no_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_quant_tbl_no_out_a ),
	.q_b( p_jinfo_comps_info_quant_tbl_no_out_b)
);
defparam p_jinfo_comps_info_quant_tbl_no.width_a = 8;
defparam p_jinfo_comps_info_quant_tbl_no.widthad_a = 2;
defparam p_jinfo_comps_info_quant_tbl_no.width_b = 8;
defparam p_jinfo_comps_info_quant_tbl_no.widthad_b = 2;
defparam p_jinfo_comps_info_quant_tbl_no.width_be_a = 1;
defparam p_jinfo_comps_info_quant_tbl_no.width_be_b = 1;
defparam p_jinfo_comps_info_quant_tbl_no.numwords_a = 3;
defparam p_jinfo_comps_info_quant_tbl_no.numwords_b = 3;
defparam p_jinfo_comps_info_quant_tbl_no.init_file = "p_jinfo_comps_info_quant_tbl_no.mif";

reg [1:0] p_jinfo_comps_info_dc_tbl_no_address_a;
reg p_jinfo_comps_info_dc_tbl_no_write_enable_a;
reg [7:0] p_jinfo_comps_info_dc_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_a;

reg [1:0] p_jinfo_comps_info_dc_tbl_no_address_b;
reg p_jinfo_comps_info_dc_tbl_no_write_enable_b;
reg [7:0] p_jinfo_comps_info_dc_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_dc_tbl_no_out_b;

// @p_jinfo_comps_info_dc_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

ram_two_ports p_jinfo_comps_info_dc_tbl_no (
	.clk( clk ),
	.address_a( p_jinfo_comps_info_dc_tbl_no_address_a ),
	.wren_a( p_jinfo_comps_info_dc_tbl_no_write_enable_a ),
	.data_a( p_jinfo_comps_info_dc_tbl_no_in_a ),
	.address_b( p_jinfo_comps_info_dc_tbl_no_address_b ),
	.wren_b( p_jinfo_comps_info_dc_tbl_no_write_enable_b ),
	.data_b( p_jinfo_comps_info_dc_tbl_no_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_dc_tbl_no_out_a ),
	.q_b( p_jinfo_comps_info_dc_tbl_no_out_b)
);
defparam p_jinfo_comps_info_dc_tbl_no.width_a = 8;
defparam p_jinfo_comps_info_dc_tbl_no.widthad_a = 2;
defparam p_jinfo_comps_info_dc_tbl_no.width_b = 8;
defparam p_jinfo_comps_info_dc_tbl_no.widthad_b = 2;
defparam p_jinfo_comps_info_dc_tbl_no.width_be_a = 1;
defparam p_jinfo_comps_info_dc_tbl_no.width_be_b = 1;
defparam p_jinfo_comps_info_dc_tbl_no.numwords_a = 3;
defparam p_jinfo_comps_info_dc_tbl_no.numwords_b = 3;
defparam p_jinfo_comps_info_dc_tbl_no.init_file = "p_jinfo_comps_info_dc_tbl_no.mif";

reg [1:0] p_jinfo_comps_info_ac_tbl_no_address_a;
reg p_jinfo_comps_info_ac_tbl_no_write_enable_a;
reg [7:0] p_jinfo_comps_info_ac_tbl_no_in_a;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_a;

reg [1:0] p_jinfo_comps_info_ac_tbl_no_address_b;
reg p_jinfo_comps_info_ac_tbl_no_write_enable_b;
reg [7:0] p_jinfo_comps_info_ac_tbl_no_in_b;
wire [7:0] p_jinfo_comps_info_ac_tbl_no_out_b;

// @p_jinfo_comps_info_ac_tbl_no = internal unnamed_addr global [3 x i8] zeroinitializer, align 1

ram_two_ports p_jinfo_comps_info_ac_tbl_no (
	.clk( clk ),
	.address_a( p_jinfo_comps_info_ac_tbl_no_address_a ),
	.wren_a( p_jinfo_comps_info_ac_tbl_no_write_enable_a ),
	.data_a( p_jinfo_comps_info_ac_tbl_no_in_a ),
	.address_b( p_jinfo_comps_info_ac_tbl_no_address_b ),
	.wren_b( p_jinfo_comps_info_ac_tbl_no_write_enable_b ),
	.data_b( p_jinfo_comps_info_ac_tbl_no_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_comps_info_ac_tbl_no_out_a ),
	.q_b( p_jinfo_comps_info_ac_tbl_no_out_b)
);
defparam p_jinfo_comps_info_ac_tbl_no.width_a = 8;
defparam p_jinfo_comps_info_ac_tbl_no.widthad_a = 2;
defparam p_jinfo_comps_info_ac_tbl_no.width_b = 8;
defparam p_jinfo_comps_info_ac_tbl_no.widthad_b = 2;
defparam p_jinfo_comps_info_ac_tbl_no.width_be_a = 1;
defparam p_jinfo_comps_info_ac_tbl_no.width_be_b = 1;
defparam p_jinfo_comps_info_ac_tbl_no.numwords_a = 3;
defparam p_jinfo_comps_info_ac_tbl_no.numwords_b = 3;
defparam p_jinfo_comps_info_ac_tbl_no.init_file = "p_jinfo_comps_info_ac_tbl_no.mif";

reg [6:0] p_jinfo_ac_xhuff_tbl_bits_address_a;
reg p_jinfo_ac_xhuff_tbl_bits_write_enable_a;
reg [31:0] p_jinfo_ac_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_a;

reg [6:0] p_jinfo_ac_xhuff_tbl_bits_address_b;
reg p_jinfo_ac_xhuff_tbl_bits_write_enable_b;
reg [31:0] p_jinfo_ac_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_bits_out_b;

// @p_jinfo_ac_xhuff_tbl_bits = internal global [2 x [36 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_ac_xhuff_tbl_bits (
	.clk( clk ),
	.address_a( p_jinfo_ac_xhuff_tbl_bits_address_a ),
	.wren_a( p_jinfo_ac_xhuff_tbl_bits_write_enable_a ),
	.data_a( p_jinfo_ac_xhuff_tbl_bits_in_a ),
	.address_b( p_jinfo_ac_xhuff_tbl_bits_address_b ),
	.wren_b( p_jinfo_ac_xhuff_tbl_bits_write_enable_b ),
	.data_b( p_jinfo_ac_xhuff_tbl_bits_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_xhuff_tbl_bits_out_a ),
	.q_b( p_jinfo_ac_xhuff_tbl_bits_out_b)
);
defparam p_jinfo_ac_xhuff_tbl_bits.width_a = 32;
defparam p_jinfo_ac_xhuff_tbl_bits.widthad_a = 7;
defparam p_jinfo_ac_xhuff_tbl_bits.width_b = 32;
defparam p_jinfo_ac_xhuff_tbl_bits.widthad_b = 7;
defparam p_jinfo_ac_xhuff_tbl_bits.width_be_a = 1;
defparam p_jinfo_ac_xhuff_tbl_bits.width_be_b = 1;
defparam p_jinfo_ac_xhuff_tbl_bits.numwords_a = 72;
defparam p_jinfo_ac_xhuff_tbl_bits.numwords_b = 72;
defparam p_jinfo_ac_xhuff_tbl_bits.init_file = "p_jinfo_ac_xhuff_tbl_bits.mif";

reg [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_a;
reg p_jinfo_ac_xhuff_tbl_huffval_write_enable_a;
reg [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_a;

reg [9:0] p_jinfo_ac_xhuff_tbl_huffval_address_b;
reg p_jinfo_ac_xhuff_tbl_huffval_write_enable_b;
reg [31:0] p_jinfo_ac_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_ac_xhuff_tbl_huffval_out_b;

// @p_jinfo_ac_xhuff_tbl_huffval = internal global [2 x [257 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_ac_xhuff_tbl_huffval (
	.clk( clk ),
	.address_a( p_jinfo_ac_xhuff_tbl_huffval_address_a ),
	.wren_a( p_jinfo_ac_xhuff_tbl_huffval_write_enable_a ),
	.data_a( p_jinfo_ac_xhuff_tbl_huffval_in_a ),
	.address_b( p_jinfo_ac_xhuff_tbl_huffval_address_b ),
	.wren_b( p_jinfo_ac_xhuff_tbl_huffval_write_enable_b ),
	.data_b( p_jinfo_ac_xhuff_tbl_huffval_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_xhuff_tbl_huffval_out_a ),
	.q_b( p_jinfo_ac_xhuff_tbl_huffval_out_b)
);
defparam p_jinfo_ac_xhuff_tbl_huffval.width_a = 32;
defparam p_jinfo_ac_xhuff_tbl_huffval.widthad_a = 10;
defparam p_jinfo_ac_xhuff_tbl_huffval.width_b = 32;
defparam p_jinfo_ac_xhuff_tbl_huffval.widthad_b = 10;
defparam p_jinfo_ac_xhuff_tbl_huffval.width_be_a = 1;
defparam p_jinfo_ac_xhuff_tbl_huffval.width_be_b = 1;
defparam p_jinfo_ac_xhuff_tbl_huffval.numwords_a = 514;
defparam p_jinfo_ac_xhuff_tbl_huffval.numwords_b = 514;
defparam p_jinfo_ac_xhuff_tbl_huffval.init_file = "p_jinfo_ac_xhuff_tbl_huffval.mif";

reg [6:0] p_jinfo_dc_xhuff_tbl_bits_address_a;
reg p_jinfo_dc_xhuff_tbl_bits_write_enable_a;
reg [31:0] p_jinfo_dc_xhuff_tbl_bits_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_a;

reg [6:0] p_jinfo_dc_xhuff_tbl_bits_address_b;
reg p_jinfo_dc_xhuff_tbl_bits_write_enable_b;
reg [31:0] p_jinfo_dc_xhuff_tbl_bits_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_bits_out_b;

// @p_jinfo_dc_xhuff_tbl_bits = internal global [2 x [36 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_dc_xhuff_tbl_bits (
	.clk( clk ),
	.address_a( p_jinfo_dc_xhuff_tbl_bits_address_a ),
	.wren_a( p_jinfo_dc_xhuff_tbl_bits_write_enable_a ),
	.data_a( p_jinfo_dc_xhuff_tbl_bits_in_a ),
	.address_b( p_jinfo_dc_xhuff_tbl_bits_address_b ),
	.wren_b( p_jinfo_dc_xhuff_tbl_bits_write_enable_b ),
	.data_b( p_jinfo_dc_xhuff_tbl_bits_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_xhuff_tbl_bits_out_a ),
	.q_b( p_jinfo_dc_xhuff_tbl_bits_out_b)
);
defparam p_jinfo_dc_xhuff_tbl_bits.width_a = 32;
defparam p_jinfo_dc_xhuff_tbl_bits.widthad_a = 7;
defparam p_jinfo_dc_xhuff_tbl_bits.width_b = 32;
defparam p_jinfo_dc_xhuff_tbl_bits.widthad_b = 7;
defparam p_jinfo_dc_xhuff_tbl_bits.width_be_a = 1;
defparam p_jinfo_dc_xhuff_tbl_bits.width_be_b = 1;
defparam p_jinfo_dc_xhuff_tbl_bits.numwords_a = 72;
defparam p_jinfo_dc_xhuff_tbl_bits.numwords_b = 72;
defparam p_jinfo_dc_xhuff_tbl_bits.init_file = "p_jinfo_dc_xhuff_tbl_bits.mif";

reg [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_a;
reg p_jinfo_dc_xhuff_tbl_huffval_write_enable_a;
reg [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_a;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_a;

reg [9:0] p_jinfo_dc_xhuff_tbl_huffval_address_b;
reg p_jinfo_dc_xhuff_tbl_huffval_write_enable_b;
reg [31:0] p_jinfo_dc_xhuff_tbl_huffval_in_b;
wire [31:0] p_jinfo_dc_xhuff_tbl_huffval_out_b;

// @p_jinfo_dc_xhuff_tbl_huffval = internal global [2 x [257 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_dc_xhuff_tbl_huffval (
	.clk( clk ),
	.address_a( p_jinfo_dc_xhuff_tbl_huffval_address_a ),
	.wren_a( p_jinfo_dc_xhuff_tbl_huffval_write_enable_a ),
	.data_a( p_jinfo_dc_xhuff_tbl_huffval_in_a ),
	.address_b( p_jinfo_dc_xhuff_tbl_huffval_address_b ),
	.wren_b( p_jinfo_dc_xhuff_tbl_huffval_write_enable_b ),
	.data_b( p_jinfo_dc_xhuff_tbl_huffval_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_xhuff_tbl_huffval_out_a ),
	.q_b( p_jinfo_dc_xhuff_tbl_huffval_out_b)
);
defparam p_jinfo_dc_xhuff_tbl_huffval.width_a = 32;
defparam p_jinfo_dc_xhuff_tbl_huffval.widthad_a = 10;
defparam p_jinfo_dc_xhuff_tbl_huffval.width_b = 32;
defparam p_jinfo_dc_xhuff_tbl_huffval.widthad_b = 10;
defparam p_jinfo_dc_xhuff_tbl_huffval.width_be_a = 1;
defparam p_jinfo_dc_xhuff_tbl_huffval.width_be_b = 1;
defparam p_jinfo_dc_xhuff_tbl_huffval.numwords_a = 514;
defparam p_jinfo_dc_xhuff_tbl_huffval.numwords_b = 514;
defparam p_jinfo_dc_xhuff_tbl_huffval.init_file = "p_jinfo_dc_xhuff_tbl_huffval.mif";

reg [7:0] p_jinfo_quant_tbl_quantval_address_a;
reg p_jinfo_quant_tbl_quantval_write_enable_a;
reg [31:0] p_jinfo_quant_tbl_quantval_in_a;
wire [31:0] p_jinfo_quant_tbl_quantval_out_a;

reg [7:0] p_jinfo_quant_tbl_quantval_address_b;
reg p_jinfo_quant_tbl_quantval_write_enable_b;
reg [31:0] p_jinfo_quant_tbl_quantval_in_b;
wire [31:0] p_jinfo_quant_tbl_quantval_out_b;

// @p_jinfo_quant_tbl_quantval = internal unnamed_addr global [4 x [64 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_quant_tbl_quantval (
	.clk( clk ),
	.address_a( p_jinfo_quant_tbl_quantval_address_a ),
	.wren_a( p_jinfo_quant_tbl_quantval_write_enable_a ),
	.data_a( p_jinfo_quant_tbl_quantval_in_a ),
	.address_b( p_jinfo_quant_tbl_quantval_address_b ),
	.wren_b( p_jinfo_quant_tbl_quantval_write_enable_b ),
	.data_b( p_jinfo_quant_tbl_quantval_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_quant_tbl_quantval_out_a ),
	.q_b( p_jinfo_quant_tbl_quantval_out_b)
);
defparam p_jinfo_quant_tbl_quantval.width_a = 32;
defparam p_jinfo_quant_tbl_quantval.widthad_a = 8;
defparam p_jinfo_quant_tbl_quantval.width_b = 32;
defparam p_jinfo_quant_tbl_quantval.widthad_b = 8;
defparam p_jinfo_quant_tbl_quantval.width_be_a = 1;
defparam p_jinfo_quant_tbl_quantval.width_be_b = 1;
defparam p_jinfo_quant_tbl_quantval.numwords_a = 256;
defparam p_jinfo_quant_tbl_quantval.numwords_b = 256;
defparam p_jinfo_quant_tbl_quantval.init_file = "p_jinfo_quant_tbl_quantval.mif";

reg [5:0] zigzag_index_address_a;
reg zigzag_index_write_enable_a;
reg [31:0] zigzag_index_in_a;
wire [31:0] zigzag_index_out_a;

reg [5:0] zigzag_index_address_b;
reg zigzag_index_write_enable_b;
reg [31:0] zigzag_index_in_b;
wire [31:0] zigzag_index_out_b;

// @zigzag_index = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 5, i32 6, i32 14, i32 15, i32 27, i32 28, i32 2, i32 4, i32 7, i32 13, i32 16, i32 26, i32 29, i32 42, i32 3, i32 8, i32 12, i32 17, i32 25, i32 30, i32 41, i32 43, i32 9, i32 11, i32 18, i32 24, i32 31, i32 40, i32 44, i32 53, i32 10, i32 19, i32 23, i32 32, i32 39, i32 45, i32 52, i32 54, i32 20, i32 22, i32 33, i32 38, i32 46, i32 51, i32 55, i32 60, i32 21, i32 34, i32 37, i32 47, i32 50, i32 56, i32 59, i32 61, i32 35, i32 36, i32 48, i32 49, i32 57, i32 58, i32 62, i32 63], align 4

ram_two_ports zigzag_index (
	.clk( clk ),
	.address_a( zigzag_index_address_a ),
	.wren_a( zigzag_index_write_enable_a ),
	.data_a( zigzag_index_in_a ),
	.address_b( zigzag_index_address_b ),
	.wren_b( zigzag_index_write_enable_b ),
	.data_b( zigzag_index_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( zigzag_index_out_a ),
	.q_b( zigzag_index_out_b)
);
defparam zigzag_index.width_a = 32;
defparam zigzag_index.widthad_a = 6;
defparam zigzag_index.width_b = 32;
defparam zigzag_index.widthad_b = 6;
defparam zigzag_index.width_be_a = 1;
defparam zigzag_index.width_be_b = 1;
defparam zigzag_index.numwords_a = 64;
defparam zigzag_index.numwords_b = 64;
defparam zigzag_index.init_file = "zigzag_index.mif";

reg [0:0] p_jinfo_MCUWidth_address_a;
reg p_jinfo_MCUWidth_write_enable_a;
reg [31:0] p_jinfo_MCUWidth_in_a;
wire [31:0] p_jinfo_MCUWidth_out_a;

reg [0:0] p_jinfo_MCUWidth_address_b;
reg p_jinfo_MCUWidth_write_enable_b;
reg [31:0] p_jinfo_MCUWidth_in_b;
wire [31:0] p_jinfo_MCUWidth_out_b;

// @p_jinfo_MCUWidth = internal unnamed_addr global i32 0, align 4

ram_two_ports p_jinfo_MCUWidth (
	.clk( clk ),
	.address_a( p_jinfo_MCUWidth_address_a ),
	.wren_a( p_jinfo_MCUWidth_write_enable_a ),
	.data_a( p_jinfo_MCUWidth_in_a ),
	.address_b( p_jinfo_MCUWidth_address_b ),
	.wren_b( p_jinfo_MCUWidth_write_enable_b ),
	.data_b( p_jinfo_MCUWidth_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_MCUWidth_out_a ),
	.q_b( p_jinfo_MCUWidth_out_b)
);
defparam p_jinfo_MCUWidth.width_a = 32;
defparam p_jinfo_MCUWidth.widthad_a = 1;
defparam p_jinfo_MCUWidth.width_b = 32;
defparam p_jinfo_MCUWidth.widthad_b = 1;
defparam p_jinfo_MCUWidth.width_be_a = 1;
defparam p_jinfo_MCUWidth.width_be_b = 1;
defparam p_jinfo_MCUWidth.numwords_a = 1;
defparam p_jinfo_MCUWidth.numwords_b = 1;
defparam p_jinfo_MCUWidth.init_file = "p_jinfo_MCUWidth.mif";

reg [9:0] rgb_buf_address_a;
reg rgb_buf_write_enable_a;
reg [31:0] rgb_buf_in_a;
wire [31:0] rgb_buf_out_a;

reg [9:0] rgb_buf_address_b;
reg rgb_buf_write_enable_b;
reg [31:0] rgb_buf_in_b;
wire [31:0] rgb_buf_out_b;

// @rgb_buf = internal global [4 x [3 x [64 x i32]]] zeroinitializer, align 4

ram_two_ports rgb_buf (
	.clk( clk ),
	.address_a( rgb_buf_address_a ),
	.wren_a( rgb_buf_write_enable_a ),
	.data_a( rgb_buf_in_a ),
	.address_b( rgb_buf_address_b ),
	.wren_b( rgb_buf_write_enable_b ),
	.data_b( rgb_buf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( rgb_buf_out_a ),
	.q_b( rgb_buf_out_b)
);
defparam rgb_buf.width_a = 32;
defparam rgb_buf.widthad_a = 10;
defparam rgb_buf.width_b = 32;
defparam rgb_buf.widthad_b = 10;
defparam rgb_buf.width_be_a = 1;
defparam rgb_buf.width_be_b = 1;
defparam rgb_buf.numwords_a = 768;
defparam rgb_buf.numwords_b = 768;
defparam rgb_buf.init_file = "rgb_buf.mif";

reg [0:0] CurHuffReadBuf_address_a;
reg CurHuffReadBuf_write_enable_a;
reg [31:0] CurHuffReadBuf_in_a;
wire [31:0] CurHuffReadBuf_out_a;

reg [0:0] CurHuffReadBuf_address_b;
reg CurHuffReadBuf_write_enable_b;
reg [31:0] CurHuffReadBuf_in_b;
wire [31:0] CurHuffReadBuf_out_b;

// @CurHuffReadBuf = internal unnamed_addr global i8* null, align 4

ram_two_ports CurHuffReadBuf (
	.clk( clk ),
	.address_a( CurHuffReadBuf_address_a ),
	.wren_a( CurHuffReadBuf_write_enable_a ),
	.data_a( CurHuffReadBuf_in_a ),
	.address_b( CurHuffReadBuf_address_b ),
	.wren_b( CurHuffReadBuf_write_enable_b ),
	.data_b( CurHuffReadBuf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( CurHuffReadBuf_out_a ),
	.q_b( CurHuffReadBuf_out_b)
);
defparam CurHuffReadBuf.width_a = 32;
defparam CurHuffReadBuf.widthad_a = 1;
defparam CurHuffReadBuf.width_b = 32;
defparam CurHuffReadBuf.widthad_b = 1;
defparam CurHuffReadBuf.width_be_a = 1;
defparam CurHuffReadBuf.width_be_b = 1;
defparam CurHuffReadBuf.numwords_a = 1;
defparam CurHuffReadBuf.numwords_b = 1;
defparam CurHuffReadBuf.init_file = "CurHuffReadBuf.mif";

reg [13:0] OutData_comp_buf_address_a;
reg OutData_comp_buf_write_enable_a;
reg [7:0] OutData_comp_buf_in_a;
wire [7:0] OutData_comp_buf_out_a;

reg [13:0] OutData_comp_buf_address_b;
reg OutData_comp_buf_write_enable_b;
reg [7:0] OutData_comp_buf_in_b;
wire [7:0] OutData_comp_buf_out_b;

// @OutData_comp_buf = internal global [3 x [5310 x i8]] zeroinitializer, align 1

ram_two_ports OutData_comp_buf (
	.clk( clk ),
	.address_a( OutData_comp_buf_address_a ),
	.wren_a( OutData_comp_buf_write_enable_a ),
	.data_a( OutData_comp_buf_in_a ),
	.address_b( OutData_comp_buf_address_b ),
	.wren_b( OutData_comp_buf_write_enable_b ),
	.data_b( OutData_comp_buf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( OutData_comp_buf_out_a ),
	.q_b( OutData_comp_buf_out_b)
);
defparam OutData_comp_buf.width_a = 8;
defparam OutData_comp_buf.widthad_a = 14;
defparam OutData_comp_buf.width_b = 8;
defparam OutData_comp_buf.widthad_b = 14;
defparam OutData_comp_buf.width_be_a = 1;
defparam OutData_comp_buf.width_be_b = 1;
defparam OutData_comp_buf.numwords_a = 15930;
defparam OutData_comp_buf.numwords_b = 15930;
defparam OutData_comp_buf.init_file = "OutData_comp_buf.mif";

reg [4:0] bit_set_mask_address_a;
reg bit_set_mask_write_enable_a;
reg [31:0] bit_set_mask_in_a;
wire [31:0] bit_set_mask_out_a;

reg [4:0] bit_set_mask_address_b;
reg bit_set_mask_write_enable_b;
reg [31:0] bit_set_mask_in_b;
wire [31:0] bit_set_mask_out_b;

// @bit_set_mask = internal unnamed_addr constant [32 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768, i32 65536, i32 131072, i32 262144, i32 524288, i32 1048576, i32 2097152, i32 4194304, i32 8388608, i32 16777216, i32 33554432, i32 67108864, i32 134217728, i32 268435456, i32 536870912, i32 1073741824, i32 -2147483648], align 4

ram_two_ports bit_set_mask (
	.clk( clk ),
	.address_a( bit_set_mask_address_a ),
	.wren_a( bit_set_mask_write_enable_a ),
	.data_a( bit_set_mask_in_a ),
	.address_b( bit_set_mask_address_b ),
	.wren_b( bit_set_mask_write_enable_b ),
	.data_b( bit_set_mask_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( bit_set_mask_out_a ),
	.q_b( bit_set_mask_out_b)
);
defparam bit_set_mask.width_a = 32;
defparam bit_set_mask.widthad_a = 5;
defparam bit_set_mask.width_b = 32;
defparam bit_set_mask.widthad_b = 5;
defparam bit_set_mask.width_be_a = 1;
defparam bit_set_mask.width_be_b = 1;
defparam bit_set_mask.numwords_a = 32;
defparam bit_set_mask.numwords_b = 32;
defparam bit_set_mask.init_file = "bit_set_mask.mif";

reg [4:0] lmask_address_a;
reg lmask_write_enable_a;
reg [31:0] lmask_in_a;
wire [31:0] lmask_out_a;

reg [4:0] lmask_address_b;
reg lmask_write_enable_b;
reg [31:0] lmask_in_b;
wire [31:0] lmask_out_b;

// @lmask = internal unnamed_addr constant [32 x i32] [i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535, i32 131071, i32 262143, i32 524287, i32 1048575, i32 2097151, i32 4194303, i32 8388607, i32 16777215, i32 33554431, i32 67108863, i32 134217727, i32 268435455, i32 536870911, i32 1073741823, i32 2147483647, i32 -1], align 4

ram_two_ports lmask (
	.clk( clk ),
	.address_a( lmask_address_a ),
	.wren_a( lmask_write_enable_a ),
	.data_a( lmask_in_a ),
	.address_b( lmask_address_b ),
	.wren_b( lmask_write_enable_b ),
	.data_b( lmask_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( lmask_out_a ),
	.q_b( lmask_out_b)
);
defparam lmask.width_a = 32;
defparam lmask.widthad_a = 5;
defparam lmask.width_b = 32;
defparam lmask.widthad_b = 5;
defparam lmask.width_be_a = 1;
defparam lmask.width_be_b = 1;
defparam lmask.numwords_a = 32;
defparam lmask.numwords_b = 32;
defparam lmask.init_file = "lmask.mif";

reg [0:0] read_position_address_a;
reg read_position_write_enable_a;
reg [31:0] read_position_in_a;
wire [31:0] read_position_out_a;

reg [0:0] read_position_address_b;
reg read_position_write_enable_b;
reg [31:0] read_position_in_b;
wire [31:0] read_position_out_b;

// @read_position = internal unnamed_addr global i32 -1, align 4

ram_two_ports read_position (
	.clk( clk ),
	.address_a( read_position_address_a ),
	.wren_a( read_position_write_enable_a ),
	.data_a( read_position_in_a ),
	.address_b( read_position_address_b ),
	.wren_b( read_position_write_enable_b ),
	.data_b( read_position_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( read_position_out_a ),
	.q_b( read_position_out_b)
);
defparam read_position.width_a = 32;
defparam read_position.widthad_a = 1;
defparam read_position.width_b = 32;
defparam read_position.widthad_b = 1;
defparam read_position.width_be_a = 1;
defparam read_position.width_be_b = 1;
defparam read_position.numwords_a = 1;
defparam read_position.numwords_b = 1;
defparam read_position.init_file = "read_position.mif";

reg [0:0] current_read_byte_address_a;
reg current_read_byte_write_enable_a;
reg [31:0] current_read_byte_in_a;
wire [31:0] current_read_byte_out_a;

reg [0:0] current_read_byte_address_b;
reg current_read_byte_write_enable_b;
reg [31:0] current_read_byte_in_b;
wire [31:0] current_read_byte_out_b;

// @current_read_byte = internal unnamed_addr global i32 0, align 4

ram_two_ports current_read_byte (
	.clk( clk ),
	.address_a( current_read_byte_address_a ),
	.wren_a( current_read_byte_write_enable_a ),
	.data_a( current_read_byte_in_a ),
	.address_b( current_read_byte_address_b ),
	.wren_b( current_read_byte_write_enable_b ),
	.data_b( current_read_byte_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( current_read_byte_out_a ),
	.q_b( current_read_byte_out_b)
);
defparam current_read_byte.width_a = 32;
defparam current_read_byte.widthad_a = 1;
defparam current_read_byte.width_b = 32;
defparam current_read_byte.widthad_b = 1;
defparam current_read_byte.width_be_a = 1;
defparam current_read_byte.width_be_b = 1;
defparam current_read_byte.numwords_a = 1;
defparam current_read_byte.numwords_b = 1;
defparam current_read_byte.init_file = "current_read_byte.mif";

reg [0:0] p_jinfo_dc_dhuff_tbl_ml_address_a;
reg p_jinfo_dc_dhuff_tbl_ml_write_enable_a;
reg [31:0] p_jinfo_dc_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_a;

reg [0:0] p_jinfo_dc_dhuff_tbl_ml_address_b;
reg p_jinfo_dc_dhuff_tbl_ml_write_enable_b;
reg [31:0] p_jinfo_dc_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_ml_out_b;

// @p_jinfo_dc_dhuff_tbl_ml = internal unnamed_addr global [2 x i32] zeroinitializer, align 4

ram_two_ports p_jinfo_dc_dhuff_tbl_ml (
	.clk( clk ),
	.address_a( p_jinfo_dc_dhuff_tbl_ml_address_a ),
	.wren_a( p_jinfo_dc_dhuff_tbl_ml_write_enable_a ),
	.data_a( p_jinfo_dc_dhuff_tbl_ml_in_a ),
	.address_b( p_jinfo_dc_dhuff_tbl_ml_address_b ),
	.wren_b( p_jinfo_dc_dhuff_tbl_ml_write_enable_b ),
	.data_b( p_jinfo_dc_dhuff_tbl_ml_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_dhuff_tbl_ml_out_a ),
	.q_b( p_jinfo_dc_dhuff_tbl_ml_out_b)
);
defparam p_jinfo_dc_dhuff_tbl_ml.width_a = 32;
defparam p_jinfo_dc_dhuff_tbl_ml.widthad_a = 1;
defparam p_jinfo_dc_dhuff_tbl_ml.width_b = 32;
defparam p_jinfo_dc_dhuff_tbl_ml.widthad_b = 1;
defparam p_jinfo_dc_dhuff_tbl_ml.width_be_a = 1;
defparam p_jinfo_dc_dhuff_tbl_ml.width_be_b = 1;
defparam p_jinfo_dc_dhuff_tbl_ml.numwords_a = 2;
defparam p_jinfo_dc_dhuff_tbl_ml.numwords_b = 2;
defparam p_jinfo_dc_dhuff_tbl_ml.init_file = "p_jinfo_dc_dhuff_tbl_ml.mif";

reg [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_a;
reg p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a;
reg [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_a;

reg [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address_b;
reg p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b;
reg [31:0] p_jinfo_dc_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_maxcode_out_b;

// @p_jinfo_dc_dhuff_tbl_maxcode = internal global [2 x [36 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_dc_dhuff_tbl_maxcode (
	.clk( clk ),
	.address_a( p_jinfo_dc_dhuff_tbl_maxcode_address_a ),
	.wren_a( p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a ),
	.data_a( p_jinfo_dc_dhuff_tbl_maxcode_in_a ),
	.address_b( p_jinfo_dc_dhuff_tbl_maxcode_address_b ),
	.wren_b( p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b ),
	.data_b( p_jinfo_dc_dhuff_tbl_maxcode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_dhuff_tbl_maxcode_out_a ),
	.q_b( p_jinfo_dc_dhuff_tbl_maxcode_out_b)
);
defparam p_jinfo_dc_dhuff_tbl_maxcode.width_a = 32;
defparam p_jinfo_dc_dhuff_tbl_maxcode.widthad_a = 7;
defparam p_jinfo_dc_dhuff_tbl_maxcode.width_b = 32;
defparam p_jinfo_dc_dhuff_tbl_maxcode.widthad_b = 7;
defparam p_jinfo_dc_dhuff_tbl_maxcode.width_be_a = 1;
defparam p_jinfo_dc_dhuff_tbl_maxcode.width_be_b = 1;
defparam p_jinfo_dc_dhuff_tbl_maxcode.numwords_a = 72;
defparam p_jinfo_dc_dhuff_tbl_maxcode.numwords_b = 72;
defparam p_jinfo_dc_dhuff_tbl_maxcode.init_file = "p_jinfo_dc_dhuff_tbl_maxcode.mif";

reg [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_a;
reg p_jinfo_dc_dhuff_tbl_mincode_write_enable_a;
reg [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_a;

reg [6:0] p_jinfo_dc_dhuff_tbl_mincode_address_b;
reg p_jinfo_dc_dhuff_tbl_mincode_write_enable_b;
reg [31:0] p_jinfo_dc_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_mincode_out_b;

// @p_jinfo_dc_dhuff_tbl_mincode = internal global [2 x [36 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_dc_dhuff_tbl_mincode (
	.clk( clk ),
	.address_a( p_jinfo_dc_dhuff_tbl_mincode_address_a ),
	.wren_a( p_jinfo_dc_dhuff_tbl_mincode_write_enable_a ),
	.data_a( p_jinfo_dc_dhuff_tbl_mincode_in_a ),
	.address_b( p_jinfo_dc_dhuff_tbl_mincode_address_b ),
	.wren_b( p_jinfo_dc_dhuff_tbl_mincode_write_enable_b ),
	.data_b( p_jinfo_dc_dhuff_tbl_mincode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_dhuff_tbl_mincode_out_a ),
	.q_b( p_jinfo_dc_dhuff_tbl_mincode_out_b)
);
defparam p_jinfo_dc_dhuff_tbl_mincode.width_a = 32;
defparam p_jinfo_dc_dhuff_tbl_mincode.widthad_a = 7;
defparam p_jinfo_dc_dhuff_tbl_mincode.width_b = 32;
defparam p_jinfo_dc_dhuff_tbl_mincode.widthad_b = 7;
defparam p_jinfo_dc_dhuff_tbl_mincode.width_be_a = 1;
defparam p_jinfo_dc_dhuff_tbl_mincode.width_be_b = 1;
defparam p_jinfo_dc_dhuff_tbl_mincode.numwords_a = 72;
defparam p_jinfo_dc_dhuff_tbl_mincode.numwords_b = 72;
defparam p_jinfo_dc_dhuff_tbl_mincode.init_file = "p_jinfo_dc_dhuff_tbl_mincode.mif";

reg [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_a;
reg p_jinfo_dc_dhuff_tbl_valptr_write_enable_a;
reg [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_a;

reg [6:0] p_jinfo_dc_dhuff_tbl_valptr_address_b;
reg p_jinfo_dc_dhuff_tbl_valptr_write_enable_b;
reg [31:0] p_jinfo_dc_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_dc_dhuff_tbl_valptr_out_b;

// @p_jinfo_dc_dhuff_tbl_valptr = internal global [2 x [36 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_dc_dhuff_tbl_valptr (
	.clk( clk ),
	.address_a( p_jinfo_dc_dhuff_tbl_valptr_address_a ),
	.wren_a( p_jinfo_dc_dhuff_tbl_valptr_write_enable_a ),
	.data_a( p_jinfo_dc_dhuff_tbl_valptr_in_a ),
	.address_b( p_jinfo_dc_dhuff_tbl_valptr_address_b ),
	.wren_b( p_jinfo_dc_dhuff_tbl_valptr_write_enable_b ),
	.data_b( p_jinfo_dc_dhuff_tbl_valptr_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_dc_dhuff_tbl_valptr_out_a ),
	.q_b( p_jinfo_dc_dhuff_tbl_valptr_out_b)
);
defparam p_jinfo_dc_dhuff_tbl_valptr.width_a = 32;
defparam p_jinfo_dc_dhuff_tbl_valptr.widthad_a = 7;
defparam p_jinfo_dc_dhuff_tbl_valptr.width_b = 32;
defparam p_jinfo_dc_dhuff_tbl_valptr.widthad_b = 7;
defparam p_jinfo_dc_dhuff_tbl_valptr.width_be_a = 1;
defparam p_jinfo_dc_dhuff_tbl_valptr.width_be_b = 1;
defparam p_jinfo_dc_dhuff_tbl_valptr.numwords_a = 72;
defparam p_jinfo_dc_dhuff_tbl_valptr.numwords_b = 72;
defparam p_jinfo_dc_dhuff_tbl_valptr.init_file = "p_jinfo_dc_dhuff_tbl_valptr.mif";

reg [4:0] extend_mask_address_a;
reg extend_mask_write_enable_a;
reg [31:0] extend_mask_in_a;
wire [31:0] extend_mask_out_a;

reg [4:0] extend_mask_address_b;
reg extend_mask_write_enable_b;
reg [31:0] extend_mask_in_b;
wire [31:0] extend_mask_out_b;

// @extend_mask = internal unnamed_addr constant [20 x i32] [i32 -2, i32 -4, i32 -8, i32 -16, i32 -32, i32 -64, i32 -128, i32 -256, i32 -512, i32 -1024, i32 -2048, i32 -4096, i32 -8192, i32 -16384, i32 -32768, i32 -65536, i32 -131072, i32 -262144, i32 -524288, i32 -1048576], align 4

ram_two_ports extend_mask (
	.clk( clk ),
	.address_a( extend_mask_address_a ),
	.wren_a( extend_mask_write_enable_a ),
	.data_a( extend_mask_in_a ),
	.address_b( extend_mask_address_b ),
	.wren_b( extend_mask_write_enable_b ),
	.data_b( extend_mask_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( extend_mask_out_a ),
	.q_b( extend_mask_out_b)
);
defparam extend_mask.width_a = 32;
defparam extend_mask.widthad_a = 5;
defparam extend_mask.width_b = 32;
defparam extend_mask.widthad_b = 5;
defparam extend_mask.width_be_a = 1;
defparam extend_mask.width_be_b = 1;
defparam extend_mask.numwords_a = 20;
defparam extend_mask.numwords_b = 20;
defparam extend_mask.init_file = "extend_mask.mif";

reg [0:0] p_jinfo_ac_dhuff_tbl_ml_address_a;
reg p_jinfo_ac_dhuff_tbl_ml_write_enable_a;
reg [31:0] p_jinfo_ac_dhuff_tbl_ml_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_a;

reg [0:0] p_jinfo_ac_dhuff_tbl_ml_address_b;
reg p_jinfo_ac_dhuff_tbl_ml_write_enable_b;
reg [31:0] p_jinfo_ac_dhuff_tbl_ml_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_ml_out_b;

// @p_jinfo_ac_dhuff_tbl_ml = internal unnamed_addr global [2 x i32] zeroinitializer, align 4

ram_two_ports p_jinfo_ac_dhuff_tbl_ml (
	.clk( clk ),
	.address_a( p_jinfo_ac_dhuff_tbl_ml_address_a ),
	.wren_a( p_jinfo_ac_dhuff_tbl_ml_write_enable_a ),
	.data_a( p_jinfo_ac_dhuff_tbl_ml_in_a ),
	.address_b( p_jinfo_ac_dhuff_tbl_ml_address_b ),
	.wren_b( p_jinfo_ac_dhuff_tbl_ml_write_enable_b ),
	.data_b( p_jinfo_ac_dhuff_tbl_ml_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_dhuff_tbl_ml_out_a ),
	.q_b( p_jinfo_ac_dhuff_tbl_ml_out_b)
);
defparam p_jinfo_ac_dhuff_tbl_ml.width_a = 32;
defparam p_jinfo_ac_dhuff_tbl_ml.widthad_a = 1;
defparam p_jinfo_ac_dhuff_tbl_ml.width_b = 32;
defparam p_jinfo_ac_dhuff_tbl_ml.widthad_b = 1;
defparam p_jinfo_ac_dhuff_tbl_ml.width_be_a = 1;
defparam p_jinfo_ac_dhuff_tbl_ml.width_be_b = 1;
defparam p_jinfo_ac_dhuff_tbl_ml.numwords_a = 2;
defparam p_jinfo_ac_dhuff_tbl_ml.numwords_b = 2;
defparam p_jinfo_ac_dhuff_tbl_ml.init_file = "p_jinfo_ac_dhuff_tbl_ml.mif";

reg [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_a;
reg p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a;
reg [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_a;

reg [6:0] p_jinfo_ac_dhuff_tbl_maxcode_address_b;
reg p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b;
reg [31:0] p_jinfo_ac_dhuff_tbl_maxcode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_maxcode_out_b;

// @p_jinfo_ac_dhuff_tbl_maxcode = internal global [2 x [36 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_ac_dhuff_tbl_maxcode (
	.clk( clk ),
	.address_a( p_jinfo_ac_dhuff_tbl_maxcode_address_a ),
	.wren_a( p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a ),
	.data_a( p_jinfo_ac_dhuff_tbl_maxcode_in_a ),
	.address_b( p_jinfo_ac_dhuff_tbl_maxcode_address_b ),
	.wren_b( p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b ),
	.data_b( p_jinfo_ac_dhuff_tbl_maxcode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_dhuff_tbl_maxcode_out_a ),
	.q_b( p_jinfo_ac_dhuff_tbl_maxcode_out_b)
);
defparam p_jinfo_ac_dhuff_tbl_maxcode.width_a = 32;
defparam p_jinfo_ac_dhuff_tbl_maxcode.widthad_a = 7;
defparam p_jinfo_ac_dhuff_tbl_maxcode.width_b = 32;
defparam p_jinfo_ac_dhuff_tbl_maxcode.widthad_b = 7;
defparam p_jinfo_ac_dhuff_tbl_maxcode.width_be_a = 1;
defparam p_jinfo_ac_dhuff_tbl_maxcode.width_be_b = 1;
defparam p_jinfo_ac_dhuff_tbl_maxcode.numwords_a = 72;
defparam p_jinfo_ac_dhuff_tbl_maxcode.numwords_b = 72;
defparam p_jinfo_ac_dhuff_tbl_maxcode.init_file = "p_jinfo_ac_dhuff_tbl_maxcode.mif";

reg [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_a;
reg p_jinfo_ac_dhuff_tbl_mincode_write_enable_a;
reg [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_a;

reg [6:0] p_jinfo_ac_dhuff_tbl_mincode_address_b;
reg p_jinfo_ac_dhuff_tbl_mincode_write_enable_b;
reg [31:0] p_jinfo_ac_dhuff_tbl_mincode_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_mincode_out_b;

// @p_jinfo_ac_dhuff_tbl_mincode = internal global [2 x [36 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_ac_dhuff_tbl_mincode (
	.clk( clk ),
	.address_a( p_jinfo_ac_dhuff_tbl_mincode_address_a ),
	.wren_a( p_jinfo_ac_dhuff_tbl_mincode_write_enable_a ),
	.data_a( p_jinfo_ac_dhuff_tbl_mincode_in_a ),
	.address_b( p_jinfo_ac_dhuff_tbl_mincode_address_b ),
	.wren_b( p_jinfo_ac_dhuff_tbl_mincode_write_enable_b ),
	.data_b( p_jinfo_ac_dhuff_tbl_mincode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_dhuff_tbl_mincode_out_a ),
	.q_b( p_jinfo_ac_dhuff_tbl_mincode_out_b)
);
defparam p_jinfo_ac_dhuff_tbl_mincode.width_a = 32;
defparam p_jinfo_ac_dhuff_tbl_mincode.widthad_a = 7;
defparam p_jinfo_ac_dhuff_tbl_mincode.width_b = 32;
defparam p_jinfo_ac_dhuff_tbl_mincode.widthad_b = 7;
defparam p_jinfo_ac_dhuff_tbl_mincode.width_be_a = 1;
defparam p_jinfo_ac_dhuff_tbl_mincode.width_be_b = 1;
defparam p_jinfo_ac_dhuff_tbl_mincode.numwords_a = 72;
defparam p_jinfo_ac_dhuff_tbl_mincode.numwords_b = 72;
defparam p_jinfo_ac_dhuff_tbl_mincode.init_file = "p_jinfo_ac_dhuff_tbl_mincode.mif";

reg [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_a;
reg p_jinfo_ac_dhuff_tbl_valptr_write_enable_a;
reg [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_a;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_a;

reg [6:0] p_jinfo_ac_dhuff_tbl_valptr_address_b;
reg p_jinfo_ac_dhuff_tbl_valptr_write_enable_b;
reg [31:0] p_jinfo_ac_dhuff_tbl_valptr_in_b;
wire [31:0] p_jinfo_ac_dhuff_tbl_valptr_out_b;

// @p_jinfo_ac_dhuff_tbl_valptr = internal global [2 x [36 x i32]] zeroinitializer, align 4

ram_two_ports p_jinfo_ac_dhuff_tbl_valptr (
	.clk( clk ),
	.address_a( p_jinfo_ac_dhuff_tbl_valptr_address_a ),
	.wren_a( p_jinfo_ac_dhuff_tbl_valptr_write_enable_a ),
	.data_a( p_jinfo_ac_dhuff_tbl_valptr_in_a ),
	.address_b( p_jinfo_ac_dhuff_tbl_valptr_address_b ),
	.wren_b( p_jinfo_ac_dhuff_tbl_valptr_write_enable_b ),
	.data_b( p_jinfo_ac_dhuff_tbl_valptr_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( p_jinfo_ac_dhuff_tbl_valptr_out_a ),
	.q_b( p_jinfo_ac_dhuff_tbl_valptr_out_b)
);
defparam p_jinfo_ac_dhuff_tbl_valptr.width_a = 32;
defparam p_jinfo_ac_dhuff_tbl_valptr.widthad_a = 7;
defparam p_jinfo_ac_dhuff_tbl_valptr.width_b = 32;
defparam p_jinfo_ac_dhuff_tbl_valptr.widthad_b = 7;
defparam p_jinfo_ac_dhuff_tbl_valptr.width_be_a = 1;
defparam p_jinfo_ac_dhuff_tbl_valptr.width_be_b = 1;
defparam p_jinfo_ac_dhuff_tbl_valptr.numwords_a = 72;
defparam p_jinfo_ac_dhuff_tbl_valptr.numwords_b = 72;
defparam p_jinfo_ac_dhuff_tbl_valptr.init_file = "p_jinfo_ac_dhuff_tbl_valptr.mif";

reg [1:0] OutData_comp_vpos_address_a;
reg OutData_comp_vpos_write_enable_a;
reg [31:0] OutData_comp_vpos_in_a;
wire [31:0] OutData_comp_vpos_out_a;

reg [1:0] OutData_comp_vpos_address_b;
reg OutData_comp_vpos_write_enable_b;
reg [31:0] OutData_comp_vpos_in_b;
wire [31:0] OutData_comp_vpos_out_b;

// @OutData_comp_vpos = internal global [3 x i32] zeroinitializer, align 4

ram_two_ports OutData_comp_vpos (
	.clk( clk ),
	.address_a( OutData_comp_vpos_address_a ),
	.wren_a( OutData_comp_vpos_write_enable_a ),
	.data_a( OutData_comp_vpos_in_a ),
	.address_b( OutData_comp_vpos_address_b ),
	.wren_b( OutData_comp_vpos_write_enable_b ),
	.data_b( OutData_comp_vpos_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( OutData_comp_vpos_out_a ),
	.q_b( OutData_comp_vpos_out_b)
);
defparam OutData_comp_vpos.width_a = 32;
defparam OutData_comp_vpos.widthad_a = 2;
defparam OutData_comp_vpos.width_b = 32;
defparam OutData_comp_vpos.widthad_b = 2;
defparam OutData_comp_vpos.width_be_a = 1;
defparam OutData_comp_vpos.width_be_b = 1;
defparam OutData_comp_vpos.numwords_a = 3;
defparam OutData_comp_vpos.numwords_b = 3;
defparam OutData_comp_vpos.init_file = "OutData_comp_vpos.mif";

reg [1:0] OutData_comp_hpos_address_a;
reg OutData_comp_hpos_write_enable_a;
reg [31:0] OutData_comp_hpos_in_a;
wire [31:0] OutData_comp_hpos_out_a;

reg [1:0] OutData_comp_hpos_address_b;
reg OutData_comp_hpos_write_enable_b;
reg [31:0] OutData_comp_hpos_in_b;
wire [31:0] OutData_comp_hpos_out_b;

// @OutData_comp_hpos = internal global [3 x i32] zeroinitializer, align 4

ram_two_ports OutData_comp_hpos (
	.clk( clk ),
	.address_a( OutData_comp_hpos_address_a ),
	.wren_a( OutData_comp_hpos_write_enable_a ),
	.data_a( OutData_comp_hpos_in_a ),
	.address_b( OutData_comp_hpos_address_b ),
	.wren_b( OutData_comp_hpos_write_enable_b ),
	.data_b( OutData_comp_hpos_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( OutData_comp_hpos_out_a ),
	.q_b( OutData_comp_hpos_out_b)
);
defparam OutData_comp_hpos.width_a = 32;
defparam OutData_comp_hpos.widthad_a = 2;
defparam OutData_comp_hpos.width_b = 32;
defparam OutData_comp_hpos.widthad_b = 2;
defparam OutData_comp_hpos.width_be_a = 1;
defparam OutData_comp_hpos.width_be_b = 1;
defparam OutData_comp_hpos.numwords_a = 3;
defparam OutData_comp_hpos.numwords_b = 3;
defparam OutData_comp_hpos.init_file = "OutData_comp_hpos.mif";

reg [12:0] JpegFileBuf_address_a;
reg JpegFileBuf_write_enable_a;
reg [7:0] JpegFileBuf_in_a;
wire [7:0] JpegFileBuf_out_a;

reg [12:0] JpegFileBuf_address_b;
reg JpegFileBuf_write_enable_b;
reg [7:0] JpegFileBuf_in_b;
wire [7:0] JpegFileBuf_out_b;

// @JpegFileBuf = internal global [5310 x i8] zeroinitializer, align 1

ram_two_ports JpegFileBuf (
	.clk( clk ),
	.address_a( JpegFileBuf_address_a ),
	.wren_a( JpegFileBuf_write_enable_a ),
	.data_a( JpegFileBuf_in_a ),
	.address_b( JpegFileBuf_address_b ),
	.wren_b( JpegFileBuf_write_enable_b ),
	.data_b( JpegFileBuf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( JpegFileBuf_out_a ),
	.q_b( JpegFileBuf_out_b)
);
defparam JpegFileBuf.width_a = 8;
defparam JpegFileBuf.widthad_a = 13;
defparam JpegFileBuf.width_b = 8;
defparam JpegFileBuf.widthad_b = 13;
defparam JpegFileBuf.width_be_a = 1;
defparam JpegFileBuf.width_be_b = 1;
defparam JpegFileBuf.numwords_a = 5310;
defparam JpegFileBuf.numwords_b = 5310;
defparam JpegFileBuf.init_file = "JpegFileBuf.mif";

reg [5:0] decode_block_0_QuantBuff_address_a;
reg decode_block_0_QuantBuff_write_enable_a;
reg [31:0] decode_block_0_QuantBuff_in_a;
wire [31:0] decode_block_0_QuantBuff_out_a;

reg [5:0] decode_block_0_QuantBuff_address_b;
reg decode_block_0_QuantBuff_write_enable_b;
reg [31:0] decode_block_0_QuantBuff_in_b;
wire [31:0] decode_block_0_QuantBuff_out_b;

//   %QuantBuff = alloca [64 x i32], align 4
ram_two_ports decode_block_0_QuantBuff (
	.clk( clk ),
	.address_a( decode_block_0_QuantBuff_address_a ),
	.wren_a( decode_block_0_QuantBuff_write_enable_a ),
	.data_a( decode_block_0_QuantBuff_in_a ),
	.address_b( decode_block_0_QuantBuff_address_b ),
	.wren_b( decode_block_0_QuantBuff_write_enable_b ),
	.data_b( decode_block_0_QuantBuff_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( decode_block_0_QuantBuff_out_a ),
	.q_b( decode_block_0_QuantBuff_out_b)
);
defparam decode_block_0_QuantBuff.width_a = 32;
defparam decode_block_0_QuantBuff.widthad_a = 6;
defparam decode_block_0_QuantBuff.width_b = 32;
defparam decode_block_0_QuantBuff.widthad_b = 6;
defparam decode_block_0_QuantBuff.width_be_a = 1;
defparam decode_block_0_QuantBuff.width_be_b = 1;
defparam decode_block_0_QuantBuff.numwords_a = 64;
defparam decode_block_0_QuantBuff.numwords_b = 64;

reg [8:0] huff_make_dhuff_tb_0_huffsize_address_a;
reg huff_make_dhuff_tb_0_huffsize_write_enable_a;
reg [31:0] huff_make_dhuff_tb_0_huffsize_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_a;

reg [8:0] huff_make_dhuff_tb_0_huffsize_address_b;
reg huff_make_dhuff_tb_0_huffsize_write_enable_b;
reg [31:0] huff_make_dhuff_tb_0_huffsize_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffsize_out_b;

//   %huffsize = alloca [257 x i32], align 4
ram_two_ports huff_make_dhuff_tb_0_huffsize (
	.clk( clk ),
	.address_a( huff_make_dhuff_tb_0_huffsize_address_a ),
	.wren_a( huff_make_dhuff_tb_0_huffsize_write_enable_a ),
	.data_a( huff_make_dhuff_tb_0_huffsize_in_a ),
	.address_b( huff_make_dhuff_tb_0_huffsize_address_b ),
	.wren_b( huff_make_dhuff_tb_0_huffsize_write_enable_b ),
	.data_b( huff_make_dhuff_tb_0_huffsize_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( huff_make_dhuff_tb_0_huffsize_out_a ),
	.q_b( huff_make_dhuff_tb_0_huffsize_out_b)
);
defparam huff_make_dhuff_tb_0_huffsize.width_a = 32;
defparam huff_make_dhuff_tb_0_huffsize.widthad_a = 9;
defparam huff_make_dhuff_tb_0_huffsize.width_b = 32;
defparam huff_make_dhuff_tb_0_huffsize.widthad_b = 9;
defparam huff_make_dhuff_tb_0_huffsize.width_be_a = 1;
defparam huff_make_dhuff_tb_0_huffsize.width_be_b = 1;
defparam huff_make_dhuff_tb_0_huffsize.numwords_a = 257;
defparam huff_make_dhuff_tb_0_huffsize.numwords_b = 257;

reg [8:0] huff_make_dhuff_tb_0_huffcode_address_a;
reg huff_make_dhuff_tb_0_huffcode_write_enable_a;
reg [31:0] huff_make_dhuff_tb_0_huffcode_in_a;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_a;

reg [8:0] huff_make_dhuff_tb_0_huffcode_address_b;
reg huff_make_dhuff_tb_0_huffcode_write_enable_b;
reg [31:0] huff_make_dhuff_tb_0_huffcode_in_b;
wire [31:0] huff_make_dhuff_tb_0_huffcode_out_b;

//   %huffcode = alloca [257 x i32], align 4
ram_two_ports huff_make_dhuff_tb_0_huffcode (
	.clk( clk ),
	.address_a( huff_make_dhuff_tb_0_huffcode_address_a ),
	.wren_a( huff_make_dhuff_tb_0_huffcode_write_enable_a ),
	.data_a( huff_make_dhuff_tb_0_huffcode_in_a ),
	.address_b( huff_make_dhuff_tb_0_huffcode_address_b ),
	.wren_b( huff_make_dhuff_tb_0_huffcode_write_enable_b ),
	.data_b( huff_make_dhuff_tb_0_huffcode_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( huff_make_dhuff_tb_0_huffcode_out_a ),
	.q_b( huff_make_dhuff_tb_0_huffcode_out_b)
);
defparam huff_make_dhuff_tb_0_huffcode.width_a = 32;
defparam huff_make_dhuff_tb_0_huffcode.widthad_a = 9;
defparam huff_make_dhuff_tb_0_huffcode.width_b = 32;
defparam huff_make_dhuff_tb_0_huffcode.widthad_b = 9;
defparam huff_make_dhuff_tb_0_huffcode.width_be_a = 1;
defparam huff_make_dhuff_tb_0_huffcode.width_be_b = 1;
defparam huff_make_dhuff_tb_0_huffcode.numwords_a = 257;
defparam huff_make_dhuff_tb_0_huffcode.numwords_b = 257;

reg [7:0] main_0_HuffBuff_i_i_address_a;
reg main_0_HuffBuff_i_i_write_enable_a;
reg [31:0] main_0_HuffBuff_i_i_in_a;
wire [31:0] main_0_HuffBuff_i_i_out_a;

reg [7:0] main_0_HuffBuff_i_i_address_b;
reg main_0_HuffBuff_i_i_write_enable_b;
reg [31:0] main_0_HuffBuff_i_i_in_b;
wire [31:0] main_0_HuffBuff_i_i_out_b;

//   %HuffBuff.i.i = alloca [3 x [64 x i32]], align 4
ram_two_ports main_0_HuffBuff_i_i (
	.clk( clk ),
	.address_a( main_0_HuffBuff_i_i_address_a ),
	.wren_a( main_0_HuffBuff_i_i_write_enable_a ),
	.data_a( main_0_HuffBuff_i_i_in_a ),
	.address_b( main_0_HuffBuff_i_i_address_b ),
	.wren_b( main_0_HuffBuff_i_i_write_enable_b ),
	.data_b( main_0_HuffBuff_i_i_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_HuffBuff_i_i_out_a ),
	.q_b( main_0_HuffBuff_i_i_out_b)
);
defparam main_0_HuffBuff_i_i.width_a = 32;
defparam main_0_HuffBuff_i_i.widthad_a = 8;
defparam main_0_HuffBuff_i_i.width_b = 32;
defparam main_0_HuffBuff_i_i.widthad_b = 8;
defparam main_0_HuffBuff_i_i.width_be_a = 1;
defparam main_0_HuffBuff_i_i.width_be_b = 1;
defparam main_0_HuffBuff_i_i.numwords_a = 192;
defparam main_0_HuffBuff_i_i.numwords_b = 192;

reg [8:0] main_0_IDCTBuff_i_i_address_a;
reg main_0_IDCTBuff_i_i_write_enable_a;
reg [31:0] main_0_IDCTBuff_i_i_in_a;
wire [31:0] main_0_IDCTBuff_i_i_out_a;

reg [8:0] main_0_IDCTBuff_i_i_address_b;
reg main_0_IDCTBuff_i_i_write_enable_b;
reg [31:0] main_0_IDCTBuff_i_i_in_b;
wire [31:0] main_0_IDCTBuff_i_i_out_b;

//   %IDCTBuff.i.i = alloca [6 x [64 x i32]], align 4
ram_two_ports main_0_IDCTBuff_i_i (
	.clk( clk ),
	.address_a( main_0_IDCTBuff_i_i_address_a ),
	.wren_a( main_0_IDCTBuff_i_i_write_enable_a ),
	.data_a( main_0_IDCTBuff_i_i_in_a ),
	.address_b( main_0_IDCTBuff_i_i_address_b ),
	.wren_b( main_0_IDCTBuff_i_i_write_enable_b ),
	.data_b( main_0_IDCTBuff_i_i_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_IDCTBuff_i_i_out_a ),
	.q_b( main_0_IDCTBuff_i_i_out_b)
);
defparam main_0_IDCTBuff_i_i.width_a = 32;
defparam main_0_IDCTBuff_i_i.widthad_a = 9;
defparam main_0_IDCTBuff_i_i.width_b = 32;
defparam main_0_IDCTBuff_i_i.widthad_b = 9;
defparam main_0_IDCTBuff_i_i.width_be_a = 1;
defparam main_0_IDCTBuff_i_i.width_be_b = 1;
defparam main_0_IDCTBuff_i_i.numwords_a = 384;
defparam main_0_IDCTBuff_i_i.numwords_b = 384;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [`MEMORY_CONTROLLER_TAG_SIZE-1:0] prevTag_a;
reg [`MEMORY_CONTROLLER_TAG_SIZE-1:0] prevTag_b;
reg [2:0] prevAddr_a;
reg [2:0] prevAddr_b;
reg [1:0] prevSize_a;
reg [1:0] prevSize_b;
reg [2:0] prevSize_a_and;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevTag_a <= tag_a;
	prevTag_b <= tag_b;
	prevAddr_a <= memory_controller_address_a[2:0];
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_a <= memory_controller_size_a;
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;
reg [2:0] select_not_struct_b;
wire select_hana_jpg_a = (tag_a ==`TAG_g_hana_jpg);
wire select_hana_jpg_b = (tag_b ==`TAG_g_hana_jpg);
reg select_hana_jpg_reg_a;
reg select_hana_jpg_reg_b;
wire [7:0] memory_controller_hana_jpg_out_a = {8{ select_hana_jpg_reg_a}} & hana_jpg_out_a;
wire [7:0] memory_controller_hana_jpg_out_b = {8{ select_hana_jpg_reg_b}} & hana_jpg_out_b;

wire select_hana_bmp_a = (tag_a ==`TAG_g_hana_bmp);
wire select_hana_bmp_b = (tag_b ==`TAG_g_hana_bmp);
reg select_hana_bmp_reg_a;
reg select_hana_bmp_reg_b;
wire [7:0] memory_controller_hana_bmp_out_a = {8{ select_hana_bmp_reg_a}} & hana_bmp_out_a;
wire [7:0] memory_controller_hana_bmp_out_b = {8{ select_hana_bmp_reg_b}} & hana_bmp_out_b;

wire select_out_unread_marker_a = (tag_a ==`TAG_g_out_unread_marker);
wire select_out_unread_marker_b = (tag_b ==`TAG_g_out_unread_marker);
reg select_out_unread_marker_reg_a;
reg select_out_unread_marker_reg_b;
wire [31:0] memory_controller_out_unread_marker_out_a = {32{ select_out_unread_marker_reg_a}} & out_unread_marker_out_a;
wire [31:0] memory_controller_out_unread_marker_out_b = {32{ select_out_unread_marker_reg_b}} & out_unread_marker_out_b;

wire select_out_index_get_sof_a = (tag_a ==`TAG_g_out_index_get_sof);
wire select_out_index_get_sof_b = (tag_b ==`TAG_g_out_index_get_sof);
reg select_out_index_get_sof_reg_a;
reg select_out_index_get_sof_reg_b;
wire [31:0] memory_controller_out_index_get_sof_out_a = {32{ select_out_index_get_sof_reg_a}} & out_index_get_sof_out_a;
wire [31:0] memory_controller_out_index_get_sof_out_b = {32{ select_out_index_get_sof_reg_b}} & out_index_get_sof_out_b;

wire select_out_v_samp_factor_get_sof_a = (tag_a ==`TAG_g_out_v_samp_factor_get_sof);
wire select_out_v_samp_factor_get_sof_b = (tag_b ==`TAG_g_out_v_samp_factor_get_sof);
reg select_out_v_samp_factor_get_sof_reg_a;
reg select_out_v_samp_factor_get_sof_reg_b;
wire [31:0] memory_controller_out_v_samp_factor_get_sof_out_a = {32{ select_out_v_samp_factor_get_sof_reg_a}} & out_v_samp_factor_get_sof_out_a;
wire [31:0] memory_controller_out_v_samp_factor_get_sof_out_b = {32{ select_out_v_samp_factor_get_sof_reg_b}} & out_v_samp_factor_get_sof_out_b;

wire select_out_comp_id_get_sos_a = (tag_a ==`TAG_g_out_comp_id_get_sos);
wire select_out_comp_id_get_sos_b = (tag_b ==`TAG_g_out_comp_id_get_sos);
reg select_out_comp_id_get_sos_reg_a;
reg select_out_comp_id_get_sos_reg_b;
wire [31:0] memory_controller_out_comp_id_get_sos_out_a = {32{ select_out_comp_id_get_sos_reg_a}} & out_comp_id_get_sos_out_a;
wire [31:0] memory_controller_out_comp_id_get_sos_out_b = {32{ select_out_comp_id_get_sos_reg_b}} & out_comp_id_get_sos_out_b;

wire select_out_ac_tbl_no_get_sos_a = (tag_a ==`TAG_g_out_ac_tbl_no_get_sos);
wire select_out_ac_tbl_no_get_sos_b = (tag_b ==`TAG_g_out_ac_tbl_no_get_sos);
reg select_out_ac_tbl_no_get_sos_reg_a;
reg select_out_ac_tbl_no_get_sos_reg_b;
wire [31:0] memory_controller_out_ac_tbl_no_get_sos_out_a = {32{ select_out_ac_tbl_no_get_sos_reg_a}} & out_ac_tbl_no_get_sos_out_a;
wire [31:0] memory_controller_out_ac_tbl_no_get_sos_out_b = {32{ select_out_ac_tbl_no_get_sos_reg_b}} & out_ac_tbl_no_get_sos_out_b;

wire select_out_length_get_dht_a = (tag_a ==`TAG_g_out_length_get_dht);
wire select_out_length_get_dht_b = (tag_b ==`TAG_g_out_length_get_dht);
reg select_out_length_get_dht_reg_a;
reg select_out_length_get_dht_reg_b;
wire [31:0] memory_controller_out_length_get_dht_out_a = {32{ select_out_length_get_dht_reg_a}} & out_length_get_dht_out_a;
wire [31:0] memory_controller_out_length_get_dht_out_b = {32{ select_out_length_get_dht_reg_b}} & out_length_get_dht_out_b;

wire select_out_index_get_dht_a = (tag_a ==`TAG_g_out_index_get_dht);
wire select_out_index_get_dht_b = (tag_b ==`TAG_g_out_index_get_dht);
reg select_out_index_get_dht_reg_a;
reg select_out_index_get_dht_reg_b;
wire [31:0] memory_controller_out_index_get_dht_out_a = {32{ select_out_index_get_dht_reg_a}} & out_index_get_dht_out_a;
wire [31:0] memory_controller_out_index_get_dht_out_b = {32{ select_out_index_get_dht_reg_b}} & out_index_get_dht_out_b;

wire select_out_count_get_dht_a = (tag_a ==`TAG_g_out_count_get_dht);
wire select_out_count_get_dht_b = (tag_b ==`TAG_g_out_count_get_dht);
reg select_out_count_get_dht_reg_a;
reg select_out_count_get_dht_reg_b;
wire [31:0] memory_controller_out_count_get_dht_out_a = {32{ select_out_count_get_dht_reg_a}} & out_count_get_dht_out_a;
wire [31:0] memory_controller_out_count_get_dht_out_b = {32{ select_out_count_get_dht_reg_b}} & out_count_get_dht_out_b;

wire select_out_length_get_dqt_a = (tag_a ==`TAG_g_out_length_get_dqt);
wire select_out_length_get_dqt_b = (tag_b ==`TAG_g_out_length_get_dqt);
reg select_out_length_get_dqt_reg_a;
reg select_out_length_get_dqt_reg_b;
wire [31:0] memory_controller_out_length_get_dqt_out_a = {32{ select_out_length_get_dqt_reg_a}} & out_length_get_dqt_out_a;
wire [31:0] memory_controller_out_length_get_dqt_out_b = {32{ select_out_length_get_dqt_reg_b}} & out_length_get_dqt_out_b;

wire select_out_prec_get_dht_a = (tag_a ==`TAG_g_out_prec_get_dht);
wire select_out_prec_get_dht_b = (tag_b ==`TAG_g_out_prec_get_dht);
reg select_out_prec_get_dht_reg_a;
reg select_out_prec_get_dht_reg_b;
wire [31:0] memory_controller_out_prec_get_dht_out_a = {32{ select_out_prec_get_dht_reg_a}} & out_prec_get_dht_out_a;
wire [31:0] memory_controller_out_prec_get_dht_out_b = {32{ select_out_prec_get_dht_reg_b}} & out_prec_get_dht_out_b;

wire select_out_num_get_dht_a = (tag_a ==`TAG_g_out_num_get_dht);
wire select_out_num_get_dht_b = (tag_b ==`TAG_g_out_num_get_dht);
reg select_out_num_get_dht_reg_a;
reg select_out_num_get_dht_reg_b;
wire [31:0] memory_controller_out_num_get_dht_out_a = {32{ select_out_num_get_dht_reg_a}} & out_num_get_dht_out_a;
wire [31:0] memory_controller_out_num_get_dht_out_b = {32{ select_out_num_get_dht_reg_b}} & out_num_get_dht_out_b;

wire select_izigzag_index_a = (tag_a ==`TAG_g_izigzag_index);
wire select_izigzag_index_b = (tag_b ==`TAG_g_izigzag_index);
reg select_izigzag_index_reg_a;
reg select_izigzag_index_reg_b;
wire [31:0] memory_controller_izigzag_index_out_a = {32{ select_izigzag_index_reg_a}} & izigzag_index_out_a;
wire [31:0] memory_controller_izigzag_index_out_b = {32{ select_izigzag_index_reg_b}} & izigzag_index_out_b;

wire select_main_result_a = (tag_a ==`TAG_g_main_result);
wire select_main_result_b = (tag_b ==`TAG_g_main_result);
reg select_main_result_reg_a;
reg select_main_result_reg_b;
wire [31:0] memory_controller_main_result_out_a = {32{ select_main_result_reg_a}} & main_result_out_a;
wire [31:0] memory_controller_main_result_out_b = {32{ select_main_result_reg_b}} & main_result_out_b;

wire select_p_jinfo_image_height_a = (tag_a ==`TAG_g_p_jinfo_image_height);
wire select_p_jinfo_image_height_b = (tag_b ==`TAG_g_p_jinfo_image_height);
reg select_p_jinfo_image_height_reg_a;
reg select_p_jinfo_image_height_reg_b;
wire [15:0] memory_controller_p_jinfo_image_height_out_a = {16{ select_p_jinfo_image_height_reg_a}} & p_jinfo_image_height_out_a;
wire [15:0] memory_controller_p_jinfo_image_height_out_b = {16{ select_p_jinfo_image_height_reg_b}} & p_jinfo_image_height_out_b;

wire select_p_jinfo_image_width_a = (tag_a ==`TAG_g_p_jinfo_image_width);
wire select_p_jinfo_image_width_b = (tag_b ==`TAG_g_p_jinfo_image_width);
reg select_p_jinfo_image_width_reg_a;
reg select_p_jinfo_image_width_reg_b;
wire [15:0] memory_controller_p_jinfo_image_width_out_a = {16{ select_p_jinfo_image_width_reg_a}} & p_jinfo_image_width_out_a;
wire [15:0] memory_controller_p_jinfo_image_width_out_b = {16{ select_p_jinfo_image_width_reg_b}} & p_jinfo_image_width_out_b;

wire select_p_jinfo_comps_info_index_a = (tag_a ==`TAG_g_p_jinfo_comps_info_index);
wire select_p_jinfo_comps_info_index_b = (tag_b ==`TAG_g_p_jinfo_comps_info_index);
reg select_p_jinfo_comps_info_index_reg_a;
reg select_p_jinfo_comps_info_index_reg_b;
wire [7:0] memory_controller_p_jinfo_comps_info_index_out_a = {8{ select_p_jinfo_comps_info_index_reg_a}} & p_jinfo_comps_info_index_out_a;
wire [7:0] memory_controller_p_jinfo_comps_info_index_out_b = {8{ select_p_jinfo_comps_info_index_reg_b}} & p_jinfo_comps_info_index_out_b;

wire select_p_jinfo_comps_info_id_a = (tag_a ==`TAG_g_p_jinfo_comps_info_id);
wire select_p_jinfo_comps_info_id_b = (tag_b ==`TAG_g_p_jinfo_comps_info_id);
reg select_p_jinfo_comps_info_id_reg_a;
reg select_p_jinfo_comps_info_id_reg_b;
wire [7:0] memory_controller_p_jinfo_comps_info_id_out_a = {8{ select_p_jinfo_comps_info_id_reg_a}} & p_jinfo_comps_info_id_out_a;
wire [7:0] memory_controller_p_jinfo_comps_info_id_out_b = {8{ select_p_jinfo_comps_info_id_reg_b}} & p_jinfo_comps_info_id_out_b;

wire select_p_jinfo_comps_info_h_samp_factor_a = (tag_a ==`TAG_g_p_jinfo_comps_info_h_samp_factor);
wire select_p_jinfo_comps_info_h_samp_factor_b = (tag_b ==`TAG_g_p_jinfo_comps_info_h_samp_factor);
reg select_p_jinfo_comps_info_h_samp_factor_reg_a;
reg select_p_jinfo_comps_info_h_samp_factor_reg_b;
wire [7:0] memory_controller_p_jinfo_comps_info_h_samp_factor_out_a = {8{ select_p_jinfo_comps_info_h_samp_factor_reg_a}} & p_jinfo_comps_info_h_samp_factor_out_a;
wire [7:0] memory_controller_p_jinfo_comps_info_h_samp_factor_out_b = {8{ select_p_jinfo_comps_info_h_samp_factor_reg_b}} & p_jinfo_comps_info_h_samp_factor_out_b;

wire select_p_jinfo_comps_info_v_samp_factor_a = (tag_a ==`TAG_g_p_jinfo_comps_info_v_samp_factor);
wire select_p_jinfo_comps_info_v_samp_factor_b = (tag_b ==`TAG_g_p_jinfo_comps_info_v_samp_factor);
reg select_p_jinfo_comps_info_v_samp_factor_reg_a;
reg select_p_jinfo_comps_info_v_samp_factor_reg_b;
wire [7:0] memory_controller_p_jinfo_comps_info_v_samp_factor_out_a = {8{ select_p_jinfo_comps_info_v_samp_factor_reg_a}} & p_jinfo_comps_info_v_samp_factor_out_a;
wire [7:0] memory_controller_p_jinfo_comps_info_v_samp_factor_out_b = {8{ select_p_jinfo_comps_info_v_samp_factor_reg_b}} & p_jinfo_comps_info_v_samp_factor_out_b;

wire select_p_jinfo_comps_info_quant_tbl_no_a = (tag_a ==`TAG_g_p_jinfo_comps_info_quant_tbl_no);
wire select_p_jinfo_comps_info_quant_tbl_no_b = (tag_b ==`TAG_g_p_jinfo_comps_info_quant_tbl_no);
reg select_p_jinfo_comps_info_quant_tbl_no_reg_a;
reg select_p_jinfo_comps_info_quant_tbl_no_reg_b;
wire [7:0] memory_controller_p_jinfo_comps_info_quant_tbl_no_out_a = {8{ select_p_jinfo_comps_info_quant_tbl_no_reg_a}} & p_jinfo_comps_info_quant_tbl_no_out_a;
wire [7:0] memory_controller_p_jinfo_comps_info_quant_tbl_no_out_b = {8{ select_p_jinfo_comps_info_quant_tbl_no_reg_b}} & p_jinfo_comps_info_quant_tbl_no_out_b;

wire select_p_jinfo_comps_info_dc_tbl_no_a = (tag_a ==`TAG_g_p_jinfo_comps_info_dc_tbl_no);
wire select_p_jinfo_comps_info_dc_tbl_no_b = (tag_b ==`TAG_g_p_jinfo_comps_info_dc_tbl_no);
reg select_p_jinfo_comps_info_dc_tbl_no_reg_a;
reg select_p_jinfo_comps_info_dc_tbl_no_reg_b;
wire [7:0] memory_controller_p_jinfo_comps_info_dc_tbl_no_out_a = {8{ select_p_jinfo_comps_info_dc_tbl_no_reg_a}} & p_jinfo_comps_info_dc_tbl_no_out_a;
wire [7:0] memory_controller_p_jinfo_comps_info_dc_tbl_no_out_b = {8{ select_p_jinfo_comps_info_dc_tbl_no_reg_b}} & p_jinfo_comps_info_dc_tbl_no_out_b;

wire select_p_jinfo_comps_info_ac_tbl_no_a = (tag_a ==`TAG_g_p_jinfo_comps_info_ac_tbl_no);
wire select_p_jinfo_comps_info_ac_tbl_no_b = (tag_b ==`TAG_g_p_jinfo_comps_info_ac_tbl_no);
reg select_p_jinfo_comps_info_ac_tbl_no_reg_a;
reg select_p_jinfo_comps_info_ac_tbl_no_reg_b;
wire [7:0] memory_controller_p_jinfo_comps_info_ac_tbl_no_out_a = {8{ select_p_jinfo_comps_info_ac_tbl_no_reg_a}} & p_jinfo_comps_info_ac_tbl_no_out_a;
wire [7:0] memory_controller_p_jinfo_comps_info_ac_tbl_no_out_b = {8{ select_p_jinfo_comps_info_ac_tbl_no_reg_b}} & p_jinfo_comps_info_ac_tbl_no_out_b;

wire select_p_jinfo_ac_xhuff_tbl_bits_a = (tag_a ==`TAG_g_p_jinfo_ac_xhuff_tbl_bits);
wire select_p_jinfo_ac_xhuff_tbl_bits_b = (tag_b ==`TAG_g_p_jinfo_ac_xhuff_tbl_bits);
reg select_p_jinfo_ac_xhuff_tbl_bits_reg_a;
reg select_p_jinfo_ac_xhuff_tbl_bits_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_a = {32{ select_p_jinfo_ac_xhuff_tbl_bits_reg_a}} & p_jinfo_ac_xhuff_tbl_bits_out_a;
wire [31:0] memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_b = {32{ select_p_jinfo_ac_xhuff_tbl_bits_reg_b}} & p_jinfo_ac_xhuff_tbl_bits_out_b;

wire select_p_jinfo_ac_xhuff_tbl_huffval_a = (tag_a ==`TAG_g_p_jinfo_ac_xhuff_tbl_huffval);
wire select_p_jinfo_ac_xhuff_tbl_huffval_b = (tag_b ==`TAG_g_p_jinfo_ac_xhuff_tbl_huffval);
reg select_p_jinfo_ac_xhuff_tbl_huffval_reg_a;
reg select_p_jinfo_ac_xhuff_tbl_huffval_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_a = {32{ select_p_jinfo_ac_xhuff_tbl_huffval_reg_a}} & p_jinfo_ac_xhuff_tbl_huffval_out_a;
wire [31:0] memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_b = {32{ select_p_jinfo_ac_xhuff_tbl_huffval_reg_b}} & p_jinfo_ac_xhuff_tbl_huffval_out_b;

wire select_p_jinfo_dc_xhuff_tbl_bits_a = (tag_a ==`TAG_g_p_jinfo_dc_xhuff_tbl_bits);
wire select_p_jinfo_dc_xhuff_tbl_bits_b = (tag_b ==`TAG_g_p_jinfo_dc_xhuff_tbl_bits);
reg select_p_jinfo_dc_xhuff_tbl_bits_reg_a;
reg select_p_jinfo_dc_xhuff_tbl_bits_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_a = {32{ select_p_jinfo_dc_xhuff_tbl_bits_reg_a}} & p_jinfo_dc_xhuff_tbl_bits_out_a;
wire [31:0] memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_b = {32{ select_p_jinfo_dc_xhuff_tbl_bits_reg_b}} & p_jinfo_dc_xhuff_tbl_bits_out_b;

wire select_p_jinfo_dc_xhuff_tbl_huffval_a = (tag_a ==`TAG_g_p_jinfo_dc_xhuff_tbl_huffval);
wire select_p_jinfo_dc_xhuff_tbl_huffval_b = (tag_b ==`TAG_g_p_jinfo_dc_xhuff_tbl_huffval);
reg select_p_jinfo_dc_xhuff_tbl_huffval_reg_a;
reg select_p_jinfo_dc_xhuff_tbl_huffval_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_a = {32{ select_p_jinfo_dc_xhuff_tbl_huffval_reg_a}} & p_jinfo_dc_xhuff_tbl_huffval_out_a;
wire [31:0] memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_b = {32{ select_p_jinfo_dc_xhuff_tbl_huffval_reg_b}} & p_jinfo_dc_xhuff_tbl_huffval_out_b;

wire select_p_jinfo_quant_tbl_quantval_a = (tag_a ==`TAG_g_p_jinfo_quant_tbl_quantval);
wire select_p_jinfo_quant_tbl_quantval_b = (tag_b ==`TAG_g_p_jinfo_quant_tbl_quantval);
reg select_p_jinfo_quant_tbl_quantval_reg_a;
reg select_p_jinfo_quant_tbl_quantval_reg_b;
wire [31:0] memory_controller_p_jinfo_quant_tbl_quantval_out_a = {32{ select_p_jinfo_quant_tbl_quantval_reg_a}} & p_jinfo_quant_tbl_quantval_out_a;
wire [31:0] memory_controller_p_jinfo_quant_tbl_quantval_out_b = {32{ select_p_jinfo_quant_tbl_quantval_reg_b}} & p_jinfo_quant_tbl_quantval_out_b;

wire select_zigzag_index_a = (tag_a ==`TAG_g_zigzag_index);
wire select_zigzag_index_b = (tag_b ==`TAG_g_zigzag_index);
reg select_zigzag_index_reg_a;
reg select_zigzag_index_reg_b;
wire [31:0] memory_controller_zigzag_index_out_a = {32{ select_zigzag_index_reg_a}} & zigzag_index_out_a;
wire [31:0] memory_controller_zigzag_index_out_b = {32{ select_zigzag_index_reg_b}} & zigzag_index_out_b;

wire select_p_jinfo_MCUWidth_a = (tag_a ==`TAG_g_p_jinfo_MCUWidth);
wire select_p_jinfo_MCUWidth_b = (tag_b ==`TAG_g_p_jinfo_MCUWidth);
reg select_p_jinfo_MCUWidth_reg_a;
reg select_p_jinfo_MCUWidth_reg_b;
wire [31:0] memory_controller_p_jinfo_MCUWidth_out_a = {32{ select_p_jinfo_MCUWidth_reg_a}} & p_jinfo_MCUWidth_out_a;
wire [31:0] memory_controller_p_jinfo_MCUWidth_out_b = {32{ select_p_jinfo_MCUWidth_reg_b}} & p_jinfo_MCUWidth_out_b;

wire select_rgb_buf_a = (tag_a ==`TAG_g_rgb_buf);
wire select_rgb_buf_b = (tag_b ==`TAG_g_rgb_buf);
reg select_rgb_buf_reg_a;
reg select_rgb_buf_reg_b;
wire [31:0] memory_controller_rgb_buf_out_a = {32{ select_rgb_buf_reg_a}} & rgb_buf_out_a;
wire [31:0] memory_controller_rgb_buf_out_b = {32{ select_rgb_buf_reg_b}} & rgb_buf_out_b;

wire select_CurHuffReadBuf_a = (tag_a ==`TAG_g_CurHuffReadBuf);
wire select_CurHuffReadBuf_b = (tag_b ==`TAG_g_CurHuffReadBuf);
reg select_CurHuffReadBuf_reg_a;
reg select_CurHuffReadBuf_reg_b;
wire [31:0] memory_controller_CurHuffReadBuf_out_a = {32{ select_CurHuffReadBuf_reg_a}} & CurHuffReadBuf_out_a;
wire [31:0] memory_controller_CurHuffReadBuf_out_b = {32{ select_CurHuffReadBuf_reg_b}} & CurHuffReadBuf_out_b;

wire select_OutData_comp_buf_a = (tag_a ==`TAG_g_OutData_comp_buf);
wire select_OutData_comp_buf_b = (tag_b ==`TAG_g_OutData_comp_buf);
reg select_OutData_comp_buf_reg_a;
reg select_OutData_comp_buf_reg_b;
wire [7:0] memory_controller_OutData_comp_buf_out_a = {8{ select_OutData_comp_buf_reg_a}} & OutData_comp_buf_out_a;
wire [7:0] memory_controller_OutData_comp_buf_out_b = {8{ select_OutData_comp_buf_reg_b}} & OutData_comp_buf_out_b;

wire select_bit_set_mask_a = (tag_a ==`TAG_g_bit_set_mask);
wire select_bit_set_mask_b = (tag_b ==`TAG_g_bit_set_mask);
reg select_bit_set_mask_reg_a;
reg select_bit_set_mask_reg_b;
wire [31:0] memory_controller_bit_set_mask_out_a = {32{ select_bit_set_mask_reg_a}} & bit_set_mask_out_a;
wire [31:0] memory_controller_bit_set_mask_out_b = {32{ select_bit_set_mask_reg_b}} & bit_set_mask_out_b;

wire select_lmask_a = (tag_a ==`TAG_g_lmask);
wire select_lmask_b = (tag_b ==`TAG_g_lmask);
reg select_lmask_reg_a;
reg select_lmask_reg_b;
wire [31:0] memory_controller_lmask_out_a = {32{ select_lmask_reg_a}} & lmask_out_a;
wire [31:0] memory_controller_lmask_out_b = {32{ select_lmask_reg_b}} & lmask_out_b;

wire select_read_position_a = (tag_a ==`TAG_g_read_position);
wire select_read_position_b = (tag_b ==`TAG_g_read_position);
reg select_read_position_reg_a;
reg select_read_position_reg_b;
wire [31:0] memory_controller_read_position_out_a = {32{ select_read_position_reg_a}} & read_position_out_a;
wire [31:0] memory_controller_read_position_out_b = {32{ select_read_position_reg_b}} & read_position_out_b;

wire select_current_read_byte_a = (tag_a ==`TAG_g_current_read_byte);
wire select_current_read_byte_b = (tag_b ==`TAG_g_current_read_byte);
reg select_current_read_byte_reg_a;
reg select_current_read_byte_reg_b;
wire [31:0] memory_controller_current_read_byte_out_a = {32{ select_current_read_byte_reg_a}} & current_read_byte_out_a;
wire [31:0] memory_controller_current_read_byte_out_b = {32{ select_current_read_byte_reg_b}} & current_read_byte_out_b;

wire select_p_jinfo_dc_dhuff_tbl_ml_a = (tag_a ==`TAG_g_p_jinfo_dc_dhuff_tbl_ml);
wire select_p_jinfo_dc_dhuff_tbl_ml_b = (tag_b ==`TAG_g_p_jinfo_dc_dhuff_tbl_ml);
reg select_p_jinfo_dc_dhuff_tbl_ml_reg_a;
reg select_p_jinfo_dc_dhuff_tbl_ml_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_a = {32{ select_p_jinfo_dc_dhuff_tbl_ml_reg_a}} & p_jinfo_dc_dhuff_tbl_ml_out_a;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_b = {32{ select_p_jinfo_dc_dhuff_tbl_ml_reg_b}} & p_jinfo_dc_dhuff_tbl_ml_out_b;

wire select_p_jinfo_dc_dhuff_tbl_maxcode_a = (tag_a ==`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode);
wire select_p_jinfo_dc_dhuff_tbl_maxcode_b = (tag_b ==`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode);
reg select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a;
reg select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_a = {32{ select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a}} & p_jinfo_dc_dhuff_tbl_maxcode_out_a;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_b = {32{ select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b}} & p_jinfo_dc_dhuff_tbl_maxcode_out_b;

wire select_p_jinfo_dc_dhuff_tbl_mincode_a = (tag_a ==`TAG_g_p_jinfo_dc_dhuff_tbl_mincode);
wire select_p_jinfo_dc_dhuff_tbl_mincode_b = (tag_b ==`TAG_g_p_jinfo_dc_dhuff_tbl_mincode);
reg select_p_jinfo_dc_dhuff_tbl_mincode_reg_a;
reg select_p_jinfo_dc_dhuff_tbl_mincode_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_a = {32{ select_p_jinfo_dc_dhuff_tbl_mincode_reg_a}} & p_jinfo_dc_dhuff_tbl_mincode_out_a;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_b = {32{ select_p_jinfo_dc_dhuff_tbl_mincode_reg_b}} & p_jinfo_dc_dhuff_tbl_mincode_out_b;

wire select_p_jinfo_dc_dhuff_tbl_valptr_a = (tag_a ==`TAG_g_p_jinfo_dc_dhuff_tbl_valptr);
wire select_p_jinfo_dc_dhuff_tbl_valptr_b = (tag_b ==`TAG_g_p_jinfo_dc_dhuff_tbl_valptr);
reg select_p_jinfo_dc_dhuff_tbl_valptr_reg_a;
reg select_p_jinfo_dc_dhuff_tbl_valptr_reg_b;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_a = {32{ select_p_jinfo_dc_dhuff_tbl_valptr_reg_a}} & p_jinfo_dc_dhuff_tbl_valptr_out_a;
wire [31:0] memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_b = {32{ select_p_jinfo_dc_dhuff_tbl_valptr_reg_b}} & p_jinfo_dc_dhuff_tbl_valptr_out_b;

wire select_extend_mask_a = (tag_a ==`TAG_g_extend_mask);
wire select_extend_mask_b = (tag_b ==`TAG_g_extend_mask);
reg select_extend_mask_reg_a;
reg select_extend_mask_reg_b;
wire [31:0] memory_controller_extend_mask_out_a = {32{ select_extend_mask_reg_a}} & extend_mask_out_a;
wire [31:0] memory_controller_extend_mask_out_b = {32{ select_extend_mask_reg_b}} & extend_mask_out_b;

wire select_p_jinfo_ac_dhuff_tbl_ml_a = (tag_a ==`TAG_g_p_jinfo_ac_dhuff_tbl_ml);
wire select_p_jinfo_ac_dhuff_tbl_ml_b = (tag_b ==`TAG_g_p_jinfo_ac_dhuff_tbl_ml);
reg select_p_jinfo_ac_dhuff_tbl_ml_reg_a;
reg select_p_jinfo_ac_dhuff_tbl_ml_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_a = {32{ select_p_jinfo_ac_dhuff_tbl_ml_reg_a}} & p_jinfo_ac_dhuff_tbl_ml_out_a;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_b = {32{ select_p_jinfo_ac_dhuff_tbl_ml_reg_b}} & p_jinfo_ac_dhuff_tbl_ml_out_b;

wire select_p_jinfo_ac_dhuff_tbl_maxcode_a = (tag_a ==`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode);
wire select_p_jinfo_ac_dhuff_tbl_maxcode_b = (tag_b ==`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode);
reg select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a;
reg select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_a = {32{ select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a}} & p_jinfo_ac_dhuff_tbl_maxcode_out_a;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_b = {32{ select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b}} & p_jinfo_ac_dhuff_tbl_maxcode_out_b;

wire select_p_jinfo_ac_dhuff_tbl_mincode_a = (tag_a ==`TAG_g_p_jinfo_ac_dhuff_tbl_mincode);
wire select_p_jinfo_ac_dhuff_tbl_mincode_b = (tag_b ==`TAG_g_p_jinfo_ac_dhuff_tbl_mincode);
reg select_p_jinfo_ac_dhuff_tbl_mincode_reg_a;
reg select_p_jinfo_ac_dhuff_tbl_mincode_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_a = {32{ select_p_jinfo_ac_dhuff_tbl_mincode_reg_a}} & p_jinfo_ac_dhuff_tbl_mincode_out_a;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_b = {32{ select_p_jinfo_ac_dhuff_tbl_mincode_reg_b}} & p_jinfo_ac_dhuff_tbl_mincode_out_b;

wire select_p_jinfo_ac_dhuff_tbl_valptr_a = (tag_a ==`TAG_g_p_jinfo_ac_dhuff_tbl_valptr);
wire select_p_jinfo_ac_dhuff_tbl_valptr_b = (tag_b ==`TAG_g_p_jinfo_ac_dhuff_tbl_valptr);
reg select_p_jinfo_ac_dhuff_tbl_valptr_reg_a;
reg select_p_jinfo_ac_dhuff_tbl_valptr_reg_b;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_a = {32{ select_p_jinfo_ac_dhuff_tbl_valptr_reg_a}} & p_jinfo_ac_dhuff_tbl_valptr_out_a;
wire [31:0] memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_b = {32{ select_p_jinfo_ac_dhuff_tbl_valptr_reg_b}} & p_jinfo_ac_dhuff_tbl_valptr_out_b;

wire select_OutData_comp_vpos_a = (tag_a ==`TAG_g_OutData_comp_vpos);
wire select_OutData_comp_vpos_b = (tag_b ==`TAG_g_OutData_comp_vpos);
reg select_OutData_comp_vpos_reg_a;
reg select_OutData_comp_vpos_reg_b;
wire [31:0] memory_controller_OutData_comp_vpos_out_a = {32{ select_OutData_comp_vpos_reg_a}} & OutData_comp_vpos_out_a;
wire [31:0] memory_controller_OutData_comp_vpos_out_b = {32{ select_OutData_comp_vpos_reg_b}} & OutData_comp_vpos_out_b;

wire select_OutData_comp_hpos_a = (tag_a ==`TAG_g_OutData_comp_hpos);
wire select_OutData_comp_hpos_b = (tag_b ==`TAG_g_OutData_comp_hpos);
reg select_OutData_comp_hpos_reg_a;
reg select_OutData_comp_hpos_reg_b;
wire [31:0] memory_controller_OutData_comp_hpos_out_a = {32{ select_OutData_comp_hpos_reg_a}} & OutData_comp_hpos_out_a;
wire [31:0] memory_controller_OutData_comp_hpos_out_b = {32{ select_OutData_comp_hpos_reg_b}} & OutData_comp_hpos_out_b;

wire select_JpegFileBuf_a = (tag_a ==`TAG_g_JpegFileBuf);
wire select_JpegFileBuf_b = (tag_b ==`TAG_g_JpegFileBuf);
reg select_JpegFileBuf_reg_a;
reg select_JpegFileBuf_reg_b;
wire [7:0] memory_controller_JpegFileBuf_out_a = {8{ select_JpegFileBuf_reg_a}} & JpegFileBuf_out_a;
wire [7:0] memory_controller_JpegFileBuf_out_b = {8{ select_JpegFileBuf_reg_b}} & JpegFileBuf_out_b;

wire select_decode_block_0_QuantBuff_a = (tag_a ==`TAG_decode_block_0_QuantBuff);
wire select_decode_block_0_QuantBuff_b = (tag_b ==`TAG_decode_block_0_QuantBuff);
reg select_decode_block_0_QuantBuff_reg_a;
reg select_decode_block_0_QuantBuff_reg_b;
wire [31:0] memory_controller_decode_block_0_QuantBuff_out_a = {32{ select_decode_block_0_QuantBuff_reg_a}} & decode_block_0_QuantBuff_out_a;
wire [31:0] memory_controller_decode_block_0_QuantBuff_out_b = {32{ select_decode_block_0_QuantBuff_reg_b}} & decode_block_0_QuantBuff_out_b;

wire select_huff_make_dhuff_tb_0_huffsize_a = (tag_a ==`TAG_huff_make_dhuff_tb_0_huffsize);
wire select_huff_make_dhuff_tb_0_huffsize_b = (tag_b ==`TAG_huff_make_dhuff_tb_0_huffsize);
reg select_huff_make_dhuff_tb_0_huffsize_reg_a;
reg select_huff_make_dhuff_tb_0_huffsize_reg_b;
wire [31:0] memory_controller_huff_make_dhuff_tb_0_huffsize_out_a = {32{ select_huff_make_dhuff_tb_0_huffsize_reg_a}} & huff_make_dhuff_tb_0_huffsize_out_a;
wire [31:0] memory_controller_huff_make_dhuff_tb_0_huffsize_out_b = {32{ select_huff_make_dhuff_tb_0_huffsize_reg_b}} & huff_make_dhuff_tb_0_huffsize_out_b;

wire select_huff_make_dhuff_tb_0_huffcode_a = (tag_a ==`TAG_huff_make_dhuff_tb_0_huffcode);
wire select_huff_make_dhuff_tb_0_huffcode_b = (tag_b ==`TAG_huff_make_dhuff_tb_0_huffcode);
reg select_huff_make_dhuff_tb_0_huffcode_reg_a;
reg select_huff_make_dhuff_tb_0_huffcode_reg_b;
wire [31:0] memory_controller_huff_make_dhuff_tb_0_huffcode_out_a = {32{ select_huff_make_dhuff_tb_0_huffcode_reg_a}} & huff_make_dhuff_tb_0_huffcode_out_a;
wire [31:0] memory_controller_huff_make_dhuff_tb_0_huffcode_out_b = {32{ select_huff_make_dhuff_tb_0_huffcode_reg_b}} & huff_make_dhuff_tb_0_huffcode_out_b;

wire select_main_0_HuffBuff_i_i_a = (tag_a ==`TAG_main_0_HuffBuff_i_i);
wire select_main_0_HuffBuff_i_i_b = (tag_b ==`TAG_main_0_HuffBuff_i_i);
reg select_main_0_HuffBuff_i_i_reg_a;
reg select_main_0_HuffBuff_i_i_reg_b;
wire [31:0] memory_controller_main_0_HuffBuff_i_i_out_a = {32{ select_main_0_HuffBuff_i_i_reg_a}} & main_0_HuffBuff_i_i_out_a;
wire [31:0] memory_controller_main_0_HuffBuff_i_i_out_b = {32{ select_main_0_HuffBuff_i_i_reg_b}} & main_0_HuffBuff_i_i_out_b;

wire select_main_0_IDCTBuff_i_i_a = (tag_a ==`TAG_main_0_IDCTBuff_i_i);
wire select_main_0_IDCTBuff_i_i_b = (tag_b ==`TAG_main_0_IDCTBuff_i_i);
reg select_main_0_IDCTBuff_i_i_reg_a;
reg select_main_0_IDCTBuff_i_i_reg_b;
wire [31:0] memory_controller_main_0_IDCTBuff_i_i_out_a = {32{ select_main_0_IDCTBuff_i_i_reg_a}} & main_0_IDCTBuff_i_i_out_a;
wire [31:0] memory_controller_main_0_IDCTBuff_i_i_out_b = {32{ select_main_0_IDCTBuff_i_i_reg_b}} & main_0_IDCTBuff_i_i_out_b;


always @(*)
begin
	hana_jpg_address_a = memory_controller_address_a [13-1+0:0] & {13{select_hana_jpg_a}};
	hana_jpg_address_b = memory_controller_address_b [13-1+0:0] & {13{select_hana_jpg_b}};
	hana_jpg_write_enable_a = memory_controller_write_enable_a & select_hana_jpg_a;
	hana_jpg_write_enable_b = memory_controller_write_enable_b & select_hana_jpg_b;
	hana_jpg_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	hana_jpg_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	hana_bmp_address_a = memory_controller_address_a [14-1+0:0] & {14{select_hana_bmp_a}};
	hana_bmp_address_b = memory_controller_address_b [14-1+0:0] & {14{select_hana_bmp_b}};
	hana_bmp_write_enable_a = memory_controller_write_enable_a & select_hana_bmp_a;
	hana_bmp_write_enable_b = memory_controller_write_enable_b & select_hana_bmp_b;
	hana_bmp_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	hana_bmp_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	out_unread_marker_address_a = memory_controller_address_a [4-1+2:2] & {4{select_out_unread_marker_a}};
	out_unread_marker_address_b = memory_controller_address_b [4-1+2:2] & {4{select_out_unread_marker_b}};
	out_unread_marker_write_enable_a = memory_controller_write_enable_a & select_out_unread_marker_a;
	out_unread_marker_write_enable_b = memory_controller_write_enable_b & select_out_unread_marker_b;
	out_unread_marker_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_unread_marker_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_index_get_sof_address_a = memory_controller_address_a [2-1+2:2] & {2{select_out_index_get_sof_a}};
	out_index_get_sof_address_b = memory_controller_address_b [2-1+2:2] & {2{select_out_index_get_sof_b}};
	out_index_get_sof_write_enable_a = memory_controller_write_enable_a & select_out_index_get_sof_a;
	out_index_get_sof_write_enable_b = memory_controller_write_enable_b & select_out_index_get_sof_b;
	out_index_get_sof_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_index_get_sof_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_v_samp_factor_get_sof_address_a = memory_controller_address_a [2-1+2:2] & {2{select_out_v_samp_factor_get_sof_a}};
	out_v_samp_factor_get_sof_address_b = memory_controller_address_b [2-1+2:2] & {2{select_out_v_samp_factor_get_sof_b}};
	out_v_samp_factor_get_sof_write_enable_a = memory_controller_write_enable_a & select_out_v_samp_factor_get_sof_a;
	out_v_samp_factor_get_sof_write_enable_b = memory_controller_write_enable_b & select_out_v_samp_factor_get_sof_b;
	out_v_samp_factor_get_sof_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_v_samp_factor_get_sof_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_comp_id_get_sos_address_a = memory_controller_address_a [2-1+2:2] & {2{select_out_comp_id_get_sos_a}};
	out_comp_id_get_sos_address_b = memory_controller_address_b [2-1+2:2] & {2{select_out_comp_id_get_sos_b}};
	out_comp_id_get_sos_write_enable_a = memory_controller_write_enable_a & select_out_comp_id_get_sos_a;
	out_comp_id_get_sos_write_enable_b = memory_controller_write_enable_b & select_out_comp_id_get_sos_b;
	out_comp_id_get_sos_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_comp_id_get_sos_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_ac_tbl_no_get_sos_address_a = memory_controller_address_a [2-1+2:2] & {2{select_out_ac_tbl_no_get_sos_a}};
	out_ac_tbl_no_get_sos_address_b = memory_controller_address_b [2-1+2:2] & {2{select_out_ac_tbl_no_get_sos_b}};
	out_ac_tbl_no_get_sos_write_enable_a = memory_controller_write_enable_a & select_out_ac_tbl_no_get_sos_a;
	out_ac_tbl_no_get_sos_write_enable_b = memory_controller_write_enable_b & select_out_ac_tbl_no_get_sos_b;
	out_ac_tbl_no_get_sos_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_ac_tbl_no_get_sos_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_length_get_dht_address_a = memory_controller_address_a [2-1+2:2] & {2{select_out_length_get_dht_a}};
	out_length_get_dht_address_b = memory_controller_address_b [2-1+2:2] & {2{select_out_length_get_dht_b}};
	out_length_get_dht_write_enable_a = memory_controller_write_enable_a & select_out_length_get_dht_a;
	out_length_get_dht_write_enable_b = memory_controller_write_enable_b & select_out_length_get_dht_b;
	out_length_get_dht_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_length_get_dht_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_index_get_dht_address_a = memory_controller_address_a [2-1+2:2] & {2{select_out_index_get_dht_a}};
	out_index_get_dht_address_b = memory_controller_address_b [2-1+2:2] & {2{select_out_index_get_dht_b}};
	out_index_get_dht_write_enable_a = memory_controller_write_enable_a & select_out_index_get_dht_a;
	out_index_get_dht_write_enable_b = memory_controller_write_enable_b & select_out_index_get_dht_b;
	out_index_get_dht_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_index_get_dht_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_count_get_dht_address_a = memory_controller_address_a [2-1+2:2] & {2{select_out_count_get_dht_a}};
	out_count_get_dht_address_b = memory_controller_address_b [2-1+2:2] & {2{select_out_count_get_dht_b}};
	out_count_get_dht_write_enable_a = memory_controller_write_enable_a & select_out_count_get_dht_a;
	out_count_get_dht_write_enable_b = memory_controller_write_enable_b & select_out_count_get_dht_b;
	out_count_get_dht_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_count_get_dht_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_length_get_dqt_address_a = memory_controller_address_a [1-1+2:2] & {1{select_out_length_get_dqt_a}};
	out_length_get_dqt_address_b = memory_controller_address_b [1-1+2:2] & {1{select_out_length_get_dqt_b}};
	out_length_get_dqt_write_enable_a = memory_controller_write_enable_a & select_out_length_get_dqt_a;
	out_length_get_dqt_write_enable_b = memory_controller_write_enable_b & select_out_length_get_dqt_b;
	out_length_get_dqt_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_length_get_dqt_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_prec_get_dht_address_a = memory_controller_address_a [1-1+2:2] & {1{select_out_prec_get_dht_a}};
	out_prec_get_dht_address_b = memory_controller_address_b [1-1+2:2] & {1{select_out_prec_get_dht_b}};
	out_prec_get_dht_write_enable_a = memory_controller_write_enable_a & select_out_prec_get_dht_a;
	out_prec_get_dht_write_enable_b = memory_controller_write_enable_b & select_out_prec_get_dht_b;
	out_prec_get_dht_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_prec_get_dht_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	out_num_get_dht_address_a = memory_controller_address_a [1-1+2:2] & {1{select_out_num_get_dht_a}};
	out_num_get_dht_address_b = memory_controller_address_b [1-1+2:2] & {1{select_out_num_get_dht_b}};
	out_num_get_dht_write_enable_a = memory_controller_write_enable_a & select_out_num_get_dht_a;
	out_num_get_dht_write_enable_b = memory_controller_write_enable_b & select_out_num_get_dht_b;
	out_num_get_dht_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	out_num_get_dht_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	izigzag_index_address_a = memory_controller_address_a [6-1+2:2] & {6{select_izigzag_index_a}};
	izigzag_index_address_b = memory_controller_address_b [6-1+2:2] & {6{select_izigzag_index_b}};
	izigzag_index_write_enable_a = memory_controller_write_enable_a & select_izigzag_index_a;
	izigzag_index_write_enable_b = memory_controller_write_enable_b & select_izigzag_index_b;
	izigzag_index_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	izigzag_index_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_result_address_a = memory_controller_address_a [1-1+2:2] & {1{select_main_result_a}};
	main_result_address_b = memory_controller_address_b [1-1+2:2] & {1{select_main_result_b}};
	main_result_write_enable_a = memory_controller_write_enable_a & select_main_result_a;
	main_result_write_enable_b = memory_controller_write_enable_b & select_main_result_b;
	main_result_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	main_result_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_image_height_address_a = memory_controller_address_a [1-1+1:1] & {1{select_p_jinfo_image_height_a}};
	p_jinfo_image_height_address_b = memory_controller_address_b [1-1+1:1] & {1{select_p_jinfo_image_height_b}};
	p_jinfo_image_height_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_image_height_a;
	p_jinfo_image_height_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_image_height_b;
	p_jinfo_image_height_in_a [16-1:0] = memory_controller_in_a[16-1:0];
	p_jinfo_image_height_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	p_jinfo_image_width_address_a = memory_controller_address_a [1-1+1:1] & {1{select_p_jinfo_image_width_a}};
	p_jinfo_image_width_address_b = memory_controller_address_b [1-1+1:1] & {1{select_p_jinfo_image_width_b}};
	p_jinfo_image_width_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_image_width_a;
	p_jinfo_image_width_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_image_width_b;
	p_jinfo_image_width_in_a [16-1:0] = memory_controller_in_a[16-1:0];
	p_jinfo_image_width_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	p_jinfo_comps_info_index_address_a = memory_controller_address_a [2-1+0:0] & {2{select_p_jinfo_comps_info_index_a}};
	p_jinfo_comps_info_index_address_b = memory_controller_address_b [2-1+0:0] & {2{select_p_jinfo_comps_info_index_b}};
	p_jinfo_comps_info_index_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_comps_info_index_a;
	p_jinfo_comps_info_index_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_comps_info_index_b;
	p_jinfo_comps_info_index_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	p_jinfo_comps_info_index_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	p_jinfo_comps_info_id_address_a = memory_controller_address_a [2-1+0:0] & {2{select_p_jinfo_comps_info_id_a}};
	p_jinfo_comps_info_id_address_b = memory_controller_address_b [2-1+0:0] & {2{select_p_jinfo_comps_info_id_b}};
	p_jinfo_comps_info_id_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_comps_info_id_a;
	p_jinfo_comps_info_id_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_comps_info_id_b;
	p_jinfo_comps_info_id_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	p_jinfo_comps_info_id_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	p_jinfo_comps_info_h_samp_factor_address_a = memory_controller_address_a [2-1+0:0] & {2{select_p_jinfo_comps_info_h_samp_factor_a}};
	p_jinfo_comps_info_h_samp_factor_address_b = memory_controller_address_b [2-1+0:0] & {2{select_p_jinfo_comps_info_h_samp_factor_b}};
	p_jinfo_comps_info_h_samp_factor_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_comps_info_h_samp_factor_a;
	p_jinfo_comps_info_h_samp_factor_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_comps_info_h_samp_factor_b;
	p_jinfo_comps_info_h_samp_factor_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	p_jinfo_comps_info_h_samp_factor_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	p_jinfo_comps_info_v_samp_factor_address_a = memory_controller_address_a [2-1+0:0] & {2{select_p_jinfo_comps_info_v_samp_factor_a}};
	p_jinfo_comps_info_v_samp_factor_address_b = memory_controller_address_b [2-1+0:0] & {2{select_p_jinfo_comps_info_v_samp_factor_b}};
	p_jinfo_comps_info_v_samp_factor_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_comps_info_v_samp_factor_a;
	p_jinfo_comps_info_v_samp_factor_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_comps_info_v_samp_factor_b;
	p_jinfo_comps_info_v_samp_factor_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	p_jinfo_comps_info_v_samp_factor_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	p_jinfo_comps_info_quant_tbl_no_address_a = memory_controller_address_a [2-1+0:0] & {2{select_p_jinfo_comps_info_quant_tbl_no_a}};
	p_jinfo_comps_info_quant_tbl_no_address_b = memory_controller_address_b [2-1+0:0] & {2{select_p_jinfo_comps_info_quant_tbl_no_b}};
	p_jinfo_comps_info_quant_tbl_no_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_comps_info_quant_tbl_no_a;
	p_jinfo_comps_info_quant_tbl_no_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_comps_info_quant_tbl_no_b;
	p_jinfo_comps_info_quant_tbl_no_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	p_jinfo_comps_info_quant_tbl_no_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	p_jinfo_comps_info_dc_tbl_no_address_a = memory_controller_address_a [2-1+0:0] & {2{select_p_jinfo_comps_info_dc_tbl_no_a}};
	p_jinfo_comps_info_dc_tbl_no_address_b = memory_controller_address_b [2-1+0:0] & {2{select_p_jinfo_comps_info_dc_tbl_no_b}};
	p_jinfo_comps_info_dc_tbl_no_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_comps_info_dc_tbl_no_a;
	p_jinfo_comps_info_dc_tbl_no_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_comps_info_dc_tbl_no_b;
	p_jinfo_comps_info_dc_tbl_no_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	p_jinfo_comps_info_dc_tbl_no_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	p_jinfo_comps_info_ac_tbl_no_address_a = memory_controller_address_a [2-1+0:0] & {2{select_p_jinfo_comps_info_ac_tbl_no_a}};
	p_jinfo_comps_info_ac_tbl_no_address_b = memory_controller_address_b [2-1+0:0] & {2{select_p_jinfo_comps_info_ac_tbl_no_b}};
	p_jinfo_comps_info_ac_tbl_no_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_comps_info_ac_tbl_no_a;
	p_jinfo_comps_info_ac_tbl_no_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_comps_info_ac_tbl_no_b;
	p_jinfo_comps_info_ac_tbl_no_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	p_jinfo_comps_info_ac_tbl_no_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	p_jinfo_ac_xhuff_tbl_bits_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_ac_xhuff_tbl_bits_a}};
	p_jinfo_ac_xhuff_tbl_bits_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_ac_xhuff_tbl_bits_b}};
	p_jinfo_ac_xhuff_tbl_bits_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_xhuff_tbl_bits_a;
	p_jinfo_ac_xhuff_tbl_bits_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_xhuff_tbl_bits_b;
	p_jinfo_ac_xhuff_tbl_bits_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_ac_xhuff_tbl_bits_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_xhuff_tbl_huffval_address_a = memory_controller_address_a [10-1+2:2] & {10{select_p_jinfo_ac_xhuff_tbl_huffval_a}};
	p_jinfo_ac_xhuff_tbl_huffval_address_b = memory_controller_address_b [10-1+2:2] & {10{select_p_jinfo_ac_xhuff_tbl_huffval_b}};
	p_jinfo_ac_xhuff_tbl_huffval_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_xhuff_tbl_huffval_a;
	p_jinfo_ac_xhuff_tbl_huffval_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_xhuff_tbl_huffval_b;
	p_jinfo_ac_xhuff_tbl_huffval_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_ac_xhuff_tbl_huffval_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_xhuff_tbl_bits_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_dc_xhuff_tbl_bits_a}};
	p_jinfo_dc_xhuff_tbl_bits_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_dc_xhuff_tbl_bits_b}};
	p_jinfo_dc_xhuff_tbl_bits_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_xhuff_tbl_bits_a;
	p_jinfo_dc_xhuff_tbl_bits_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_xhuff_tbl_bits_b;
	p_jinfo_dc_xhuff_tbl_bits_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_dc_xhuff_tbl_bits_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_xhuff_tbl_huffval_address_a = memory_controller_address_a [10-1+2:2] & {10{select_p_jinfo_dc_xhuff_tbl_huffval_a}};
	p_jinfo_dc_xhuff_tbl_huffval_address_b = memory_controller_address_b [10-1+2:2] & {10{select_p_jinfo_dc_xhuff_tbl_huffval_b}};
	p_jinfo_dc_xhuff_tbl_huffval_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_xhuff_tbl_huffval_a;
	p_jinfo_dc_xhuff_tbl_huffval_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_xhuff_tbl_huffval_b;
	p_jinfo_dc_xhuff_tbl_huffval_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_dc_xhuff_tbl_huffval_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_quant_tbl_quantval_address_a = memory_controller_address_a [8-1+2:2] & {8{select_p_jinfo_quant_tbl_quantval_a}};
	p_jinfo_quant_tbl_quantval_address_b = memory_controller_address_b [8-1+2:2] & {8{select_p_jinfo_quant_tbl_quantval_b}};
	p_jinfo_quant_tbl_quantval_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_quant_tbl_quantval_a;
	p_jinfo_quant_tbl_quantval_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_quant_tbl_quantval_b;
	p_jinfo_quant_tbl_quantval_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_quant_tbl_quantval_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	zigzag_index_address_a = memory_controller_address_a [6-1+2:2] & {6{select_zigzag_index_a}};
	zigzag_index_address_b = memory_controller_address_b [6-1+2:2] & {6{select_zigzag_index_b}};
	zigzag_index_write_enable_a = memory_controller_write_enable_a & select_zigzag_index_a;
	zigzag_index_write_enable_b = memory_controller_write_enable_b & select_zigzag_index_b;
	zigzag_index_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	zigzag_index_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_MCUWidth_address_a = memory_controller_address_a [1-1+2:2] & {1{select_p_jinfo_MCUWidth_a}};
	p_jinfo_MCUWidth_address_b = memory_controller_address_b [1-1+2:2] & {1{select_p_jinfo_MCUWidth_b}};
	p_jinfo_MCUWidth_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_MCUWidth_a;
	p_jinfo_MCUWidth_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_MCUWidth_b;
	p_jinfo_MCUWidth_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_MCUWidth_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	rgb_buf_address_a = memory_controller_address_a [10-1+2:2] & {10{select_rgb_buf_a}};
	rgb_buf_address_b = memory_controller_address_b [10-1+2:2] & {10{select_rgb_buf_b}};
	rgb_buf_write_enable_a = memory_controller_write_enable_a & select_rgb_buf_a;
	rgb_buf_write_enable_b = memory_controller_write_enable_b & select_rgb_buf_b;
	rgb_buf_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	rgb_buf_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	CurHuffReadBuf_address_a = memory_controller_address_a [1-1+2:2] & {1{select_CurHuffReadBuf_a}};
	CurHuffReadBuf_address_b = memory_controller_address_b [1-1+2:2] & {1{select_CurHuffReadBuf_b}};
	CurHuffReadBuf_write_enable_a = memory_controller_write_enable_a & select_CurHuffReadBuf_a;
	CurHuffReadBuf_write_enable_b = memory_controller_write_enable_b & select_CurHuffReadBuf_b;
	CurHuffReadBuf_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	CurHuffReadBuf_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	OutData_comp_buf_address_a = memory_controller_address_a [14-1+0:0] & {14{select_OutData_comp_buf_a}};
	OutData_comp_buf_address_b = memory_controller_address_b [14-1+0:0] & {14{select_OutData_comp_buf_b}};
	OutData_comp_buf_write_enable_a = memory_controller_write_enable_a & select_OutData_comp_buf_a;
	OutData_comp_buf_write_enable_b = memory_controller_write_enable_b & select_OutData_comp_buf_b;
	OutData_comp_buf_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	OutData_comp_buf_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	bit_set_mask_address_a = memory_controller_address_a [5-1+2:2] & {5{select_bit_set_mask_a}};
	bit_set_mask_address_b = memory_controller_address_b [5-1+2:2] & {5{select_bit_set_mask_b}};
	bit_set_mask_write_enable_a = memory_controller_write_enable_a & select_bit_set_mask_a;
	bit_set_mask_write_enable_b = memory_controller_write_enable_b & select_bit_set_mask_b;
	bit_set_mask_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	bit_set_mask_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	lmask_address_a = memory_controller_address_a [5-1+2:2] & {5{select_lmask_a}};
	lmask_address_b = memory_controller_address_b [5-1+2:2] & {5{select_lmask_b}};
	lmask_write_enable_a = memory_controller_write_enable_a & select_lmask_a;
	lmask_write_enable_b = memory_controller_write_enable_b & select_lmask_b;
	lmask_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	lmask_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	read_position_address_a = memory_controller_address_a [1-1+2:2] & {1{select_read_position_a}};
	read_position_address_b = memory_controller_address_b [1-1+2:2] & {1{select_read_position_b}};
	read_position_write_enable_a = memory_controller_write_enable_a & select_read_position_a;
	read_position_write_enable_b = memory_controller_write_enable_b & select_read_position_b;
	read_position_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	read_position_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	current_read_byte_address_a = memory_controller_address_a [1-1+2:2] & {1{select_current_read_byte_a}};
	current_read_byte_address_b = memory_controller_address_b [1-1+2:2] & {1{select_current_read_byte_b}};
	current_read_byte_write_enable_a = memory_controller_write_enable_a & select_current_read_byte_a;
	current_read_byte_write_enable_b = memory_controller_write_enable_b & select_current_read_byte_b;
	current_read_byte_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	current_read_byte_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_dhuff_tbl_ml_address_a = memory_controller_address_a [1-1+2:2] & {1{select_p_jinfo_dc_dhuff_tbl_ml_a}};
	p_jinfo_dc_dhuff_tbl_ml_address_b = memory_controller_address_b [1-1+2:2] & {1{select_p_jinfo_dc_dhuff_tbl_ml_b}};
	p_jinfo_dc_dhuff_tbl_ml_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_dhuff_tbl_ml_a;
	p_jinfo_dc_dhuff_tbl_ml_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_dhuff_tbl_ml_b;
	p_jinfo_dc_dhuff_tbl_ml_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_dc_dhuff_tbl_ml_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_dhuff_tbl_maxcode_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_maxcode_a}};
	p_jinfo_dc_dhuff_tbl_maxcode_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_maxcode_b}};
	p_jinfo_dc_dhuff_tbl_maxcode_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_dhuff_tbl_maxcode_a;
	p_jinfo_dc_dhuff_tbl_maxcode_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_dhuff_tbl_maxcode_b;
	p_jinfo_dc_dhuff_tbl_maxcode_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_dc_dhuff_tbl_maxcode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_dhuff_tbl_mincode_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_mincode_a}};
	p_jinfo_dc_dhuff_tbl_mincode_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_mincode_b}};
	p_jinfo_dc_dhuff_tbl_mincode_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_dhuff_tbl_mincode_a;
	p_jinfo_dc_dhuff_tbl_mincode_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_dhuff_tbl_mincode_b;
	p_jinfo_dc_dhuff_tbl_mincode_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_dc_dhuff_tbl_mincode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_dc_dhuff_tbl_valptr_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_valptr_a}};
	p_jinfo_dc_dhuff_tbl_valptr_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_dc_dhuff_tbl_valptr_b}};
	p_jinfo_dc_dhuff_tbl_valptr_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_dc_dhuff_tbl_valptr_a;
	p_jinfo_dc_dhuff_tbl_valptr_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_dc_dhuff_tbl_valptr_b;
	p_jinfo_dc_dhuff_tbl_valptr_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_dc_dhuff_tbl_valptr_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	extend_mask_address_a = memory_controller_address_a [5-1+2:2] & {5{select_extend_mask_a}};
	extend_mask_address_b = memory_controller_address_b [5-1+2:2] & {5{select_extend_mask_b}};
	extend_mask_write_enable_a = memory_controller_write_enable_a & select_extend_mask_a;
	extend_mask_write_enable_b = memory_controller_write_enable_b & select_extend_mask_b;
	extend_mask_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	extend_mask_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_dhuff_tbl_ml_address_a = memory_controller_address_a [1-1+2:2] & {1{select_p_jinfo_ac_dhuff_tbl_ml_a}};
	p_jinfo_ac_dhuff_tbl_ml_address_b = memory_controller_address_b [1-1+2:2] & {1{select_p_jinfo_ac_dhuff_tbl_ml_b}};
	p_jinfo_ac_dhuff_tbl_ml_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_dhuff_tbl_ml_a;
	p_jinfo_ac_dhuff_tbl_ml_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_dhuff_tbl_ml_b;
	p_jinfo_ac_dhuff_tbl_ml_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_ac_dhuff_tbl_ml_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_dhuff_tbl_maxcode_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_maxcode_a}};
	p_jinfo_ac_dhuff_tbl_maxcode_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_maxcode_b}};
	p_jinfo_ac_dhuff_tbl_maxcode_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_dhuff_tbl_maxcode_a;
	p_jinfo_ac_dhuff_tbl_maxcode_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_dhuff_tbl_maxcode_b;
	p_jinfo_ac_dhuff_tbl_maxcode_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_ac_dhuff_tbl_maxcode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_dhuff_tbl_mincode_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_mincode_a}};
	p_jinfo_ac_dhuff_tbl_mincode_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_mincode_b}};
	p_jinfo_ac_dhuff_tbl_mincode_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_dhuff_tbl_mincode_a;
	p_jinfo_ac_dhuff_tbl_mincode_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_dhuff_tbl_mincode_b;
	p_jinfo_ac_dhuff_tbl_mincode_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_ac_dhuff_tbl_mincode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	p_jinfo_ac_dhuff_tbl_valptr_address_a = memory_controller_address_a [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_valptr_a}};
	p_jinfo_ac_dhuff_tbl_valptr_address_b = memory_controller_address_b [7-1+2:2] & {7{select_p_jinfo_ac_dhuff_tbl_valptr_b}};
	p_jinfo_ac_dhuff_tbl_valptr_write_enable_a = memory_controller_write_enable_a & select_p_jinfo_ac_dhuff_tbl_valptr_a;
	p_jinfo_ac_dhuff_tbl_valptr_write_enable_b = memory_controller_write_enable_b & select_p_jinfo_ac_dhuff_tbl_valptr_b;
	p_jinfo_ac_dhuff_tbl_valptr_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	p_jinfo_ac_dhuff_tbl_valptr_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	OutData_comp_vpos_address_a = memory_controller_address_a [2-1+2:2] & {2{select_OutData_comp_vpos_a}};
	OutData_comp_vpos_address_b = memory_controller_address_b [2-1+2:2] & {2{select_OutData_comp_vpos_b}};
	OutData_comp_vpos_write_enable_a = memory_controller_write_enable_a & select_OutData_comp_vpos_a;
	OutData_comp_vpos_write_enable_b = memory_controller_write_enable_b & select_OutData_comp_vpos_b;
	OutData_comp_vpos_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	OutData_comp_vpos_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	OutData_comp_hpos_address_a = memory_controller_address_a [2-1+2:2] & {2{select_OutData_comp_hpos_a}};
	OutData_comp_hpos_address_b = memory_controller_address_b [2-1+2:2] & {2{select_OutData_comp_hpos_b}};
	OutData_comp_hpos_write_enable_a = memory_controller_write_enable_a & select_OutData_comp_hpos_a;
	OutData_comp_hpos_write_enable_b = memory_controller_write_enable_b & select_OutData_comp_hpos_b;
	OutData_comp_hpos_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	OutData_comp_hpos_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	JpegFileBuf_address_a = memory_controller_address_a [13-1+0:0] & {13{select_JpegFileBuf_a}};
	JpegFileBuf_address_b = memory_controller_address_b [13-1+0:0] & {13{select_JpegFileBuf_b}};
	JpegFileBuf_write_enable_a = memory_controller_write_enable_a & select_JpegFileBuf_a;
	JpegFileBuf_write_enable_b = memory_controller_write_enable_b & select_JpegFileBuf_b;
	JpegFileBuf_in_a [8-1:0] = memory_controller_in_a[8-1:0];
	JpegFileBuf_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	decode_block_0_QuantBuff_address_a = memory_controller_address_a [6-1+2:2] & {6{select_decode_block_0_QuantBuff_a}};
	decode_block_0_QuantBuff_address_b = memory_controller_address_b [6-1+2:2] & {6{select_decode_block_0_QuantBuff_b}};
	decode_block_0_QuantBuff_write_enable_a = memory_controller_write_enable_a & select_decode_block_0_QuantBuff_a;
	decode_block_0_QuantBuff_write_enable_b = memory_controller_write_enable_b & select_decode_block_0_QuantBuff_b;
	decode_block_0_QuantBuff_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	decode_block_0_QuantBuff_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	huff_make_dhuff_tb_0_huffsize_address_a = memory_controller_address_a [9-1+2:2] & {9{select_huff_make_dhuff_tb_0_huffsize_a}};
	huff_make_dhuff_tb_0_huffsize_address_b = memory_controller_address_b [9-1+2:2] & {9{select_huff_make_dhuff_tb_0_huffsize_b}};
	huff_make_dhuff_tb_0_huffsize_write_enable_a = memory_controller_write_enable_a & select_huff_make_dhuff_tb_0_huffsize_a;
	huff_make_dhuff_tb_0_huffsize_write_enable_b = memory_controller_write_enable_b & select_huff_make_dhuff_tb_0_huffsize_b;
	huff_make_dhuff_tb_0_huffsize_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	huff_make_dhuff_tb_0_huffsize_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	huff_make_dhuff_tb_0_huffcode_address_a = memory_controller_address_a [9-1+2:2] & {9{select_huff_make_dhuff_tb_0_huffcode_a}};
	huff_make_dhuff_tb_0_huffcode_address_b = memory_controller_address_b [9-1+2:2] & {9{select_huff_make_dhuff_tb_0_huffcode_b}};
	huff_make_dhuff_tb_0_huffcode_write_enable_a = memory_controller_write_enable_a & select_huff_make_dhuff_tb_0_huffcode_a;
	huff_make_dhuff_tb_0_huffcode_write_enable_b = memory_controller_write_enable_b & select_huff_make_dhuff_tb_0_huffcode_b;
	huff_make_dhuff_tb_0_huffcode_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	huff_make_dhuff_tb_0_huffcode_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_HuffBuff_i_i_address_a = memory_controller_address_a [8-1+2:2] & {8{select_main_0_HuffBuff_i_i_a}};
	main_0_HuffBuff_i_i_address_b = memory_controller_address_b [8-1+2:2] & {8{select_main_0_HuffBuff_i_i_b}};
	main_0_HuffBuff_i_i_write_enable_a = memory_controller_write_enable_a & select_main_0_HuffBuff_i_i_a;
	main_0_HuffBuff_i_i_write_enable_b = memory_controller_write_enable_b & select_main_0_HuffBuff_i_i_b;
	main_0_HuffBuff_i_i_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	main_0_HuffBuff_i_i_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_IDCTBuff_i_i_address_a = memory_controller_address_a [9-1+2:2] & {9{select_main_0_IDCTBuff_i_i_a}};
	main_0_IDCTBuff_i_i_address_b = memory_controller_address_b [9-1+2:2] & {9{select_main_0_IDCTBuff_i_i_b}};
	main_0_IDCTBuff_i_i_write_enable_a = memory_controller_write_enable_a & select_main_0_IDCTBuff_i_i_a;
	main_0_IDCTBuff_i_i_write_enable_b = memory_controller_write_enable_b & select_main_0_IDCTBuff_i_i_b;
	main_0_IDCTBuff_i_i_in_a [32-1:0] = memory_controller_in_a[32-1:0];
	main_0_IDCTBuff_i_i_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end

always @(*)
begin
select_not_struct_a [2:0] = 3'b0 | {2{select_out_unread_marker_reg_a}} | {2{select_out_index_get_sof_reg_a}} | {2{select_out_v_samp_factor_get_sof_reg_a}} | {2{select_out_comp_id_get_sos_reg_a}} | {2{select_out_ac_tbl_no_get_sos_reg_a}} | {2{select_out_length_get_dht_reg_a}} | {2{select_out_index_get_dht_reg_a}} | {2{select_out_count_get_dht_reg_a}} | {2{select_out_length_get_dqt_reg_a}} | {2{select_out_prec_get_dht_reg_a}} | {2{select_out_num_get_dht_reg_a}} | {2{select_izigzag_index_reg_a}} | {2{select_main_result_reg_a}} | {1{select_p_jinfo_image_height_reg_a}} | {1{select_p_jinfo_image_width_reg_a}} | {2{select_p_jinfo_ac_xhuff_tbl_bits_reg_a}} | {2{select_p_jinfo_ac_xhuff_tbl_huffval_reg_a}} | {2{select_p_jinfo_dc_xhuff_tbl_bits_reg_a}} | {2{select_p_jinfo_dc_xhuff_tbl_huffval_reg_a}} | {2{select_p_jinfo_quant_tbl_quantval_reg_a}} | {2{select_zigzag_index_reg_a}} | {2{select_p_jinfo_MCUWidth_reg_a}} | {2{select_rgb_buf_reg_a}} | {2{select_CurHuffReadBuf_reg_a}} | {2{select_bit_set_mask_reg_a}} | {2{select_lmask_reg_a}} | {2{select_read_position_reg_a}} | {2{select_current_read_byte_reg_a}} | {2{select_p_jinfo_dc_dhuff_tbl_ml_reg_a}} | {2{select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a}} | {2{select_p_jinfo_dc_dhuff_tbl_mincode_reg_a}} | {2{select_p_jinfo_dc_dhuff_tbl_valptr_reg_a}} | {2{select_extend_mask_reg_a}} | {2{select_p_jinfo_ac_dhuff_tbl_ml_reg_a}} | {2{select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a}} | {2{select_p_jinfo_ac_dhuff_tbl_mincode_reg_a}} | {2{select_p_jinfo_ac_dhuff_tbl_valptr_reg_a}} | {2{select_OutData_comp_vpos_reg_a}} | {2{select_OutData_comp_hpos_reg_a}} | {2{select_decode_block_0_QuantBuff_reg_a}} | {2{select_huff_make_dhuff_tb_0_huffsize_reg_a}} | {2{select_huff_make_dhuff_tb_0_huffcode_reg_a}} | {2{select_main_0_HuffBuff_i_i_reg_a}} | {2{select_main_0_IDCTBuff_i_i_reg_a}};

select_not_struct_b[2:0] = 3'b0 | {2{select_out_unread_marker_reg_b}} | {2{select_out_index_get_sof_reg_b}} | {2{select_out_v_samp_factor_get_sof_reg_b}} | {2{select_out_comp_id_get_sos_reg_b}} | {2{select_out_ac_tbl_no_get_sos_reg_b}} | {2{select_out_length_get_dht_reg_b}} | {2{select_out_index_get_dht_reg_b}} | {2{select_out_count_get_dht_reg_b}} | {2{select_out_length_get_dqt_reg_b}} | {2{select_out_prec_get_dht_reg_b}} | {2{select_out_num_get_dht_reg_b}} | {2{select_izigzag_index_reg_b}} | {2{select_main_result_reg_b}} | {1{select_p_jinfo_image_height_reg_b}} | {1{select_p_jinfo_image_width_reg_b}} | {2{select_p_jinfo_ac_xhuff_tbl_bits_reg_b}} | {2{select_p_jinfo_ac_xhuff_tbl_huffval_reg_b}} | {2{select_p_jinfo_dc_xhuff_tbl_bits_reg_b}} | {2{select_p_jinfo_dc_xhuff_tbl_huffval_reg_b}} | {2{select_p_jinfo_quant_tbl_quantval_reg_b}} | {2{select_zigzag_index_reg_b}} | {2{select_p_jinfo_MCUWidth_reg_b}} | {2{select_rgb_buf_reg_b}} | {2{select_CurHuffReadBuf_reg_b}} | {2{select_bit_set_mask_reg_b}} | {2{select_lmask_reg_b}} | {2{select_read_position_reg_b}} | {2{select_current_read_byte_reg_b}} | {2{select_p_jinfo_dc_dhuff_tbl_ml_reg_b}} | {2{select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b}} | {2{select_p_jinfo_dc_dhuff_tbl_mincode_reg_b}} | {2{select_p_jinfo_dc_dhuff_tbl_valptr_reg_b}} | {2{select_extend_mask_reg_b}} | {2{select_p_jinfo_ac_dhuff_tbl_ml_reg_b}} | {2{select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b}} | {2{select_p_jinfo_ac_dhuff_tbl_mincode_reg_b}} | {2{select_p_jinfo_ac_dhuff_tbl_valptr_reg_b}} | {2{select_OutData_comp_vpos_reg_b}} | {2{select_OutData_comp_hpos_reg_b}} | {2{select_decode_block_0_QuantBuff_reg_b}} | {2{select_huff_make_dhuff_tb_0_huffsize_reg_b}} | {2{select_huff_make_dhuff_tb_0_huffcode_reg_b}} | {2{select_main_0_HuffBuff_i_i_reg_b}} | {2{select_main_0_IDCTBuff_i_i_reg_b}};

		if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0)
		begin
			$display("Error: memory address not aligned to ram word size!");
			$finish;
		end

		if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0)
		begin
			$display("Error: memory address not aligned to ram word size!");
			$finish;
		end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
prevSize_a_and[1] = prevSize_a[1];
prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
		if ((prevAddr_a & prevSize_a_and) != 0)
				begin
					$display("Error: memory address not aligned to ram size!");
					$finish;
				end
	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
prevSize_b_and[1] = prevSize_b[1];
prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
		if ((prevAddr_b & prevSize_b_and) != 0)
				begin
					$display("Error: memory address not aligned to ram size!");
					$finish;
				end
memory_controller_out_a = 1'b0 | memory_controller_hana_jpg_out_a | memory_controller_hana_bmp_out_a | memory_controller_out_unread_marker_out_a | memory_controller_out_index_get_sof_out_a | memory_controller_out_v_samp_factor_get_sof_out_a | memory_controller_out_comp_id_get_sos_out_a | memory_controller_out_ac_tbl_no_get_sos_out_a | memory_controller_out_length_get_dht_out_a | memory_controller_out_index_get_dht_out_a | memory_controller_out_count_get_dht_out_a | memory_controller_out_length_get_dqt_out_a | memory_controller_out_prec_get_dht_out_a | memory_controller_out_num_get_dht_out_a | memory_controller_izigzag_index_out_a | memory_controller_main_result_out_a | memory_controller_p_jinfo_image_height_out_a | memory_controller_p_jinfo_image_width_out_a | memory_controller_p_jinfo_comps_info_index_out_a | memory_controller_p_jinfo_comps_info_id_out_a | memory_controller_p_jinfo_comps_info_h_samp_factor_out_a | memory_controller_p_jinfo_comps_info_v_samp_factor_out_a | memory_controller_p_jinfo_comps_info_quant_tbl_no_out_a | memory_controller_p_jinfo_comps_info_dc_tbl_no_out_a | memory_controller_p_jinfo_comps_info_ac_tbl_no_out_a | memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_a | memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_a | memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_a | memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_a | memory_controller_p_jinfo_quant_tbl_quantval_out_a | memory_controller_zigzag_index_out_a | memory_controller_p_jinfo_MCUWidth_out_a | memory_controller_rgb_buf_out_a | memory_controller_CurHuffReadBuf_out_a | memory_controller_OutData_comp_buf_out_a | memory_controller_bit_set_mask_out_a | memory_controller_lmask_out_a | memory_controller_read_position_out_a | memory_controller_current_read_byte_out_a | memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_a | memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_a | memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_a | memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_a | memory_controller_extend_mask_out_a | memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_a | memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_a | memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_a | memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_a | memory_controller_OutData_comp_vpos_out_a | memory_controller_OutData_comp_hpos_out_a | memory_controller_JpegFileBuf_out_a | memory_controller_decode_block_0_QuantBuff_out_a | memory_controller_huff_make_dhuff_tb_0_huffsize_out_a | memory_controller_huff_make_dhuff_tb_0_huffcode_out_a | memory_controller_main_0_HuffBuff_i_i_out_a | memory_controller_main_0_IDCTBuff_i_i_out_a;
memory_controller_out_b = 1'b0 | memory_controller_hana_jpg_out_b | memory_controller_hana_bmp_out_b | memory_controller_out_unread_marker_out_b | memory_controller_out_index_get_sof_out_b | memory_controller_out_v_samp_factor_get_sof_out_b | memory_controller_out_comp_id_get_sos_out_b | memory_controller_out_ac_tbl_no_get_sos_out_b | memory_controller_out_length_get_dht_out_b | memory_controller_out_index_get_dht_out_b | memory_controller_out_count_get_dht_out_b | memory_controller_out_length_get_dqt_out_b | memory_controller_out_prec_get_dht_out_b | memory_controller_out_num_get_dht_out_b | memory_controller_izigzag_index_out_b | memory_controller_main_result_out_b | memory_controller_p_jinfo_image_height_out_b | memory_controller_p_jinfo_image_width_out_b | memory_controller_p_jinfo_comps_info_index_out_b | memory_controller_p_jinfo_comps_info_id_out_b | memory_controller_p_jinfo_comps_info_h_samp_factor_out_b | memory_controller_p_jinfo_comps_info_v_samp_factor_out_b | memory_controller_p_jinfo_comps_info_quant_tbl_no_out_b | memory_controller_p_jinfo_comps_info_dc_tbl_no_out_b | memory_controller_p_jinfo_comps_info_ac_tbl_no_out_b | memory_controller_p_jinfo_ac_xhuff_tbl_bits_out_b | memory_controller_p_jinfo_ac_xhuff_tbl_huffval_out_b | memory_controller_p_jinfo_dc_xhuff_tbl_bits_out_b | memory_controller_p_jinfo_dc_xhuff_tbl_huffval_out_b | memory_controller_p_jinfo_quant_tbl_quantval_out_b | memory_controller_zigzag_index_out_b | memory_controller_p_jinfo_MCUWidth_out_b | memory_controller_rgb_buf_out_b | memory_controller_CurHuffReadBuf_out_b | memory_controller_OutData_comp_buf_out_b | memory_controller_bit_set_mask_out_b | memory_controller_lmask_out_b | memory_controller_read_position_out_b | memory_controller_current_read_byte_out_b | memory_controller_p_jinfo_dc_dhuff_tbl_ml_out_b | memory_controller_p_jinfo_dc_dhuff_tbl_maxcode_out_b | memory_controller_p_jinfo_dc_dhuff_tbl_mincode_out_b | memory_controller_p_jinfo_dc_dhuff_tbl_valptr_out_b | memory_controller_extend_mask_out_b | memory_controller_p_jinfo_ac_dhuff_tbl_ml_out_b | memory_controller_p_jinfo_ac_dhuff_tbl_maxcode_out_b | memory_controller_p_jinfo_ac_dhuff_tbl_mincode_out_b | memory_controller_p_jinfo_ac_dhuff_tbl_valptr_out_b | memory_controller_OutData_comp_vpos_out_b | memory_controller_OutData_comp_hpos_out_b | memory_controller_JpegFileBuf_out_b | memory_controller_decode_block_0_QuantBuff_out_b | memory_controller_huff_make_dhuff_tb_0_huffsize_out_b | memory_controller_huff_make_dhuff_tb_0_huffcode_out_b | memory_controller_main_0_HuffBuff_i_i_out_b | memory_controller_main_0_IDCTBuff_i_i_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_out_reg_b <= memory_controller_out_b;
select_hana_jpg_reg_a <= select_hana_jpg_a;
select_hana_jpg_reg_b <= select_hana_jpg_b;
select_hana_bmp_reg_a <= select_hana_bmp_a;
select_hana_bmp_reg_b <= select_hana_bmp_b;
select_out_unread_marker_reg_a <= select_out_unread_marker_a;
select_out_unread_marker_reg_b <= select_out_unread_marker_b;
select_out_index_get_sof_reg_a <= select_out_index_get_sof_a;
select_out_index_get_sof_reg_b <= select_out_index_get_sof_b;
select_out_v_samp_factor_get_sof_reg_a <= select_out_v_samp_factor_get_sof_a;
select_out_v_samp_factor_get_sof_reg_b <= select_out_v_samp_factor_get_sof_b;
select_out_comp_id_get_sos_reg_a <= select_out_comp_id_get_sos_a;
select_out_comp_id_get_sos_reg_b <= select_out_comp_id_get_sos_b;
select_out_ac_tbl_no_get_sos_reg_a <= select_out_ac_tbl_no_get_sos_a;
select_out_ac_tbl_no_get_sos_reg_b <= select_out_ac_tbl_no_get_sos_b;
select_out_length_get_dht_reg_a <= select_out_length_get_dht_a;
select_out_length_get_dht_reg_b <= select_out_length_get_dht_b;
select_out_index_get_dht_reg_a <= select_out_index_get_dht_a;
select_out_index_get_dht_reg_b <= select_out_index_get_dht_b;
select_out_count_get_dht_reg_a <= select_out_count_get_dht_a;
select_out_count_get_dht_reg_b <= select_out_count_get_dht_b;
select_out_length_get_dqt_reg_a <= select_out_length_get_dqt_a;
select_out_length_get_dqt_reg_b <= select_out_length_get_dqt_b;
select_out_prec_get_dht_reg_a <= select_out_prec_get_dht_a;
select_out_prec_get_dht_reg_b <= select_out_prec_get_dht_b;
select_out_num_get_dht_reg_a <= select_out_num_get_dht_a;
select_out_num_get_dht_reg_b <= select_out_num_get_dht_b;
select_izigzag_index_reg_a <= select_izigzag_index_a;
select_izigzag_index_reg_b <= select_izigzag_index_b;
select_main_result_reg_a <= select_main_result_a;
select_main_result_reg_b <= select_main_result_b;
select_p_jinfo_image_height_reg_a <= select_p_jinfo_image_height_a;
select_p_jinfo_image_height_reg_b <= select_p_jinfo_image_height_b;
select_p_jinfo_image_width_reg_a <= select_p_jinfo_image_width_a;
select_p_jinfo_image_width_reg_b <= select_p_jinfo_image_width_b;
select_p_jinfo_comps_info_index_reg_a <= select_p_jinfo_comps_info_index_a;
select_p_jinfo_comps_info_index_reg_b <= select_p_jinfo_comps_info_index_b;
select_p_jinfo_comps_info_id_reg_a <= select_p_jinfo_comps_info_id_a;
select_p_jinfo_comps_info_id_reg_b <= select_p_jinfo_comps_info_id_b;
select_p_jinfo_comps_info_h_samp_factor_reg_a <= select_p_jinfo_comps_info_h_samp_factor_a;
select_p_jinfo_comps_info_h_samp_factor_reg_b <= select_p_jinfo_comps_info_h_samp_factor_b;
select_p_jinfo_comps_info_v_samp_factor_reg_a <= select_p_jinfo_comps_info_v_samp_factor_a;
select_p_jinfo_comps_info_v_samp_factor_reg_b <= select_p_jinfo_comps_info_v_samp_factor_b;
select_p_jinfo_comps_info_quant_tbl_no_reg_a <= select_p_jinfo_comps_info_quant_tbl_no_a;
select_p_jinfo_comps_info_quant_tbl_no_reg_b <= select_p_jinfo_comps_info_quant_tbl_no_b;
select_p_jinfo_comps_info_dc_tbl_no_reg_a <= select_p_jinfo_comps_info_dc_tbl_no_a;
select_p_jinfo_comps_info_dc_tbl_no_reg_b <= select_p_jinfo_comps_info_dc_tbl_no_b;
select_p_jinfo_comps_info_ac_tbl_no_reg_a <= select_p_jinfo_comps_info_ac_tbl_no_a;
select_p_jinfo_comps_info_ac_tbl_no_reg_b <= select_p_jinfo_comps_info_ac_tbl_no_b;
select_p_jinfo_ac_xhuff_tbl_bits_reg_a <= select_p_jinfo_ac_xhuff_tbl_bits_a;
select_p_jinfo_ac_xhuff_tbl_bits_reg_b <= select_p_jinfo_ac_xhuff_tbl_bits_b;
select_p_jinfo_ac_xhuff_tbl_huffval_reg_a <= select_p_jinfo_ac_xhuff_tbl_huffval_a;
select_p_jinfo_ac_xhuff_tbl_huffval_reg_b <= select_p_jinfo_ac_xhuff_tbl_huffval_b;
select_p_jinfo_dc_xhuff_tbl_bits_reg_a <= select_p_jinfo_dc_xhuff_tbl_bits_a;
select_p_jinfo_dc_xhuff_tbl_bits_reg_b <= select_p_jinfo_dc_xhuff_tbl_bits_b;
select_p_jinfo_dc_xhuff_tbl_huffval_reg_a <= select_p_jinfo_dc_xhuff_tbl_huffval_a;
select_p_jinfo_dc_xhuff_tbl_huffval_reg_b <= select_p_jinfo_dc_xhuff_tbl_huffval_b;
select_p_jinfo_quant_tbl_quantval_reg_a <= select_p_jinfo_quant_tbl_quantval_a;
select_p_jinfo_quant_tbl_quantval_reg_b <= select_p_jinfo_quant_tbl_quantval_b;
select_zigzag_index_reg_a <= select_zigzag_index_a;
select_zigzag_index_reg_b <= select_zigzag_index_b;
select_p_jinfo_MCUWidth_reg_a <= select_p_jinfo_MCUWidth_a;
select_p_jinfo_MCUWidth_reg_b <= select_p_jinfo_MCUWidth_b;
select_rgb_buf_reg_a <= select_rgb_buf_a;
select_rgb_buf_reg_b <= select_rgb_buf_b;
select_CurHuffReadBuf_reg_a <= select_CurHuffReadBuf_a;
select_CurHuffReadBuf_reg_b <= select_CurHuffReadBuf_b;
select_OutData_comp_buf_reg_a <= select_OutData_comp_buf_a;
select_OutData_comp_buf_reg_b <= select_OutData_comp_buf_b;
select_bit_set_mask_reg_a <= select_bit_set_mask_a;
select_bit_set_mask_reg_b <= select_bit_set_mask_b;
select_lmask_reg_a <= select_lmask_a;
select_lmask_reg_b <= select_lmask_b;
select_read_position_reg_a <= select_read_position_a;
select_read_position_reg_b <= select_read_position_b;
select_current_read_byte_reg_a <= select_current_read_byte_a;
select_current_read_byte_reg_b <= select_current_read_byte_b;
select_p_jinfo_dc_dhuff_tbl_ml_reg_a <= select_p_jinfo_dc_dhuff_tbl_ml_a;
select_p_jinfo_dc_dhuff_tbl_ml_reg_b <= select_p_jinfo_dc_dhuff_tbl_ml_b;
select_p_jinfo_dc_dhuff_tbl_maxcode_reg_a <= select_p_jinfo_dc_dhuff_tbl_maxcode_a;
select_p_jinfo_dc_dhuff_tbl_maxcode_reg_b <= select_p_jinfo_dc_dhuff_tbl_maxcode_b;
select_p_jinfo_dc_dhuff_tbl_mincode_reg_a <= select_p_jinfo_dc_dhuff_tbl_mincode_a;
select_p_jinfo_dc_dhuff_tbl_mincode_reg_b <= select_p_jinfo_dc_dhuff_tbl_mincode_b;
select_p_jinfo_dc_dhuff_tbl_valptr_reg_a <= select_p_jinfo_dc_dhuff_tbl_valptr_a;
select_p_jinfo_dc_dhuff_tbl_valptr_reg_b <= select_p_jinfo_dc_dhuff_tbl_valptr_b;
select_extend_mask_reg_a <= select_extend_mask_a;
select_extend_mask_reg_b <= select_extend_mask_b;
select_p_jinfo_ac_dhuff_tbl_ml_reg_a <= select_p_jinfo_ac_dhuff_tbl_ml_a;
select_p_jinfo_ac_dhuff_tbl_ml_reg_b <= select_p_jinfo_ac_dhuff_tbl_ml_b;
select_p_jinfo_ac_dhuff_tbl_maxcode_reg_a <= select_p_jinfo_ac_dhuff_tbl_maxcode_a;
select_p_jinfo_ac_dhuff_tbl_maxcode_reg_b <= select_p_jinfo_ac_dhuff_tbl_maxcode_b;
select_p_jinfo_ac_dhuff_tbl_mincode_reg_a <= select_p_jinfo_ac_dhuff_tbl_mincode_a;
select_p_jinfo_ac_dhuff_tbl_mincode_reg_b <= select_p_jinfo_ac_dhuff_tbl_mincode_b;
select_p_jinfo_ac_dhuff_tbl_valptr_reg_a <= select_p_jinfo_ac_dhuff_tbl_valptr_a;
select_p_jinfo_ac_dhuff_tbl_valptr_reg_b <= select_p_jinfo_ac_dhuff_tbl_valptr_b;
select_OutData_comp_vpos_reg_a <= select_OutData_comp_vpos_a;
select_OutData_comp_vpos_reg_b <= select_OutData_comp_vpos_b;
select_OutData_comp_hpos_reg_a <= select_OutData_comp_hpos_a;
select_OutData_comp_hpos_reg_b <= select_OutData_comp_hpos_b;
select_JpegFileBuf_reg_a <= select_JpegFileBuf_a;
select_JpegFileBuf_reg_b <= select_JpegFileBuf_b;
select_decode_block_0_QuantBuff_reg_a <= select_decode_block_0_QuantBuff_a;
select_decode_block_0_QuantBuff_reg_b <= select_decode_block_0_QuantBuff_b;
select_huff_make_dhuff_tb_0_huffsize_reg_a <= select_huff_make_dhuff_tb_0_huffsize_a;
select_huff_make_dhuff_tb_0_huffsize_reg_b <= select_huff_make_dhuff_tb_0_huffsize_b;
select_huff_make_dhuff_tb_0_huffcode_reg_a <= select_huff_make_dhuff_tb_0_huffcode_a;
select_huff_make_dhuff_tb_0_huffcode_reg_b <= select_huff_make_dhuff_tb_0_huffcode_b;
select_main_0_HuffBuff_i_i_reg_a <= select_main_0_HuffBuff_i_i_a;
select_main_0_HuffBuff_i_i_reg_b <= select_main_0_HuffBuff_i_i_b;
select_main_0_IDCTBuff_i_i_reg_a <= select_main_0_IDCTBuff_i_i_a;
select_main_0_IDCTBuff_i_i_reg_b <= select_main_0_IDCTBuff_i_i_b;
end

endmodule 
`timescale 1 ns / 1 ns
module Write4Blocks
(
	clk,
	reset,
	start,
	finish,
	arg_store1,
	arg_store2,
	arg_store3,
	arg_store4,
	arg_p_out_vpos,
	arg_p_out_hpos,
	arg_p_out_buf,
	memory_controller_address,
	memory_controller_enable,
	memory_controller_write_enable,
	memory_controller_waitrequest,
	memory_controller_in,
	memory_controller_size,
	memory_controller_out
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_Write4Blocks_BB0_1 = 6'd1;
parameter [5:0] LEGUP_F_Write4Blocks_BB0_2 = 6'd2;
parameter [5:0] LEGUP_F_Write4Blocks_BB0_3 = 6'd3;
parameter [5:0] LEGUP_F_Write4Blocks_BB0_4 = 6'd4;
parameter [5:0] LEGUP_F_Write4Blocks_BB0_5 = 6'd5;
parameter [5:0] LEGUP_F_Write4Blocks_BB0_6 = 6'd6;
parameter [5:0] LEGUP_F_Write4Blocks_BB1_7 = 6'd7;
parameter [5:0] LEGUP_F_Write4Blocks_BB1_8 = 6'd8;
parameter [5:0] LEGUP_F_Write4Blocks_BB1_9 = 6'd9;
parameter [5:0] LEGUP_F_Write4Blocks_BB2_10 = 6'd10;
parameter [5:0] LEGUP_F_Write4Blocks_BB3_11 = 6'd11;
parameter [5:0] LEGUP_F_Write4Blocks_BB3_12 = 6'd12;
parameter [5:0] LEGUP_F_Write4Blocks_BB3_13 = 6'd13;
parameter [5:0] LEGUP_F_Write4Blocks_BB4_14 = 6'd14;
parameter [5:0] LEGUP_F_Write4Blocks_BB5_15 = 6'd15;
parameter [5:0] LEGUP_F_Write4Blocks_BB6_16 = 6'd16;
parameter [5:0] LEGUP_F_Write4Blocks_BB7_17 = 6'd17;
parameter [5:0] LEGUP_F_Write4Blocks_BB7_18 = 6'd18;
parameter [5:0] LEGUP_F_Write4Blocks_BB7_19 = 6'd19;
parameter [5:0] LEGUP_F_Write4Blocks_BB8_20 = 6'd20;
parameter [5:0] LEGUP_F_Write4Blocks_BB9_21 = 6'd21;
parameter [5:0] LEGUP_F_Write4Blocks_BB9_22 = 6'd22;
parameter [5:0] LEGUP_F_Write4Blocks_BB9_23 = 6'd23;
parameter [5:0] LEGUP_F_Write4Blocks_BB10_24 = 6'd24;
parameter [5:0] LEGUP_F_Write4Blocks_BB11_25 = 6'd25;
parameter [5:0] LEGUP_F_Write4Blocks_BB12_26 = 6'd26;
parameter [5:0] LEGUP_F_Write4Blocks_BB12_27 = 6'd27;
parameter [5:0] LEGUP_F_Write4Blocks_BB12_28 = 6'd28;
parameter [5:0] LEGUP_F_Write4Blocks_BB13_29 = 6'd29;
parameter [5:0] LEGUP_F_Write4Blocks_BB14_30 = 6'd30;
parameter [5:0] LEGUP_F_Write4Blocks_BB14_31 = 6'd31;
parameter [5:0] LEGUP_F_Write4Blocks_BB14_32 = 6'd32;
parameter [5:0] LEGUP_F_Write4Blocks_BB15_33 = 6'd33;
parameter [5:0] LEGUP_F_Write4Blocks_BB16_34 = 6'd34;
parameter [5:0] LEGUP_F_Write4Blocks_BB17_35 = 6'd35;
parameter [5:0] LEGUP_F_Write4Blocks_BB17_36 = 6'd36;
parameter [5:0] LEGUP_F_Write4Blocks_BB17_37 = 6'd37;
parameter [5:0] LEGUP_F_Write4Blocks_BB18_38 = 6'd38;
parameter [5:0] LEGUP_F_Write4Blocks_BB19_39 = 6'd39;
parameter [5:0] LEGUP_F_Write4Blocks_BB19_40 = 6'd40;
parameter [5:0] LEGUP_F_Write4Blocks_BB19_41 = 6'd41;
parameter [5:0] LEGUP_F_Write4Blocks_BB20_42 = 6'd42;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_43 = 6'd43;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_44 = 6'd44;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_45 = 6'd45;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_46 = 6'd46;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_47 = 6'd47;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_48 = 6'd48;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_49 = 6'd49;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_50 = 6'd50;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_51 = 6'd51;
parameter [5:0] LEGUP_F_Write4Blocks_BB21_52 = 6'd52;
parameter [5:0] LEGUP_F_Write4Blocks_BB22_53 = 6'd53;
parameter [5:0] LEGUP_F_Write4Blocks_BB23_54 = 6'd54;
parameter [5:0] LEGUP_F_Write4Blocks_BB24_55 = 6'd55;

input  clk;
input  reset;
input  start;
output reg  finish;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_store1;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_store2;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_store3;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_store4;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_out_vpos;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_out_hpos;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_out_buf;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;
output reg  memory_controller_enable;
output reg  memory_controller_write_enable;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;
output reg [1:0] memory_controller_size;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;
reg [5:0] cur_state;
reg [31:0] Write4Blocks_0_1;
reg [31:0] Write4Blocks_0_1_reg;
reg [31:0] Write4Blocks_0_2;
reg [31:0] Write4Blocks_0_2_reg;
reg [31:0] Write4Blocks_0_3;
reg [31:0] Write4Blocks_0_4;
reg [31:0] Write4Blocks_0_4_reg;
reg [15:0] Write4Blocks_0_5;
reg [31:0] Write4Blocks_0_6;
reg [31:0] Write4Blocks_0_6_reg;
reg [15:0] Write4Blocks_0_7;
reg [31:0] Write4Blocks_0_8;
reg [31:0] Write4Blocks_0_8_reg;
reg  Write4Blocks_0_9;
reg  Write4Blocks_0_9_reg;
reg  Write4Blocks_0_10;
reg  Write4Blocks_0_10_reg;
reg  Write4Blocks_0_or_cond_i;
reg [31:0] Write4Blocks_0_tmp287;
reg [31:0] Write4Blocks_0_tmp287_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp288340;
reg  Write4Blocks__lr_ph8_split_us_i_tmp289;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_smax290;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp291;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp291_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp293;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp293_reg;
reg  Write4Blocks__lr_ph8_split_us_i_tmp294;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_umax295;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp296;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp296_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp307;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp308341;
reg  Write4Blocks__lr_ph8_split_us_i_tmp309;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_smax310;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_smax310_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp311;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp313;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp313_reg;
reg  Write4Blocks__lr_ph8_split_us_i_tmp314;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_umax315;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_umax315_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp316;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp316_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp332;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp333;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp334;
reg [31:0] Write4Blocks__lr_ph8_split_us_i_tmp334_reg;
reg [31:0] Write4Blocks_11_indvar_next18_i;
reg  Write4Blocks_11_exitcond317;
reg [31:0] Write4Blocks_12_indvar_i;
reg [31:0] Write4Blocks_12_tmp330;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_12__14_us_i;
reg [31:0] Write4Blocks_12_tmp336;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_12_scevgep24_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_12_scevgep24_i_reg;
reg [31:0] Write4Blocks_12_13;
reg [7:0] Write4Blocks_12_14;
reg [31:0] Write4Blocks_12_indvar_next_i;
reg [31:0] Write4Blocks_12_indvar_next_i_reg;
reg  Write4Blocks_12_exitcond297;
reg  Write4Blocks_12_exitcond297_reg;
reg [31:0] Write4Blocks__lr_ph_us_i_indvar17_i;
reg [31:0] Write4Blocks__lr_ph_us_i_indvar17_i_reg;
reg [31:0] Write4Blocks__lr_ph_us_i_tmp329;
reg [31:0] Write4Blocks__lr_ph_us_i_tmp329_reg;
reg [31:0] Write4Blocks__lr_ph_us_i_tmp331;
reg [31:0] Write4Blocks__lr_ph_us_i_tmp335;
reg [31:0] Write4Blocks__lr_ph_us_i_tmp335_reg;
reg  Write4Blocks_WriteOneBlock_exit_15;
reg  Write4Blocks_WriteOneBlock_exit_15_reg;
reg  Write4Blocks_WriteOneBlock_exit_or_cond_i75;
reg [31:0] Write4Blocks_WriteOneBlock_exit_WriteOneBlock_exit111_crit_edge__pre349;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp232;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp233;
reg  Write4Blocks__lr_ph8_split_us_i96_tmp234;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_smax235;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_smax235_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp236;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp238;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp238_reg;
reg  Write4Blocks__lr_ph8_split_us_i96_tmp239;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_umax240;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_umax240_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp241;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp241_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp254;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp254_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp255339;
reg  Write4Blocks__lr_ph8_split_us_i96_tmp256;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_smax257;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_smax257_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp258;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp260;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp260_reg;
reg  Write4Blocks__lr_ph8_split_us_i96_tmp261;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_umax262;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_umax262_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp263;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp263_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp280;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp281;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp282;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp282_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp283;
reg [31:0] Write4Blocks__lr_ph8_split_us_i96_tmp283_reg;
reg [31:0] Write4Blocks_16_indvar_next18_i98;
reg  Write4Blocks_16_exitcond264;
reg [31:0] Write4Blocks_17_indvar_i100;
reg [31:0] Write4Blocks_17_tmp278;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_17__14_us_i103;
reg [31:0] Write4Blocks_17_tmp285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_17_scevgep24_i102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_17_scevgep24_i102_reg;
reg [31:0] Write4Blocks_17_18;
reg [7:0] Write4Blocks_17_19;
reg [31:0] Write4Blocks_17_indvar_next_i104;
reg [31:0] Write4Blocks_17_indvar_next_i104_reg;
reg  Write4Blocks_17_exitcond242;
reg  Write4Blocks_17_exitcond242_reg;
reg [31:0] Write4Blocks__lr_ph_us_i110_indvar17_i106;
reg [31:0] Write4Blocks__lr_ph_us_i110_indvar17_i106_reg;
reg [31:0] Write4Blocks__lr_ph_us_i110_tmp277;
reg [31:0] Write4Blocks__lr_ph_us_i110_tmp277_reg;
reg [31:0] Write4Blocks__lr_ph_us_i110_tmp279;
reg [31:0] Write4Blocks__lr_ph_us_i110_tmp284;
reg [31:0] Write4Blocks__lr_ph_us_i110_tmp284_reg;
reg [31:0] Write4Blocks_WriteOneBlock_exit111__pre_phi350;
reg [31:0] Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg;
reg  Write4Blocks_WriteOneBlock_exit111_20;
reg  Write4Blocks_WriteOneBlock_exit111_20_reg;
reg  Write4Blocks_WriteOneBlock_exit111_or_cond_i38;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp179337;
reg  Write4Blocks__lr_ph8_split_us_i59_tmp180;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_smax181;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp182;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp182_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp184;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp184_reg;
reg  Write4Blocks__lr_ph8_split_us_i59_tmp185;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_umax186;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp187;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp187_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp199;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp200;
reg  Write4Blocks__lr_ph8_split_us_i59_tmp201;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_smax202;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_smax202_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp203;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp206;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp206_reg;
reg  Write4Blocks__lr_ph8_split_us_i59_tmp207;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_umax208;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_umax208_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp209;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp209_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp226;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp227;
reg [31:0] Write4Blocks__lr_ph8_split_us_i59_tmp227_reg;
reg [31:0] Write4Blocks_21_indvar_next18_i61;
reg  Write4Blocks_21_exitcond210;
reg [31:0] Write4Blocks_22_indvar_i63;
reg [31:0] Write4Blocks_22_tmp223;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_22__14_us_i66;
reg [31:0] Write4Blocks_22_tmp229;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_22_scevgep24_i65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_22_scevgep24_i65_reg;
reg [31:0] Write4Blocks_22_23;
reg [7:0] Write4Blocks_22_24;
reg [31:0] Write4Blocks_22_indvar_next_i67;
reg [31:0] Write4Blocks_22_indvar_next_i67_reg;
reg  Write4Blocks_22_exitcond188;
reg  Write4Blocks_22_exitcond188_reg;
reg [31:0] Write4Blocks__lr_ph_us_i73_indvar17_i69;
reg [31:0] Write4Blocks__lr_ph_us_i73_indvar17_i69_reg;
reg [31:0] Write4Blocks__lr_ph_us_i73_tmp222;
reg [31:0] Write4Blocks__lr_ph_us_i73_tmp222_reg;
reg [31:0] Write4Blocks__lr_ph_us_i73_tmp224;
reg [31:0] Write4Blocks__lr_ph_us_i73_tmp228;
reg [31:0] Write4Blocks__lr_ph_us_i73_tmp228_reg;
reg  Write4Blocks_WriteOneBlock_exit74_or_cond_i1;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp125;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp126;
reg  Write4Blocks__lr_ph8_split_us_i22_tmp127;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_smax;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_smax_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp128;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp130;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp130_reg;
reg  Write4Blocks__lr_ph8_split_us_i22_tmp131;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_umax;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_umax_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp132;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp132_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp144;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp145;
reg  Write4Blocks__lr_ph8_split_us_i22_tmp146;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_smax147;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_smax147_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp148;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp151;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp151_reg;
reg  Write4Blocks__lr_ph8_split_us_i22_tmp152;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_umax153;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_umax153_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp154;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp154_reg;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp172;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp173;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp174;
reg [31:0] Write4Blocks__lr_ph8_split_us_i22_tmp174_reg;
reg [31:0] Write4Blocks_25_indvar_next18_i24;
reg  Write4Blocks_25_exitcond155;
reg [31:0] Write4Blocks_26_indvar_i26;
reg [31:0] Write4Blocks_26_tmp169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_26__14_us_i29;
reg [31:0] Write4Blocks_26_tmp176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_26_scevgep24_i28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_26_scevgep24_i28_reg;
reg [31:0] Write4Blocks_26_27;
reg [7:0] Write4Blocks_26_28;
reg [31:0] Write4Blocks_26_indvar_next_i30;
reg [31:0] Write4Blocks_26_indvar_next_i30_reg;
reg  Write4Blocks_26_exitcond;
reg  Write4Blocks_26_exitcond_reg;
reg [31:0] Write4Blocks__lr_ph_us_i36_indvar17_i32;
reg [31:0] Write4Blocks__lr_ph_us_i36_indvar17_i32_reg;
reg [31:0] Write4Blocks__lr_ph_us_i36_tmp168;
reg [31:0] Write4Blocks__lr_ph_us_i36_tmp168_reg;
reg [31:0] Write4Blocks__lr_ph_us_i36_tmp170;
reg [31:0] Write4Blocks__lr_ph_us_i36_tmp175;
reg [31:0] Write4Blocks__lr_ph_us_i36_tmp175_reg;
reg [31:0] Write4Blocks_WriteOneBlock_exit37_29;
reg [31:0] Write4Blocks_WriteOneBlock_exit37_30;
reg [31:0] Write4Blocks_WriteOneBlock_exit37_31;
reg [31:0] Write4Blocks_WriteOneBlock_exit37_31_reg;
reg [31:0] Write4Blocks_WriteOneBlock_exit37_32;
reg [31:0] Write4Blocks_WriteOneBlock_exit37_33;
reg [31:0] Write4Blocks_WriteOneBlock_exit37_33_reg;
reg [31:0] Write4Blocks_WriteOneBlock_exit37_34;
reg  Write4Blocks_WriteOneBlock_exit37_35;
reg [31:0] Write4Blocks_signed_multiply_32_0_op0;
reg [31:0] Write4Blocks_signed_multiply_32_0_op1;
reg [31:0] Write4Blocks_signed_multiply_32_0;
reg [31:0] Write4Blocks_signed_multiply_32_1_op0;
reg [31:0] Write4Blocks_signed_multiply_32_1_op1;
reg [31:0] Write4Blocks_signed_multiply_32_1;
reg [31:0] Write4Blocks__lr_ph_us_i_indvar17_i_phi_temp;
reg [31:0] Write4Blocks_12_indvar_i_phi_temp;
reg [31:0] Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp;
reg [31:0] Write4Blocks__lr_ph_us_i110_indvar17_i106_phi_temp;
reg [31:0] Write4Blocks_17_indvar_i100_phi_temp;
reg [31:0] Write4Blocks__lr_ph_us_i73_indvar17_i69_phi_temp;
reg [31:0] Write4Blocks_22_indvar_i63_phi_temp;
reg [31:0] Write4Blocks__lr_ph_us_i36_indvar17_i32_phi_temp;
reg [31:0] Write4Blocks_26_indvar_i26_phi_temp;


always @(posedge clk) begin
if (reset == 1'd1)
begin
cur_state <= 6'd0;
if (^reset !== 1'bX && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_1 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_2;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_2 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_2;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_2 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_3;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_3 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_3;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_3 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_4;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_4 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_4;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_4 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_5;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_5 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_5;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_5 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_6;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_6 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB0_6;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_6 & memory_controller_waitrequest == 1'd0 & Write4Blocks_0_or_cond_i == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB1_7;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB0_6 & memory_controller_waitrequest == 1'd0 & Write4Blocks_0_or_cond_i == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB5_15;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB5_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB1_7 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB1_7;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB1_7 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB1_8;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB1_8 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB1_8;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB1_8 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB1_9;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB1_9 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB1_9;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB1_9 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB4_14;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB4_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB2_10 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB2_10;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB2_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB2_10 & memory_controller_waitrequest == 1'd0 & Write4Blocks_11_exitcond317 == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB5_15;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB5_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB2_10 & memory_controller_waitrequest == 1'd0 & Write4Blocks_11_exitcond317 == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB4_14;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB4_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB3_11 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB3_11;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB3_11 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB3_12;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB3_12 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB3_12;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB3_12 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB3_13;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB3_13 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB3_13;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB3_13 & memory_controller_waitrequest == 1'd0 & Write4Blocks_12_exitcond297_reg == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB2_10;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB2_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB3_13 & memory_controller_waitrequest == 1'd0 & Write4Blocks_12_exitcond297_reg == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB3_11;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB4_14 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB4_14;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB4_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB4_14 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB3_11;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB5_15 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB5_15;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB5_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB5_15 & memory_controller_waitrequest == 1'd0 & Write4Blocks_WriteOneBlock_exit_or_cond_i75 == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB7_17;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB7_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB5_15 & memory_controller_waitrequest == 1'd0 & Write4Blocks_WriteOneBlock_exit_or_cond_i75 == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB6_16;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB6_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB6_16 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB6_16;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB6_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB6_16 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB11_25;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB11_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB7_17 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB7_17;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB7_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB7_17 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB7_18;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB7_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB7_18 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB7_18;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB7_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB7_18 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB7_19;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB7_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB7_19 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB7_19;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB7_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB7_19 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB10_24;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB8_20 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB8_20;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB8_20 & memory_controller_waitrequest == 1'd0 & Write4Blocks_16_exitcond264 == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB11_25;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB11_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB8_20 & memory_controller_waitrequest == 1'd0 & Write4Blocks_16_exitcond264 == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB10_24;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB9_21 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB9_21;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB9_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB9_21 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB9_22;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB9_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB9_22 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB9_22;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB9_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB9_22 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB9_23;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB9_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB9_23 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB9_23;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB9_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB9_23 & memory_controller_waitrequest == 1'd0 & Write4Blocks_17_exitcond242_reg == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB8_20;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB8_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB9_23 & memory_controller_waitrequest == 1'd0 & Write4Blocks_17_exitcond242_reg == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB9_21;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB9_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB10_24 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB10_24;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB10_24 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB9_21;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB9_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB11_25 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB11_25;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB11_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB11_25 & memory_controller_waitrequest == 1'd0 & Write4Blocks_WriteOneBlock_exit111_or_cond_i38 == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB12_26;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB11_25 & memory_controller_waitrequest == 1'd0 & Write4Blocks_WriteOneBlock_exit111_or_cond_i38 == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB16_34;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB16_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB12_26 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB12_26;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB12_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB12_26 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB12_27;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB12_27 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB12_27;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB12_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB12_27 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB12_28;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB12_28 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB12_28;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB12_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB12_28 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB15_33;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB15_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB13_29 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB13_29;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB13_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB13_29 & memory_controller_waitrequest == 1'd0 & Write4Blocks_21_exitcond210 == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB16_34;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB16_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB13_29 & memory_controller_waitrequest == 1'd0 & Write4Blocks_21_exitcond210 == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB15_33;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB15_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB14_30 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB14_30;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB14_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB14_30 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB14_31;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB14_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB14_31 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB14_31;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB14_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB14_31 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB14_32;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB14_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB14_32 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB14_32;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB14_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB14_32 & memory_controller_waitrequest == 1'd0 & Write4Blocks_22_exitcond188_reg == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB13_29;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB13_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB14_32 & memory_controller_waitrequest == 1'd0 & Write4Blocks_22_exitcond188_reg == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB14_30;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB14_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB15_33 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB15_33;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB15_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB15_33 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB14_30;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB14_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB16_34 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB16_34;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB16_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB16_34 & memory_controller_waitrequest == 1'd0 & Write4Blocks_WriteOneBlock_exit74_or_cond_i1 == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB17_35;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB17_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB16_34 & memory_controller_waitrequest == 1'd0 & Write4Blocks_WriteOneBlock_exit74_or_cond_i1 == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_43;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB17_35 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB17_35;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB17_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB17_35 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB17_36;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB17_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB17_36 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB17_36;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB17_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB17_36 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB17_37;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB17_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB17_37 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB17_37;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB17_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB17_37 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB20_42;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB20_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB18_38 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB18_38;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB18_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB18_38 & memory_controller_waitrequest == 1'd0 & Write4Blocks_25_exitcond155 == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_43;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB18_38 & memory_controller_waitrequest == 1'd0 & Write4Blocks_25_exitcond155 == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB20_42;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB20_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB19_39 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB19_39;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB19_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB19_39 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB19_40;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB19_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB19_40 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB19_40;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB19_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB19_40 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB19_41;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB19_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB19_41 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB19_41;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB19_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB19_41 & memory_controller_waitrequest == 1'd0 & Write4Blocks_26_exitcond_reg == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB18_38;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB18_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB19_41 & memory_controller_waitrequest == 1'd0 & Write4Blocks_26_exitcond_reg == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB19_39;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB19_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB20_42 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB20_42;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB20_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB20_42 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB19_39;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB19_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_43 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_43;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_43 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_44;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_44 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_44;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_44 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_45;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_45 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_45;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_45 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_46;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_46 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_46;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_46 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_47;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_47 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_47;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_47 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_48;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_48 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_48;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_48 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_49;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_49 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_49;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_49 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_50;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_50 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_50;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_50 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_51;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_51 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_51;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_51 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_52;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_52 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB21_52;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB21_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_52 & memory_controller_waitrequest == 1'd0 & Write4Blocks_WriteOneBlock_exit37_35 == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB22_53;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB22_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB21_52 & memory_controller_waitrequest == 1'd0 & Write4Blocks_WriteOneBlock_exit37_35 == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB23_54;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB23_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB22_53 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB22_53;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB22_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB22_53 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB24_55;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB24_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB23_54 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB23_54;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB23_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB23_54 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_Write4Blocks_BB24_55;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB24_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB24_55 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_Write4Blocks_BB24_55;
if (^reset !== 1'bX && ^(LEGUP_F_Write4Blocks_BB24_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_Write4Blocks_BB24_55 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !0*/
begin
Write4Blocks_0_1 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* Write4Blocks: %0*/
/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_3)
begin
Write4Blocks_0_1_reg <= Write4Blocks_0_1;
if (^reset !== 1'bX && ^(Write4Blocks_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_1_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %2 = shl nsw i32 %1, 3*/
begin
Write4Blocks_0_2 = Write4Blocks_0_1 <<< 32'd3 % 32;
end
end
always @(posedge clk) begin
/* Write4Blocks: %0*/
/*   %2 = shl nsw i32 %1, 3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_3)
begin
Write4Blocks_0_2_reg <= Write4Blocks_0_2;
if (^reset !== 1'bX && ^(Write4Blocks_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_2_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !0*/
begin
Write4Blocks_0_3 = memory_controller_out[31:0];
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %4 = shl nsw i32 %3, 3*/
begin
Write4Blocks_0_4 = Write4Blocks_0_3 <<< 32'd3 % 32;
end
end
always @(posedge clk) begin
/* Write4Blocks: %0*/
/*   %4 = shl nsw i32 %3, 3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_4)
begin
Write4Blocks_0_4_reg <= Write4Blocks_0_4;
if (^reset !== 1'bX && ^(Write4Blocks_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_4_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
begin
Write4Blocks_0_5 = memory_controller_out[15:0];
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %6 = sext i16 %5 to i32*/
begin
Write4Blocks_0_6 = $signed(Write4Blocks_0_5);
end
end
always @(posedge clk) begin
/* Write4Blocks: %0*/
/*   %6 = sext i16 %5 to i32*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_5)
begin
Write4Blocks_0_6_reg <= Write4Blocks_0_6;
if (^reset !== 1'bX && ^(Write4Blocks_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_6_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
begin
Write4Blocks_0_7 = memory_controller_out[15:0];
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %8 = sext i16 %7 to i32*/
begin
Write4Blocks_0_8 = $signed(Write4Blocks_0_7);
end
end
always @(posedge clk) begin
/* Write4Blocks: %0*/
/*   %8 = sext i16 %7 to i32*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_6)
begin
Write4Blocks_0_8_reg <= Write4Blocks_0_8;
if (^reset !== 1'bX && ^(Write4Blocks_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_8_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %9 = icmp slt i32 %2, %8*/
begin
Write4Blocks_0_9 = $signed(Write4Blocks_0_2_reg) < $signed(Write4Blocks_0_8);
end
end
always @(posedge clk) begin
/* Write4Blocks: %0*/
/*   %9 = icmp slt i32 %2, %8*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_6)
begin
Write4Blocks_0_9_reg <= Write4Blocks_0_9;
if (^reset !== 1'bX && ^(Write4Blocks_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_9_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %10 = icmp slt i32 %4, %6*/
begin
Write4Blocks_0_10 = $signed(Write4Blocks_0_4_reg) < $signed(Write4Blocks_0_6);
end
end
always @(posedge clk) begin
/* Write4Blocks: %0*/
/*   %10 = icmp slt i32 %4, %6*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_5)
begin
Write4Blocks_0_10_reg <= Write4Blocks_0_10;
if (^reset !== 1'bX && ^(Write4Blocks_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_10_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %or.cond.i = and i1 %9, %10*/
begin
Write4Blocks_0_or_cond_i = Write4Blocks_0_9 & Write4Blocks_0_10_reg;
end
end
always @(*) begin
/* Write4Blocks: %0*/
/*   %tmp287 = add i32 %4, 8*/
begin
Write4Blocks_0_tmp287 = Write4Blocks_0_4 + 32'd8;
end
end
always @(posedge clk) begin
/* Write4Blocks: %0*/
/*   %tmp287 = add i32 %4, 8*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_4)
begin
Write4Blocks_0_tmp287_reg <= Write4Blocks_0_tmp287;
if (^reset !== 1'bX && ^(Write4Blocks_0_tmp287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_0_tmp287_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp288340 = or i32 %4, 1*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp288340 = Write4Blocks_0_4_reg | 32'd1;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp289 = icmp sgt i32 %tmp287, %tmp288340*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp289 = $signed(Write4Blocks_0_tmp287_reg) > $signed(Write4Blocks__lr_ph8_split_us_i_tmp288340);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %smax290 = select i1 %tmp289, i32 %tmp287, i32 %tmp288340*/
begin
Write4Blocks__lr_ph8_split_us_i_smax290 = (Write4Blocks__lr_ph8_split_us_i_tmp289 ? Write4Blocks_0_tmp287_reg : Write4Blocks__lr_ph8_split_us_i_tmp288340);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp291 = sub i32 %4, %smax290*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp291 = Write4Blocks_0_4_reg - Write4Blocks__lr_ph8_split_us_i_smax290;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp291 = sub i32 %4, %smax290*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_7)
begin
Write4Blocks__lr_ph8_split_us_i_tmp291_reg <= Write4Blocks__lr_ph8_split_us_i_tmp291;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i_tmp291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i_tmp291_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp293 = sub i32 %4, %6*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp293 = Write4Blocks_0_4_reg - Write4Blocks_0_6_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp293 = sub i32 %4, %6*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_7)
begin
Write4Blocks__lr_ph8_split_us_i_tmp293_reg <= Write4Blocks__lr_ph8_split_us_i_tmp293;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i_tmp293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i_tmp293_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp294 = icmp ugt i32 %tmp291, %tmp293*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp294 = Write4Blocks__lr_ph8_split_us_i_tmp291_reg > Write4Blocks__lr_ph8_split_us_i_tmp293_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %umax295 = select i1 %tmp294, i32 %tmp291, i32 %tmp293*/
begin
Write4Blocks__lr_ph8_split_us_i_umax295 = (Write4Blocks__lr_ph8_split_us_i_tmp294 ? Write4Blocks__lr_ph8_split_us_i_tmp291_reg : Write4Blocks__lr_ph8_split_us_i_tmp293_reg);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp296 = sub i32 0, %umax295*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp296 = 32'd0 - Write4Blocks__lr_ph8_split_us_i_umax295;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp296 = sub i32 0, %umax295*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_8)
begin
Write4Blocks__lr_ph8_split_us_i_tmp296_reg <= Write4Blocks__lr_ph8_split_us_i_tmp296;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i_tmp296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i_tmp296_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp307 = add i32 %2, 8*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp307 = Write4Blocks_0_2_reg + 32'd8;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp308341 = or i32 %2, 1*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp308341 = Write4Blocks_0_2_reg | 32'd1;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp309 = icmp sgt i32 %tmp307, %tmp308341*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp309 = $signed(Write4Blocks__lr_ph8_split_us_i_tmp307) > $signed(Write4Blocks__lr_ph8_split_us_i_tmp308341);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %smax310 = select i1 %tmp309, i32 %tmp307, i32 %tmp308341*/
begin
Write4Blocks__lr_ph8_split_us_i_smax310 = (Write4Blocks__lr_ph8_split_us_i_tmp309 ? Write4Blocks__lr_ph8_split_us_i_tmp307 : Write4Blocks__lr_ph8_split_us_i_tmp308341);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %smax310 = select i1 %tmp309, i32 %tmp307, i32 %tmp308341*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_7)
begin
Write4Blocks__lr_ph8_split_us_i_smax310_reg <= Write4Blocks__lr_ph8_split_us_i_smax310;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i_smax310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i_smax310_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp311 = sub i32 %2, %smax310*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp311 = Write4Blocks_0_2_reg - Write4Blocks__lr_ph8_split_us_i_smax310_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp313 = sub i32 %2, %8*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp313 = Write4Blocks_0_2_reg - Write4Blocks_0_8_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp313 = sub i32 %2, %8*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_7)
begin
Write4Blocks__lr_ph8_split_us_i_tmp313_reg <= Write4Blocks__lr_ph8_split_us_i_tmp313;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i_tmp313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i_tmp313_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp314 = icmp ugt i32 %tmp311, %tmp313*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp314 = Write4Blocks__lr_ph8_split_us_i_tmp311 > Write4Blocks__lr_ph8_split_us_i_tmp313_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %umax315 = select i1 %tmp314, i32 %tmp311, i32 %tmp313*/
begin
Write4Blocks__lr_ph8_split_us_i_umax315 = (Write4Blocks__lr_ph8_split_us_i_tmp314 ? Write4Blocks__lr_ph8_split_us_i_tmp311 : Write4Blocks__lr_ph8_split_us_i_tmp313_reg);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %umax315 = select i1 %tmp314, i32 %tmp311, i32 %tmp313*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_8)
begin
Write4Blocks__lr_ph8_split_us_i_umax315_reg <= Write4Blocks__lr_ph8_split_us_i_umax315;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i_umax315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i_umax315_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp316 = sub i32 0, %umax315*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp316 = 32'd0 - Write4Blocks__lr_ph8_split_us_i_umax315_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp316 = sub i32 0, %umax315*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_9)
begin
Write4Blocks__lr_ph8_split_us_i_tmp316_reg <= Write4Blocks__lr_ph8_split_us_i_tmp316;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i_tmp316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i_tmp316_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp332 = mul i32 %1, %6*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp332 = Write4Blocks_signed_multiply_32_0;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp333 = shl i32 %tmp332, 3*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp333 = Write4Blocks__lr_ph8_split_us_i_tmp332 <<< 32'd3 % 32;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp334 = add i32 %4, %tmp333*/
begin
Write4Blocks__lr_ph8_split_us_i_tmp334 = Write4Blocks_0_4_reg + Write4Blocks__lr_ph8_split_us_i_tmp333;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp334 = add i32 %4, %tmp333*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_7)
begin
Write4Blocks__lr_ph8_split_us_i_tmp334_reg <= Write4Blocks__lr_ph8_split_us_i_tmp334;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i_tmp334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i_tmp334_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %11*/
/*   %indvar.next18.i = add i32 %indvar17.i, 1*/
begin
Write4Blocks_11_indvar_next18_i = Write4Blocks__lr_ph_us_i_indvar17_i_reg + 32'd1;
end
end
always @(*) begin
/* Write4Blocks: %11*/
/*   %exitcond317 = icmp eq i32 %indvar.next18.i, %tmp316*/
begin
Write4Blocks_11_exitcond317 = Write4Blocks_11_indvar_next18_i == Write4Blocks__lr_ph8_split_us_i_tmp316_reg;
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %indvar.i = phi i32 [ 0, %.lr.ph.us.i ], [ %indvar.next.i, %12 ]*/
begin
Write4Blocks_12_indvar_i = Write4Blocks_12_indvar_i_phi_temp;
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %tmp330 = add i32 %tmp329, %indvar.i*/
begin
Write4Blocks_12_tmp330 = Write4Blocks__lr_ph_us_i_tmp329_reg + Write4Blocks_12_indvar_i;
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %.14.us.i = getelementptr i32* %store1, i32 %tmp330*/
begin
Write4Blocks_12__14_us_i = arg_store1 + 4 * Write4Blocks_12_tmp330;
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %tmp336 = add i32 %tmp335, %indvar.i*/
begin
Write4Blocks_12_tmp336 = Write4Blocks__lr_ph_us_i_tmp335_reg + Write4Blocks_12_indvar_i;
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %scevgep24.i = getelementptr i8* %p_out_buf, i32 %tmp336*/
begin
Write4Blocks_12_scevgep24_i = arg_p_out_buf + 1 * Write4Blocks_12_tmp336;
end
end
always @(posedge clk) begin
/* Write4Blocks: %12*/
/*   %scevgep24.i = getelementptr i8* %p_out_buf, i32 %tmp336*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_11)
begin
Write4Blocks_12_scevgep24_i_reg <= Write4Blocks_12_scevgep24_i;
if (^reset !== 1'bX && ^(Write4Blocks_12_scevgep24_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_12_scevgep24_i_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %13 = load i32* %.14.us.i, align 4, !tbaa !0*/
begin
Write4Blocks_12_13 = memory_controller_out[31:0];
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %14 = trunc i32 %13 to i8*/
begin
Write4Blocks_12_14 = Write4Blocks_12_13[7:0];
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %indvar.next.i = add i32 %indvar.i, 1*/
begin
Write4Blocks_12_indvar_next_i = Write4Blocks_12_indvar_i + 32'd1;
end
end
always @(posedge clk) begin
/* Write4Blocks: %12*/
/*   %indvar.next.i = add i32 %indvar.i, 1*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_11)
begin
Write4Blocks_12_indvar_next_i_reg <= Write4Blocks_12_indvar_next_i;
if (^reset !== 1'bX && ^(Write4Blocks_12_indvar_next_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_12_indvar_next_i_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %12*/
/*   %exitcond297 = icmp eq i32 %indvar.next.i, %tmp296*/
begin
Write4Blocks_12_exitcond297 = Write4Blocks_12_indvar_next_i == Write4Blocks__lr_ph8_split_us_i_tmp296_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %12*/
/*   %exitcond297 = icmp eq i32 %indvar.next.i, %tmp296*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_11)
begin
Write4Blocks_12_exitcond297_reg <= Write4Blocks_12_exitcond297;
if (^reset !== 1'bX && ^(Write4Blocks_12_exitcond297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_12_exitcond297_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %indvar17.i = phi i32 [ %indvar.next18.i, %11 ], [ 0, %.lr.ph8.split.us.i ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks__lr_ph_us_i_indvar17_i = Write4Blocks__lr_ph_us_i_indvar17_i_phi_temp;
end
/* Write4Blocks: %.lr.ph.us.i*/
/*   %indvar17.i = phi i32 [ %indvar.next18.i, %11 ], [ 0, %.lr.ph8.split.us.i ]*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB4_14) */
begin
Write4Blocks__lr_ph_us_i_indvar17_i = Write4Blocks__lr_ph_us_i_indvar17_i_phi_temp;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %indvar17.i = phi i32 [ %indvar.next18.i, %11 ], [ 0, %.lr.ph8.split.us.i ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks__lr_ph_us_i_indvar17_i_reg <= Write4Blocks__lr_ph_us_i_indvar17_i;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i_indvar17_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i_indvar17_i_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i*/
/*   %indvar17.i = phi i32 [ %indvar.next18.i, %11 ], [ 0, %.lr.ph8.split.us.i ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks__lr_ph_us_i_indvar17_i_reg <= Write4Blocks__lr_ph_us_i_indvar17_i;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i_indvar17_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i_indvar17_i_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i*/
/*   %indvar17.i = phi i32 [ %indvar.next18.i, %11 ], [ 0, %.lr.ph8.split.us.i ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks__lr_ph_us_i_indvar17_i_reg <= Write4Blocks__lr_ph_us_i_indvar17_i;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i_indvar17_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i_indvar17_i_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp329 = mul i32 %indvar17.i, %tmp296*/
begin
Write4Blocks__lr_ph_us_i_tmp329 = Write4Blocks_signed_multiply_32_1;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp329 = mul i32 %indvar17.i, %tmp296*/
Write4Blocks__lr_ph_us_i_tmp329_reg = Write4Blocks__lr_ph_us_i36_tmp168_reg;
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp331 = mul i32 %6, %indvar17.i*/
begin
Write4Blocks__lr_ph_us_i_tmp331 = Write4Blocks_signed_multiply_32_0;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp335 = add i32 %tmp334, %tmp331*/
begin
Write4Blocks__lr_ph_us_i_tmp335 = Write4Blocks__lr_ph8_split_us_i_tmp334_reg + Write4Blocks__lr_ph_us_i_tmp331;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp335 = add i32 %tmp334, %tmp331*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks__lr_ph_us_i_tmp335_reg <= Write4Blocks__lr_ph_us_i_tmp335;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i_tmp335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i_tmp335_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit*/
/*   %15 = icmp slt i32 %tmp287, %6*/
begin
Write4Blocks_WriteOneBlock_exit_15 = $signed(Write4Blocks_0_tmp287_reg) < $signed(Write4Blocks_0_6_reg);
end
end
always @(posedge clk) begin
/* Write4Blocks: %WriteOneBlock.exit*/
/*   %15 = icmp slt i32 %tmp287, %6*/
if (cur_state == LEGUP_F_Write4Blocks_BB5_15)
begin
Write4Blocks_WriteOneBlock_exit_15_reg <= Write4Blocks_WriteOneBlock_exit_15;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit_15_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit*/
/*   %or.cond.i75 = and i1 %9, %15*/
begin
Write4Blocks_WriteOneBlock_exit_or_cond_i75 = Write4Blocks_0_9_reg & Write4Blocks_WriteOneBlock_exit_15;
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge*/
/*   %.pre349 = add nsw i32 %2, 8*/
begin
Write4Blocks_WriteOneBlock_exit_WriteOneBlock_exit111_crit_edge__pre349 = Write4Blocks_0_2_reg + 32'd8;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp232 = add i32 %4, 16*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp232 = Write4Blocks_0_4_reg + 32'd16;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp233 = add i32 %4, 9*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp233 = Write4Blocks_0_4_reg + 32'd9;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp234 = icmp sgt i32 %tmp232, %tmp233*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp234 = $signed(Write4Blocks__lr_ph8_split_us_i96_tmp232) > $signed(Write4Blocks__lr_ph8_split_us_i96_tmp233);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %smax235 = select i1 %tmp234, i32 %tmp232, i32 %tmp233*/
begin
Write4Blocks__lr_ph8_split_us_i96_smax235 = (Write4Blocks__lr_ph8_split_us_i96_tmp234 ? Write4Blocks__lr_ph8_split_us_i96_tmp232 : Write4Blocks__lr_ph8_split_us_i96_tmp233);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %smax235 = select i1 %tmp234, i32 %tmp232, i32 %tmp233*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_17)
begin
Write4Blocks__lr_ph8_split_us_i96_smax235_reg <= Write4Blocks__lr_ph8_split_us_i96_smax235;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_smax235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_smax235_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp236 = sub i32 %tmp287, %smax235*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp236 = Write4Blocks_0_tmp287_reg - Write4Blocks__lr_ph8_split_us_i96_smax235_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp238 = sub i32 %tmp287, %6*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp238 = Write4Blocks_0_tmp287_reg - Write4Blocks_0_6_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp238 = sub i32 %tmp287, %6*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_17)
begin
Write4Blocks__lr_ph8_split_us_i96_tmp238_reg <= Write4Blocks__lr_ph8_split_us_i96_tmp238;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_tmp238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_tmp238_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp239 = icmp ugt i32 %tmp236, %tmp238*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp239 = Write4Blocks__lr_ph8_split_us_i96_tmp236 > Write4Blocks__lr_ph8_split_us_i96_tmp238_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %umax240 = select i1 %tmp239, i32 %tmp236, i32 %tmp238*/
begin
Write4Blocks__lr_ph8_split_us_i96_umax240 = (Write4Blocks__lr_ph8_split_us_i96_tmp239 ? Write4Blocks__lr_ph8_split_us_i96_tmp236 : Write4Blocks__lr_ph8_split_us_i96_tmp238_reg);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %umax240 = select i1 %tmp239, i32 %tmp236, i32 %tmp238*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_18)
begin
Write4Blocks__lr_ph8_split_us_i96_umax240_reg <= Write4Blocks__lr_ph8_split_us_i96_umax240;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_umax240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_umax240_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp241 = sub i32 0, %umax240*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp241 = 32'd0 - Write4Blocks__lr_ph8_split_us_i96_umax240_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp241 = sub i32 0, %umax240*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_19)
begin
Write4Blocks__lr_ph8_split_us_i96_tmp241_reg <= Write4Blocks__lr_ph8_split_us_i96_tmp241;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_tmp241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_tmp241_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp254 = add i32 %2, 8*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp254 = Write4Blocks_0_2_reg + 32'd8;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp254 = add i32 %2, 8*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_17)
begin
Write4Blocks__lr_ph8_split_us_i96_tmp254_reg <= Write4Blocks__lr_ph8_split_us_i96_tmp254;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_tmp254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_tmp254_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp255339 = or i32 %2, 1*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp255339 = Write4Blocks_0_2_reg | 32'd1;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp256 = icmp sgt i32 %tmp254, %tmp255339*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp256 = $signed(Write4Blocks__lr_ph8_split_us_i96_tmp254) > $signed(Write4Blocks__lr_ph8_split_us_i96_tmp255339);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %smax257 = select i1 %tmp256, i32 %tmp254, i32 %tmp255339*/
begin
Write4Blocks__lr_ph8_split_us_i96_smax257 = (Write4Blocks__lr_ph8_split_us_i96_tmp256 ? Write4Blocks__lr_ph8_split_us_i96_tmp254 : Write4Blocks__lr_ph8_split_us_i96_tmp255339);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %smax257 = select i1 %tmp256, i32 %tmp254, i32 %tmp255339*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_17)
begin
Write4Blocks__lr_ph8_split_us_i96_smax257_reg <= Write4Blocks__lr_ph8_split_us_i96_smax257;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_smax257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_smax257_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp258 = sub i32 %2, %smax257*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp258 = Write4Blocks_0_2_reg - Write4Blocks__lr_ph8_split_us_i96_smax257_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp260 = sub i32 %2, %8*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp260 = Write4Blocks_0_2_reg - Write4Blocks_0_8_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp260 = sub i32 %2, %8*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_17)
begin
Write4Blocks__lr_ph8_split_us_i96_tmp260_reg <= Write4Blocks__lr_ph8_split_us_i96_tmp260;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_tmp260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_tmp260_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp261 = icmp ugt i32 %tmp258, %tmp260*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp261 = Write4Blocks__lr_ph8_split_us_i96_tmp258 > Write4Blocks__lr_ph8_split_us_i96_tmp260_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %umax262 = select i1 %tmp261, i32 %tmp258, i32 %tmp260*/
begin
Write4Blocks__lr_ph8_split_us_i96_umax262 = (Write4Blocks__lr_ph8_split_us_i96_tmp261 ? Write4Blocks__lr_ph8_split_us_i96_tmp258 : Write4Blocks__lr_ph8_split_us_i96_tmp260_reg);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %umax262 = select i1 %tmp261, i32 %tmp258, i32 %tmp260*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_18)
begin
Write4Blocks__lr_ph8_split_us_i96_umax262_reg <= Write4Blocks__lr_ph8_split_us_i96_umax262;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_umax262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_umax262_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp263 = sub i32 0, %umax262*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp263 = 32'd0 - Write4Blocks__lr_ph8_split_us_i96_umax262_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp263 = sub i32 0, %umax262*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_19)
begin
Write4Blocks__lr_ph8_split_us_i96_tmp263_reg <= Write4Blocks__lr_ph8_split_us_i96_tmp263;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_tmp263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_tmp263_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp280 = mul i32 %1, %6*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp280 = Write4Blocks_signed_multiply_32_0;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp281 = shl i32 %tmp280, 3*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp281 = Write4Blocks__lr_ph8_split_us_i96_tmp280 <<< 32'd3 % 32;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp282 = add i32 %4, %tmp281*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp282 = Write4Blocks_0_4_reg + Write4Blocks__lr_ph8_split_us_i96_tmp281;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp282 = add i32 %4, %tmp281*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_17)
begin
Write4Blocks__lr_ph8_split_us_i96_tmp282_reg <= Write4Blocks__lr_ph8_split_us_i96_tmp282;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_tmp282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_tmp282_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp283 = add i32 %tmp282, 8*/
begin
Write4Blocks__lr_ph8_split_us_i96_tmp283 = Write4Blocks__lr_ph8_split_us_i96_tmp282_reg + 32'd8;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp283 = add i32 %tmp282, 8*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_18)
begin
Write4Blocks__lr_ph8_split_us_i96_tmp283_reg <= Write4Blocks__lr_ph8_split_us_i96_tmp283;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_tmp283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i96_tmp283_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %16*/
/*   %indvar.next18.i98 = add i32 %indvar17.i106, 1*/
begin
Write4Blocks_16_indvar_next18_i98 = Write4Blocks__lr_ph_us_i110_indvar17_i106_reg + 32'd1;
end
end
always @(*) begin
/* Write4Blocks: %16*/
/*   %exitcond264 = icmp eq i32 %indvar.next18.i98, %tmp263*/
begin
Write4Blocks_16_exitcond264 = Write4Blocks_16_indvar_next18_i98 == Write4Blocks__lr_ph8_split_us_i96_tmp263_reg;
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %indvar.i100 = phi i32 [ 0, %.lr.ph.us.i110 ], [ %indvar.next.i104, %17 ]*/
begin
Write4Blocks_17_indvar_i100 = Write4Blocks_17_indvar_i100_phi_temp;
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %tmp278 = add i32 %tmp277, %indvar.i100*/
begin
Write4Blocks_17_tmp278 = Write4Blocks__lr_ph_us_i110_tmp277_reg + Write4Blocks_17_indvar_i100;
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %.14.us.i103 = getelementptr i32* %store2, i32 %tmp278*/
begin
Write4Blocks_17__14_us_i103 = arg_store2 + 4 * Write4Blocks_17_tmp278;
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %tmp285 = add i32 %tmp284, %indvar.i100*/
begin
Write4Blocks_17_tmp285 = Write4Blocks__lr_ph_us_i110_tmp284_reg + Write4Blocks_17_indvar_i100;
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %scevgep24.i102 = getelementptr i8* %p_out_buf, i32 %tmp285*/
begin
Write4Blocks_17_scevgep24_i102 = arg_p_out_buf + 1 * Write4Blocks_17_tmp285;
end
end
always @(posedge clk) begin
/* Write4Blocks: %17*/
/*   %scevgep24.i102 = getelementptr i8* %p_out_buf, i32 %tmp285*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_21)
begin
Write4Blocks_17_scevgep24_i102_reg <= Write4Blocks_17_scevgep24_i102;
if (^reset !== 1'bX && ^(Write4Blocks_17_scevgep24_i102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_17_scevgep24_i102_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %18 = load i32* %.14.us.i103, align 4, !tbaa !0*/
begin
Write4Blocks_17_18 = memory_controller_out[31:0];
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %19 = trunc i32 %18 to i8*/
begin
Write4Blocks_17_19 = Write4Blocks_17_18[7:0];
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %indvar.next.i104 = add i32 %indvar.i100, 1*/
begin
Write4Blocks_17_indvar_next_i104 = Write4Blocks_17_indvar_i100 + 32'd1;
end
end
always @(posedge clk) begin
/* Write4Blocks: %17*/
/*   %indvar.next.i104 = add i32 %indvar.i100, 1*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_21)
begin
Write4Blocks_17_indvar_next_i104_reg <= Write4Blocks_17_indvar_next_i104;
if (^reset !== 1'bX && ^(Write4Blocks_17_indvar_next_i104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_17_indvar_next_i104_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %17*/
/*   %exitcond242 = icmp eq i32 %indvar.next.i104, %tmp241*/
begin
Write4Blocks_17_exitcond242 = Write4Blocks_17_indvar_next_i104 == Write4Blocks__lr_ph8_split_us_i96_tmp241_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %17*/
/*   %exitcond242 = icmp eq i32 %indvar.next.i104, %tmp241*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_21)
begin
Write4Blocks_17_exitcond242_reg <= Write4Blocks_17_exitcond242;
if (^reset !== 1'bX && ^(Write4Blocks_17_exitcond242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_17_exitcond242_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %indvar17.i106 = phi i32 [ %indvar.next18.i98, %16 ], [ 0, %.lr.ph8.split.us.i96 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks__lr_ph_us_i110_indvar17_i106 = Write4Blocks__lr_ph_us_i110_indvar17_i106_phi_temp;
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %indvar17.i106 = phi i32 [ %indvar.next18.i98, %16 ], [ 0, %.lr.ph8.split.us.i96 ]*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB10_24) */
begin
Write4Blocks__lr_ph_us_i110_indvar17_i106 = Write4Blocks__lr_ph_us_i110_indvar17_i106_phi_temp;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %indvar17.i106 = phi i32 [ %indvar.next18.i98, %16 ], [ 0, %.lr.ph8.split.us.i96 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks__lr_ph_us_i110_indvar17_i106_reg <= Write4Blocks__lr_ph_us_i110_indvar17_i106;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i110_indvar17_i106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i110_indvar17_i106_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %indvar17.i106 = phi i32 [ %indvar.next18.i98, %16 ], [ 0, %.lr.ph8.split.us.i96 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks__lr_ph_us_i110_indvar17_i106_reg <= Write4Blocks__lr_ph_us_i110_indvar17_i106;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i110_indvar17_i106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i110_indvar17_i106_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %indvar17.i106 = phi i32 [ %indvar.next18.i98, %16 ], [ 0, %.lr.ph8.split.us.i96 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks__lr_ph_us_i110_indvar17_i106_reg <= Write4Blocks__lr_ph_us_i110_indvar17_i106;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i110_indvar17_i106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i110_indvar17_i106_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp277 = mul i32 %indvar17.i106, %tmp241*/
begin
Write4Blocks__lr_ph_us_i110_tmp277 = Write4Blocks_signed_multiply_32_1;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp277 = mul i32 %indvar17.i106, %tmp241*/
Write4Blocks__lr_ph_us_i110_tmp277_reg = Write4Blocks__lr_ph_us_i36_tmp168_reg;
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp279 = mul i32 %6, %indvar17.i106*/
begin
Write4Blocks__lr_ph_us_i110_tmp279 = Write4Blocks_signed_multiply_32_0;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp284 = add i32 %tmp283, %tmp279*/
begin
Write4Blocks__lr_ph_us_i110_tmp284 = Write4Blocks__lr_ph8_split_us_i96_tmp283_reg + Write4Blocks__lr_ph_us_i110_tmp279;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp284 = add i32 %tmp283, %tmp279*/
if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks__lr_ph_us_i110_tmp284_reg <= Write4Blocks__lr_ph_us_i110_tmp284;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i110_tmp284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i110_tmp284_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp;
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
else if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp;
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
else if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp;
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
else if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp;
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
else if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp;
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
else if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp;
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB11_25) */
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp;
end
end
always @(posedge clk) begin
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg <= Write4Blocks_WriteOneBlock_exit111__pre_phi350;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111__pre_phi350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg"); $finish; end
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg <= Write4Blocks_WriteOneBlock_exit111__pre_phi350;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111__pre_phi350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg"); $finish; end
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg <= Write4Blocks_WriteOneBlock_exit111__pre_phi350;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111__pre_phi350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg"); $finish; end
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg <= Write4Blocks_WriteOneBlock_exit111__pre_phi350;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111__pre_phi350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg"); $finish; end
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg <= Write4Blocks_WriteOneBlock_exit111__pre_phi350;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111__pre_phi350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg"); $finish; end
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg <= Write4Blocks_WriteOneBlock_exit111__pre_phi350;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111__pre_phi350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg"); $finish; end
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg <= Write4Blocks_WriteOneBlock_exit111__pre_phi350;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111__pre_phi350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg"); $finish; end
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg <= Write4Blocks_WriteOneBlock_exit111__pre_phi350;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111__pre_phi350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %20 = icmp slt i32 %.pre-phi350, %8*/
begin
Write4Blocks_WriteOneBlock_exit111_20 = $signed(Write4Blocks_WriteOneBlock_exit111__pre_phi350) < $signed(Write4Blocks_0_8_reg);
end
end
always @(posedge clk) begin
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %20 = icmp slt i32 %.pre-phi350, %8*/
if (cur_state == LEGUP_F_Write4Blocks_BB11_25)
begin
Write4Blocks_WriteOneBlock_exit111_20_reg <= Write4Blocks_WriteOneBlock_exit111_20;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit111_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111_20_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %or.cond.i38 = and i1 %20, %10*/
begin
Write4Blocks_WriteOneBlock_exit111_or_cond_i38 = Write4Blocks_WriteOneBlock_exit111_20 & Write4Blocks_0_10_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp179337 = or i32 %4, 1*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp179337 = Write4Blocks_0_4_reg | 32'd1;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp180 = icmp sgt i32 %tmp287, %tmp179337*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp180 = $signed(Write4Blocks_0_tmp287_reg) > $signed(Write4Blocks__lr_ph8_split_us_i59_tmp179337);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %smax181 = select i1 %tmp180, i32 %tmp287, i32 %tmp179337*/
begin
Write4Blocks__lr_ph8_split_us_i59_smax181 = (Write4Blocks__lr_ph8_split_us_i59_tmp180 ? Write4Blocks_0_tmp287_reg : Write4Blocks__lr_ph8_split_us_i59_tmp179337);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp182 = sub i32 %4, %smax181*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp182 = Write4Blocks_0_4_reg - Write4Blocks__lr_ph8_split_us_i59_smax181;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp182 = sub i32 %4, %smax181*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_26)
begin
Write4Blocks__lr_ph8_split_us_i59_tmp182_reg <= Write4Blocks__lr_ph8_split_us_i59_tmp182;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i59_tmp182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i59_tmp182_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp184 = sub i32 %4, %6*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp184 = Write4Blocks_0_4_reg - Write4Blocks_0_6_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp184 = sub i32 %4, %6*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_26)
begin
Write4Blocks__lr_ph8_split_us_i59_tmp184_reg <= Write4Blocks__lr_ph8_split_us_i59_tmp184;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i59_tmp184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i59_tmp184_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp185 = icmp ugt i32 %tmp182, %tmp184*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp185 = Write4Blocks__lr_ph8_split_us_i59_tmp182_reg > Write4Blocks__lr_ph8_split_us_i59_tmp184_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %umax186 = select i1 %tmp185, i32 %tmp182, i32 %tmp184*/
begin
Write4Blocks__lr_ph8_split_us_i59_umax186 = (Write4Blocks__lr_ph8_split_us_i59_tmp185 ? Write4Blocks__lr_ph8_split_us_i59_tmp182_reg : Write4Blocks__lr_ph8_split_us_i59_tmp184_reg);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp187 = sub i32 0, %umax186*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp187 = 32'd0 - Write4Blocks__lr_ph8_split_us_i59_umax186;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp187 = sub i32 0, %umax186*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_27)
begin
Write4Blocks__lr_ph8_split_us_i59_tmp187_reg <= Write4Blocks__lr_ph8_split_us_i59_tmp187;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i59_tmp187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i59_tmp187_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp199 = add i32 %2, 16*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp199 = Write4Blocks_0_2_reg + 32'd16;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp200 = add i32 %2, 9*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp200 = Write4Blocks_0_2_reg + 32'd9;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp201 = icmp sgt i32 %tmp199, %tmp200*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp201 = $signed(Write4Blocks__lr_ph8_split_us_i59_tmp199) > $signed(Write4Blocks__lr_ph8_split_us_i59_tmp200);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %smax202 = select i1 %tmp201, i32 %tmp199, i32 %tmp200*/
begin
Write4Blocks__lr_ph8_split_us_i59_smax202 = (Write4Blocks__lr_ph8_split_us_i59_tmp201 ? Write4Blocks__lr_ph8_split_us_i59_tmp199 : Write4Blocks__lr_ph8_split_us_i59_tmp200);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %smax202 = select i1 %tmp201, i32 %tmp199, i32 %tmp200*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_26)
begin
Write4Blocks__lr_ph8_split_us_i59_smax202_reg <= Write4Blocks__lr_ph8_split_us_i59_smax202;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i59_smax202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i59_smax202_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp203 = sub i32 %.pre-phi350, %smax202*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp203 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg - Write4Blocks__lr_ph8_split_us_i59_smax202_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp206 = sub i32 %.pre-phi350, %8*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp206 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg - Write4Blocks_0_8_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp206 = sub i32 %.pre-phi350, %8*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_26)
begin
Write4Blocks__lr_ph8_split_us_i59_tmp206_reg <= Write4Blocks__lr_ph8_split_us_i59_tmp206;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i59_tmp206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i59_tmp206_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp207 = icmp ugt i32 %tmp203, %tmp206*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp207 = Write4Blocks__lr_ph8_split_us_i59_tmp203 > Write4Blocks__lr_ph8_split_us_i59_tmp206_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %umax208 = select i1 %tmp207, i32 %tmp203, i32 %tmp206*/
begin
Write4Blocks__lr_ph8_split_us_i59_umax208 = (Write4Blocks__lr_ph8_split_us_i59_tmp207 ? Write4Blocks__lr_ph8_split_us_i59_tmp203 : Write4Blocks__lr_ph8_split_us_i59_tmp206_reg);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %umax208 = select i1 %tmp207, i32 %tmp203, i32 %tmp206*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_27)
begin
Write4Blocks__lr_ph8_split_us_i59_umax208_reg <= Write4Blocks__lr_ph8_split_us_i59_umax208;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i59_umax208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i59_umax208_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp209 = sub i32 0, %umax208*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp209 = 32'd0 - Write4Blocks__lr_ph8_split_us_i59_umax208_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp209 = sub i32 0, %umax208*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_28)
begin
Write4Blocks__lr_ph8_split_us_i59_tmp209_reg <= Write4Blocks__lr_ph8_split_us_i59_tmp209;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i59_tmp209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i59_tmp209_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp226 = mul i32 %.pre-phi350, %6*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp226 = Write4Blocks_signed_multiply_32_0;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp227 = add i32 %tmp226, %4*/
begin
Write4Blocks__lr_ph8_split_us_i59_tmp227 = Write4Blocks__lr_ph8_split_us_i59_tmp226 + Write4Blocks_0_4_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp227 = add i32 %tmp226, %4*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_26)
begin
Write4Blocks__lr_ph8_split_us_i59_tmp227_reg <= Write4Blocks__lr_ph8_split_us_i59_tmp227;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i59_tmp227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i59_tmp227_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %21*/
/*   %indvar.next18.i61 = add i32 %indvar17.i69, 1*/
begin
Write4Blocks_21_indvar_next18_i61 = Write4Blocks__lr_ph_us_i73_indvar17_i69_reg + 32'd1;
end
end
always @(*) begin
/* Write4Blocks: %21*/
/*   %exitcond210 = icmp eq i32 %indvar.next18.i61, %tmp209*/
begin
Write4Blocks_21_exitcond210 = Write4Blocks_21_indvar_next18_i61 == Write4Blocks__lr_ph8_split_us_i59_tmp209_reg;
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %indvar.i63 = phi i32 [ 0, %.lr.ph.us.i73 ], [ %indvar.next.i67, %22 ]*/
begin
Write4Blocks_22_indvar_i63 = Write4Blocks_22_indvar_i63_phi_temp;
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %tmp223 = add i32 %tmp222, %indvar.i63*/
begin
Write4Blocks_22_tmp223 = Write4Blocks__lr_ph_us_i73_tmp222_reg + Write4Blocks_22_indvar_i63;
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %.14.us.i66 = getelementptr i32* %store3, i32 %tmp223*/
begin
Write4Blocks_22__14_us_i66 = arg_store3 + 4 * Write4Blocks_22_tmp223;
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %tmp229 = add i32 %tmp228, %indvar.i63*/
begin
Write4Blocks_22_tmp229 = Write4Blocks__lr_ph_us_i73_tmp228_reg + Write4Blocks_22_indvar_i63;
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %scevgep24.i65 = getelementptr i8* %p_out_buf, i32 %tmp229*/
begin
Write4Blocks_22_scevgep24_i65 = arg_p_out_buf + 1 * Write4Blocks_22_tmp229;
end
end
always @(posedge clk) begin
/* Write4Blocks: %22*/
/*   %scevgep24.i65 = getelementptr i8* %p_out_buf, i32 %tmp229*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_30)
begin
Write4Blocks_22_scevgep24_i65_reg <= Write4Blocks_22_scevgep24_i65;
if (^reset !== 1'bX && ^(Write4Blocks_22_scevgep24_i65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_22_scevgep24_i65_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %23 = load i32* %.14.us.i66, align 4, !tbaa !0*/
begin
Write4Blocks_22_23 = memory_controller_out[31:0];
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %24 = trunc i32 %23 to i8*/
begin
Write4Blocks_22_24 = Write4Blocks_22_23[7:0];
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %indvar.next.i67 = add i32 %indvar.i63, 1*/
begin
Write4Blocks_22_indvar_next_i67 = Write4Blocks_22_indvar_i63 + 32'd1;
end
end
always @(posedge clk) begin
/* Write4Blocks: %22*/
/*   %indvar.next.i67 = add i32 %indvar.i63, 1*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_30)
begin
Write4Blocks_22_indvar_next_i67_reg <= Write4Blocks_22_indvar_next_i67;
if (^reset !== 1'bX && ^(Write4Blocks_22_indvar_next_i67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_22_indvar_next_i67_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %22*/
/*   %exitcond188 = icmp eq i32 %indvar.next.i67, %tmp187*/
begin
Write4Blocks_22_exitcond188 = Write4Blocks_22_indvar_next_i67 == Write4Blocks__lr_ph8_split_us_i59_tmp187_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %22*/
/*   %exitcond188 = icmp eq i32 %indvar.next.i67, %tmp187*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_30)
begin
Write4Blocks_22_exitcond188_reg <= Write4Blocks_22_exitcond188;
if (^reset !== 1'bX && ^(Write4Blocks_22_exitcond188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_22_exitcond188_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %indvar17.i69 = phi i32 [ %indvar.next18.i61, %21 ], [ 0, %.lr.ph8.split.us.i59 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks__lr_ph_us_i73_indvar17_i69 = Write4Blocks__lr_ph_us_i73_indvar17_i69_phi_temp;
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %indvar17.i69 = phi i32 [ %indvar.next18.i61, %21 ], [ 0, %.lr.ph8.split.us.i59 ]*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB15_33) */
begin
Write4Blocks__lr_ph_us_i73_indvar17_i69 = Write4Blocks__lr_ph_us_i73_indvar17_i69_phi_temp;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %indvar17.i69 = phi i32 [ %indvar.next18.i61, %21 ], [ 0, %.lr.ph8.split.us.i59 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks__lr_ph_us_i73_indvar17_i69_reg <= Write4Blocks__lr_ph_us_i73_indvar17_i69;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i73_indvar17_i69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i73_indvar17_i69_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %indvar17.i69 = phi i32 [ %indvar.next18.i61, %21 ], [ 0, %.lr.ph8.split.us.i59 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks__lr_ph_us_i73_indvar17_i69_reg <= Write4Blocks__lr_ph_us_i73_indvar17_i69;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i73_indvar17_i69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i73_indvar17_i69_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %indvar17.i69 = phi i32 [ %indvar.next18.i61, %21 ], [ 0, %.lr.ph8.split.us.i59 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks__lr_ph_us_i73_indvar17_i69_reg <= Write4Blocks__lr_ph_us_i73_indvar17_i69;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i73_indvar17_i69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i73_indvar17_i69_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp222 = mul i32 %indvar17.i69, %tmp187*/
begin
Write4Blocks__lr_ph_us_i73_tmp222 = Write4Blocks_signed_multiply_32_1;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp222 = mul i32 %indvar17.i69, %tmp187*/
Write4Blocks__lr_ph_us_i73_tmp222_reg = Write4Blocks__lr_ph_us_i36_tmp168_reg;
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp224 = mul i32 %6, %indvar17.i69*/
begin
Write4Blocks__lr_ph_us_i73_tmp224 = Write4Blocks_signed_multiply_32_0;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp228 = add i32 %tmp227, %tmp224*/
begin
Write4Blocks__lr_ph_us_i73_tmp228 = Write4Blocks__lr_ph8_split_us_i59_tmp227_reg + Write4Blocks__lr_ph_us_i73_tmp224;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp228 = add i32 %tmp227, %tmp224*/
if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks__lr_ph_us_i73_tmp228_reg <= Write4Blocks__lr_ph_us_i73_tmp228;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i73_tmp228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i73_tmp228_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit74*/
/*   %or.cond.i1 = and i1 %20, %15*/
begin
Write4Blocks_WriteOneBlock_exit74_or_cond_i1 = Write4Blocks_WriteOneBlock_exit111_20_reg & Write4Blocks_WriteOneBlock_exit_15_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp125 = add i32 %4, 16*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp125 = Write4Blocks_0_4_reg + 32'd16;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp126 = add i32 %4, 9*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp126 = Write4Blocks_0_4_reg + 32'd9;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp127 = icmp sgt i32 %tmp125, %tmp126*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp127 = $signed(Write4Blocks__lr_ph8_split_us_i22_tmp125) > $signed(Write4Blocks__lr_ph8_split_us_i22_tmp126);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %smax = select i1 %tmp127, i32 %tmp125, i32 %tmp126*/
begin
Write4Blocks__lr_ph8_split_us_i22_smax = (Write4Blocks__lr_ph8_split_us_i22_tmp127 ? Write4Blocks__lr_ph8_split_us_i22_tmp125 : Write4Blocks__lr_ph8_split_us_i22_tmp126);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %smax = select i1 %tmp127, i32 %tmp125, i32 %tmp126*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_35)
begin
Write4Blocks__lr_ph8_split_us_i22_smax_reg <= Write4Blocks__lr_ph8_split_us_i22_smax;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_smax_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp128 = sub i32 %tmp287, %smax*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp128 = Write4Blocks_0_tmp287_reg - Write4Blocks__lr_ph8_split_us_i22_smax_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp130 = sub i32 %tmp287, %6*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp130 = Write4Blocks_0_tmp287_reg - Write4Blocks_0_6_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp130 = sub i32 %tmp287, %6*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_35)
begin
Write4Blocks__lr_ph8_split_us_i22_tmp130_reg <= Write4Blocks__lr_ph8_split_us_i22_tmp130;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_tmp130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_tmp130_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp131 = icmp ugt i32 %tmp128, %tmp130*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp131 = Write4Blocks__lr_ph8_split_us_i22_tmp128 > Write4Blocks__lr_ph8_split_us_i22_tmp130_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %umax = select i1 %tmp131, i32 %tmp128, i32 %tmp130*/
begin
Write4Blocks__lr_ph8_split_us_i22_umax = (Write4Blocks__lr_ph8_split_us_i22_tmp131 ? Write4Blocks__lr_ph8_split_us_i22_tmp128 : Write4Blocks__lr_ph8_split_us_i22_tmp130_reg);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %umax = select i1 %tmp131, i32 %tmp128, i32 %tmp130*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_36)
begin
Write4Blocks__lr_ph8_split_us_i22_umax_reg <= Write4Blocks__lr_ph8_split_us_i22_umax;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_umax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_umax_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp132 = sub i32 0, %umax*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp132 = 32'd0 - Write4Blocks__lr_ph8_split_us_i22_umax_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp132 = sub i32 0, %umax*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_37)
begin
Write4Blocks__lr_ph8_split_us_i22_tmp132_reg <= Write4Blocks__lr_ph8_split_us_i22_tmp132;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_tmp132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_tmp132_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp144 = add i32 %2, 16*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp144 = Write4Blocks_0_2_reg + 32'd16;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp145 = add i32 %2, 9*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp145 = Write4Blocks_0_2_reg + 32'd9;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp146 = icmp sgt i32 %tmp144, %tmp145*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp146 = $signed(Write4Blocks__lr_ph8_split_us_i22_tmp144) > $signed(Write4Blocks__lr_ph8_split_us_i22_tmp145);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %smax147 = select i1 %tmp146, i32 %tmp144, i32 %tmp145*/
begin
Write4Blocks__lr_ph8_split_us_i22_smax147 = (Write4Blocks__lr_ph8_split_us_i22_tmp146 ? Write4Blocks__lr_ph8_split_us_i22_tmp144 : Write4Blocks__lr_ph8_split_us_i22_tmp145);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %smax147 = select i1 %tmp146, i32 %tmp144, i32 %tmp145*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_35)
begin
Write4Blocks__lr_ph8_split_us_i22_smax147_reg <= Write4Blocks__lr_ph8_split_us_i22_smax147;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_smax147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_smax147_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp148 = sub i32 %.pre-phi350, %smax147*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp148 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg - Write4Blocks__lr_ph8_split_us_i22_smax147_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp151 = sub i32 %.pre-phi350, %8*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp151 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg - Write4Blocks_0_8_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp151 = sub i32 %.pre-phi350, %8*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_35)
begin
Write4Blocks__lr_ph8_split_us_i22_tmp151_reg <= Write4Blocks__lr_ph8_split_us_i22_tmp151;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_tmp151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_tmp151_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp152 = icmp ugt i32 %tmp148, %tmp151*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp152 = Write4Blocks__lr_ph8_split_us_i22_tmp148 > Write4Blocks__lr_ph8_split_us_i22_tmp151_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %umax153 = select i1 %tmp152, i32 %tmp148, i32 %tmp151*/
begin
Write4Blocks__lr_ph8_split_us_i22_umax153 = (Write4Blocks__lr_ph8_split_us_i22_tmp152 ? Write4Blocks__lr_ph8_split_us_i22_tmp148 : Write4Blocks__lr_ph8_split_us_i22_tmp151_reg);
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %umax153 = select i1 %tmp152, i32 %tmp148, i32 %tmp151*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_36)
begin
Write4Blocks__lr_ph8_split_us_i22_umax153_reg <= Write4Blocks__lr_ph8_split_us_i22_umax153;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_umax153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_umax153_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp154 = sub i32 0, %umax153*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp154 = 32'd0 - Write4Blocks__lr_ph8_split_us_i22_umax153_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp154 = sub i32 0, %umax153*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_37)
begin
Write4Blocks__lr_ph8_split_us_i22_tmp154_reg <= Write4Blocks__lr_ph8_split_us_i22_tmp154;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_tmp154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_tmp154_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp172 = mul i32 %.pre-phi350, %6*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp172 = Write4Blocks_signed_multiply_32_0;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp173 = add i32 %tmp172, %4*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp173 = Write4Blocks__lr_ph8_split_us_i22_tmp172 + Write4Blocks_0_4_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp174 = add i32 %tmp173, 8*/
begin
Write4Blocks__lr_ph8_split_us_i22_tmp174 = Write4Blocks__lr_ph8_split_us_i22_tmp173 + 32'd8;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp174 = add i32 %tmp173, 8*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_35)
begin
Write4Blocks__lr_ph8_split_us_i22_tmp174_reg <= Write4Blocks__lr_ph8_split_us_i22_tmp174;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i22_tmp174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph8_split_us_i22_tmp174_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %25*/
/*   %indvar.next18.i24 = add i32 %indvar17.i32, 1*/
begin
Write4Blocks_25_indvar_next18_i24 = Write4Blocks__lr_ph_us_i36_indvar17_i32_reg + 32'd1;
end
end
always @(*) begin
/* Write4Blocks: %25*/
/*   %exitcond155 = icmp eq i32 %indvar.next18.i24, %tmp154*/
begin
Write4Blocks_25_exitcond155 = Write4Blocks_25_indvar_next18_i24 == Write4Blocks__lr_ph8_split_us_i22_tmp154_reg;
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %indvar.i26 = phi i32 [ 0, %.lr.ph.us.i36 ], [ %indvar.next.i30, %26 ]*/
begin
Write4Blocks_26_indvar_i26 = Write4Blocks_26_indvar_i26_phi_temp;
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %tmp169 = add i32 %tmp168, %indvar.i26*/
begin
Write4Blocks_26_tmp169 = Write4Blocks__lr_ph_us_i36_tmp168_reg + Write4Blocks_26_indvar_i26;
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %.14.us.i29 = getelementptr i32* %store4, i32 %tmp169*/
begin
Write4Blocks_26__14_us_i29 = arg_store4 + 4 * Write4Blocks_26_tmp169;
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %tmp176 = add i32 %tmp175, %indvar.i26*/
begin
Write4Blocks_26_tmp176 = Write4Blocks__lr_ph_us_i36_tmp175_reg + Write4Blocks_26_indvar_i26;
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %scevgep24.i28 = getelementptr i8* %p_out_buf, i32 %tmp176*/
begin
Write4Blocks_26_scevgep24_i28 = arg_p_out_buf + 1 * Write4Blocks_26_tmp176;
end
end
always @(posedge clk) begin
/* Write4Blocks: %26*/
/*   %scevgep24.i28 = getelementptr i8* %p_out_buf, i32 %tmp176*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_39)
begin
Write4Blocks_26_scevgep24_i28_reg <= Write4Blocks_26_scevgep24_i28;
if (^reset !== 1'bX && ^(Write4Blocks_26_scevgep24_i28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_26_scevgep24_i28_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %27 = load i32* %.14.us.i29, align 4, !tbaa !0*/
begin
Write4Blocks_26_27 = memory_controller_out[31:0];
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %28 = trunc i32 %27 to i8*/
begin
Write4Blocks_26_28 = Write4Blocks_26_27[7:0];
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %indvar.next.i30 = add i32 %indvar.i26, 1*/
begin
Write4Blocks_26_indvar_next_i30 = Write4Blocks_26_indvar_i26 + 32'd1;
end
end
always @(posedge clk) begin
/* Write4Blocks: %26*/
/*   %indvar.next.i30 = add i32 %indvar.i26, 1*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_39)
begin
Write4Blocks_26_indvar_next_i30_reg <= Write4Blocks_26_indvar_next_i30;
if (^reset !== 1'bX && ^(Write4Blocks_26_indvar_next_i30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_26_indvar_next_i30_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %26*/
/*   %exitcond = icmp eq i32 %indvar.next.i30, %tmp132*/
begin
Write4Blocks_26_exitcond = Write4Blocks_26_indvar_next_i30 == Write4Blocks__lr_ph8_split_us_i22_tmp132_reg;
end
end
always @(posedge clk) begin
/* Write4Blocks: %26*/
/*   %exitcond = icmp eq i32 %indvar.next.i30, %tmp132*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_39)
begin
Write4Blocks_26_exitcond_reg <= Write4Blocks_26_exitcond;
if (^reset !== 1'bX && ^(Write4Blocks_26_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_26_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %indvar17.i32 = phi i32 [ %indvar.next18.i24, %25 ], [ 0, %.lr.ph8.split.us.i22 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB20_42)
begin
Write4Blocks__lr_ph_us_i36_indvar17_i32 = Write4Blocks__lr_ph_us_i36_indvar17_i32_phi_temp;
end
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %indvar17.i32 = phi i32 [ %indvar.next18.i24, %25 ], [ 0, %.lr.ph8.split.us.i22 ]*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB20_42) */
begin
Write4Blocks__lr_ph_us_i36_indvar17_i32 = Write4Blocks__lr_ph_us_i36_indvar17_i32_phi_temp;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %indvar17.i32 = phi i32 [ %indvar.next18.i24, %25 ], [ 0, %.lr.ph8.split.us.i22 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB20_42)
begin
Write4Blocks__lr_ph_us_i36_indvar17_i32_reg <= Write4Blocks__lr_ph_us_i36_indvar17_i32;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i36_indvar17_i32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_indvar17_i32_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %indvar17.i32 = phi i32 [ %indvar.next18.i24, %25 ], [ 0, %.lr.ph8.split.us.i22 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB20_42)
begin
Write4Blocks__lr_ph_us_i36_indvar17_i32_reg <= Write4Blocks__lr_ph_us_i36_indvar17_i32;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i36_indvar17_i32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_indvar17_i32_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %indvar17.i32 = phi i32 [ %indvar.next18.i24, %25 ], [ 0, %.lr.ph8.split.us.i22 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB20_42)
begin
Write4Blocks__lr_ph_us_i36_indvar17_i32_reg <= Write4Blocks__lr_ph_us_i36_indvar17_i32;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i36_indvar17_i32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_indvar17_i32_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp168 = mul i32 %indvar17.i32, %tmp132*/
begin
Write4Blocks__lr_ph_us_i36_tmp168 = Write4Blocks_signed_multiply_32_1;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp168 = mul i32 %indvar17.i32, %tmp132*/
if (cur_state == LEGUP_F_Write4Blocks_BB20_42)
begin
Write4Blocks__lr_ph_us_i36_tmp168_reg <= Write4Blocks__lr_ph_us_i36_tmp168;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i36_tmp168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_tmp168_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp329 = mul i32 %indvar17.i, %tmp296*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks__lr_ph_us_i36_tmp168_reg <= Write4Blocks__lr_ph_us_i_tmp329;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i_tmp329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_tmp168_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp222 = mul i32 %indvar17.i69, %tmp187*/
if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks__lr_ph_us_i36_tmp168_reg <= Write4Blocks__lr_ph_us_i73_tmp222;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i73_tmp222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_tmp168_reg"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp277 = mul i32 %indvar17.i106, %tmp241*/
if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks__lr_ph_us_i36_tmp168_reg <= Write4Blocks__lr_ph_us_i110_tmp277;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i110_tmp277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_tmp168_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp170 = mul i32 %6, %indvar17.i32*/
begin
Write4Blocks__lr_ph_us_i36_tmp170 = Write4Blocks_signed_multiply_32_0;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp175 = add i32 %tmp174, %tmp170*/
begin
Write4Blocks__lr_ph_us_i36_tmp175 = Write4Blocks__lr_ph8_split_us_i22_tmp174_reg + Write4Blocks__lr_ph_us_i36_tmp170;
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp175 = add i32 %tmp174, %tmp170*/
if (cur_state == LEGUP_F_Write4Blocks_BB20_42)
begin
Write4Blocks__lr_ph_us_i36_tmp175_reg <= Write4Blocks__lr_ph_us_i36_tmp175;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph_us_i36_tmp175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_tmp175_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %29 = load i32* %p_out_hpos, align 4, !tbaa !0*/
begin
Write4Blocks_WriteOneBlock_exit37_29 = memory_controller_out[31:0];
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %30 = add nsw i32 %29, 2*/
begin
Write4Blocks_WriteOneBlock_exit37_30 = Write4Blocks_WriteOneBlock_exit37_29 + 32'd2;
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %31 = load i32* %p_out_vpos, align 4, !tbaa !0*/
begin
Write4Blocks_WriteOneBlock_exit37_31 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %31 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_48)
begin
Write4Blocks_WriteOneBlock_exit37_31_reg <= Write4Blocks_WriteOneBlock_exit37_31;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit37_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit37_31_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %32 = add nsw i32 %31, 2*/
begin
Write4Blocks_WriteOneBlock_exit37_32 = Write4Blocks_WriteOneBlock_exit37_31 + 32'd2;
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %33 = load i32* %p_out_hpos, align 4, !tbaa !0*/
begin
Write4Blocks_WriteOneBlock_exit37_33 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %33 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_51)
begin
Write4Blocks_WriteOneBlock_exit37_33_reg <= Write4Blocks_WriteOneBlock_exit37_33;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit37_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit37_33_reg"); $finish; end
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %34 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
begin
Write4Blocks_WriteOneBlock_exit37_34 = memory_controller_out[31:0];
end
end
always @(*) begin
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %35 = icmp slt i32 %33, %34*/
begin
Write4Blocks_WriteOneBlock_exit37_35 = $signed(Write4Blocks_WriteOneBlock_exit37_33_reg) < $signed(Write4Blocks_WriteOneBlock_exit37_34);
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp332 = mul i32 %1, %6*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_7)
begin
Write4Blocks_signed_multiply_32_0_op0 = Write4Blocks_0_1_reg;
end
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp331 = mul i32 %6, %indvar17.i*/
else if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks_signed_multiply_32_0_op0 = Write4Blocks_0_6_reg;
end
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp280 = mul i32 %1, %6*/
else if (cur_state == LEGUP_F_Write4Blocks_BB7_17)
begin
Write4Blocks_signed_multiply_32_0_op0 = Write4Blocks_0_1_reg;
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp279 = mul i32 %6, %indvar17.i106*/
else if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks_signed_multiply_32_0_op0 = Write4Blocks_0_6_reg;
end
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp226 = mul i32 %.pre-phi350, %6*/
else if (cur_state == LEGUP_F_Write4Blocks_BB12_26)
begin
Write4Blocks_signed_multiply_32_0_op0 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg;
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp224 = mul i32 %6, %indvar17.i69*/
else if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks_signed_multiply_32_0_op0 = Write4Blocks_0_6_reg;
end
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp172 = mul i32 %.pre-phi350, %6*/
else if (cur_state == LEGUP_F_Write4Blocks_BB17_35)
begin
Write4Blocks_signed_multiply_32_0_op0 = Write4Blocks_WriteOneBlock_exit111__pre_phi350_reg;
end
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp170 = mul i32 %6, %indvar17.i32*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB20_42) */
begin
Write4Blocks_signed_multiply_32_0_op0 = Write4Blocks_0_6_reg;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph8.split.us.i*/
/*   %tmp332 = mul i32 %1, %6*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_7)
begin
Write4Blocks_signed_multiply_32_0_op1 = Write4Blocks_0_6_reg;
end
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp331 = mul i32 %6, %indvar17.i*/
else if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks_signed_multiply_32_0_op1 = Write4Blocks__lr_ph_us_i_indvar17_i;
end
/* Write4Blocks: %.lr.ph8.split.us.i96*/
/*   %tmp280 = mul i32 %1, %6*/
else if (cur_state == LEGUP_F_Write4Blocks_BB7_17)
begin
Write4Blocks_signed_multiply_32_0_op1 = Write4Blocks_0_6_reg;
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp279 = mul i32 %6, %indvar17.i106*/
else if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks_signed_multiply_32_0_op1 = Write4Blocks__lr_ph_us_i110_indvar17_i106;
end
/* Write4Blocks: %.lr.ph8.split.us.i59*/
/*   %tmp226 = mul i32 %.pre-phi350, %6*/
else if (cur_state == LEGUP_F_Write4Blocks_BB12_26)
begin
Write4Blocks_signed_multiply_32_0_op1 = Write4Blocks_0_6_reg;
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp224 = mul i32 %6, %indvar17.i69*/
else if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks_signed_multiply_32_0_op1 = Write4Blocks__lr_ph_us_i73_indvar17_i69;
end
/* Write4Blocks: %.lr.ph8.split.us.i22*/
/*   %tmp172 = mul i32 %.pre-phi350, %6*/
else if (cur_state == LEGUP_F_Write4Blocks_BB17_35)
begin
Write4Blocks_signed_multiply_32_0_op1 = Write4Blocks_0_6_reg;
end
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp170 = mul i32 %6, %indvar17.i32*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB20_42) */
begin
Write4Blocks_signed_multiply_32_0_op1 = Write4Blocks__lr_ph_us_i36_indvar17_i32;
end
end
always @(*) begin
Write4Blocks_signed_multiply_32_0 = Write4Blocks_signed_multiply_32_0_op0 * Write4Blocks_signed_multiply_32_0_op1;
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp329 = mul i32 %indvar17.i, %tmp296*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks_signed_multiply_32_1_op0 = Write4Blocks__lr_ph_us_i_indvar17_i;
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp277 = mul i32 %indvar17.i106, %tmp241*/
else if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks_signed_multiply_32_1_op0 = Write4Blocks__lr_ph_us_i110_indvar17_i106;
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp222 = mul i32 %indvar17.i69, %tmp187*/
else if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks_signed_multiply_32_1_op0 = Write4Blocks__lr_ph_us_i73_indvar17_i69;
end
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp168 = mul i32 %indvar17.i32, %tmp132*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB20_42) */
begin
Write4Blocks_signed_multiply_32_1_op0 = Write4Blocks__lr_ph_us_i36_indvar17_i32;
end
end
always @(*) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %tmp329 = mul i32 %indvar17.i, %tmp296*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14)
begin
Write4Blocks_signed_multiply_32_1_op1 = Write4Blocks__lr_ph8_split_us_i_tmp296_reg;
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %tmp277 = mul i32 %indvar17.i106, %tmp241*/
else if (cur_state == LEGUP_F_Write4Blocks_BB10_24)
begin
Write4Blocks_signed_multiply_32_1_op1 = Write4Blocks__lr_ph8_split_us_i96_tmp241_reg;
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %tmp222 = mul i32 %indvar17.i69, %tmp187*/
else if (cur_state == LEGUP_F_Write4Blocks_BB15_33)
begin
Write4Blocks_signed_multiply_32_1_op1 = Write4Blocks__lr_ph8_split_us_i59_tmp187_reg;
end
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %tmp168 = mul i32 %indvar17.i32, %tmp132*/
else /* if (cur_state == LEGUP_F_Write4Blocks_BB20_42) */
begin
Write4Blocks_signed_multiply_32_1_op1 = Write4Blocks__lr_ph8_split_us_i22_tmp132_reg;
end
end
always @(*) begin
Write4Blocks_signed_multiply_32_1 = Write4Blocks_signed_multiply_32_1_op0 * Write4Blocks_signed_multiply_32_1_op1;
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i*/
/*   %indvar17.i = phi i32 [ %indvar.next18.i, %11 ], [ 0, %.lr.ph8.split.us.i ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB1_9 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks__lr_ph_us_i_indvar17_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i_indvar17_i_phi_temp"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i*/
/*   %indvar17.i = phi i32 [ %indvar.next18.i, %11 ], [ 0, %.lr.ph8.split.us.i ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB2_10 & memory_controller_waitrequest == 1'd0 & Write4Blocks_11_exitcond317 == 1'd0)
begin
Write4Blocks__lr_ph_us_i_indvar17_i_phi_temp <= Write4Blocks_11_indvar_next18_i;
if (^reset !== 1'bX && ^(Write4Blocks_11_indvar_next18_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i_indvar17_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* Write4Blocks: %12*/
/*   %indvar.i = phi i32 [ 0, %.lr.ph.us.i ], [ %indvar.next.i, %12 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_13 & memory_controller_waitrequest == 1'd0 & Write4Blocks_12_exitcond297_reg == 1'd0)
begin
Write4Blocks_12_indvar_i_phi_temp <= Write4Blocks_12_indvar_next_i_reg;
if (^reset !== 1'bX && ^(Write4Blocks_12_indvar_next_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_12_indvar_i_phi_temp"); $finish; end
end
/* Write4Blocks: %12*/
/*   %indvar.i = phi i32 [ 0, %.lr.ph.us.i ], [ %indvar.next.i, %12 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB4_14 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks_12_indvar_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_12_indvar_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB6_16 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp <= Write4Blocks_WriteOneBlock_exit_WriteOneBlock_exit111_crit_edge__pre349;
if (^reset !== 1'bX && ^(Write4Blocks_WriteOneBlock_exit_WriteOneBlock_exit111_crit_edge__pre349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp"); $finish; end
end
/* Write4Blocks: %WriteOneBlock.exit111*/
/*   %.pre-phi350 = phi i32 [ %.pre349, %WriteOneBlock.exit.WriteOneBlock.exit111_crit_edge ], [ %tmp254, %16 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB8_20 & memory_controller_waitrequest == 1'd0 & Write4Blocks_16_exitcond264 == 1'd1)
begin
Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp <= Write4Blocks__lr_ph8_split_us_i96_tmp254_reg;
if (^reset !== 1'bX && ^(Write4Blocks__lr_ph8_split_us_i96_tmp254_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_WriteOneBlock_exit111__pre_phi350_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %indvar17.i106 = phi i32 [ %indvar.next18.i98, %16 ], [ 0, %.lr.ph8.split.us.i96 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB7_19 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks__lr_ph_us_i110_indvar17_i106_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i110_indvar17_i106_phi_temp"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i110*/
/*   %indvar17.i106 = phi i32 [ %indvar.next18.i98, %16 ], [ 0, %.lr.ph8.split.us.i96 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB8_20 & memory_controller_waitrequest == 1'd0 & Write4Blocks_16_exitcond264 == 1'd0)
begin
Write4Blocks__lr_ph_us_i110_indvar17_i106_phi_temp <= Write4Blocks_16_indvar_next18_i98;
if (^reset !== 1'bX && ^(Write4Blocks_16_indvar_next18_i98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i110_indvar17_i106_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* Write4Blocks: %17*/
/*   %indvar.i100 = phi i32 [ 0, %.lr.ph.us.i110 ], [ %indvar.next.i104, %17 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_23 & memory_controller_waitrequest == 1'd0 & Write4Blocks_17_exitcond242_reg == 1'd0)
begin
Write4Blocks_17_indvar_i100_phi_temp <= Write4Blocks_17_indvar_next_i104_reg;
if (^reset !== 1'bX && ^(Write4Blocks_17_indvar_next_i104_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_17_indvar_i100_phi_temp"); $finish; end
end
/* Write4Blocks: %17*/
/*   %indvar.i100 = phi i32 [ 0, %.lr.ph.us.i110 ], [ %indvar.next.i104, %17 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB10_24 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks_17_indvar_i100_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_17_indvar_i100_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %indvar17.i69 = phi i32 [ %indvar.next18.i61, %21 ], [ 0, %.lr.ph8.split.us.i59 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB12_28 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks__lr_ph_us_i73_indvar17_i69_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i73_indvar17_i69_phi_temp"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i73*/
/*   %indvar17.i69 = phi i32 [ %indvar.next18.i61, %21 ], [ 0, %.lr.ph8.split.us.i59 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB13_29 & memory_controller_waitrequest == 1'd0 & Write4Blocks_21_exitcond210 == 1'd0)
begin
Write4Blocks__lr_ph_us_i73_indvar17_i69_phi_temp <= Write4Blocks_21_indvar_next18_i61;
if (^reset !== 1'bX && ^(Write4Blocks_21_indvar_next18_i61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i73_indvar17_i69_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* Write4Blocks: %22*/
/*   %indvar.i63 = phi i32 [ 0, %.lr.ph.us.i73 ], [ %indvar.next.i67, %22 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_32 & memory_controller_waitrequest == 1'd0 & Write4Blocks_22_exitcond188_reg == 1'd0)
begin
Write4Blocks_22_indvar_i63_phi_temp <= Write4Blocks_22_indvar_next_i67_reg;
if (^reset !== 1'bX && ^(Write4Blocks_22_indvar_next_i67_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_22_indvar_i63_phi_temp"); $finish; end
end
/* Write4Blocks: %22*/
/*   %indvar.i63 = phi i32 [ 0, %.lr.ph.us.i73 ], [ %indvar.next.i67, %22 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB15_33 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks_22_indvar_i63_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_22_indvar_i63_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %indvar17.i32 = phi i32 [ %indvar.next18.i24, %25 ], [ 0, %.lr.ph8.split.us.i22 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB17_37 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks__lr_ph_us_i36_indvar17_i32_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_indvar17_i32_phi_temp"); $finish; end
end
/* Write4Blocks: %.lr.ph.us.i36*/
/*   %indvar17.i32 = phi i32 [ %indvar.next18.i24, %25 ], [ 0, %.lr.ph8.split.us.i22 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB18_38 & memory_controller_waitrequest == 1'd0 & Write4Blocks_25_exitcond155 == 1'd0)
begin
Write4Blocks__lr_ph_us_i36_indvar17_i32_phi_temp <= Write4Blocks_25_indvar_next18_i24;
if (^reset !== 1'bX && ^(Write4Blocks_25_indvar_next18_i24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks__lr_ph_us_i36_indvar17_i32_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* Write4Blocks: %26*/
/*   %indvar.i26 = phi i32 [ 0, %.lr.ph.us.i36 ], [ %indvar.next.i30, %26 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_41 & memory_controller_waitrequest == 1'd0 & Write4Blocks_26_exitcond_reg == 1'd0)
begin
Write4Blocks_26_indvar_i26_phi_temp <= Write4Blocks_26_indvar_next_i30_reg;
if (^reset !== 1'bX && ^(Write4Blocks_26_indvar_next_i30_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_26_indvar_i26_phi_temp"); $finish; end
end
/* Write4Blocks: %26*/
/*   %indvar.i26 = phi i32 [ 0, %.lr.ph.us.i36 ], [ %indvar.next.i30, %26 ]*/
if (cur_state == LEGUP_F_Write4Blocks_BB20_42 & memory_controller_waitrequest == 1'd0)
begin
Write4Blocks_26_indvar_i26_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_26_indvar_i26_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* Write4Blocks: %38*/
/*   ret void*/
if (cur_state == LEGUP_F_Write4Blocks_BB24_55)
begin
finish <= memory_controller_waitrequest == 1'd0;
if (^reset !== 1'bX && ^(memory_controller_waitrequest == 1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_address = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_address = 0;
end
/* Write4Blocks: %0*/
/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_1)
begin
memory_controller_address = arg_p_out_vpos;
end
/* Write4Blocks: %0*/
/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_2)
begin
memory_controller_address = arg_p_out_hpos;
end
/* Write4Blocks: %0*/
/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_3)
begin
memory_controller_address = `TAG_g_p_jinfo_image_width_a;
end
/* Write4Blocks: %0*/
/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_4)
begin
memory_controller_address = `TAG_g_p_jinfo_image_height_a;
end
/* Write4Blocks: %12*/
/*   %13 = load i32* %.14.us.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_11)
begin
memory_controller_address = Write4Blocks_12__14_us_i;
end
/* Write4Blocks: %12*/
/*   store i8 %14, i8* %scevgep24.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_13)
begin
memory_controller_address = Write4Blocks_12_scevgep24_i_reg;
end
/* Write4Blocks: %17*/
/*   %18 = load i32* %.14.us.i103, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_21)
begin
memory_controller_address = Write4Blocks_17__14_us_i103;
end
/* Write4Blocks: %17*/
/*   store i8 %19, i8* %scevgep24.i102, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_23)
begin
memory_controller_address = Write4Blocks_17_scevgep24_i102_reg;
end
/* Write4Blocks: %22*/
/*   %23 = load i32* %.14.us.i66, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_30)
begin
memory_controller_address = Write4Blocks_22__14_us_i66;
end
/* Write4Blocks: %22*/
/*   store i8 %24, i8* %scevgep24.i65, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_32)
begin
memory_controller_address = Write4Blocks_22_scevgep24_i65_reg;
end
/* Write4Blocks: %26*/
/*   %27 = load i32* %.14.us.i29, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_39)
begin
memory_controller_address = Write4Blocks_26__14_us_i29;
end
/* Write4Blocks: %26*/
/*   store i8 %28, i8* %scevgep24.i28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_41)
begin
memory_controller_address = Write4Blocks_26_scevgep24_i28_reg;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %29 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_43)
begin
memory_controller_address = arg_p_out_hpos;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %30, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_45)
begin
memory_controller_address = arg_p_out_hpos;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %31 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_46)
begin
memory_controller_address = arg_p_out_vpos;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %32, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_48)
begin
memory_controller_address = arg_p_out_vpos;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %33 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_49)
begin
memory_controller_address = arg_p_out_hpos;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %34 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_50)
begin
memory_controller_address = `TAG_g_p_jinfo_MCUWidth_a;
end
/* Write4Blocks: %36*/
/*   store i32 %31, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB22_53)
begin
memory_controller_address = arg_p_out_vpos;
end
/* Write4Blocks: %37*/
/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB23_54)
begin
memory_controller_address = arg_p_out_hpos;
end
end
always @(*) begin
memory_controller_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_enable = 1'd0;
end
/* Write4Blocks: %0*/
/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_1)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %0*/
/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_2)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %0*/
/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_3)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %0*/
/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_4)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %12*/
/*   %13 = load i32* %.14.us.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_11)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %12*/
/*   store i8 %14, i8* %scevgep24.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_13)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %17*/
/*   %18 = load i32* %.14.us.i103, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_21)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %17*/
/*   store i8 %19, i8* %scevgep24.i102, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_23)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %22*/
/*   %23 = load i32* %.14.us.i66, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_30)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %22*/
/*   store i8 %24, i8* %scevgep24.i65, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_32)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %26*/
/*   %27 = load i32* %.14.us.i29, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_39)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %26*/
/*   store i8 %28, i8* %scevgep24.i28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_41)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %29 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_43)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %30, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_45)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %31 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_46)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %32, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_48)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %33 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_49)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %34 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_50)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %36*/
/*   store i32 %31, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB22_53)
begin
memory_controller_enable = 1'd1;
end
/* Write4Blocks: %37*/
/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB23_54)
begin
memory_controller_enable = 1'd1;
end
end
always @(*) begin
memory_controller_write_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %0*/
/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_1)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %0*/
/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_2)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %0*/
/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_3)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %0*/
/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_4)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %12*/
/*   %13 = load i32* %.14.us.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_11)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %12*/
/*   store i8 %14, i8* %scevgep24.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_13)
begin
memory_controller_write_enable = 1'd1;
end
/* Write4Blocks: %17*/
/*   %18 = load i32* %.14.us.i103, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_21)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %17*/
/*   store i8 %19, i8* %scevgep24.i102, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_23)
begin
memory_controller_write_enable = 1'd1;
end
/* Write4Blocks: %22*/
/*   %23 = load i32* %.14.us.i66, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_30)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %22*/
/*   store i8 %24, i8* %scevgep24.i65, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_32)
begin
memory_controller_write_enable = 1'd1;
end
/* Write4Blocks: %26*/
/*   %27 = load i32* %.14.us.i29, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_39)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %26*/
/*   store i8 %28, i8* %scevgep24.i28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_41)
begin
memory_controller_write_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %29 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_43)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %30, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_45)
begin
memory_controller_write_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %31 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_46)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %32, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_48)
begin
memory_controller_write_enable = 1'd1;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %33 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_49)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %34 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_50)
begin
memory_controller_write_enable = 1'd0;
end
/* Write4Blocks: %36*/
/*   store i32 %31, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB22_53)
begin
memory_controller_write_enable = 1'd1;
end
/* Write4Blocks: %37*/
/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB23_54)
begin
memory_controller_write_enable = 1'd1;
end
end
always @(*) begin
memory_controller_in = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_in = 64'd0;
end
/* Write4Blocks: %12*/
/*   store i8 %14, i8* %scevgep24.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_13)
begin
memory_controller_in = Write4Blocks_12_14;
end
/* Write4Blocks: %17*/
/*   store i8 %19, i8* %scevgep24.i102, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_23)
begin
memory_controller_in = Write4Blocks_17_19;
end
/* Write4Blocks: %22*/
/*   store i8 %24, i8* %scevgep24.i65, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_32)
begin
memory_controller_in = Write4Blocks_22_24;
end
/* Write4Blocks: %26*/
/*   store i8 %28, i8* %scevgep24.i28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_41)
begin
memory_controller_in = Write4Blocks_26_28;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %30, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_45)
begin
memory_controller_in = Write4Blocks_WriteOneBlock_exit37_30;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %32, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_48)
begin
memory_controller_in = Write4Blocks_WriteOneBlock_exit37_32;
end
/* Write4Blocks: %36*/
/*   store i32 %31, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB22_53)
begin
memory_controller_in = Write4Blocks_WriteOneBlock_exit37_31_reg;
end
/* Write4Blocks: %37*/
/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB23_54)
begin
memory_controller_in = 32'd0;
end
end
always @(*) begin
memory_controller_size = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_size = 2'd0;
end
/* Write4Blocks: %0*/
/*   %1 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_1)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %0*/
/*   %3 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_2)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %0*/
/*   %5 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_3)
begin
memory_controller_size = 2'd1;
end
/* Write4Blocks: %0*/
/*   %7 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_Write4Blocks_BB0_4)
begin
memory_controller_size = 2'd1;
end
/* Write4Blocks: %12*/
/*   %13 = load i32* %.14.us.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_11)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %12*/
/*   store i8 %14, i8* %scevgep24.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB3_13)
begin
memory_controller_size = 2'd0;
end
/* Write4Blocks: %17*/
/*   %18 = load i32* %.14.us.i103, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_21)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %17*/
/*   store i8 %19, i8* %scevgep24.i102, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB9_23)
begin
memory_controller_size = 2'd0;
end
/* Write4Blocks: %22*/
/*   %23 = load i32* %.14.us.i66, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_30)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %22*/
/*   store i8 %24, i8* %scevgep24.i65, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB14_32)
begin
memory_controller_size = 2'd0;
end
/* Write4Blocks: %26*/
/*   %27 = load i32* %.14.us.i29, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_39)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %26*/
/*   store i8 %28, i8* %scevgep24.i28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_Write4Blocks_BB19_41)
begin
memory_controller_size = 2'd0;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %29 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_43)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %30, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_45)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %31 = load i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_46)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   store i32 %32, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_48)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %33 = load i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_49)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %WriteOneBlock.exit37*/
/*   %34 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB21_50)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %36*/
/*   store i32 %31, i32* %p_out_vpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB22_53)
begin
memory_controller_size = 2'd2;
end
/* Write4Blocks: %37*/
/*   store i32 0, i32* %p_out_hpos, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_Write4Blocks_BB23_54)
begin
memory_controller_size = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module decode_block
(
	clk,
	reset,
	start,
	finish,
	arg_comp_no,
	arg_out_buf,
	arg_HuffBuff,
	memory_controller_address,
	memory_controller_enable,
	memory_controller_write_enable,
	memory_controller_waitrequest,
	memory_controller_in,
	memory_controller_size,
	memory_controller_out
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_decode_block_BB0_1 = 8'd1;
parameter [7:0] LEGUP_F_decode_block_BB0_2 = 8'd2;
parameter [7:0] LEGUP_F_decode_block_BB0_3 = 8'd3;
parameter [7:0] LEGUP_F_decode_block_BB0_4 = 8'd4;
parameter [7:0] LEGUP_F_decode_block_BB0_5 = 8'd5;
parameter [7:0] LEGUP_F_decode_block_BB1_8 = 8'd8;
parameter [7:0] LEGUP_F_decode_block_BB1_11 = 8'd11;
parameter [7:0] LEGUP_F_decode_block_BB1_12 = 8'd12;
parameter [7:0] LEGUP_F_decode_block_BB1_13 = 8'd13;
parameter [7:0] LEGUP_F_decode_block_BB2_14 = 8'd14;
parameter [7:0] LEGUP_F_decode_block_BB2_15 = 8'd15;
parameter [7:0] LEGUP_F_decode_block_BB2_16 = 8'd16;
parameter [7:0] LEGUP_F_decode_block_BB3_17 = 8'd17;
parameter [7:0] LEGUP_F_decode_block_BB3_18 = 8'd18;
parameter [7:0] LEGUP_F_decode_block_BB3_19 = 8'd19;
parameter [7:0] LEGUP_F_decode_block_BB4_20 = 8'd20;
parameter [7:0] LEGUP_F_decode_block_BB5_21 = 8'd21;
parameter [7:0] LEGUP_F_decode_block_BB6_22 = 8'd22;
parameter [7:0] LEGUP_F_decode_block_BB7_23 = 8'd23;
parameter [7:0] LEGUP_F_decode_block_BB7_24 = 8'd24;
parameter [7:0] LEGUP_F_decode_block_BB7_25 = 8'd25;
parameter [7:0] LEGUP_F_decode_block_BB8_28 = 8'd28;
parameter [7:0] LEGUP_F_decode_block_BB9_29 = 8'd29;
parameter [7:0] LEGUP_F_decode_block_BB9_32 = 8'd32;
parameter [7:0] LEGUP_F_decode_block_BB9_33 = 8'd33;
parameter [7:0] LEGUP_F_decode_block_BB9_34 = 8'd34;
parameter [7:0] LEGUP_F_decode_block_BB9_35 = 8'd35;
parameter [7:0] LEGUP_F_decode_block_BB10_36 = 8'd36;
parameter [7:0] LEGUP_F_decode_block_BB10_37 = 8'd37;
parameter [7:0] LEGUP_F_decode_block_BB10_38 = 8'd38;
parameter [7:0] LEGUP_F_decode_block_BB11_39 = 8'd39;
parameter [7:0] LEGUP_F_decode_block_BB12_40 = 8'd40;
parameter [7:0] LEGUP_F_decode_block_BB13_41 = 8'd41;
parameter [7:0] LEGUP_F_decode_block_BB14_42 = 8'd42;
parameter [7:0] LEGUP_F_decode_block_BB14_43 = 8'd43;
parameter [7:0] LEGUP_F_decode_block_BB14_44 = 8'd44;
parameter [7:0] LEGUP_F_decode_block_BB14_45 = 8'd45;
parameter [7:0] LEGUP_F_decode_block_BB14_46 = 8'd46;
parameter [7:0] LEGUP_F_decode_block_BB15_47 = 8'd47;
parameter [7:0] LEGUP_F_decode_block_BB15_48 = 8'd48;
parameter [7:0] LEGUP_F_decode_block_BB15_49 = 8'd49;
parameter [7:0] LEGUP_F_decode_block_BB16_50 = 8'd50;
parameter [7:0] LEGUP_F_decode_block_BB16_51 = 8'd51;
parameter [7:0] LEGUP_F_decode_block_BB16_52 = 8'd52;
parameter [7:0] LEGUP_F_decode_block_BB16_53 = 8'd53;
parameter [7:0] LEGUP_F_decode_block_BB17_54 = 8'd54;
parameter [7:0] LEGUP_F_decode_block_BB17_55 = 8'd55;
parameter [7:0] LEGUP_F_decode_block_BB17_56 = 8'd56;
parameter [7:0] LEGUP_F_decode_block_BB17_57 = 8'd57;
parameter [7:0] LEGUP_F_decode_block_BB17_58 = 8'd58;
parameter [7:0] LEGUP_F_decode_block_BB17_59 = 8'd59;
parameter [7:0] LEGUP_F_decode_block_BB17_60 = 8'd60;
parameter [7:0] LEGUP_F_decode_block_BB17_61 = 8'd61;
parameter [7:0] LEGUP_F_decode_block_BB17_62 = 8'd62;
parameter [7:0] LEGUP_F_decode_block_BB17_63 = 8'd63;
parameter [7:0] LEGUP_F_decode_block_BB17_64 = 8'd64;
parameter [7:0] LEGUP_F_decode_block_BB17_65 = 8'd65;
parameter [7:0] LEGUP_F_decode_block_BB17_66 = 8'd66;
parameter [7:0] LEGUP_F_decode_block_BB17_67 = 8'd67;
parameter [7:0] LEGUP_F_decode_block_BB17_68 = 8'd68;
parameter [7:0] LEGUP_F_decode_block_BB17_69 = 8'd69;
parameter [7:0] LEGUP_F_decode_block_BB17_70 = 8'd70;
parameter [7:0] LEGUP_F_decode_block_BB17_71 = 8'd71;
parameter [7:0] LEGUP_F_decode_block_BB18_72 = 8'd72;
parameter [7:0] LEGUP_F_decode_block_BB18_73 = 8'd73;
parameter [7:0] LEGUP_F_decode_block_BB18_74 = 8'd74;
parameter [7:0] LEGUP_F_decode_block_BB18_75 = 8'd75;
parameter [7:0] LEGUP_F_decode_block_BB18_76 = 8'd76;
parameter [7:0] LEGUP_F_decode_block_BB18_77 = 8'd77;
parameter [7:0] LEGUP_F_decode_block_BB18_78 = 8'd78;
parameter [7:0] LEGUP_F_decode_block_BB18_79 = 8'd79;
parameter [7:0] LEGUP_F_decode_block_BB18_80 = 8'd80;
parameter [7:0] LEGUP_F_decode_block_BB18_81 = 8'd81;
parameter [7:0] LEGUP_F_decode_block_BB18_82 = 8'd82;
parameter [7:0] LEGUP_F_decode_block_BB18_83 = 8'd83;
parameter [7:0] LEGUP_F_decode_block_BB18_84 = 8'd84;
parameter [7:0] LEGUP_F_decode_block_BB18_85 = 8'd85;
parameter [7:0] LEGUP_F_decode_block_BB18_86 = 8'd86;
parameter [7:0] LEGUP_F_decode_block_BB18_87 = 8'd87;
parameter [7:0] LEGUP_F_decode_block_BB18_88 = 8'd88;
parameter [7:0] LEGUP_F_decode_block_BB18_89 = 8'd89;
parameter [7:0] LEGUP_F_decode_block_BB19_90 = 8'd90;
parameter [7:0] LEGUP_F_decode_block_BB19_91 = 8'd91;
parameter [7:0] LEGUP_F_decode_block_BB19_92 = 8'd92;
parameter [7:0] LEGUP_F_decode_block_BB19_93 = 8'd93;
parameter [7:0] LEGUP_F_decode_block_BB19_94 = 8'd94;
parameter [7:0] LEGUP_F_decode_block_BB19_95 = 8'd95;
parameter [7:0] LEGUP_F_decode_block_BB19_96 = 8'd96;
parameter [7:0] LEGUP_F_decode_block_BB19_97 = 8'd97;
parameter [7:0] LEGUP_F_decode_block_BB19_98 = 8'd98;
parameter [7:0] LEGUP_F_decode_block_BB19_99 = 8'd99;
parameter [7:0] LEGUP_F_decode_block_BB19_100 = 8'd100;
parameter [7:0] LEGUP_F_decode_block_BB19_101 = 8'd101;
parameter [7:0] LEGUP_F_decode_block_BB19_102 = 8'd102;
parameter [7:0] LEGUP_F_decode_block_BB19_103 = 8'd103;
parameter [7:0] LEGUP_F_decode_block_BB19_104 = 8'd104;
parameter [7:0] LEGUP_F_decode_block_BB19_105 = 8'd105;
parameter [7:0] LEGUP_F_decode_block_BB19_106 = 8'd106;
parameter [7:0] LEGUP_F_decode_block_BB19_107 = 8'd107;
parameter [7:0] LEGUP_F_decode_block_BB19_108 = 8'd108;
parameter [7:0] LEGUP_F_decode_block_BB19_109 = 8'd109;
parameter [7:0] LEGUP_F_decode_block_BB19_110 = 8'd110;
parameter [7:0] LEGUP_F_decode_block_BB19_111 = 8'd111;
parameter [7:0] LEGUP_F_decode_block_BB19_112 = 8'd112;
parameter [7:0] LEGUP_F_decode_block_BB19_113 = 8'd113;
parameter [7:0] LEGUP_F_decode_block_BB19_114 = 8'd114;
parameter [7:0] LEGUP_F_decode_block_BB19_115 = 8'd115;
parameter [7:0] LEGUP_F_decode_block_BB19_116 = 8'd116;
parameter [7:0] LEGUP_F_decode_block_BB19_117 = 8'd117;
parameter [7:0] LEGUP_F_decode_block_BB19_118 = 8'd118;
parameter [7:0] LEGUP_F_decode_block_BB19_119 = 8'd119;
parameter [7:0] LEGUP_F_decode_block_BB19_120 = 8'd120;
parameter [7:0] LEGUP_F_decode_block_BB19_121 = 8'd121;
parameter [7:0] LEGUP_F_decode_block_BB19_122 = 8'd122;
parameter [7:0] LEGUP_F_decode_block_BB19_123 = 8'd123;
parameter [7:0] LEGUP_F_decode_block_BB19_124 = 8'd124;
parameter [7:0] LEGUP_F_decode_block_BB19_125 = 8'd125;
parameter [7:0] LEGUP_F_decode_block_BB19_126 = 8'd126;
parameter [7:0] LEGUP_F_decode_block_BB19_127 = 8'd127;
parameter [7:0] LEGUP_F_decode_block_BB19_128 = 8'd128;
parameter [7:0] LEGUP_F_decode_block_BB19_129 = 8'd129;
parameter [7:0] LEGUP_F_decode_block_BB19_130 = 8'd130;
parameter [7:0] LEGUP_F_decode_block_BB19_131 = 8'd131;
parameter [7:0] LEGUP_F_decode_block_BB19_132 = 8'd132;
parameter [7:0] LEGUP_F_decode_block_BB19_133 = 8'd133;
parameter [7:0] LEGUP_F_decode_block_BB19_134 = 8'd134;
parameter [7:0] LEGUP_F_decode_block_BB19_135 = 8'd135;
parameter [7:0] LEGUP_F_decode_block_BB19_136 = 8'd136;
parameter [7:0] LEGUP_F_decode_block_BB19_137 = 8'd137;
parameter [7:0] LEGUP_F_decode_block_BB19_138 = 8'd138;
parameter [7:0] LEGUP_F_decode_block_BB19_139 = 8'd139;
parameter [7:0] LEGUP_F_decode_block_BB19_140 = 8'd140;
parameter [7:0] LEGUP_F_decode_block_BB20_141 = 8'd141;
parameter [7:0] LEGUP_F_decode_block_BB20_142 = 8'd142;
parameter [7:0] LEGUP_F_decode_block_BB20_143 = 8'd143;
parameter [7:0] LEGUP_F_decode_block_BB21_144 = 8'd144;
parameter [7:0] LEGUP_F_decode_block_BB21_145 = 8'd145;
parameter [7:0] LEGUP_F_decode_block_BB21_146 = 8'd146;
parameter [7:0] LEGUP_F_decode_block_BB22_147 = 8'd147;
parameter [7:0] LEGUP_F_decode_block_BB23_148 = 8'd148;
parameter [7:0] LEGUP_F_decode_block_BB24_149 = 8'd149;
parameter [7:0] LEGUP_F_decode_block_BB25_150 = 8'd150;
parameter [7:0] LEGUP_F_decode_block_BB26_151 = 8'd151;
parameter [7:0] LEGUP_function_call_6 = 8'd6;
parameter [7:0] LEGUP_function_call_7 = 8'd7;
parameter [7:0] LEGUP_function_call_9 = 8'd9;
parameter [7:0] LEGUP_function_call_10 = 8'd10;
parameter [7:0] LEGUP_function_call_26 = 8'd26;
parameter [7:0] LEGUP_function_call_27 = 8'd27;
parameter [7:0] LEGUP_function_call_30 = 8'd30;
parameter [7:0] LEGUP_function_call_31 = 8'd31;

input  clk;
input  reset;
input  start;
output reg  finish;
input [31:0] arg_comp_no;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_out_buf;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_HuffBuff;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;
output reg  memory_controller_enable;
output reg  memory_controller_write_enable;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;
output reg [1:0] memory_controller_size;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;
reg [7:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_1;
reg [7:0] decode_block_0_2;
reg [31:0] decode_block_0_3;
reg [31:0] decode_block_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_5;
reg [31:0] decode_block_0_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_0_9_reg;
reg [31:0] decode_block_0_10;
reg [31:0] decode_block_0_10_reg;
reg  decode_block_0_11;
reg [31:0] decode_block_12_13;
reg [31:0] decode_block_12_13_reg;
reg [31:0] decode_block_12_14;
reg [31:0] decode_block_12_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_12_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_12_15_reg;
reg [31:0] decode_block_12_16;
reg [31:0] decode_block_12_17;
reg  decode_block_12_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_19_20;
reg [31:0] decode_block_19_21;
reg [31:0] decode_block_19_22;
reg [31:0] decode_block_19_23;
reg [31:0] decode_block_24_diff_0_i;
reg [31:0] decode_block_24_diff_0_i_reg;
reg [31:0] decode_block_24_25;
reg [31:0] decode_block_24_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i_31_reg;
reg [31:0] decode_block__lr_ph_i_indvar_i2;
reg [31:0] decode_block__lr_ph_i_tmp_i4;
reg [31:0] decode_block__lr_ph_i_tmp4_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__lr_ph_i_mptr_03_i;
reg  decode_block__lr_ph_i_32;
reg [31:0] decode_block__backedge_i_k_0_i;
reg [31:0] decode_block__backedge_i_k_0_i_reg;
reg  decode_block__backedge_i_33;
reg [31:0] decode_block_34_35;
reg [31:0] decode_block_34_36;
reg [31:0] decode_block_34_36_reg;
reg [31:0] decode_block_34_37;
reg [31:0] decode_block_34_37_reg;
reg [31:0] decode_block_34_38;
reg [31:0] decode_block_34_39;
reg [31:0] decode_block_34_39_reg;
reg  decode_block_34_40;
reg [31:0] decode_block_41_42;
reg [31:0] decode_block_41_42_reg;
reg  decode_block_41_43;
reg [31:0] decode_block_44_45;
reg [31:0] decode_block_44_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_44_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_44_46_reg;
reg [31:0] decode_block_44_47;
reg [31:0] decode_block_44_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_44_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_44_48_reg;
reg [31:0] decode_block_44_49;
reg [31:0] decode_block_44_50;
reg  decode_block_44_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_52_53;
reg [31:0] decode_block_52_54;
reg [31:0] decode_block_52_55;
reg [31:0] decode_block_52_56;
reg [31:0] decode_block_57_58;
reg  decode_block_59_60;
reg [31:0] decode_block_61_62;
reg [31:0] decode_block_DecodeHuffMCU_exit_i_02_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_DecodeHuffMCU_exit__01_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_DecodeHuffMCU_exit__01_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_DecodeHuffMCU_exit_scevgep_i;
reg [31:0] decode_block_DecodeHuffMCU_exit_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_DecodeHuffMCU_exit_64;
reg [31:0] decode_block_DecodeHuffMCU_exit_65;
reg [31:0] decode_block_DecodeHuffMCU_exit_66;
reg [31:0] decode_block_DecodeHuffMCU_exit_66_reg;
reg  decode_block_DecodeHuffMCU_exit_exitcond10;
reg  decode_block_DecodeHuffMCU_exit_exitcond10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IZigzagMatrix_exit_67;
reg [7:0] decode_block_IZigzagMatrix_exit_68;
reg [31:0] decode_block_IZigzagMatrix_exit_tmp;
reg [31:0] decode_block_IZigzagMatrix_exit_tmp9;
reg [31:0] decode_block_IZigzagMatrix_exit_tmp9_reg;
reg [31:0] decode_block_69_indvar_i4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_69__01_i6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_69__01_i6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_69_mptr_02_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_69_mptr_02_i_reg;
reg [31:0] decode_block_69_tmp_i5;
reg [31:0] decode_block_69_tmp_i5_reg;
reg [31:0] decode_block_69_70;
reg [31:0] decode_block_69_70_reg;
reg [31:0] decode_block_69_71;
reg [31:0] decode_block_69_72;
reg  decode_block_69_exitcond8;
reg  decode_block_69_exitcond8_reg;
reg [31:0] decode_block_IQuantize_exit_i_027_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep44_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep45_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep45_i_reg;
reg [31:0] decode_block_IQuantize_exit_tmp46_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep47_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep47_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep48_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep48_i_reg;
reg [31:0] decode_block_IQuantize_exit_tmp49_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep50_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep50_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep51_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep51_i_reg;
reg [31:0] decode_block_IQuantize_exit_tmp52_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep53_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep53_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep54_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep54_i_reg;
reg [31:0] decode_block_IQuantize_exit_tmp55_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep56_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep56_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep57_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep57_i_reg;
reg [31:0] decode_block_IQuantize_exit_tmp58_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep59_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep59_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep60_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep60_i_reg;
reg [31:0] decode_block_IQuantize_exit_tmp61_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep62_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep62_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep63_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep63_i_reg;
reg [31:0] decode_block_IQuantize_exit_tmp64_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep65_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep65_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep66_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_IQuantize_exit_scevgep66_i_reg;
reg [31:0] decode_block_IQuantize_exit_73;
reg [31:0] decode_block_IQuantize_exit_74;
reg [31:0] decode_block_IQuantize_exit_74_reg;
reg [31:0] decode_block_IQuantize_exit_75;
reg [31:0] decode_block_IQuantize_exit_76;
reg [31:0] decode_block_IQuantize_exit_77;
reg [31:0] decode_block_IQuantize_exit_78;
reg [31:0] decode_block_IQuantize_exit_79;
reg [31:0] decode_block_IQuantize_exit_80;
reg [31:0] decode_block_IQuantize_exit_81;
reg [31:0] decode_block_IQuantize_exit_82;
reg [31:0] decode_block_IQuantize_exit_83;
reg [31:0] decode_block_IQuantize_exit_83_reg;
reg [31:0] decode_block_IQuantize_exit_84;
reg [31:0] decode_block_IQuantize_exit_85;
reg [31:0] decode_block_IQuantize_exit_86;
reg [31:0] decode_block_IQuantize_exit_86_reg;
reg [31:0] decode_block_IQuantize_exit_87;
reg [31:0] decode_block_IQuantize_exit_88;
reg [31:0] decode_block_IQuantize_exit_88_reg;
reg [31:0] decode_block_IQuantize_exit_89;
reg [31:0] decode_block_IQuantize_exit_90;
reg [31:0] decode_block_IQuantize_exit_90_reg;
reg [31:0] decode_block_IQuantize_exit_91;
reg [31:0] decode_block_IQuantize_exit_91_reg;
reg [31:0] decode_block_IQuantize_exit_92;
reg [31:0] decode_block_IQuantize_exit_93;
reg [31:0] decode_block_IQuantize_exit_94;
reg [31:0] decode_block_IQuantize_exit_94_reg;
reg [31:0] decode_block_IQuantize_exit_95;
reg [31:0] decode_block_IQuantize_exit_95_reg;
reg [31:0] decode_block_IQuantize_exit_96;
reg [31:0] decode_block_IQuantize_exit_97;
reg [31:0] decode_block_IQuantize_exit_98;
reg [31:0] decode_block_IQuantize_exit_98_reg;
reg [31:0] decode_block_IQuantize_exit_99;
reg [31:0] decode_block_IQuantize_exit_100;
reg [31:0] decode_block_IQuantize_exit_100_reg;
reg [31:0] decode_block_IQuantize_exit_101;
reg [31:0] decode_block_IQuantize_exit_101_reg;
reg [31:0] decode_block_IQuantize_exit_102;
reg [31:0] decode_block_IQuantize_exit_103;
reg [31:0] decode_block_IQuantize_exit_103_reg;
reg [31:0] decode_block_IQuantize_exit_104;
reg [31:0] decode_block_IQuantize_exit_104_reg;
reg [31:0] decode_block_IQuantize_exit_105;
reg [31:0] decode_block_IQuantize_exit_105_reg;
reg [31:0] decode_block_IQuantize_exit_106;
reg [31:0] decode_block_IQuantize_exit_107;
reg [31:0] decode_block_IQuantize_exit_108;
reg [31:0] decode_block_IQuantize_exit_108_reg;
reg [31:0] decode_block_IQuantize_exit_109;
reg [31:0] decode_block_IQuantize_exit_109_reg;
reg [31:0] decode_block_IQuantize_exit_110;
reg [31:0] decode_block_IQuantize_exit_111;
reg [31:0] decode_block_IQuantize_exit_112;
reg [31:0] decode_block_IQuantize_exit_112_reg;
reg [31:0] decode_block_IQuantize_exit_113;
reg [31:0] decode_block_IQuantize_exit_113_reg;
reg [31:0] decode_block_IQuantize_exit_114;
reg [31:0] decode_block_IQuantize_exit_114_reg;
reg [31:0] decode_block_IQuantize_exit_115;
reg [31:0] decode_block_IQuantize_exit_115_reg;
reg [31:0] decode_block_IQuantize_exit_116;
reg [31:0] decode_block_IQuantize_exit_116_reg;
reg [31:0] decode_block_IQuantize_exit_117;
reg [31:0] decode_block_IQuantize_exit_118;
reg [31:0] decode_block_IQuantize_exit_119;
reg [31:0] decode_block_IQuantize_exit_120;
reg [31:0] decode_block_IQuantize_exit_121;
reg [31:0] decode_block_IQuantize_exit_122;
reg [31:0] decode_block_IQuantize_exit_122_reg;
reg [31:0] decode_block_IQuantize_exit_123;
reg [31:0] decode_block_IQuantize_exit_124;
reg [31:0] decode_block_IQuantize_exit_125;
reg [31:0] decode_block_IQuantize_exit_125_reg;
reg [31:0] decode_block_IQuantize_exit_126;
reg [31:0] decode_block_IQuantize_exit_127;
reg [31:0] decode_block_IQuantize_exit_128;
reg [31:0] decode_block_IQuantize_exit_129;
reg [31:0] decode_block_IQuantize_exit_129_reg;
reg [31:0] decode_block_IQuantize_exit_130;
reg [31:0] decode_block_IQuantize_exit_130_reg;
reg [31:0] decode_block_IQuantize_exit_131;
reg [31:0] decode_block_IQuantize_exit_131_reg;
reg [31:0] decode_block_IQuantize_exit_132;
reg [31:0] decode_block_IQuantize_exit_132_reg;
reg [31:0] decode_block_IQuantize_exit_133;
reg [31:0] decode_block_IQuantize_exit_133_reg;
reg [31:0] decode_block_IQuantize_exit_134;
reg [31:0] decode_block_IQuantize_exit_134_reg;
reg [31:0] decode_block_IQuantize_exit_135;
reg [31:0] decode_block_IQuantize_exit_135_reg;
reg  decode_block_IQuantize_exit_exitcond43_i;
reg  decode_block_IQuantize_exit_exitcond43_i_reg;
reg [31:0] decode_block__preheader25_i_i_126_i;
reg [31:0] decode_block__preheader25_i_tmp_i6;
reg [31:0] decode_block__preheader25_i_tmp2967_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep_i7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep_i7_reg;
reg [31:0] decode_block__preheader25_i_tmp3068_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep31_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep31_i_reg;
reg [31:0] decode_block__preheader25_i_tmp3269_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep33_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep33_i_reg;
reg [31:0] decode_block__preheader25_i_tmp3470_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep35_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep35_i_reg;
reg [31:0] decode_block__preheader25_i_tmp3671_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep37_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep37_i_reg;
reg [31:0] decode_block__preheader25_i_tmp3872_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep39_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep39_i_reg;
reg [31:0] decode_block__preheader25_i_tmp4073_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep41_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep41_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep42_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader25_i_scevgep42_i_reg;
reg [31:0] decode_block__preheader25_i_136;
reg [31:0] decode_block__preheader25_i_136_reg;
reg [31:0] decode_block__preheader25_i_137;
reg [31:0] decode_block__preheader25_i_138;
reg [31:0] decode_block__preheader25_i_139;
reg [31:0] decode_block__preheader25_i_140;
reg [31:0] decode_block__preheader25_i_141;
reg [31:0] decode_block__preheader25_i_142;
reg [31:0] decode_block__preheader25_i_143;
reg [31:0] decode_block__preheader25_i_144;
reg [31:0] decode_block__preheader25_i_144_reg;
reg [31:0] decode_block__preheader25_i_145;
reg [31:0] decode_block__preheader25_i_146;
reg [31:0] decode_block__preheader25_i_147;
reg [31:0] decode_block__preheader25_i_147_reg;
reg [31:0] decode_block__preheader25_i_148;
reg [31:0] decode_block__preheader25_i_149;
reg [31:0] decode_block__preheader25_i_149_reg;
reg [31:0] decode_block__preheader25_i_150;
reg [31:0] decode_block__preheader25_i_151;
reg [31:0] decode_block__preheader25_i_151_reg;
reg [31:0] decode_block__preheader25_i_152;
reg [31:0] decode_block__preheader25_i_152_reg;
reg [31:0] decode_block__preheader25_i_153;
reg [31:0] decode_block__preheader25_i_154;
reg [31:0] decode_block__preheader25_i_155;
reg [31:0] decode_block__preheader25_i_155_reg;
reg [31:0] decode_block__preheader25_i_156;
reg [31:0] decode_block__preheader25_i_156_reg;
reg [31:0] decode_block__preheader25_i_157;
reg [31:0] decode_block__preheader25_i_158;
reg [31:0] decode_block__preheader25_i_159;
reg [31:0] decode_block__preheader25_i_159_reg;
reg [31:0] decode_block__preheader25_i_160;
reg [31:0] decode_block__preheader25_i_161;
reg [31:0] decode_block__preheader25_i_162;
reg [31:0] decode_block__preheader25_i_162_reg;
reg [31:0] decode_block__preheader25_i_163;
reg [31:0] decode_block__preheader25_i_164;
reg [31:0] decode_block__preheader25_i_165;
reg [31:0] decode_block__preheader25_i_165_reg;
reg [31:0] decode_block__preheader25_i_166;
reg [31:0] decode_block__preheader25_i_166_reg;
reg [31:0] decode_block__preheader25_i_167;
reg [31:0] decode_block__preheader25_i_168;
reg [31:0] decode_block__preheader25_i_169;
reg [31:0] decode_block__preheader25_i_169_reg;
reg [31:0] decode_block__preheader25_i_170;
reg [31:0] decode_block__preheader25_i_170_reg;
reg [31:0] decode_block__preheader25_i_171;
reg [31:0] decode_block__preheader25_i_172;
reg [31:0] decode_block__preheader25_i_173;
reg [31:0] decode_block__preheader25_i_173_reg;
reg [31:0] decode_block__preheader25_i_174;
reg [31:0] decode_block__preheader25_i_174_reg;
reg [31:0] decode_block__preheader25_i_175;
reg [31:0] decode_block__preheader25_i_175_reg;
reg [31:0] decode_block__preheader25_i_176;
reg [31:0] decode_block__preheader25_i_176_reg;
reg [31:0] decode_block__preheader25_i_177;
reg [31:0] decode_block__preheader25_i_177_reg;
reg [31:0] decode_block__preheader25_i_178;
reg [31:0] decode_block__preheader25_i_179;
reg [31:0] decode_block__preheader25_i_180;
reg [31:0] decode_block__preheader25_i_181;
reg [31:0] decode_block__preheader25_i_182;
reg [31:0] decode_block__preheader25_i_183;
reg [31:0] decode_block__preheader25_i_183_reg;
reg [31:0] decode_block__preheader25_i_184;
reg [31:0] decode_block__preheader25_i_185;
reg [31:0] decode_block__preheader25_i_186;
reg [31:0] decode_block__preheader25_i_186_reg;
reg [31:0] decode_block__preheader25_i_187;
reg [31:0] decode_block__preheader25_i_188;
reg [31:0] decode_block__preheader25_i_189;
reg [31:0] decode_block__preheader25_i_190;
reg [31:0] decode_block__preheader25_i_190_reg;
reg [31:0] decode_block__preheader25_i_191;
reg [31:0] decode_block__preheader25_i_191_reg;
reg [31:0] decode_block__preheader25_i_192;
reg [31:0] decode_block__preheader25_i_192_reg;
reg [31:0] decode_block__preheader25_i_193;
reg [31:0] decode_block__preheader25_i_193_reg;
reg [31:0] decode_block__preheader25_i_194;
reg [31:0] decode_block__preheader25_i_194_reg;
reg [31:0] decode_block__preheader25_i_195;
reg [31:0] decode_block__preheader25_i_195_reg;
reg [31:0] decode_block__preheader25_i_196;
reg [31:0] decode_block__preheader25_i_196_reg;
reg  decode_block__preheader25_i_exitcond28_i;
reg  decode_block__preheader25_i_exitcond28_i_reg;
reg [31:0] decode_block__preheader_i8_i_224_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i8_aptr_023_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block__preheader_i8_aptr_023_i_reg;
reg [31:0] decode_block__preheader_i8_197;
reg [31:0] decode_block__preheader_i8_198;
reg [31:0] decode_block__preheader_i8_199;
reg [31:0] decode_block__preheader_i8_200;
reg [31:0] decode_block__preheader_i8_201;
reg [31:0] decode_block__preheader_i8_201_reg;
reg [31:0] decode_block__preheader_i8_202;
reg [31:0] decode_block__preheader_i8_202_reg;
reg [31:0] decode_block__preheader_i8_203;
reg [31:0] decode_block__preheader_i8_203_reg;
reg  decode_block__preheader_i8_exitcond_i;
reg  decode_block__preheader_i8_exitcond_i_reg;
reg [31:0] decode_block_ChenIDct_exit_indvar_i1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_ChenIDct_exit_mptr_01_i2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_ChenIDct_exit_mptr_01_i2_reg;
reg [31:0] decode_block_ChenIDct_exit_tmp_i3;
reg [31:0] decode_block_ChenIDct_exit_tmp_i3_reg;
reg [31:0] decode_block_ChenIDct_exit_204;
reg [31:0] decode_block_ChenIDct_exit_205;
reg  decode_block_ChenIDct_exit_exitcond7;
reg  decode_block_ChenIDct_exit_exitcond7_reg;
reg [31:0] decode_block_PostshiftIDctMatrix_exit_indvar_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_PostshiftIDctMatrix_exit_mptr_01_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_PostshiftIDctMatrix_exit_mptr_01_i_reg;
reg [31:0] decode_block_PostshiftIDctMatrix_exit_tmp_i;
reg [31:0] decode_block_PostshiftIDctMatrix_exit_tmp_i_reg;
reg [31:0] decode_block_PostshiftIDctMatrix_exit_206;
reg [31:0] decode_block_PostshiftIDctMatrix_exit_206_reg;
reg  decode_block_PostshiftIDctMatrix_exit_207;
reg  decode_block_209_210;
reg  decode_block_212_exitcond;
reg  DecodeHuffman_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_arg_Xhuff_huffval;
reg [31:0] DecodeHuffman_arg_Dhuff_ml;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_arg_Dhuff_maxcode;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_arg_Dhuff_mincode;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_arg_Dhuff_valptr;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_memory_controller_address;
wire  DecodeHuffman_memory_controller_write_enable;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffman_memory_controller_in;
reg  DecodeHuffman_memory_controller_waitrequest;
wire  DecodeHuffman_memory_controller_enable;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] DecodeHuffman_memory_controller_out;
wire [1:0] DecodeHuffman_memory_controller_size;
wire  DecodeHuffman_finish;
wire [31:0] DecodeHuffman_return_val;
reg  legup_function_call;
reg  buf_getv_start;
reg [31:0] buf_getv_arg_n;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_memory_controller_address;
wire  buf_getv_memory_controller_write_enable;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] buf_getv_memory_controller_in;
reg  buf_getv_memory_controller_waitrequest;
wire  buf_getv_memory_controller_enable;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] buf_getv_memory_controller_out;
wire [1:0] buf_getv_memory_controller_size;
wire  buf_getv_finish;
wire [31:0] buf_getv_return_val;
reg [31:0] decode_block_signed_multiply_32_1_op0;
reg [31:0] decode_block_signed_multiply_32_1_op1;
reg [31:0] decode_block_signed_multiply_32_1;
reg [31:0] decode_block_signed_multiply_32_0_op0;
reg [31:0] decode_block_signed_multiply_32_0_op1;
reg [31:0] decode_block_signed_multiply_32_0;
reg [31:0] decode_block_signed_multiply_32_2_op0;
reg [31:0] decode_block_signed_multiply_32_2_op1;
reg [31:0] decode_block_signed_multiply_32_2;
reg [31:0] decode_block_signed_multiply_32_3_op0;
reg [31:0] decode_block_signed_multiply_32_3_op1;
reg [31:0] decode_block_signed_multiply_32_3;
reg [31:0] decode_block_signed_divide_32_0_op0;
reg [31:0] decode_block_signed_divide_32_0_op1;
reg [31:0] decode_block_signed_divide_32_0;
wire [31:0] lpm_divide_decode_block__preheader_i8_202_out;
wire [31:0] decode_block__preheader_i8_202_unused;
reg  lpm_divide_decode_block__preheader_i8_202_en;
reg [31:0] decode_block__lr_ph_i_indvar_i2_phi_temp;
reg [31:0] decode_block_24_diff_0_i_phi_temp;
reg [31:0] decode_block__backedge_i_k_0_i_phi_temp;
reg [31:0] decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp;
reg [31:0] decode_block_69_indvar_i4_phi_temp;
reg [31:0] decode_block_IQuantize_exit_i_027_i_phi_temp;
reg [31:0] decode_block__preheader25_i_i_126_i_phi_temp;
reg [31:0] decode_block__preheader_i8_i_224_i_phi_temp;
reg [31:0] decode_block_ChenIDct_exit_indvar_i1_phi_temp;
reg [31:0] decode_block_PostshiftIDctMatrix_exit_indvar_i_phi_temp;

/*   %202 = sdiv i32 %201, 16*/
lpm_divide lpm_divide_decode_block__preheader_i8_202 (
	.numer (decode_block_signed_divide_32_0_op0),
	.denom (decode_block_signed_divide_32_0_op1),
	.quotient (lpm_divide_decode_block__preheader_i8_202_out),
	.remain (decode_block__preheader_i8_202_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_decode_block__preheader_i8_202_en)
);

defparam
	lpm_divide_decode_block__preheader_i8_202.lpm_pipeline = 32,
	lpm_divide_decode_block__preheader_i8_202.lpm_widthd = 32,
	lpm_divide_decode_block__preheader_i8_202.lpm_widthn = 32,
	lpm_divide_decode_block__preheader_i8_202.lpm_drepresentation = "SIGNED",
	lpm_divide_decode_block__preheader_i8_202.lpm_nrepresentation = "SIGNED",
	lpm_divide_decode_block__preheader_i8_202.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


DecodeHuffman DecodeHuffman_inst (
	.clk (clk),
	.reset (reset),
	.start (DecodeHuffman_start),
	.finish (DecodeHuffman_finish),
	.return_val (DecodeHuffman_return_val),
	.memory_controller_address (DecodeHuffman_memory_controller_address),
	.memory_controller_write_enable (DecodeHuffman_memory_controller_write_enable),
	.memory_controller_enable (DecodeHuffman_memory_controller_enable),
	.memory_controller_in (DecodeHuffman_memory_controller_in),
	.memory_controller_size (DecodeHuffman_memory_controller_size),
	.memory_controller_waitrequest (DecodeHuffman_memory_controller_waitrequest),
	.memory_controller_out (DecodeHuffman_memory_controller_out),
	.arg_Xhuff_huffval (DecodeHuffman_arg_Xhuff_huffval),
	.arg_Dhuff_ml (DecodeHuffman_arg_Dhuff_ml),
	.arg_Dhuff_maxcode (DecodeHuffman_arg_Dhuff_maxcode),
	.arg_Dhuff_mincode (DecodeHuffman_arg_Dhuff_mincode),
	.arg_Dhuff_valptr (DecodeHuffman_arg_Dhuff_valptr)
);



buf_getv buf_getv_inst (
	.clk (clk),
	.reset (reset),
	.start (buf_getv_start),
	.finish (buf_getv_finish),
	.return_val (buf_getv_return_val),
	.memory_controller_address (buf_getv_memory_controller_address),
	.memory_controller_write_enable (buf_getv_memory_controller_write_enable),
	.memory_controller_enable (buf_getv_memory_controller_enable),
	.memory_controller_in (buf_getv_memory_controller_in),
	.memory_controller_size (buf_getv_memory_controller_size),
	.memory_controller_waitrequest (buf_getv_memory_controller_waitrequest),
	.memory_controller_out (buf_getv_memory_controller_out),
	.arg_n (buf_getv_arg_n)
);



always @(posedge clk) begin
if (reset == 1'd1)
begin
cur_state <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_1 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB0_2;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_2 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB0_2;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_2 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB0_3;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_3 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB0_3;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_3 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB0_4;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_4 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB0_4;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_4 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB0_5;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_5 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB0_5;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB0_5 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_6 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_6 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_6 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_6;
if (^reset !== 1'bX && ^(LEGUP_function_call_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_7 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_7;
if (^reset !== 1'bX && ^(LEGUP_function_call_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_7 & memory_controller_waitrequest == 1'd0 & decode_block_0_11 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB5_21;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB5_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_7 & memory_controller_waitrequest == 1'd0 & decode_block_0_11 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB1_8;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_8 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB1_8;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_8 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_9 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_9 & memory_controller_waitrequest == 1'd0 & buf_getv_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_9 & memory_controller_waitrequest == 1'd0 & buf_getv_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_9;
if (^reset !== 1'bX && ^(LEGUP_function_call_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_10 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_10;
if (^reset !== 1'bX && ^(LEGUP_function_call_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_10 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB1_11;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_11 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB1_11;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_11 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB1_12;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_12 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB1_12;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_12 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB1_13;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_13 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB1_13;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_13 & memory_controller_waitrequest == 1'd0 & decode_block_12_18 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB2_14;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB2_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB1_13 & memory_controller_waitrequest == 1'd0 & decode_block_12_18 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB3_17;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB2_14 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB2_14;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB2_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB2_14 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB2_15;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB2_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB2_15 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB2_15;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB2_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB2_15 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB2_16;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB2_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB2_16 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB2_16;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB2_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB2_16 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB3_17;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB3_17 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB3_17;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB3_17 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB3_18;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB3_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB3_18 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB3_18;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB3_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB3_18 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB3_19;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB3_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB3_19 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB3_19;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB3_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB3_19 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB5_21;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB5_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB4_20 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB4_20;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB4_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB4_20 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB6_22;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB5_21 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB5_21;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB5_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB5_21 & memory_controller_waitrequest == 1'd0 & decode_block__lr_ph_i_32 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB5_21;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB5_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB5_21 & memory_controller_waitrequest == 1'd0 & decode_block__lr_ph_i_32 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB4_20;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB4_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB6_22 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB6_22;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB6_22 & memory_controller_waitrequest == 1'd0 & decode_block__backedge_i_33 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB7_23;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB7_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB6_22 & memory_controller_waitrequest == 1'd0 & decode_block__backedge_i_33 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB14_42;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB7_23 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB7_23;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB7_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB7_23 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB7_24;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB7_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB7_24 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB7_24;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB7_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB7_24 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB7_25;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB7_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB7_25 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB7_25;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB7_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB7_25 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_26;
if (^reset !== 1'bX && ^(LEGUP_function_call_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_26 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_26;
if (^reset !== 1'bX && ^(LEGUP_function_call_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_26 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_27;
if (^reset !== 1'bX && ^(LEGUP_function_call_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_26 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_26;
if (^reset !== 1'bX && ^(LEGUP_function_call_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_27 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_27;
if (^reset !== 1'bX && ^(LEGUP_function_call_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_27 & memory_controller_waitrequest == 1'd0 & decode_block_34_40 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB12_40;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_27 & memory_controller_waitrequest == 1'd0 & decode_block_34_40 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB8_28;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB8_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB8_28 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB8_28;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB8_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB8_28 & memory_controller_waitrequest == 1'd0 & decode_block_41_43 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB14_42;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB8_28 & memory_controller_waitrequest == 1'd0 & decode_block_41_43 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB9_29;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_29 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB9_29;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_29 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_30;
if (^reset !== 1'bX && ^(LEGUP_function_call_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_30 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_30;
if (^reset !== 1'bX && ^(LEGUP_function_call_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_30 & memory_controller_waitrequest == 1'd0 & buf_getv_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_31;
if (^reset !== 1'bX && ^(LEGUP_function_call_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_30 & memory_controller_waitrequest == 1'd0 & buf_getv_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_30;
if (^reset !== 1'bX && ^(LEGUP_function_call_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_31 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_31;
if (^reset !== 1'bX && ^(LEGUP_function_call_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_31 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB9_32;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_32 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB9_32;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_32 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB9_33;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_33 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB9_33;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_33 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB9_34;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_34 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB9_34;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_34 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB9_35;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_35 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB9_35;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB9_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_35 & memory_controller_waitrequest == 1'd0 & decode_block_44_51 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB10_36;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB9_35 & memory_controller_waitrequest == 1'd0 & decode_block_44_51 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB11_39;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB11_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB10_36 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB10_36;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB10_36 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB10_37;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB10_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB10_37 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB10_37;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB10_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB10_37 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB10_38;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB10_38 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB10_38;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB10_38 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB11_39;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB11_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB11_39 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB11_39;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB11_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB11_39 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB6_22;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB12_40 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB12_40;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB12_40 & memory_controller_waitrequest == 1'd0 & decode_block_59_60 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB13_41;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB13_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB12_40 & memory_controller_waitrequest == 1'd0 & decode_block_59_60 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB14_42;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB13_41 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB13_41;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB13_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB13_41 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB6_22;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_42 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB14_42;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_42 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB14_43;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_43 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB14_43;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_43 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB14_44;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_44 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB14_44;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_44 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB14_45;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_45 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB14_45;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_45 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB14_46;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_46 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB14_46;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_46 & memory_controller_waitrequest == 1'd0 & decode_block_DecodeHuffMCU_exit_exitcond10_reg == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB15_47;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB15_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB14_46 & memory_controller_waitrequest == 1'd0 & decode_block_DecodeHuffMCU_exit_exitcond10_reg == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB14_42;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB14_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB15_47 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB15_47;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB15_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB15_47 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB15_48;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB15_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB15_48 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB15_48;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB15_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB15_48 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB15_49;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB15_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB15_49 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB15_49;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB15_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB15_49 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB16_50;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_50 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB16_50;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_50 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB16_51;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_51 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB16_51;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_51 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB16_52;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_52 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB16_52;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_52 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB16_53;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_53 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB16_53;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_53 & memory_controller_waitrequest == 1'd0 & decode_block_69_exitcond8_reg == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_54;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB16_53 & memory_controller_waitrequest == 1'd0 & decode_block_69_exitcond8_reg == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB16_50;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB16_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_54 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_54;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_54 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_55;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_55 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_55;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_55 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_56;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_56 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_56;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_56 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_57;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_57 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_57;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_57 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_58;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_58 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_58;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_58 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_59;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_59 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_59;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_59 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_60;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_60 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_60;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_60 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_61;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_61 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_61;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_61 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_62;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_62 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_62;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_62 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_63;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_63 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_63;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_63 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_64;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_64 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_64;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_64 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_65;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_65 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_65;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_65 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_66;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_66 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_66;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_66 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_67;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_67 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_67;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_67 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_68;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_68 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_68;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_68 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_69;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_69 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_69;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_69 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_70;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_70 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_70;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_70 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_71;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_71 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB17_71;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_71 & memory_controller_waitrequest == 1'd0 & decode_block_IQuantize_exit_exitcond43_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_72;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB17_71 & memory_controller_waitrequest == 1'd0 & decode_block_IQuantize_exit_exitcond43_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB17_54;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB17_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_72 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_72;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_72 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_73;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_73 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_73;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_73 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_74;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_74 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_74;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_74 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_75;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_75 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_75;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_75 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_76;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_76 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_76;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_76 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_77;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_77 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_77;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_77 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_78;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_78 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_78;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_78 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_79;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_79 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_79;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_79 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_80;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_80 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_80;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_80 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_81;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_81 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_81;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_81 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_82;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_82 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_82;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_82 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_83;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_83 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_83;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_83 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_84;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_84 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_84;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_84 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_85;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_85 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_85;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_85 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_86;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_86 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_86;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_86 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_87;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_87 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_87;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_87 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_88;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_88 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_88;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_88 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_89;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_89 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB18_89;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_89 & memory_controller_waitrequest == 1'd0 & decode_block__preheader25_i_exitcond28_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_90;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB18_89 & memory_controller_waitrequest == 1'd0 & decode_block__preheader25_i_exitcond28_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB18_72;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB18_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_90 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_90;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_90 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_91;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_91 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_91;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_91 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_92;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_92 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_92;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_92 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_93;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_93 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_93;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_93 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_94;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_94 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_94;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_94 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_95;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_95 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_95;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_95 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_96;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_96 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_96;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_96 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_97;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_97 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_97;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_97 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_98;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_98 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_98;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_98 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_99;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_99 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_99;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_99 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_100;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_100 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_100;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_100 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_101;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_101 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_101;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_101 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_102;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_102 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_102;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_102 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_103;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_103 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_103;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_103 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_104;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_104 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_104;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_104 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_105;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_105 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_105;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_105 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_106;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_106 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_106;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_106 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_107;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_107 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_107;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_107 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_108;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_108 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_108;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_108 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_109;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_109 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_109;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_109 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_110;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_110 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_110;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_110 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_111;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_111 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_111;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_111 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_112;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_112 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_112;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_112 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_113;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_113 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_113;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_113 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_114;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_114 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_114;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_114 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_115;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_115 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_115;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_115 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_116;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_116 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_116;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_116 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_117;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_117 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_117;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_117 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_118;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_118 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_118;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_118 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_119;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_119 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_119;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_119 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_120;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_120 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_120;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_120 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_121;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_121 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_121;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_121 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_122;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_122 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_122;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_122 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_123;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_123 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_123;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_123 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_124;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_124 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_124;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_124 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_125;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_125 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_125;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_125 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_126;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_126 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_126;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_126 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_127;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_127 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_127;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_127 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_128;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_128 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_128;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_128 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_129;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_129 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_129;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_129 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_130;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_130 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_130;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_130 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_131;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_131 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_131;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_131 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_132;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_132 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_132;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_132 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_133;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_133 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_133;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_133 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_134;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_134 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_134;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_134 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_135;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_135 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_135;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_135 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_136;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_136 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_136;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_136 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_137;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_137 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_137;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_137 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_138;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_138 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_138;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_138 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_139;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_139 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_139;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_139 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_140;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_140 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB19_140;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_140 & memory_controller_waitrequest == 1'd0 & decode_block__preheader_i8_exitcond_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB20_141;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB20_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB19_140 & memory_controller_waitrequest == 1'd0 & decode_block__preheader_i8_exitcond_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB19_90;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB19_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB20_141 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB20_141;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB20_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB20_141 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB20_142;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB20_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB20_142 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB20_142;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB20_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB20_142 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB20_143;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB20_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB20_143 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB20_143;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB20_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB20_143 & memory_controller_waitrequest == 1'd0 & decode_block_ChenIDct_exit_exitcond7_reg == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB21_144;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB21_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB20_143 & memory_controller_waitrequest == 1'd0 & decode_block_ChenIDct_exit_exitcond7_reg == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB20_141;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB20_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB21_144 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB21_144;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB21_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB21_144 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB21_145;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB21_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB21_145 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB21_145;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB21_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB21_145 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB21_146;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB21_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB21_146 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB21_146;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB21_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB21_146 & memory_controller_waitrequest == 1'd0 & decode_block_PostshiftIDctMatrix_exit_207 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB22_147;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB22_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB21_146 & memory_controller_waitrequest == 1'd0 & decode_block_PostshiftIDctMatrix_exit_207 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB23_148;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB23_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB22_147 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB22_147;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB22_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB22_147 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB25_150;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB25_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB23_148 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB23_148;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB23_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB23_148 & memory_controller_waitrequest == 1'd0 & decode_block_209_210 == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB24_149;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB24_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB23_148 & memory_controller_waitrequest == 1'd0 & decode_block_209_210 == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB25_150;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB25_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB24_149 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB24_149;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB24_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB24_149 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB25_150;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB25_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB25_150 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB25_150;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB25_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB25_150 & memory_controller_waitrequest == 1'd0 & decode_block_212_exitcond == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB26_151;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB26_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB25_150 & memory_controller_waitrequest == 1'd0 & decode_block_212_exitcond == 1'd0)
begin
cur_state <= LEGUP_F_decode_block_BB21_144;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB21_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB26_151 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_decode_block_BB26_151;
if (^reset !== 1'bX && ^(LEGUP_F_decode_block_BB26_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_decode_block_BB26_151 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* decode_block: %0*/
/*   %1 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %comp_no*/
begin
decode_block_0_1 = `TAG_g_p_jinfo_comps_info_dc_tbl_no_a + 1 * arg_comp_no;
end
end
always @(*) begin
/* decode_block: %0*/
/*   %2 = load i8* %1, align 1, !tbaa !0*/
begin
decode_block_0_2 = memory_controller_out[7:0];
end
end
always @(*) begin
/* decode_block: %0*/
/*   %3 = sext i8 %2 to i32*/
begin
decode_block_0_3 = $signed(decode_block_0_2);
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %3 = sext i8 %2 to i32*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
decode_block_0_3_reg <= decode_block_0_3;
if (^reset !== 1'bX && ^(decode_block_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_0_3_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %0*/
/*   %4 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %3, i32 0*/
begin
decode_block_0_4 = `TAG_g_p_jinfo_dc_xhuff_tbl_huffval_a + 1028 * decode_block_0_3;
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %4 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %3, i32 0*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
decode_block_0_4_reg <= decode_block_0_4;
if (^reset !== 1'bX && ^(decode_block_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_0_4_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %0*/
/*   %5 = getelementptr inbounds [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 %3*/
begin
decode_block_0_5 = `TAG_g_p_jinfo_dc_dhuff_tbl_ml_a + 4 * decode_block_0_3;
end
end
always @(*) begin
/* decode_block: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !2*/
begin
decode_block_0_6 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %0*/
/*   %7 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0*/
begin
decode_block_0_7 = `TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a + 144 * decode_block_0_3;
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %7 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
decode_block_0_7_reg <= decode_block_0_7;
if (^reset !== 1'bX && ^(decode_block_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_0_7_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %0*/
/*   %8 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 %3, i32 0*/
begin
decode_block_0_8 = `TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a + 144 * decode_block_0_3;
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %8 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 %3, i32 0*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
decode_block_0_8_reg <= decode_block_0_8;
if (^reset !== 1'bX && ^(decode_block_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_0_8_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %0*/
/*   %9 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 %3, i32 0*/
begin
decode_block_0_9 = `TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a + 144 * decode_block_0_3;
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %9 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 %3, i32 0*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
decode_block_0_9_reg <= decode_block_0_9;
if (^reset !== 1'bX && ^(decode_block_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_0_9_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
begin
decode_block_0_10 = DecodeHuffman_return_val;
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
decode_block_0_10_reg <= decode_block_0_10;
if (^reset !== 1'bX && ^(decode_block_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_0_10_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %0*/
/*   %11 = icmp eq i32 %10, 0*/
begin
decode_block_0_11 = decode_block_0_10_reg == 32'd0;
end
end
always @(*) begin
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
begin
decode_block_12_13 = buf_getv_return_val;
end
end
always @(posedge clk) begin
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
decode_block_12_13_reg <= decode_block_12_13;
if (^reset !== 1'bX && ^(decode_block_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_12_13_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %12*/
/*   %14 = add nsw i32 %10, -1*/
begin
decode_block_12_14 = decode_block_0_10_reg + -32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %12*/
/*   %14 = add nsw i32 %10, -1*/
if (cur_state == LEGUP_function_call_10)
begin
decode_block_12_14_reg <= decode_block_12_14;
if (^reset !== 1'bX && ^(decode_block_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_12_14_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %12*/
/*   %15 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %14*/
begin
decode_block_12_15 = `TAG_g_bit_set_mask_a + 4 * decode_block_12_14;
end
end
always @(posedge clk) begin
/* decode_block: %12*/
/*   %15 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %14*/
if (cur_state == LEGUP_function_call_10)
begin
decode_block_12_15_reg <= decode_block_12_15;
if (^reset !== 1'bX && ^(decode_block_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_12_15_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !2*/
begin
decode_block_12_16 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %12*/
/*   %17 = and i32 %16, %13*/
begin
decode_block_12_17 = decode_block_12_16 & decode_block_12_13_reg;
end
end
always @(*) begin
/* decode_block: %12*/
/*   %18 = icmp eq i32 %17, 0*/
begin
decode_block_12_18 = decode_block_12_17 == 32'd0;
end
end
always @(*) begin
/* decode_block: %19*/
/*   %20 = getelementptr inbounds [20 x i32]* @extend_mask, i32 0, i32 %14*/
begin
decode_block_19_20 = `TAG_g_extend_mask_a + 4 * decode_block_12_14_reg;
end
end
always @(*) begin
/* decode_block: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !2*/
begin
decode_block_19_21 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %19*/
/*   %22 = or i32 %21, %13*/
begin
decode_block_19_22 = decode_block_19_21 | decode_block_12_13_reg;
end
end
always @(*) begin
/* decode_block: %19*/
/*   %23 = add nsw i32 %22, 1*/
begin
decode_block_19_23 = decode_block_19_22 + 32'd1;
end
end
always @(*) begin
/* decode_block: %24*/
/*   %diff.0.i = phi i32 [ %23, %19 ], [ %13, %12 ]*/
if (cur_state == LEGUP_F_decode_block_BB3_17)
begin
decode_block_24_diff_0_i = decode_block_24_diff_0_i_phi_temp;
end
/* decode_block: %24*/
/*   %diff.0.i = phi i32 [ %23, %19 ], [ %13, %12 ]*/
else /* if (cur_state == LEGUP_F_decode_block_BB3_17) */
begin
decode_block_24_diff_0_i = decode_block_24_diff_0_i_phi_temp;
end
end
always @(posedge clk) begin
/* decode_block: %24*/
/*   %diff.0.i = phi i32 [ %23, %19 ], [ %13, %12 ]*/
if (cur_state == LEGUP_F_decode_block_BB3_17)
begin
decode_block_24_diff_0_i_reg <= decode_block_24_diff_0_i;
if (^reset !== 1'bX && ^(decode_block_24_diff_0_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_24_diff_0_i_reg"); $finish; end
end
/* decode_block: %24*/
/*   %diff.0.i = phi i32 [ %23, %19 ], [ %13, %12 ]*/
if (cur_state == LEGUP_F_decode_block_BB3_17)
begin
decode_block_24_diff_0_i_reg <= decode_block_24_diff_0_i;
if (^reset !== 1'bX && ^(decode_block_24_diff_0_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_24_diff_0_i_reg"); $finish; end
end
/* decode_block: %24*/
/*   %diff.0.i = phi i32 [ %23, %19 ], [ %13, %12 ]*/
if (cur_state == LEGUP_F_decode_block_BB3_17)
begin
decode_block_24_diff_0_i_reg <= decode_block_24_diff_0_i;
if (^reset !== 1'bX && ^(decode_block_24_diff_0_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_24_diff_0_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %24*/
/*   %25 = load i32* %HuffBuff, align 4, !tbaa !2*/
begin
decode_block_24_25 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %24*/
/*   %26 = add nsw i32 %25, %diff.0.i*/
begin
decode_block_24_26 = decode_block_24_25 + decode_block_24_diff_0_i_reg;
end
end
always @(*) begin
/* decode_block: %.preheader.i*/
/*   %27 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %3, i32 0*/
begin
decode_block__preheader_i_27 = `TAG_g_p_jinfo_ac_xhuff_tbl_huffval_a + 1028 * decode_block_0_3_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i*/
/*   %27 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %3, i32 0*/
if (cur_state == LEGUP_F_decode_block_BB4_20)
begin
decode_block__preheader_i_27_reg <= decode_block__preheader_i_27;
if (^reset !== 1'bX && ^(decode_block__preheader_i_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i_27_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader.i*/
/*   %28 = getelementptr inbounds [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 %3*/
begin
decode_block__preheader_i_28 = `TAG_g_p_jinfo_ac_dhuff_tbl_ml_a + 4 * decode_block_0_3_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i*/
/*   %28 = getelementptr inbounds [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 %3*/
if (cur_state == LEGUP_F_decode_block_BB4_20)
begin
decode_block__preheader_i_28_reg <= decode_block__preheader_i_28;
if (^reset !== 1'bX && ^(decode_block__preheader_i_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i_28_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader.i*/
/*   %29 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0*/
begin
decode_block__preheader_i_29 = `TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a + 144 * decode_block_0_3_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i*/
/*   %29 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 %3, i32 0*/
if (cur_state == LEGUP_F_decode_block_BB4_20)
begin
decode_block__preheader_i_29_reg <= decode_block__preheader_i_29;
if (^reset !== 1'bX && ^(decode_block__preheader_i_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i_29_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader.i*/
/*   %30 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 %3, i32 0*/
begin
decode_block__preheader_i_30 = `TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a + 144 * decode_block_0_3_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i*/
/*   %30 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 %3, i32 0*/
if (cur_state == LEGUP_F_decode_block_BB4_20)
begin
decode_block__preheader_i_30_reg <= decode_block__preheader_i_30;
if (^reset !== 1'bX && ^(decode_block__preheader_i_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i_30_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader.i*/
/*   %31 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 %3, i32 0*/
begin
decode_block__preheader_i_31 = `TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a + 144 * decode_block_0_3_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i*/
/*   %31 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 %3, i32 0*/
if (cur_state == LEGUP_F_decode_block_BB4_20)
begin
decode_block__preheader_i_31_reg <= decode_block__preheader_i_31;
if (^reset !== 1'bX && ^(decode_block__preheader_i_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i_31_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.lr.ph.i*/
/*   %indvar.i2 = phi i32 [ %tmp4.i, %.lr.ph.i ], [ 0, %0 ], [ 0, %24 ]*/
begin
decode_block__lr_ph_i_indvar_i2 = decode_block__lr_ph_i_indvar_i2_phi_temp;
end
end
always @(*) begin
/* decode_block: %.lr.ph.i*/
/*   %tmp.i4 = add i32 %indvar.i2, 2*/
begin
decode_block__lr_ph_i_tmp_i4 = decode_block__lr_ph_i_indvar_i2 + 32'd2;
end
end
always @(*) begin
/* decode_block: %.lr.ph.i*/
/*   %tmp4.i = add i32 %indvar.i2, 1*/
begin
decode_block__lr_ph_i_tmp4_i = decode_block__lr_ph_i_indvar_i2 + 32'd1;
end
end
always @(*) begin
/* decode_block: %.lr.ph.i*/
/*   %mptr.03.i = getelementptr i32* %HuffBuff, i32 %tmp4.i*/
begin
decode_block__lr_ph_i_mptr_03_i = arg_HuffBuff + 4 * decode_block__lr_ph_i_tmp4_i;
end
end
always @(*) begin
/* decode_block: %.lr.ph.i*/
/*   %32 = icmp slt i32 %tmp.i4, 64*/
begin
decode_block__lr_ph_i_32 = $signed(decode_block__lr_ph_i_tmp_i4) < $signed(32'd64);
end
end
always @(*) begin
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
if (cur_state == LEGUP_F_decode_block_BB6_22)
begin
decode_block__backedge_i_k_0_i = decode_block__backedge_i_k_0_i_phi_temp;
end
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
else if (cur_state == LEGUP_F_decode_block_BB6_22)
begin
decode_block__backedge_i_k_0_i = decode_block__backedge_i_k_0_i_phi_temp;
end
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
else /* if (cur_state == LEGUP_F_decode_block_BB6_22) */
begin
decode_block__backedge_i_k_0_i = decode_block__backedge_i_k_0_i_phi_temp;
end
end
always @(posedge clk) begin
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
if (cur_state == LEGUP_F_decode_block_BB6_22)
begin
decode_block__backedge_i_k_0_i_reg <= decode_block__backedge_i_k_0_i;
if (^reset !== 1'bX && ^(decode_block__backedge_i_k_0_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__backedge_i_k_0_i_reg"); $finish; end
end
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
if (cur_state == LEGUP_F_decode_block_BB6_22)
begin
decode_block__backedge_i_k_0_i_reg <= decode_block__backedge_i_k_0_i;
if (^reset !== 1'bX && ^(decode_block__backedge_i_k_0_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__backedge_i_k_0_i_reg"); $finish; end
end
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
if (cur_state == LEGUP_F_decode_block_BB6_22)
begin
decode_block__backedge_i_k_0_i_reg <= decode_block__backedge_i_k_0_i;
if (^reset !== 1'bX && ^(decode_block__backedge_i_k_0_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__backedge_i_k_0_i_reg"); $finish; end
end
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
if (cur_state == LEGUP_F_decode_block_BB6_22)
begin
decode_block__backedge_i_k_0_i_reg <= decode_block__backedge_i_k_0_i;
if (^reset !== 1'bX && ^(decode_block__backedge_i_k_0_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__backedge_i_k_0_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.backedge.i*/
/*   %33 = icmp slt i32 %k.0.i, 64*/
begin
decode_block__backedge_i_33 = $signed(decode_block__backedge_i_k_0_i) < $signed(32'd64);
end
end
always @(*) begin
/* decode_block: %34*/
/*   %35 = load i32* %28, align 4, !tbaa !2*/
begin
decode_block_34_35 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
begin
decode_block_34_36 = DecodeHuffman_return_val;
end
end
always @(posedge clk) begin
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
decode_block_34_36_reg <= decode_block_34_36;
if (^reset !== 1'bX && ^(decode_block_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_34_36_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %34*/
/*   %37 = and i32 %36, 15*/
begin
decode_block_34_37 = decode_block_34_36_reg & 32'd15;
end
end
always @(posedge clk) begin
/* decode_block: %34*/
/*   %37 = and i32 %36, 15*/
if (cur_state == LEGUP_function_call_27)
begin
decode_block_34_37_reg <= decode_block_34_37;
if (^reset !== 1'bX && ^(decode_block_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_34_37_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %34*/
/*   %38 = lshr i32 %36, 4*/
begin
decode_block_34_38 = decode_block_34_36_reg >>> 32'd4 % 32;
end
end
always @(*) begin
/* decode_block: %34*/
/*   %39 = and i32 %38, 15*/
begin
decode_block_34_39 = decode_block_34_38 & 32'd15;
end
end
always @(posedge clk) begin
/* decode_block: %34*/
/*   %39 = and i32 %38, 15*/
if (cur_state == LEGUP_function_call_27)
begin
decode_block_34_39_reg <= decode_block_34_39;
if (^reset !== 1'bX && ^(decode_block_34_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_34_39_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %34*/
/*   %40 = icmp eq i32 %37, 0*/
begin
decode_block_34_40 = decode_block_34_37 == 32'd0;
end
end
always @(*) begin
/* decode_block: %41*/
/*   %42 = add nsw i32 %39, %k.0.i*/
begin
decode_block_41_42 = decode_block_34_39_reg + decode_block__backedge_i_k_0_i_reg;
end
end
always @(posedge clk) begin
/* decode_block: %41*/
/*   %42 = add nsw i32 %39, %k.0.i*/
if (cur_state == LEGUP_F_decode_block_BB8_28)
begin
decode_block_41_42_reg <= decode_block_41_42;
if (^reset !== 1'bX && ^(decode_block_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_41_42_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %41*/
/*   %43 = icmp sgt i32 %42, 63*/
begin
decode_block_41_43 = $signed(decode_block_41_42) > $signed(32'd63);
end
end
always @(*) begin
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
begin
decode_block_44_45 = buf_getv_return_val;
end
end
always @(posedge clk) begin
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
decode_block_44_45_reg <= decode_block_44_45;
if (^reset !== 1'bX && ^(decode_block_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_44_45_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %44*/
/*   %46 = getelementptr inbounds i32* %HuffBuff, i32 %42*/
begin
decode_block_44_46 = arg_HuffBuff + 4 * decode_block_41_42_reg;
end
end
always @(posedge clk) begin
/* decode_block: %44*/
/*   %46 = getelementptr inbounds i32* %HuffBuff, i32 %42*/
if (cur_state == LEGUP_function_call_31)
begin
decode_block_44_46_reg <= decode_block_44_46;
if (^reset !== 1'bX && ^(decode_block_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_44_46_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %44*/
/*   %47 = add nsw i32 %37, -1*/
begin
decode_block_44_47 = decode_block_34_37_reg + -32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %44*/
/*   %47 = add nsw i32 %37, -1*/
if (cur_state == LEGUP_function_call_31)
begin
decode_block_44_47_reg <= decode_block_44_47;
if (^reset !== 1'bX && ^(decode_block_44_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_44_47_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %44*/
/*   %48 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %47*/
begin
decode_block_44_48 = `TAG_g_bit_set_mask_a + 4 * decode_block_44_47;
end
end
always @(posedge clk) begin
/* decode_block: %44*/
/*   %48 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %47*/
if (cur_state == LEGUP_function_call_31)
begin
decode_block_44_48_reg <= decode_block_44_48;
if (^reset !== 1'bX && ^(decode_block_44_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_44_48_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !2*/
begin
decode_block_44_49 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %44*/
/*   %50 = and i32 %49, %45*/
begin
decode_block_44_50 = decode_block_44_49 & decode_block_44_45_reg;
end
end
always @(*) begin
/* decode_block: %44*/
/*   %51 = icmp eq i32 %50, 0*/
begin
decode_block_44_51 = decode_block_44_50 == 32'd0;
end
end
always @(*) begin
/* decode_block: %52*/
/*   %53 = getelementptr inbounds [20 x i32]* @extend_mask, i32 0, i32 %47*/
begin
decode_block_52_53 = `TAG_g_extend_mask_a + 4 * decode_block_44_47_reg;
end
end
always @(*) begin
/* decode_block: %52*/
/*   %54 = load i32* %53, align 4, !tbaa !2*/
begin
decode_block_52_54 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %52*/
/*   %55 = or i32 %54, %45*/
begin
decode_block_52_55 = decode_block_52_54 | decode_block_44_45_reg;
end
end
always @(*) begin
/* decode_block: %52*/
/*   %56 = add nsw i32 %55, 1*/
begin
decode_block_52_56 = decode_block_52_55 + 32'd1;
end
end
always @(*) begin
/* decode_block: %57*/
/*   %58 = add nsw i32 %42, 1*/
begin
decode_block_57_58 = decode_block_41_42_reg + 32'd1;
end
end
always @(*) begin
/* decode_block: %59*/
/*   %60 = icmp eq i32 %39, 15*/
begin
decode_block_59_60 = decode_block_34_39_reg == 32'd15;
end
end
always @(*) begin
/* decode_block: %61*/
/*   %62 = add nsw i32 %k.0.i, 16*/
begin
decode_block_61_62 = decode_block__backedge_i_k_0_i_reg + 32'd16;
end
end
always @(*) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %i.02.i = phi i32 [ %66, %DecodeHuffMCU.exit ], [ 0, %.backedge.i ], [ 0, %41 ], [ 0, %59 ]*/
begin
decode_block_DecodeHuffMCU_exit_i_02_i = decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp;
end
end
always @(*) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %.01.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %i.02.i*/
begin
decode_block_DecodeHuffMCU_exit__01_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_DecodeHuffMCU_exit_i_02_i;
end
end
always @(posedge clk) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %.01.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %i.02.i*/
if (cur_state == LEGUP_F_decode_block_BB14_42)
begin
decode_block_DecodeHuffMCU_exit__01_i_reg <= decode_block_DecodeHuffMCU_exit__01_i;
if (^reset !== 1'bX && ^(decode_block_DecodeHuffMCU_exit__01_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_DecodeHuffMCU_exit__01_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %scevgep.i = getelementptr [64 x i32]* @zigzag_index, i32 0, i32 %i.02.i*/
begin
decode_block_DecodeHuffMCU_exit_scevgep_i = `TAG_g_zigzag_index_a + 4 * decode_block_DecodeHuffMCU_exit_i_02_i;
end
end
always @(*) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %63 = load i32* %scevgep.i, align 4, !tbaa !2*/
begin
decode_block_DecodeHuffMCU_exit_63 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %64 = getelementptr inbounds i32* %HuffBuff, i32 %63*/
begin
decode_block_DecodeHuffMCU_exit_64 = arg_HuffBuff + 4 * decode_block_DecodeHuffMCU_exit_63;
end
end
always @(*) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %65 = load i32* %64, align 4, !tbaa !2*/
begin
decode_block_DecodeHuffMCU_exit_65 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %66 = add nsw i32 %i.02.i, 1*/
begin
decode_block_DecodeHuffMCU_exit_66 = decode_block_DecodeHuffMCU_exit_i_02_i + 32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %66 = add nsw i32 %i.02.i, 1*/
if (cur_state == LEGUP_F_decode_block_BB14_42)
begin
decode_block_DecodeHuffMCU_exit_66_reg <= decode_block_DecodeHuffMCU_exit_66;
if (^reset !== 1'bX && ^(decode_block_DecodeHuffMCU_exit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_DecodeHuffMCU_exit_66_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %exitcond10 = icmp eq i32 %66, 64*/
begin
decode_block_DecodeHuffMCU_exit_exitcond10 = decode_block_DecodeHuffMCU_exit_66 == 32'd64;
end
end
always @(posedge clk) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %exitcond10 = icmp eq i32 %66, 64*/
if (cur_state == LEGUP_F_decode_block_BB14_42)
begin
decode_block_DecodeHuffMCU_exit_exitcond10_reg <= decode_block_DecodeHuffMCU_exit_exitcond10;
if (^reset !== 1'bX && ^(decode_block_DecodeHuffMCU_exit_exitcond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_DecodeHuffMCU_exit_exitcond10_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IZigzagMatrix.exit*/
/*   %67 = getelementptr inbounds [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 %comp_no*/
begin
decode_block_IZigzagMatrix_exit_67 = `TAG_g_p_jinfo_comps_info_quant_tbl_no_a + 1 * arg_comp_no;
end
end
always @(*) begin
/* decode_block: %IZigzagMatrix.exit*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
begin
decode_block_IZigzagMatrix_exit_68 = memory_controller_out[7:0];
end
end
always @(*) begin
/* decode_block: %IZigzagMatrix.exit*/
/*   %tmp = sext i8 %68 to i32*/
begin
decode_block_IZigzagMatrix_exit_tmp = $signed(decode_block_IZigzagMatrix_exit_68);
end
end
always @(*) begin
/* decode_block: %IZigzagMatrix.exit*/
/*   %tmp9 = add i32 %tmp, 1*/
begin
decode_block_IZigzagMatrix_exit_tmp9 = decode_block_IZigzagMatrix_exit_tmp + 32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %IZigzagMatrix.exit*/
/*   %tmp9 = add i32 %tmp, 1*/
if (cur_state == LEGUP_F_decode_block_BB15_49)
begin
decode_block_IZigzagMatrix_exit_tmp9_reg <= decode_block_IZigzagMatrix_exit_tmp9;
if (^reset !== 1'bX && ^(decode_block_IZigzagMatrix_exit_tmp9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IZigzagMatrix_exit_tmp9_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %69*/
/*   %indvar.i4 = phi i32 [ 0, %IZigzagMatrix.exit ], [ %tmp.i5, %69 ]*/
begin
decode_block_69_indvar_i4 = decode_block_69_indvar_i4_phi_temp;
end
end
always @(*) begin
/* decode_block: %69*/
/*   %.01.i6 = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %tmp9, i32 %indvar.i4*/
begin
decode_block_69__01_i6 = `TAG_g_p_jinfo_quant_tbl_quantval_a + 256 * decode_block_IZigzagMatrix_exit_tmp9_reg + 4 * decode_block_69_indvar_i4;
end
end
always @(posedge clk) begin
/* decode_block: %69*/
/*   %.01.i6 = getelementptr [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %tmp9, i32 %indvar.i4*/
if (cur_state == LEGUP_F_decode_block_BB16_50)
begin
decode_block_69__01_i6_reg <= decode_block_69__01_i6;
if (^reset !== 1'bX && ^(decode_block_69__01_i6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_69__01_i6_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %69*/
/*   %mptr.02.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %indvar.i4*/
begin
decode_block_69_mptr_02_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_69_indvar_i4;
end
end
always @(posedge clk) begin
/* decode_block: %69*/
/*   %mptr.02.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %indvar.i4*/
if (cur_state == LEGUP_F_decode_block_BB16_50)
begin
decode_block_69_mptr_02_i_reg <= decode_block_69_mptr_02_i;
if (^reset !== 1'bX && ^(decode_block_69_mptr_02_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_69_mptr_02_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %69*/
/*   %tmp.i5 = add i32 %indvar.i4, 1*/
begin
decode_block_69_tmp_i5 = decode_block_69_indvar_i4 + 32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %69*/
/*   %tmp.i5 = add i32 %indvar.i4, 1*/
if (cur_state == LEGUP_F_decode_block_BB16_50)
begin
decode_block_69_tmp_i5_reg <= decode_block_69_tmp_i5;
if (^reset !== 1'bX && ^(decode_block_69_tmp_i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_69_tmp_i5_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %69*/
/*   %70 = load i32* %mptr.02.i, align 4, !tbaa !2*/
begin
decode_block_69_70 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* decode_block: %69*/
/*   %70 = load i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_52)
begin
decode_block_69_70_reg <= decode_block_69_70;
if (^reset !== 1'bX && ^(decode_block_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_69_70_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %69*/
/*   %71 = load i32* %.01.i6, align 4, !tbaa !2*/
begin
decode_block_69_71 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %69*/
/*   %72 = mul nsw i32 %71, %70*/
begin
decode_block_69_72 = decode_block_signed_multiply_32_0;
end
end
always @(*) begin
/* decode_block: %69*/
/*   %exitcond8 = icmp eq i32 %tmp.i5, 64*/
begin
decode_block_69_exitcond8 = decode_block_69_tmp_i5 == 32'd64;
end
end
always @(posedge clk) begin
/* decode_block: %69*/
/*   %exitcond8 = icmp eq i32 %tmp.i5, 64*/
if (cur_state == LEGUP_F_decode_block_BB16_50)
begin
decode_block_69_exitcond8_reg <= decode_block_69_exitcond8;
if (^reset !== 1'bX && ^(decode_block_69_exitcond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_69_exitcond8_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %i.027.i = phi i32 [ %135, %IQuantize.exit ], [ 0, %69 ]*/
begin
decode_block_IQuantize_exit_i_027_i = decode_block_IQuantize_exit_i_027_i_phi_temp;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep44.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %i.027.i*/
begin
decode_block_IQuantize_exit_scevgep44_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_IQuantize_exit_i_027_i;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep45.i = getelementptr i32* %out_buf, i32 %i.027.i*/
begin
decode_block_IQuantize_exit_scevgep45_i = arg_out_buf + 4 * decode_block_IQuantize_exit_i_027_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep45.i = getelementptr i32* %out_buf, i32 %i.027.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep45_i_reg <= decode_block_IQuantize_exit_scevgep45_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep45_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep45_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %tmp46.i = add i32 %i.027.i, 8*/
begin
decode_block_IQuantize_exit_tmp46_i = decode_block_IQuantize_exit_i_027_i + 32'd8;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep47.i = getelementptr i32* %out_buf, i32 %tmp46.i*/
begin
decode_block_IQuantize_exit_scevgep47_i = arg_out_buf + 4 * decode_block_IQuantize_exit_tmp46_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep47.i = getelementptr i32* %out_buf, i32 %tmp46.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep47_i_reg <= decode_block_IQuantize_exit_scevgep47_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep47_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep47_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep48.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp46.i*/
begin
decode_block_IQuantize_exit_scevgep48_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_IQuantize_exit_tmp46_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep48.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp46.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep48_i_reg <= decode_block_IQuantize_exit_scevgep48_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep48_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep48_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %tmp49.i = add i32 %i.027.i, 16*/
begin
decode_block_IQuantize_exit_tmp49_i = decode_block_IQuantize_exit_i_027_i + 32'd16;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep50.i = getelementptr i32* %out_buf, i32 %tmp49.i*/
begin
decode_block_IQuantize_exit_scevgep50_i = arg_out_buf + 4 * decode_block_IQuantize_exit_tmp49_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep50.i = getelementptr i32* %out_buf, i32 %tmp49.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep50_i_reg <= decode_block_IQuantize_exit_scevgep50_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep50_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep50_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep51.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp49.i*/
begin
decode_block_IQuantize_exit_scevgep51_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_IQuantize_exit_tmp49_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep51.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp49.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep51_i_reg <= decode_block_IQuantize_exit_scevgep51_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep51_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep51_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %tmp52.i = add i32 %i.027.i, 24*/
begin
decode_block_IQuantize_exit_tmp52_i = decode_block_IQuantize_exit_i_027_i + 32'd24;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep53.i = getelementptr i32* %out_buf, i32 %tmp52.i*/
begin
decode_block_IQuantize_exit_scevgep53_i = arg_out_buf + 4 * decode_block_IQuantize_exit_tmp52_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep53.i = getelementptr i32* %out_buf, i32 %tmp52.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep53_i_reg <= decode_block_IQuantize_exit_scevgep53_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep53_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep53_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep54.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp52.i*/
begin
decode_block_IQuantize_exit_scevgep54_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_IQuantize_exit_tmp52_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep54.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp52.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep54_i_reg <= decode_block_IQuantize_exit_scevgep54_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep54_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep54_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %tmp55.i = add i32 %i.027.i, 32*/
begin
decode_block_IQuantize_exit_tmp55_i = decode_block_IQuantize_exit_i_027_i + 32'd32;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep56.i = getelementptr i32* %out_buf, i32 %tmp55.i*/
begin
decode_block_IQuantize_exit_scevgep56_i = arg_out_buf + 4 * decode_block_IQuantize_exit_tmp55_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep56.i = getelementptr i32* %out_buf, i32 %tmp55.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep56_i_reg <= decode_block_IQuantize_exit_scevgep56_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep56_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep56_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep57.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp55.i*/
begin
decode_block_IQuantize_exit_scevgep57_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_IQuantize_exit_tmp55_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep57.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp55.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep57_i_reg <= decode_block_IQuantize_exit_scevgep57_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep57_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep57_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %tmp58.i = add i32 %i.027.i, 40*/
begin
decode_block_IQuantize_exit_tmp58_i = decode_block_IQuantize_exit_i_027_i + 32'd40;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep59.i = getelementptr i32* %out_buf, i32 %tmp58.i*/
begin
decode_block_IQuantize_exit_scevgep59_i = arg_out_buf + 4 * decode_block_IQuantize_exit_tmp58_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep59.i = getelementptr i32* %out_buf, i32 %tmp58.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep59_i_reg <= decode_block_IQuantize_exit_scevgep59_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep59_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep59_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep60.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp58.i*/
begin
decode_block_IQuantize_exit_scevgep60_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_IQuantize_exit_tmp58_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep60.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp58.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep60_i_reg <= decode_block_IQuantize_exit_scevgep60_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep60_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep60_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %tmp61.i = add i32 %i.027.i, 48*/
begin
decode_block_IQuantize_exit_tmp61_i = decode_block_IQuantize_exit_i_027_i + 32'd48;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep62.i = getelementptr i32* %out_buf, i32 %tmp61.i*/
begin
decode_block_IQuantize_exit_scevgep62_i = arg_out_buf + 4 * decode_block_IQuantize_exit_tmp61_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep62.i = getelementptr i32* %out_buf, i32 %tmp61.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep62_i_reg <= decode_block_IQuantize_exit_scevgep62_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep62_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep62_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep63.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp61.i*/
begin
decode_block_IQuantize_exit_scevgep63_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_IQuantize_exit_tmp61_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep63.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp61.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep63_i_reg <= decode_block_IQuantize_exit_scevgep63_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep63_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep63_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %tmp64.i = add i32 %i.027.i, 56*/
begin
decode_block_IQuantize_exit_tmp64_i = decode_block_IQuantize_exit_i_027_i + 32'd56;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep65.i = getelementptr i32* %out_buf, i32 %tmp64.i*/
begin
decode_block_IQuantize_exit_scevgep65_i = arg_out_buf + 4 * decode_block_IQuantize_exit_tmp64_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep65.i = getelementptr i32* %out_buf, i32 %tmp64.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep65_i_reg <= decode_block_IQuantize_exit_scevgep65_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep65_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep65_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep66.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp64.i*/
begin
decode_block_IQuantize_exit_scevgep66_i = `TAG_decode_block_0_QuantBuff_a + 4 * decode_block_IQuantize_exit_tmp64_i;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %scevgep66.i = getelementptr [64 x i32]* %QuantBuff, i32 0, i32 %tmp64.i*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_scevgep66_i_reg <= decode_block_IQuantize_exit_scevgep66_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_scevgep66_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_scevgep66_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %73 = load i32* %scevgep44.i, align 4, !tbaa !2*/
begin
decode_block_IQuantize_exit_73 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %74 = shl i32 %73, 2*/
begin
decode_block_IQuantize_exit_74 = decode_block_IQuantize_exit_73 <<< 32'd2 % 32;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %74 = shl i32 %73, 2*/
if (cur_state == LEGUP_F_decode_block_BB17_56)
begin
decode_block_IQuantize_exit_74_reg <= decode_block_IQuantize_exit_74;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_74_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %75 = load i32* %scevgep48.i, align 4, !tbaa !2*/
begin
decode_block_IQuantize_exit_75 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %76 = load i32* %scevgep51.i, align 4, !tbaa !2*/
begin
decode_block_IQuantize_exit_76 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %77 = load i32* %scevgep54.i, align 4, !tbaa !2*/
begin
decode_block_IQuantize_exit_77 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %78 = load i32* %scevgep57.i, align 4, !tbaa !2*/
begin
decode_block_IQuantize_exit_78 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %79 = shl i32 %78, 2*/
begin
decode_block_IQuantize_exit_79 = decode_block_IQuantize_exit_78 <<< 32'd2 % 32;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %80 = load i32* %scevgep60.i, align 4, !tbaa !2*/
begin
decode_block_IQuantize_exit_80 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %81 = load i32* %scevgep63.i, align 4, !tbaa !2*/
begin
decode_block_IQuantize_exit_81 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %82 = load i32* %scevgep66.i, align 4, !tbaa !2*/
begin
decode_block_IQuantize_exit_82 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %83 = mul i32 %75, 400*/
begin
decode_block_IQuantize_exit_83 = decode_block_signed_multiply_32_1;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %83 = mul i32 %75, 400*/
decode_block_IQuantize_exit_83_reg = decode_block__preheader25_i_144_reg;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %84 = mul i32 %82, -2008*/
begin
decode_block_IQuantize_exit_84 = decode_block_signed_multiply_32_0;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %85 = add i32 %84, %83*/
begin
decode_block_IQuantize_exit_85 = decode_block_IQuantize_exit_84 + decode_block_IQuantize_exit_83_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %86 = ashr i32 %85, 9*/
begin
decode_block_IQuantize_exit_86 = $signed(decode_block_IQuantize_exit_85) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %86 = ashr i32 %85, 9*/
if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_IQuantize_exit_86_reg <= decode_block_IQuantize_exit_86;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_86_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %87 = mul i32 %80, 1704*/
begin
decode_block_IQuantize_exit_87 = decode_block_signed_multiply_32_0;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %88 = mul i32 %77, -1136*/
begin
decode_block_IQuantize_exit_88 = decode_block_signed_multiply_32_1;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %88 = mul i32 %77, -1136*/
decode_block_IQuantize_exit_88_reg = decode_block__preheader25_i_149_reg;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %89 = add i32 %87, %88*/
begin
decode_block_IQuantize_exit_89 = decode_block_IQuantize_exit_87 + decode_block_IQuantize_exit_88_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %90 = ashr i32 %89, 9*/
begin
decode_block_IQuantize_exit_90 = $signed(decode_block_IQuantize_exit_89) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %90 = ashr i32 %89, 9*/
if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
decode_block_IQuantize_exit_90_reg <= decode_block_IQuantize_exit_90;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_90_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %91 = mul i32 %77, 1704*/
begin
decode_block_IQuantize_exit_91 = decode_block_signed_multiply_32_3;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %91 = mul i32 %77, 1704*/
if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
decode_block_IQuantize_exit_91_reg <= decode_block_IQuantize_exit_91;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_91_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %92 = mul i32 %80, 1136*/
begin
decode_block_IQuantize_exit_92 = decode_block_signed_multiply_32_3;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %93 = add nsw i32 %92, %91*/
begin
decode_block_IQuantize_exit_93 = decode_block_IQuantize_exit_92 + decode_block_IQuantize_exit_91_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %94 = ashr i32 %93, 9*/
begin
decode_block_IQuantize_exit_94 = $signed(decode_block_IQuantize_exit_93) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %94 = ashr i32 %93, 9*/
if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
decode_block_IQuantize_exit_94_reg <= decode_block_IQuantize_exit_94;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_94_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %95 = mul i32 %75, 2008*/
begin
decode_block_IQuantize_exit_95 = decode_block_signed_multiply_32_2;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %95 = mul i32 %75, 2008*/
decode_block_IQuantize_exit_95_reg = decode_block__preheader25_i_152_reg;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %96 = mul i32 %82, 400*/
begin
decode_block_IQuantize_exit_96 = decode_block_signed_multiply_32_3;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %97 = add nsw i32 %96, %95*/
begin
decode_block_IQuantize_exit_97 = decode_block_IQuantize_exit_96 + decode_block_IQuantize_exit_95_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %98 = ashr i32 %97, 9*/
begin
decode_block_IQuantize_exit_98 = $signed(decode_block_IQuantize_exit_97) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %98 = ashr i32 %97, 9*/
if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_IQuantize_exit_98_reg <= decode_block_IQuantize_exit_98;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_98_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %99 = add nsw i32 %79, %74*/
begin
decode_block_IQuantize_exit_99 = decode_block_IQuantize_exit_79 + decode_block_IQuantize_exit_74_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %100 = mul nsw i32 %99, 362*/
begin
decode_block_IQuantize_exit_100 = decode_block_signed_multiply_32_0;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %100 = mul nsw i32 %99, 362*/
if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
decode_block_IQuantize_exit_100_reg <= decode_block_IQuantize_exit_100;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_100_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %101 = ashr i32 %100, 9*/
begin
decode_block_IQuantize_exit_101 = $signed(decode_block_IQuantize_exit_100_reg) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %101 = ashr i32 %100, 9*/
if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
decode_block_IQuantize_exit_101_reg <= decode_block_IQuantize_exit_101;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_101_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %102 = sub nsw i32 %74, %79*/
begin
decode_block_IQuantize_exit_102 = decode_block_IQuantize_exit_74_reg - decode_block_IQuantize_exit_79;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %103 = mul nsw i32 %102, 362*/
begin
decode_block_IQuantize_exit_103 = decode_block_signed_multiply_32_1;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %103 = mul nsw i32 %102, 362*/
decode_block_IQuantize_exit_103_reg = decode_block__preheader25_i_166_reg;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %104 = ashr i32 %103, 9*/
begin
decode_block_IQuantize_exit_104 = $signed(decode_block_IQuantize_exit_103_reg) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %104 = ashr i32 %103, 9*/
if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
decode_block_IQuantize_exit_104_reg <= decode_block_IQuantize_exit_104;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_104_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %105 = mul i32 %76, 784*/
begin
decode_block_IQuantize_exit_105 = decode_block_signed_multiply_32_3;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %105 = mul i32 %76, 784*/
if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
decode_block_IQuantize_exit_105_reg <= decode_block_IQuantize_exit_105;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_105_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %106 = mul i32 %81, -1892*/
begin
decode_block_IQuantize_exit_106 = decode_block_signed_multiply_32_0;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %107 = add i32 %106, %105*/
begin
decode_block_IQuantize_exit_107 = decode_block_IQuantize_exit_106 + decode_block_IQuantize_exit_105_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %108 = ashr i32 %107, 9*/
begin
decode_block_IQuantize_exit_108 = $signed(decode_block_IQuantize_exit_107) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %108 = ashr i32 %107, 9*/
if (cur_state == LEGUP_F_decode_block_BB17_62)
begin
decode_block_IQuantize_exit_108_reg <= decode_block_IQuantize_exit_108;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_108_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %109 = mul i32 %76, 1892*/
begin
decode_block_IQuantize_exit_109 = decode_block_signed_multiply_32_2;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %109 = mul i32 %76, 1892*/
decode_block_IQuantize_exit_109_reg = decode_block__preheader25_i_156_reg;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %110 = mul i32 %81, 784*/
begin
decode_block_IQuantize_exit_110 = decode_block_signed_multiply_32_3;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %111 = add nsw i32 %110, %109*/
begin
decode_block_IQuantize_exit_111 = decode_block_IQuantize_exit_110 + decode_block_IQuantize_exit_109_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %112 = ashr i32 %111, 9*/
begin
decode_block_IQuantize_exit_112 = $signed(decode_block_IQuantize_exit_111) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %112 = ashr i32 %111, 9*/
if (cur_state == LEGUP_F_decode_block_BB17_62)
begin
decode_block_IQuantize_exit_112_reg <= decode_block_IQuantize_exit_112;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_112_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %113 = add nsw i32 %112, %101*/
begin
decode_block_IQuantize_exit_113 = decode_block_IQuantize_exit_112_reg + decode_block_IQuantize_exit_101_reg;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %113 = add nsw i32 %112, %101*/
if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_IQuantize_exit_113_reg <= decode_block_IQuantize_exit_113;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_113_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %114 = add nsw i32 %108, %104*/
begin
decode_block_IQuantize_exit_114 = decode_block_IQuantize_exit_108_reg + decode_block_IQuantize_exit_104_reg;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %114 = add nsw i32 %108, %104*/
if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_IQuantize_exit_114_reg <= decode_block_IQuantize_exit_114;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_114_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %115 = sub nsw i32 %104, %108*/
begin
decode_block_IQuantize_exit_115 = decode_block_IQuantize_exit_104_reg - decode_block_IQuantize_exit_108_reg;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %115 = sub nsw i32 %104, %108*/
if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_IQuantize_exit_115_reg <= decode_block_IQuantize_exit_115;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_115_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %116 = sub nsw i32 %101, %112*/
begin
decode_block_IQuantize_exit_116 = decode_block_IQuantize_exit_101_reg - decode_block_IQuantize_exit_112_reg;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %116 = sub nsw i32 %101, %112*/
if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_IQuantize_exit_116_reg <= decode_block_IQuantize_exit_116;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_116_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %117 = add nsw i32 %86, %90*/
begin
decode_block_IQuantize_exit_117 = decode_block_IQuantize_exit_86_reg + decode_block_IQuantize_exit_90_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %118 = sub nsw i32 %86, %90*/
begin
decode_block_IQuantize_exit_118 = decode_block_IQuantize_exit_86_reg - decode_block_IQuantize_exit_90_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %119 = sub nsw i32 %98, %94*/
begin
decode_block_IQuantize_exit_119 = decode_block_IQuantize_exit_98_reg - decode_block_IQuantize_exit_94_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %120 = add nsw i32 %98, %94*/
begin
decode_block_IQuantize_exit_120 = decode_block_IQuantize_exit_98_reg + decode_block_IQuantize_exit_94_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %121 = sub nsw i32 %119, %118*/
begin
decode_block_IQuantize_exit_121 = decode_block_IQuantize_exit_119 - decode_block_IQuantize_exit_118;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %122 = mul nsw i32 %121, 362*/
begin
decode_block_IQuantize_exit_122 = decode_block_signed_multiply_32_1;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %122 = mul nsw i32 %121, 362*/
decode_block_IQuantize_exit_122_reg = decode_block__preheader25_i_144_reg;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %123 = ashr i32 %122, 9*/
begin
decode_block_IQuantize_exit_123 = $signed(decode_block_IQuantize_exit_122_reg) >>> 32'd9;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %124 = add nsw i32 %119, %118*/
begin
decode_block_IQuantize_exit_124 = decode_block_IQuantize_exit_119 + decode_block_IQuantize_exit_118;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %125 = mul nsw i32 %124, 362*/
begin
decode_block_IQuantize_exit_125 = decode_block_signed_multiply_32_2;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %125 = mul nsw i32 %124, 362*/
decode_block_IQuantize_exit_125_reg = decode_block__preheader25_i_152_reg;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %126 = ashr i32 %125, 9*/
begin
decode_block_IQuantize_exit_126 = $signed(decode_block_IQuantize_exit_125_reg) >>> 32'd9;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %127 = add nsw i32 %120, %113*/
begin
decode_block_IQuantize_exit_127 = decode_block_IQuantize_exit_120 + decode_block_IQuantize_exit_113_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %128 = add nsw i32 %126, %114*/
begin
decode_block_IQuantize_exit_128 = decode_block_IQuantize_exit_126 + decode_block_IQuantize_exit_114_reg;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %129 = add nsw i32 %123, %115*/
begin
decode_block_IQuantize_exit_129 = decode_block_IQuantize_exit_123 + decode_block_IQuantize_exit_115_reg;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %129 = add nsw i32 %123, %115*/
if (cur_state == LEGUP_F_decode_block_BB17_65)
begin
decode_block_IQuantize_exit_129_reg <= decode_block_IQuantize_exit_129;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_129_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %130 = add nsw i32 %117, %116*/
begin
decode_block_IQuantize_exit_130 = decode_block_IQuantize_exit_117 + decode_block_IQuantize_exit_116_reg;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %130 = add nsw i32 %117, %116*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block_IQuantize_exit_130_reg <= decode_block_IQuantize_exit_130;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_130_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %131 = sub nsw i32 %116, %117*/
begin
decode_block_IQuantize_exit_131 = decode_block_IQuantize_exit_116_reg - decode_block_IQuantize_exit_117;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %131 = sub nsw i32 %116, %117*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block_IQuantize_exit_131_reg <= decode_block_IQuantize_exit_131;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_131_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %132 = sub nsw i32 %115, %123*/
begin
decode_block_IQuantize_exit_132 = decode_block_IQuantize_exit_115_reg - decode_block_IQuantize_exit_123;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %132 = sub nsw i32 %115, %123*/
if (cur_state == LEGUP_F_decode_block_BB17_65)
begin
decode_block_IQuantize_exit_132_reg <= decode_block_IQuantize_exit_132;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_132_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %133 = sub nsw i32 %114, %126*/
begin
decode_block_IQuantize_exit_133 = decode_block_IQuantize_exit_114_reg - decode_block_IQuantize_exit_126;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %133 = sub nsw i32 %114, %126*/
if (cur_state == LEGUP_F_decode_block_BB17_65)
begin
decode_block_IQuantize_exit_133_reg <= decode_block_IQuantize_exit_133;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_133_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %134 = sub nsw i32 %113, %120*/
begin
decode_block_IQuantize_exit_134 = decode_block_IQuantize_exit_113_reg - decode_block_IQuantize_exit_120;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %134 = sub nsw i32 %113, %120*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block_IQuantize_exit_134_reg <= decode_block_IQuantize_exit_134;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_134_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %135 = add nsw i32 %i.027.i, 1*/
begin
decode_block_IQuantize_exit_135 = decode_block_IQuantize_exit_i_027_i + 32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %135 = add nsw i32 %i.027.i, 1*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_135_reg <= decode_block_IQuantize_exit_135;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_135_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %exitcond43.i = icmp eq i32 %135, 8*/
begin
decode_block_IQuantize_exit_exitcond43_i = decode_block_IQuantize_exit_135 == 32'd8;
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %exitcond43.i = icmp eq i32 %135, 8*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
decode_block_IQuantize_exit_exitcond43_i_reg <= decode_block_IQuantize_exit_exitcond43_i;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_exitcond43_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_exitcond43_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %i.126.i = phi i32 [ %196, %.preheader25.i ], [ 0, %IQuantize.exit ]*/
begin
decode_block__preheader25_i_i_126_i = decode_block__preheader25_i_i_126_i_phi_temp;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %tmp.i6 = shl i32 %i.126.i, 3*/
begin
decode_block__preheader25_i_tmp_i6 = decode_block__preheader25_i_i_126_i <<< 32'd3 % 32;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %tmp2967.i = or i32 %tmp.i6, 7*/
begin
decode_block__preheader25_i_tmp2967_i = decode_block__preheader25_i_tmp_i6 | 32'd7;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep.i7 = getelementptr i32* %out_buf, i32 %tmp2967.i*/
begin
decode_block__preheader25_i_scevgep_i7 = arg_out_buf + 4 * decode_block__preheader25_i_tmp2967_i;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep.i7 = getelementptr i32* %out_buf, i32 %tmp2967.i*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_scevgep_i7_reg <= decode_block__preheader25_i_scevgep_i7;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_scevgep_i7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_scevgep_i7_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %tmp3068.i = or i32 %tmp.i6, 6*/
begin
decode_block__preheader25_i_tmp3068_i = decode_block__preheader25_i_tmp_i6 | 32'd6;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep31.i = getelementptr i32* %out_buf, i32 %tmp3068.i*/
begin
decode_block__preheader25_i_scevgep31_i = arg_out_buf + 4 * decode_block__preheader25_i_tmp3068_i;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep31.i = getelementptr i32* %out_buf, i32 %tmp3068.i*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_scevgep31_i_reg <= decode_block__preheader25_i_scevgep31_i;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_scevgep31_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_scevgep31_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %tmp3269.i = or i32 %tmp.i6, 5*/
begin
decode_block__preheader25_i_tmp3269_i = decode_block__preheader25_i_tmp_i6 | 32'd5;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep33.i = getelementptr i32* %out_buf, i32 %tmp3269.i*/
begin
decode_block__preheader25_i_scevgep33_i = arg_out_buf + 4 * decode_block__preheader25_i_tmp3269_i;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep33.i = getelementptr i32* %out_buf, i32 %tmp3269.i*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_scevgep33_i_reg <= decode_block__preheader25_i_scevgep33_i;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_scevgep33_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_scevgep33_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %tmp3470.i = or i32 %tmp.i6, 4*/
begin
decode_block__preheader25_i_tmp3470_i = decode_block__preheader25_i_tmp_i6 | 32'd4;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep35.i = getelementptr i32* %out_buf, i32 %tmp3470.i*/
begin
decode_block__preheader25_i_scevgep35_i = arg_out_buf + 4 * decode_block__preheader25_i_tmp3470_i;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep35.i = getelementptr i32* %out_buf, i32 %tmp3470.i*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_scevgep35_i_reg <= decode_block__preheader25_i_scevgep35_i;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_scevgep35_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_scevgep35_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %tmp3671.i = or i32 %tmp.i6, 3*/
begin
decode_block__preheader25_i_tmp3671_i = decode_block__preheader25_i_tmp_i6 | 32'd3;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep37.i = getelementptr i32* %out_buf, i32 %tmp3671.i*/
begin
decode_block__preheader25_i_scevgep37_i = arg_out_buf + 4 * decode_block__preheader25_i_tmp3671_i;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep37.i = getelementptr i32* %out_buf, i32 %tmp3671.i*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_scevgep37_i_reg <= decode_block__preheader25_i_scevgep37_i;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_scevgep37_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_scevgep37_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %tmp3872.i = or i32 %tmp.i6, 2*/
begin
decode_block__preheader25_i_tmp3872_i = decode_block__preheader25_i_tmp_i6 | 32'd2;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep39.i = getelementptr i32* %out_buf, i32 %tmp3872.i*/
begin
decode_block__preheader25_i_scevgep39_i = arg_out_buf + 4 * decode_block__preheader25_i_tmp3872_i;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep39.i = getelementptr i32* %out_buf, i32 %tmp3872.i*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_scevgep39_i_reg <= decode_block__preheader25_i_scevgep39_i;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_scevgep39_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_scevgep39_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %tmp4073.i = or i32 %tmp.i6, 1*/
begin
decode_block__preheader25_i_tmp4073_i = decode_block__preheader25_i_tmp_i6 | 32'd1;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep41.i = getelementptr i32* %out_buf, i32 %tmp4073.i*/
begin
decode_block__preheader25_i_scevgep41_i = arg_out_buf + 4 * decode_block__preheader25_i_tmp4073_i;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep41.i = getelementptr i32* %out_buf, i32 %tmp4073.i*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_scevgep41_i_reg <= decode_block__preheader25_i_scevgep41_i;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_scevgep41_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_scevgep41_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep42.i = getelementptr i32* %out_buf, i32 %tmp.i6*/
begin
decode_block__preheader25_i_scevgep42_i = arg_out_buf + 4 * decode_block__preheader25_i_tmp_i6;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %scevgep42.i = getelementptr i32* %out_buf, i32 %tmp.i6*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_scevgep42_i_reg <= decode_block__preheader25_i_scevgep42_i;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_scevgep42_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_scevgep42_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %136 = load i32* %scevgep42.i, align 4, !tbaa !2*/
begin
decode_block__preheader25_i_136 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %136 = load i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_74)
begin
decode_block__preheader25_i_136_reg <= decode_block__preheader25_i_136;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_136_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %137 = load i32* %scevgep41.i, align 4, !tbaa !2*/
begin
decode_block__preheader25_i_137 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %138 = load i32* %scevgep39.i, align 4, !tbaa !2*/
begin
decode_block__preheader25_i_138 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %139 = load i32* %scevgep37.i, align 4, !tbaa !2*/
begin
decode_block__preheader25_i_139 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %140 = load i32* %scevgep35.i, align 4, !tbaa !2*/
begin
decode_block__preheader25_i_140 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %141 = load i32* %scevgep33.i, align 4, !tbaa !2*/
begin
decode_block__preheader25_i_141 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %142 = load i32* %scevgep31.i, align 4, !tbaa !2*/
begin
decode_block__preheader25_i_142 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %143 = load i32* %scevgep.i7, align 4, !tbaa !2*/
begin
decode_block__preheader25_i_143 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %144 = mul nsw i32 %137, 100*/
begin
decode_block__preheader25_i_144 = decode_block_signed_multiply_32_1;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %144 = mul nsw i32 %137, 100*/
if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
decode_block__preheader25_i_144_reg <= decode_block__preheader25_i_144;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_144_reg"); $finish; end
end
/* decode_block: %.preheader25.i*/
/*   %183 = mul nsw i32 %182, 362*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
decode_block__preheader25_i_144_reg <= decode_block__preheader25_i_183;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_144_reg"); $finish; end
end
/* decode_block: %IQuantize.exit*/
/*   %83 = mul i32 %75, 400*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
decode_block__preheader25_i_144_reg <= decode_block_IQuantize_exit_83;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_144_reg"); $finish; end
end
/* decode_block: %IQuantize.exit*/
/*   %122 = mul nsw i32 %121, 362*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block__preheader25_i_144_reg <= decode_block_IQuantize_exit_122;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_144_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %145 = mul i32 %143, -502*/
begin
decode_block__preheader25_i_145 = decode_block_signed_multiply_32_0;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %146 = add i32 %145, %144*/
begin
decode_block__preheader25_i_146 = decode_block__preheader25_i_145 + decode_block__preheader25_i_144_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %147 = ashr i32 %146, 9*/
begin
decode_block__preheader25_i_147 = $signed(decode_block__preheader25_i_146) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %147 = ashr i32 %146, 9*/
if (cur_state == LEGUP_F_decode_block_BB18_81)
begin
decode_block__preheader25_i_147_reg <= decode_block__preheader25_i_147;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_147_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %148 = mul nsw i32 %141, 426*/
begin
decode_block__preheader25_i_148 = decode_block_signed_multiply_32_0;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %149 = mul i32 %139, -284*/
begin
decode_block__preheader25_i_149 = decode_block_signed_multiply_32_1;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %149 = mul i32 %139, -284*/
if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
decode_block__preheader25_i_149_reg <= decode_block__preheader25_i_149;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_149_reg"); $finish; end
end
/* decode_block: %IQuantize.exit*/
/*   %88 = mul i32 %77, -1136*/
if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
decode_block__preheader25_i_149_reg <= decode_block_IQuantize_exit_88;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_149_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %150 = add i32 %148, %149*/
begin
decode_block__preheader25_i_150 = decode_block__preheader25_i_148 + decode_block__preheader25_i_149_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %151 = ashr i32 %150, 9*/
begin
decode_block__preheader25_i_151 = $signed(decode_block__preheader25_i_150) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %151 = ashr i32 %150, 9*/
if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
decode_block__preheader25_i_151_reg <= decode_block__preheader25_i_151;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_151_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %152 = mul nsw i32 %139, 426*/
begin
decode_block__preheader25_i_152 = decode_block_signed_multiply_32_2;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %152 = mul nsw i32 %139, 426*/
if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
decode_block__preheader25_i_152_reg <= decode_block__preheader25_i_152;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_152_reg"); $finish; end
end
/* decode_block: %.preheader25.i*/
/*   %186 = mul nsw i32 %185, 362*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
decode_block__preheader25_i_152_reg <= decode_block__preheader25_i_186;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_152_reg"); $finish; end
end
/* decode_block: %IQuantize.exit*/
/*   %95 = mul i32 %75, 2008*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
decode_block__preheader25_i_152_reg <= decode_block_IQuantize_exit_95;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_152_reg"); $finish; end
end
/* decode_block: %IQuantize.exit*/
/*   %125 = mul nsw i32 %124, 362*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block__preheader25_i_152_reg <= decode_block_IQuantize_exit_125;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_152_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %153 = mul nsw i32 %141, 284*/
begin
decode_block__preheader25_i_153 = decode_block_signed_multiply_32_3;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %154 = add nsw i32 %153, %152*/
begin
decode_block__preheader25_i_154 = decode_block__preheader25_i_153 + decode_block__preheader25_i_152_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %155 = ashr i32 %154, 9*/
begin
decode_block__preheader25_i_155 = $signed(decode_block__preheader25_i_154) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %155 = ashr i32 %154, 9*/
if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
decode_block__preheader25_i_155_reg <= decode_block__preheader25_i_155;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_155_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %156 = mul nsw i32 %137, 502*/
begin
decode_block__preheader25_i_156 = decode_block_signed_multiply_32_2;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %156 = mul nsw i32 %137, 502*/
if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
decode_block__preheader25_i_156_reg <= decode_block__preheader25_i_156;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_156_reg"); $finish; end
end
/* decode_block: %IQuantize.exit*/
/*   %109 = mul i32 %76, 1892*/
if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
decode_block__preheader25_i_156_reg <= decode_block_IQuantize_exit_109;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_156_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %157 = mul nsw i32 %143, 100*/
begin
decode_block__preheader25_i_157 = decode_block_signed_multiply_32_3;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %158 = add nsw i32 %157, %156*/
begin
decode_block__preheader25_i_158 = decode_block__preheader25_i_157 + decode_block__preheader25_i_156_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %159 = ashr i32 %158, 9*/
begin
decode_block__preheader25_i_159 = $signed(decode_block__preheader25_i_158) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %159 = ashr i32 %158, 9*/
if (cur_state == LEGUP_F_decode_block_BB18_81)
begin
decode_block__preheader25_i_159_reg <= decode_block__preheader25_i_159;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_159_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %160 = add nsw i32 %140, %136*/
begin
decode_block__preheader25_i_160 = decode_block__preheader25_i_140 + decode_block__preheader25_i_136_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %161 = mul nsw i32 %160, 362*/
begin
decode_block__preheader25_i_161 = decode_block_signed_multiply_32_0;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %162 = ashr i32 %161, 9*/
begin
decode_block__preheader25_i_162 = $signed(decode_block__preheader25_i_161) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %162 = ashr i32 %161, 9*/
if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
decode_block__preheader25_i_162_reg <= decode_block__preheader25_i_162;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_162_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %163 = sub nsw i32 %136, %140*/
begin
decode_block__preheader25_i_163 = decode_block__preheader25_i_136_reg - decode_block__preheader25_i_140;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %164 = mul nsw i32 %163, 362*/
begin
decode_block__preheader25_i_164 = decode_block_signed_multiply_32_3;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %165 = ashr i32 %164, 9*/
begin
decode_block__preheader25_i_165 = $signed(decode_block__preheader25_i_164) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %165 = ashr i32 %164, 9*/
if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
decode_block__preheader25_i_165_reg <= decode_block__preheader25_i_165;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_165_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %166 = mul nsw i32 %138, 196*/
begin
decode_block__preheader25_i_166 = decode_block_signed_multiply_32_1;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %166 = mul nsw i32 %138, 196*/
if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
decode_block__preheader25_i_166_reg <= decode_block__preheader25_i_166;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_166_reg"); $finish; end
end
/* decode_block: %IQuantize.exit*/
/*   %103 = mul nsw i32 %102, 362*/
if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
decode_block__preheader25_i_166_reg <= decode_block_IQuantize_exit_103;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_166_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %167 = mul i32 %142, -473*/
begin
decode_block__preheader25_i_167 = decode_block_signed_multiply_32_0;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %168 = add i32 %167, %166*/
begin
decode_block__preheader25_i_168 = decode_block__preheader25_i_167 + decode_block__preheader25_i_166_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %169 = ashr i32 %168, 9*/
begin
decode_block__preheader25_i_169 = $signed(decode_block__preheader25_i_168) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %169 = ashr i32 %168, 9*/
if (cur_state == LEGUP_F_decode_block_BB18_80)
begin
decode_block__preheader25_i_169_reg <= decode_block__preheader25_i_169;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_169_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %170 = mul nsw i32 %138, 473*/
begin
decode_block__preheader25_i_170 = decode_block_signed_multiply_32_2;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %170 = mul nsw i32 %138, 473*/
if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
decode_block__preheader25_i_170_reg <= decode_block__preheader25_i_170;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_170_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %171 = mul nsw i32 %142, 196*/
begin
decode_block__preheader25_i_171 = decode_block_signed_multiply_32_3;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %172 = add nsw i32 %171, %170*/
begin
decode_block__preheader25_i_172 = decode_block__preheader25_i_171 + decode_block__preheader25_i_170_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %173 = ashr i32 %172, 9*/
begin
decode_block__preheader25_i_173 = $signed(decode_block__preheader25_i_172) >>> 32'd9;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %173 = ashr i32 %172, 9*/
if (cur_state == LEGUP_F_decode_block_BB18_80)
begin
decode_block__preheader25_i_173_reg <= decode_block__preheader25_i_173;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_173_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %174 = add nsw i32 %173, %162*/
begin
decode_block__preheader25_i_174 = decode_block__preheader25_i_173_reg + decode_block__preheader25_i_162_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %174 = add nsw i32 %173, %162*/
if (cur_state == LEGUP_F_decode_block_BB18_81)
begin
decode_block__preheader25_i_174_reg <= decode_block__preheader25_i_174;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_174_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %175 = add nsw i32 %169, %165*/
begin
decode_block__preheader25_i_175 = decode_block__preheader25_i_169_reg + decode_block__preheader25_i_165_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %175 = add nsw i32 %169, %165*/
if (cur_state == LEGUP_F_decode_block_BB18_81)
begin
decode_block__preheader25_i_175_reg <= decode_block__preheader25_i_175;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_175_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %176 = sub nsw i32 %165, %169*/
begin
decode_block__preheader25_i_176 = decode_block__preheader25_i_165_reg - decode_block__preheader25_i_169_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %176 = sub nsw i32 %165, %169*/
if (cur_state == LEGUP_F_decode_block_BB18_81)
begin
decode_block__preheader25_i_176_reg <= decode_block__preheader25_i_176;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_176_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %177 = sub nsw i32 %162, %173*/
begin
decode_block__preheader25_i_177 = decode_block__preheader25_i_162_reg - decode_block__preheader25_i_173_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %177 = sub nsw i32 %162, %173*/
if (cur_state == LEGUP_F_decode_block_BB18_81)
begin
decode_block__preheader25_i_177_reg <= decode_block__preheader25_i_177;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_177_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %178 = add nsw i32 %147, %151*/
begin
decode_block__preheader25_i_178 = decode_block__preheader25_i_147_reg + decode_block__preheader25_i_151_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %179 = sub nsw i32 %147, %151*/
begin
decode_block__preheader25_i_179 = decode_block__preheader25_i_147_reg - decode_block__preheader25_i_151_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %180 = sub nsw i32 %159, %155*/
begin
decode_block__preheader25_i_180 = decode_block__preheader25_i_159_reg - decode_block__preheader25_i_155_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %181 = add nsw i32 %159, %155*/
begin
decode_block__preheader25_i_181 = decode_block__preheader25_i_159_reg + decode_block__preheader25_i_155_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %182 = sub nsw i32 %180, %179*/
begin
decode_block__preheader25_i_182 = decode_block__preheader25_i_180 - decode_block__preheader25_i_179;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %183 = mul nsw i32 %182, 362*/
begin
decode_block__preheader25_i_183 = decode_block_signed_multiply_32_1;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %183 = mul nsw i32 %182, 362*/
decode_block__preheader25_i_183_reg = decode_block__preheader25_i_144_reg;
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %184 = ashr i32 %183, 9*/
begin
decode_block__preheader25_i_184 = $signed(decode_block__preheader25_i_183_reg) >>> 32'd9;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %185 = add nsw i32 %180, %179*/
begin
decode_block__preheader25_i_185 = decode_block__preheader25_i_180 + decode_block__preheader25_i_179;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %186 = mul nsw i32 %185, 362*/
begin
decode_block__preheader25_i_186 = decode_block_signed_multiply_32_2;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %186 = mul nsw i32 %185, 362*/
decode_block__preheader25_i_186_reg = decode_block__preheader25_i_152_reg;
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %187 = ashr i32 %186, 9*/
begin
decode_block__preheader25_i_187 = $signed(decode_block__preheader25_i_186_reg) >>> 32'd9;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %188 = add nsw i32 %181, %174*/
begin
decode_block__preheader25_i_188 = decode_block__preheader25_i_181 + decode_block__preheader25_i_174_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %189 = add nsw i32 %187, %175*/
begin
decode_block__preheader25_i_189 = decode_block__preheader25_i_187 + decode_block__preheader25_i_175_reg;
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %190 = add nsw i32 %184, %176*/
begin
decode_block__preheader25_i_190 = decode_block__preheader25_i_184 + decode_block__preheader25_i_176_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %190 = add nsw i32 %184, %176*/
if (cur_state == LEGUP_F_decode_block_BB18_83)
begin
decode_block__preheader25_i_190_reg <= decode_block__preheader25_i_190;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_190_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %191 = add nsw i32 %178, %177*/
begin
decode_block__preheader25_i_191 = decode_block__preheader25_i_178 + decode_block__preheader25_i_177_reg;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %191 = add nsw i32 %178, %177*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
decode_block__preheader25_i_191_reg <= decode_block__preheader25_i_191;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_191_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %192 = sub nsw i32 %177, %178*/
begin
decode_block__preheader25_i_192 = decode_block__preheader25_i_177_reg - decode_block__preheader25_i_178;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %192 = sub nsw i32 %177, %178*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
decode_block__preheader25_i_192_reg <= decode_block__preheader25_i_192;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_192_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %193 = sub nsw i32 %176, %184*/
begin
decode_block__preheader25_i_193 = decode_block__preheader25_i_176_reg - decode_block__preheader25_i_184;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %193 = sub nsw i32 %176, %184*/
if (cur_state == LEGUP_F_decode_block_BB18_83)
begin
decode_block__preheader25_i_193_reg <= decode_block__preheader25_i_193;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_193_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %194 = sub nsw i32 %175, %187*/
begin
decode_block__preheader25_i_194 = decode_block__preheader25_i_175_reg - decode_block__preheader25_i_187;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %194 = sub nsw i32 %175, %187*/
if (cur_state == LEGUP_F_decode_block_BB18_83)
begin
decode_block__preheader25_i_194_reg <= decode_block__preheader25_i_194;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_194_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %195 = sub nsw i32 %174, %181*/
begin
decode_block__preheader25_i_195 = decode_block__preheader25_i_174_reg - decode_block__preheader25_i_181;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %195 = sub nsw i32 %174, %181*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
decode_block__preheader25_i_195_reg <= decode_block__preheader25_i_195;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_195_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %196 = add nsw i32 %i.126.i, 1*/
begin
decode_block__preheader25_i_196 = decode_block__preheader25_i_i_126_i + 32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %196 = add nsw i32 %i.126.i, 1*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_196_reg <= decode_block__preheader25_i_196;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_196_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader25.i*/
/*   %exitcond28.i = icmp eq i32 %196, 8*/
begin
decode_block__preheader25_i_exitcond28_i = decode_block__preheader25_i_196 == 32'd8;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %exitcond28.i = icmp eq i32 %196, 8*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
decode_block__preheader25_i_exitcond28_i_reg <= decode_block__preheader25_i_exitcond28_i;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_exitcond28_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_exitcond28_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %i.224.i = phi i32 [ %203, %.preheader.i8 ], [ 0, %.preheader25.i ]*/
begin
decode_block__preheader_i8_i_224_i = decode_block__preheader_i8_i_224_i_phi_temp;
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %aptr.023.i = getelementptr i32* %out_buf, i32 %i.224.i*/
begin
decode_block__preheader_i8_aptr_023_i = arg_out_buf + 4 * decode_block__preheader_i8_i_224_i;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i8*/
/*   %aptr.023.i = getelementptr i32* %out_buf, i32 %i.224.i*/
if (cur_state == LEGUP_F_decode_block_BB19_90)
begin
decode_block__preheader_i8_aptr_023_i_reg <= decode_block__preheader_i8_aptr_023_i;
if (^reset !== 1'bX && ^(decode_block__preheader_i8_aptr_023_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i8_aptr_023_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %197 = load i32* %aptr.023.i, align 4, !tbaa !2*/
begin
decode_block__preheader_i8_197 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %198 = ashr i32 %197, 31*/
begin
decode_block__preheader_i8_198 = $signed(decode_block__preheader_i8_197) >>> 32'd31;
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %199 = and i32 %198, -16*/
begin
decode_block__preheader_i8_199 = decode_block__preheader_i8_198 & -32'd16;
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %200 = or i32 %199, 8*/
begin
decode_block__preheader_i8_200 = decode_block__preheader_i8_199 | 32'd8;
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %201 = add i32 %200, %197*/
begin
decode_block__preheader_i8_201 = decode_block__preheader_i8_200 + decode_block__preheader_i8_197;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i8*/
/*   %201 = add i32 %200, %197*/
if (cur_state == LEGUP_F_decode_block_BB19_92)
begin
decode_block__preheader_i8_201_reg <= decode_block__preheader_i8_201;
if (^reset !== 1'bX && ^(decode_block__preheader_i8_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i8_201_reg"); $finish; end
end
end
always @(*) begin
decode_block__preheader_i8_202 = decode_block_signed_divide_32_0;
end
always @(posedge clk) begin
/* decode_block: %.preheader.i8*/
/*   %202 = sdiv i32 %201, 16*/
if (cur_state == LEGUP_F_decode_block_BB19_132)
begin
decode_block__preheader_i8_202_reg <= decode_block__preheader_i8_202;
if (^reset !== 1'bX && ^(decode_block__preheader_i8_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i8_202_reg"); $finish; end
end
/* decode_block: %.preheader.i8*/
/*   %202 = sdiv i32 %201, 16*/
if (cur_state == LEGUP_F_decode_block_BB19_132)
begin
decode_block__preheader_i8_202_reg <= decode_block__preheader_i8_202;
if (^reset !== 1'bX && ^(decode_block__preheader_i8_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i8_202_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %203 = add nsw i32 %i.224.i, 1*/
begin
decode_block__preheader_i8_203 = decode_block__preheader_i8_i_224_i + 32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i8*/
/*   %203 = add nsw i32 %i.224.i, 1*/
if (cur_state == LEGUP_F_decode_block_BB19_90)
begin
decode_block__preheader_i8_203_reg <= decode_block__preheader_i8_203;
if (^reset !== 1'bX && ^(decode_block__preheader_i8_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i8_203_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %exitcond.i = icmp eq i32 %203, 64*/
begin
decode_block__preheader_i8_exitcond_i = decode_block__preheader_i8_203 == 32'd64;
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i8*/
/*   %exitcond.i = icmp eq i32 %203, 64*/
if (cur_state == LEGUP_F_decode_block_BB19_90)
begin
decode_block__preheader_i8_exitcond_i_reg <= decode_block__preheader_i8_exitcond_i;
if (^reset !== 1'bX && ^(decode_block__preheader_i8_exitcond_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i8_exitcond_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %ChenIDct.exit*/
/*   %indvar.i1 = phi i32 [ %tmp.i3, %ChenIDct.exit ], [ 0, %.preheader.i8 ]*/
begin
decode_block_ChenIDct_exit_indvar_i1 = decode_block_ChenIDct_exit_indvar_i1_phi_temp;
end
end
always @(*) begin
/* decode_block: %ChenIDct.exit*/
/*   %mptr.01.i2 = getelementptr i32* %out_buf, i32 %indvar.i1*/
begin
decode_block_ChenIDct_exit_mptr_01_i2 = arg_out_buf + 4 * decode_block_ChenIDct_exit_indvar_i1;
end
end
always @(posedge clk) begin
/* decode_block: %ChenIDct.exit*/
/*   %mptr.01.i2 = getelementptr i32* %out_buf, i32 %indvar.i1*/
if (cur_state == LEGUP_F_decode_block_BB20_141)
begin
decode_block_ChenIDct_exit_mptr_01_i2_reg <= decode_block_ChenIDct_exit_mptr_01_i2;
if (^reset !== 1'bX && ^(decode_block_ChenIDct_exit_mptr_01_i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_ChenIDct_exit_mptr_01_i2_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %ChenIDct.exit*/
/*   %tmp.i3 = add i32 %indvar.i1, 1*/
begin
decode_block_ChenIDct_exit_tmp_i3 = decode_block_ChenIDct_exit_indvar_i1 + 32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %ChenIDct.exit*/
/*   %tmp.i3 = add i32 %indvar.i1, 1*/
if (cur_state == LEGUP_F_decode_block_BB20_141)
begin
decode_block_ChenIDct_exit_tmp_i3_reg <= decode_block_ChenIDct_exit_tmp_i3;
if (^reset !== 1'bX && ^(decode_block_ChenIDct_exit_tmp_i3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_ChenIDct_exit_tmp_i3_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %ChenIDct.exit*/
/*   %204 = load i32* %mptr.01.i2, align 4, !tbaa !2*/
begin
decode_block_ChenIDct_exit_204 = memory_controller_out[31:0];
end
end
always @(*) begin
/* decode_block: %ChenIDct.exit*/
/*   %205 = add nsw i32 %204, 128*/
begin
decode_block_ChenIDct_exit_205 = decode_block_ChenIDct_exit_204 + 32'd128;
end
end
always @(*) begin
/* decode_block: %ChenIDct.exit*/
/*   %exitcond7 = icmp eq i32 %tmp.i3, 64*/
begin
decode_block_ChenIDct_exit_exitcond7 = decode_block_ChenIDct_exit_tmp_i3 == 32'd64;
end
end
always @(posedge clk) begin
/* decode_block: %ChenIDct.exit*/
/*   %exitcond7 = icmp eq i32 %tmp.i3, 64*/
if (cur_state == LEGUP_F_decode_block_BB20_141)
begin
decode_block_ChenIDct_exit_exitcond7_reg <= decode_block_ChenIDct_exit_exitcond7;
if (^reset !== 1'bX && ^(decode_block_ChenIDct_exit_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_ChenIDct_exit_exitcond7_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %indvar.i = phi i32 [ %tmp.i, %212 ], [ 0, %ChenIDct.exit ]*/
begin
decode_block_PostshiftIDctMatrix_exit_indvar_i = decode_block_PostshiftIDctMatrix_exit_indvar_i_phi_temp;
end
end
always @(*) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %mptr.01.i = getelementptr i32* %out_buf, i32 %indvar.i*/
begin
decode_block_PostshiftIDctMatrix_exit_mptr_01_i = arg_out_buf + 4 * decode_block_PostshiftIDctMatrix_exit_indvar_i;
end
end
always @(posedge clk) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %mptr.01.i = getelementptr i32* %out_buf, i32 %indvar.i*/
if (cur_state == LEGUP_F_decode_block_BB21_144)
begin
decode_block_PostshiftIDctMatrix_exit_mptr_01_i_reg <= decode_block_PostshiftIDctMatrix_exit_mptr_01_i;
if (^reset !== 1'bX && ^(decode_block_PostshiftIDctMatrix_exit_mptr_01_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_PostshiftIDctMatrix_exit_mptr_01_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %tmp.i = add i32 %indvar.i, 1*/
begin
decode_block_PostshiftIDctMatrix_exit_tmp_i = decode_block_PostshiftIDctMatrix_exit_indvar_i + 32'd1;
end
end
always @(posedge clk) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %tmp.i = add i32 %indvar.i, 1*/
if (cur_state == LEGUP_F_decode_block_BB21_144)
begin
decode_block_PostshiftIDctMatrix_exit_tmp_i_reg <= decode_block_PostshiftIDctMatrix_exit_tmp_i;
if (^reset !== 1'bX && ^(decode_block_PostshiftIDctMatrix_exit_tmp_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_PostshiftIDctMatrix_exit_tmp_i_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %206 = load i32* %mptr.01.i, align 4, !tbaa !2*/
begin
decode_block_PostshiftIDctMatrix_exit_206 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %206 = load i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB21_146)
begin
decode_block_PostshiftIDctMatrix_exit_206_reg <= decode_block_PostshiftIDctMatrix_exit_206;
if (^reset !== 1'bX && ^(decode_block_PostshiftIDctMatrix_exit_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_PostshiftIDctMatrix_exit_206_reg"); $finish; end
end
end
always @(*) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %207 = icmp slt i32 %206, 0*/
begin
decode_block_PostshiftIDctMatrix_exit_207 = $signed(decode_block_PostshiftIDctMatrix_exit_206) < $signed(32'd0);
end
end
always @(*) begin
/* decode_block: %209*/
/*   %210 = icmp sgt i32 %206, 255*/
begin
decode_block_209_210 = $signed(decode_block_PostshiftIDctMatrix_exit_206_reg) > $signed(32'd255);
end
end
always @(*) begin
/* decode_block: %212*/
/*   %exitcond = icmp eq i32 %tmp.i, 64*/
begin
decode_block_212_exitcond = decode_block_PostshiftIDctMatrix_exit_tmp_i_reg == 32'd64;
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB0_5)
begin
DecodeHuffman_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_start"); $finish; end
end
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
DecodeHuffman_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_start"); $finish; end
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB7_25)
begin
DecodeHuffman_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_start"); $finish; end
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
DecodeHuffman_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_start"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB0_5)
begin
DecodeHuffman_arg_Xhuff_huffval <= decode_block_0_4_reg;
if (^reset !== 1'bX && ^(decode_block_0_4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Xhuff_huffval"); $finish; end
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB7_25)
begin
DecodeHuffman_arg_Xhuff_huffval <= decode_block__preheader_i_27_reg;
if (^reset !== 1'bX && ^(decode_block__preheader_i_27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Xhuff_huffval"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB0_5)
begin
DecodeHuffman_arg_Dhuff_ml <= decode_block_0_6;
if (^reset !== 1'bX && ^(decode_block_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_ml"); $finish; end
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB7_25)
begin
DecodeHuffman_arg_Dhuff_ml <= decode_block_34_35;
if (^reset !== 1'bX && ^(decode_block_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_ml"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB0_5)
begin
DecodeHuffman_arg_Dhuff_maxcode <= decode_block_0_7_reg;
if (^reset !== 1'bX && ^(decode_block_0_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_maxcode"); $finish; end
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB7_25)
begin
DecodeHuffman_arg_Dhuff_maxcode <= decode_block__preheader_i_29_reg;
if (^reset !== 1'bX && ^(decode_block__preheader_i_29_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_maxcode"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB0_5)
begin
DecodeHuffman_arg_Dhuff_mincode <= decode_block_0_8_reg;
if (^reset !== 1'bX && ^(decode_block_0_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_mincode"); $finish; end
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB7_25)
begin
DecodeHuffman_arg_Dhuff_mincode <= decode_block__preheader_i_30_reg;
if (^reset !== 1'bX && ^(decode_block__preheader_i_30_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_mincode"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB0_5)
begin
DecodeHuffman_arg_Dhuff_valptr <= decode_block_0_9_reg;
if (^reset !== 1'bX && ^(decode_block_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_valptr"); $finish; end
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB7_25)
begin
DecodeHuffman_arg_Dhuff_valptr <= decode_block__preheader_i_31_reg;
if (^reset !== 1'bX && ^(decode_block__preheader_i_31_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_arg_Dhuff_valptr"); $finish; end
end
end
always @(*) begin
DecodeHuffman_memory_controller_waitrequest = 1'd0;
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
DecodeHuffman_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
DecodeHuffman_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
DecodeHuffman_memory_controller_out = 1'd0;
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
DecodeHuffman_memory_controller_out = memory_controller_out;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
DecodeHuffman_memory_controller_out = memory_controller_out;
end
end
always @(*) begin
legup_function_call = 1'd0;
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB0_5)
begin
legup_function_call = 1'd1;
end
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
legup_function_call = 1'd1;
end
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB1_8)
begin
legup_function_call = 1'd1;
end
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
legup_function_call = 1'd1;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB7_25)
begin
legup_function_call = 1'd1;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
legup_function_call = 1'd1;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB9_29)
begin
legup_function_call = 1'd1;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB1_8)
begin
buf_getv_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_start"); $finish; end
end
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
buf_getv_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_start"); $finish; end
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB9_29)
begin
buf_getv_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_start"); $finish; end
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
buf_getv_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_start"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB1_8)
begin
buf_getv_arg_n <= decode_block_0_10_reg;
if (^reset !== 1'bX && ^(decode_block_0_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_arg_n"); $finish; end
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_F_decode_block_BB9_29)
begin
buf_getv_arg_n <= decode_block_34_37_reg;
if (^reset !== 1'bX && ^(decode_block_34_37_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_arg_n"); $finish; end
end
end
always @(*) begin
buf_getv_memory_controller_waitrequest = 1'd0;
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
buf_getv_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
buf_getv_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
buf_getv_memory_controller_out = 1'd0;
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
buf_getv_memory_controller_out = memory_controller_out;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
buf_getv_memory_controller_out = memory_controller_out;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %83 = mul i32 %75, 400*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
decode_block_signed_multiply_32_1_op0 = decode_block_IQuantize_exit_75;
end
/* decode_block: %IQuantize.exit*/
/*   %88 = mul i32 %77, -1136*/
else if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
decode_block_signed_multiply_32_1_op0 = decode_block_IQuantize_exit_77;
end
/* decode_block: %IQuantize.exit*/
/*   %103 = mul nsw i32 %102, 362*/
else if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
decode_block_signed_multiply_32_1_op0 = decode_block_IQuantize_exit_102;
end
/* decode_block: %IQuantize.exit*/
/*   %122 = mul nsw i32 %121, 362*/
else if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block_signed_multiply_32_1_op0 = decode_block_IQuantize_exit_121;
end
/* decode_block: %.preheader25.i*/
/*   %144 = mul nsw i32 %137, 100*/
else if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
decode_block_signed_multiply_32_1_op0 = decode_block__preheader25_i_137;
end
/* decode_block: %.preheader25.i*/
/*   %166 = mul nsw i32 %138, 196*/
else if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
decode_block_signed_multiply_32_1_op0 = decode_block__preheader25_i_138;
end
/* decode_block: %.preheader25.i*/
/*   %149 = mul i32 %139, -284*/
else if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
decode_block_signed_multiply_32_1_op0 = decode_block__preheader25_i_139;
end
/* decode_block: %.preheader25.i*/
/*   %183 = mul nsw i32 %182, 362*/
else /* if (cur_state == LEGUP_F_decode_block_BB18_82) */
begin
decode_block_signed_multiply_32_1_op0 = decode_block__preheader25_i_182;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %83 = mul i32 %75, 400*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
decode_block_signed_multiply_32_1_op1 = 32'd400;
end
/* decode_block: %IQuantize.exit*/
/*   %88 = mul i32 %77, -1136*/
else if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
decode_block_signed_multiply_32_1_op1 = -32'd1136;
end
/* decode_block: %IQuantize.exit*/
/*   %103 = mul nsw i32 %102, 362*/
else if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
decode_block_signed_multiply_32_1_op1 = 32'd362;
end
/* decode_block: %IQuantize.exit*/
/*   %122 = mul nsw i32 %121, 362*/
else if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block_signed_multiply_32_1_op1 = 32'd362;
end
/* decode_block: %.preheader25.i*/
/*   %144 = mul nsw i32 %137, 100*/
else if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
decode_block_signed_multiply_32_1_op1 = 32'd100;
end
/* decode_block: %.preheader25.i*/
/*   %166 = mul nsw i32 %138, 196*/
else if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
decode_block_signed_multiply_32_1_op1 = 32'd196;
end
/* decode_block: %.preheader25.i*/
/*   %149 = mul i32 %139, -284*/
else if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
decode_block_signed_multiply_32_1_op1 = -32'd284;
end
/* decode_block: %.preheader25.i*/
/*   %183 = mul nsw i32 %182, 362*/
else /* if (cur_state == LEGUP_F_decode_block_BB18_82) */
begin
decode_block_signed_multiply_32_1_op1 = 32'd362;
end
end
always @(*) begin
decode_block_signed_multiply_32_1 = decode_block_signed_multiply_32_1_op0 * decode_block_signed_multiply_32_1_op1;
end
always @(*) begin
/* decode_block: %69*/
/*   %72 = mul nsw i32 %71, %70*/
if (cur_state == LEGUP_F_decode_block_BB16_53)
begin
decode_block_signed_multiply_32_0_op0 = decode_block_69_71;
end
/* decode_block: %IQuantize.exit*/
/*   %100 = mul nsw i32 %99, 362*/
else if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
decode_block_signed_multiply_32_0_op0 = decode_block_IQuantize_exit_99;
end
/* decode_block: %IQuantize.exit*/
/*   %87 = mul i32 %80, 1704*/
else if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
decode_block_signed_multiply_32_0_op0 = decode_block_IQuantize_exit_80;
end
/* decode_block: %IQuantize.exit*/
/*   %106 = mul i32 %81, -1892*/
else if (cur_state == LEGUP_F_decode_block_BB17_62)
begin
decode_block_signed_multiply_32_0_op0 = decode_block_IQuantize_exit_81;
end
/* decode_block: %IQuantize.exit*/
/*   %84 = mul i32 %82, -2008*/
else if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_signed_multiply_32_0_op0 = decode_block_IQuantize_exit_82;
end
/* decode_block: %.preheader25.i*/
/*   %161 = mul nsw i32 %160, 362*/
else if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
decode_block_signed_multiply_32_0_op0 = decode_block__preheader25_i_160;
end
/* decode_block: %.preheader25.i*/
/*   %148 = mul nsw i32 %141, 426*/
else if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
decode_block_signed_multiply_32_0_op0 = decode_block__preheader25_i_141;
end
/* decode_block: %.preheader25.i*/
/*   %167 = mul i32 %142, -473*/
else if (cur_state == LEGUP_F_decode_block_BB18_80)
begin
decode_block_signed_multiply_32_0_op0 = decode_block__preheader25_i_142;
end
/* decode_block: %.preheader25.i*/
/*   %145 = mul i32 %143, -502*/
else /* if (cur_state == LEGUP_F_decode_block_BB18_81) */
begin
decode_block_signed_multiply_32_0_op0 = decode_block__preheader25_i_143;
end
end
always @(*) begin
/* decode_block: %69*/
/*   %72 = mul nsw i32 %71, %70*/
if (cur_state == LEGUP_F_decode_block_BB16_53)
begin
decode_block_signed_multiply_32_0_op1 = decode_block_69_70_reg;
end
/* decode_block: %IQuantize.exit*/
/*   %100 = mul nsw i32 %99, 362*/
else if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
decode_block_signed_multiply_32_0_op1 = 32'd362;
end
/* decode_block: %IQuantize.exit*/
/*   %87 = mul i32 %80, 1704*/
else if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
decode_block_signed_multiply_32_0_op1 = 32'd1704;
end
/* decode_block: %IQuantize.exit*/
/*   %106 = mul i32 %81, -1892*/
else if (cur_state == LEGUP_F_decode_block_BB17_62)
begin
decode_block_signed_multiply_32_0_op1 = -32'd1892;
end
/* decode_block: %IQuantize.exit*/
/*   %84 = mul i32 %82, -2008*/
else if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_signed_multiply_32_0_op1 = -32'd2008;
end
/* decode_block: %.preheader25.i*/
/*   %161 = mul nsw i32 %160, 362*/
else if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
decode_block_signed_multiply_32_0_op1 = 32'd362;
end
/* decode_block: %.preheader25.i*/
/*   %148 = mul nsw i32 %141, 426*/
else if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
decode_block_signed_multiply_32_0_op1 = 32'd426;
end
/* decode_block: %.preheader25.i*/
/*   %167 = mul i32 %142, -473*/
else if (cur_state == LEGUP_F_decode_block_BB18_80)
begin
decode_block_signed_multiply_32_0_op1 = -32'd473;
end
/* decode_block: %.preheader25.i*/
/*   %145 = mul i32 %143, -502*/
else /* if (cur_state == LEGUP_F_decode_block_BB18_81) */
begin
decode_block_signed_multiply_32_0_op1 = -32'd502;
end
end
always @(*) begin
decode_block_signed_multiply_32_0 = decode_block_signed_multiply_32_0_op0 * decode_block_signed_multiply_32_0_op1;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %95 = mul i32 %75, 2008*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
decode_block_signed_multiply_32_2_op0 = decode_block_IQuantize_exit_75;
end
/* decode_block: %IQuantize.exit*/
/*   %109 = mul i32 %76, 1892*/
else if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
decode_block_signed_multiply_32_2_op0 = decode_block_IQuantize_exit_76;
end
/* decode_block: %IQuantize.exit*/
/*   %125 = mul nsw i32 %124, 362*/
else if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block_signed_multiply_32_2_op0 = decode_block_IQuantize_exit_124;
end
/* decode_block: %.preheader25.i*/
/*   %156 = mul nsw i32 %137, 502*/
else if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
decode_block_signed_multiply_32_2_op0 = decode_block__preheader25_i_137;
end
/* decode_block: %.preheader25.i*/
/*   %170 = mul nsw i32 %138, 473*/
else if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
decode_block_signed_multiply_32_2_op0 = decode_block__preheader25_i_138;
end
/* decode_block: %.preheader25.i*/
/*   %152 = mul nsw i32 %139, 426*/
else if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
decode_block_signed_multiply_32_2_op0 = decode_block__preheader25_i_139;
end
/* decode_block: %.preheader25.i*/
/*   %186 = mul nsw i32 %185, 362*/
else /* if (cur_state == LEGUP_F_decode_block_BB18_82) */
begin
decode_block_signed_multiply_32_2_op0 = decode_block__preheader25_i_185;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %95 = mul i32 %75, 2008*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
decode_block_signed_multiply_32_2_op1 = 32'd2008;
end
/* decode_block: %IQuantize.exit*/
/*   %109 = mul i32 %76, 1892*/
else if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
decode_block_signed_multiply_32_2_op1 = 32'd1892;
end
/* decode_block: %IQuantize.exit*/
/*   %125 = mul nsw i32 %124, 362*/
else if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
decode_block_signed_multiply_32_2_op1 = 32'd362;
end
/* decode_block: %.preheader25.i*/
/*   %156 = mul nsw i32 %137, 502*/
else if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
decode_block_signed_multiply_32_2_op1 = 32'd502;
end
/* decode_block: %.preheader25.i*/
/*   %170 = mul nsw i32 %138, 473*/
else if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
decode_block_signed_multiply_32_2_op1 = 32'd473;
end
/* decode_block: %.preheader25.i*/
/*   %152 = mul nsw i32 %139, 426*/
else if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
decode_block_signed_multiply_32_2_op1 = 32'd426;
end
/* decode_block: %.preheader25.i*/
/*   %186 = mul nsw i32 %185, 362*/
else /* if (cur_state == LEGUP_F_decode_block_BB18_82) */
begin
decode_block_signed_multiply_32_2_op1 = 32'd362;
end
end
always @(*) begin
decode_block_signed_multiply_32_2 = decode_block_signed_multiply_32_2_op0 * decode_block_signed_multiply_32_2_op1;
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %105 = mul i32 %76, 784*/
if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
decode_block_signed_multiply_32_3_op0 = decode_block_IQuantize_exit_76;
end
/* decode_block: %IQuantize.exit*/
/*   %91 = mul i32 %77, 1704*/
else if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
decode_block_signed_multiply_32_3_op0 = decode_block_IQuantize_exit_77;
end
/* decode_block: %IQuantize.exit*/
/*   %92 = mul i32 %80, 1136*/
else if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
decode_block_signed_multiply_32_3_op0 = decode_block_IQuantize_exit_80;
end
/* decode_block: %IQuantize.exit*/
/*   %110 = mul i32 %81, 784*/
else if (cur_state == LEGUP_F_decode_block_BB17_62)
begin
decode_block_signed_multiply_32_3_op0 = decode_block_IQuantize_exit_81;
end
/* decode_block: %IQuantize.exit*/
/*   %96 = mul i32 %82, 400*/
else if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_signed_multiply_32_3_op0 = decode_block_IQuantize_exit_82;
end
/* decode_block: %.preheader25.i*/
/*   %164 = mul nsw i32 %163, 362*/
else if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
decode_block_signed_multiply_32_3_op0 = decode_block__preheader25_i_163;
end
/* decode_block: %.preheader25.i*/
/*   %153 = mul nsw i32 %141, 284*/
else if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
decode_block_signed_multiply_32_3_op0 = decode_block__preheader25_i_141;
end
/* decode_block: %.preheader25.i*/
/*   %171 = mul nsw i32 %142, 196*/
else if (cur_state == LEGUP_F_decode_block_BB18_80)
begin
decode_block_signed_multiply_32_3_op0 = decode_block__preheader25_i_142;
end
/* decode_block: %.preheader25.i*/
/*   %157 = mul nsw i32 %143, 100*/
else /* if (cur_state == LEGUP_F_decode_block_BB18_81) */
begin
decode_block_signed_multiply_32_3_op0 = decode_block__preheader25_i_143;
end
end
always @(*) begin
/* decode_block: %IQuantize.exit*/
/*   %105 = mul i32 %76, 784*/
if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
decode_block_signed_multiply_32_3_op1 = 32'd784;
end
/* decode_block: %IQuantize.exit*/
/*   %91 = mul i32 %77, 1704*/
else if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
decode_block_signed_multiply_32_3_op1 = 32'd1704;
end
/* decode_block: %IQuantize.exit*/
/*   %92 = mul i32 %80, 1136*/
else if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
decode_block_signed_multiply_32_3_op1 = 32'd1136;
end
/* decode_block: %IQuantize.exit*/
/*   %110 = mul i32 %81, 784*/
else if (cur_state == LEGUP_F_decode_block_BB17_62)
begin
decode_block_signed_multiply_32_3_op1 = 32'd784;
end
/* decode_block: %IQuantize.exit*/
/*   %96 = mul i32 %82, 400*/
else if (cur_state == LEGUP_F_decode_block_BB17_63)
begin
decode_block_signed_multiply_32_3_op1 = 32'd400;
end
/* decode_block: %.preheader25.i*/
/*   %164 = mul nsw i32 %163, 362*/
else if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
decode_block_signed_multiply_32_3_op1 = 32'd362;
end
/* decode_block: %.preheader25.i*/
/*   %153 = mul nsw i32 %141, 284*/
else if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
decode_block_signed_multiply_32_3_op1 = 32'd284;
end
/* decode_block: %.preheader25.i*/
/*   %171 = mul nsw i32 %142, 196*/
else if (cur_state == LEGUP_F_decode_block_BB18_80)
begin
decode_block_signed_multiply_32_3_op1 = 32'd196;
end
/* decode_block: %.preheader25.i*/
/*   %157 = mul nsw i32 %143, 100*/
else /* if (cur_state == LEGUP_F_decode_block_BB18_81) */
begin
decode_block_signed_multiply_32_3_op1 = 32'd100;
end
end
always @(*) begin
decode_block_signed_multiply_32_3 = decode_block_signed_multiply_32_3_op0 * decode_block_signed_multiply_32_3_op1;
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %202 = sdiv i32 %201, 16*/
begin
decode_block_signed_divide_32_0_op0 = decode_block__preheader_i8_201_reg;
end
end
always @(*) begin
/* decode_block: %.preheader.i8*/
/*   %202 = sdiv i32 %201, 16*/
if (reset) begin decode_block_signed_divide_32_0_op1 = 0; end
begin
decode_block_signed_divide_32_0_op1 = 32'd16;
end
end
always @(*) begin
decode_block_signed_divide_32_0 = lpm_divide_decode_block__preheader_i8_202_out;
end
always @(*) begin
lpm_divide_decode_block__preheader_i8_202_en = memory_controller_waitrequest == 1'd0 & legup_function_call == 1'd0;
end
always @(posedge clk) begin
/* decode_block: %.lr.ph.i*/
/*   %indvar.i2 = phi i32 [ %tmp4.i, %.lr.ph.i ], [ 0, %0 ], [ 0, %24 ]*/
if (cur_state == LEGUP_function_call_7 & memory_controller_waitrequest == 1'd0 & decode_block_0_11 == 1'd1)
begin
decode_block__lr_ph_i_indvar_i2_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__lr_ph_i_indvar_i2_phi_temp"); $finish; end
end
/* decode_block: %.lr.ph.i*/
/*   %indvar.i2 = phi i32 [ %tmp4.i, %.lr.ph.i ], [ 0, %0 ], [ 0, %24 ]*/
if (cur_state == LEGUP_F_decode_block_BB3_19 & memory_controller_waitrequest == 1'd0)
begin
decode_block__lr_ph_i_indvar_i2_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__lr_ph_i_indvar_i2_phi_temp"); $finish; end
end
/* decode_block: %.lr.ph.i*/
/*   %indvar.i2 = phi i32 [ %tmp4.i, %.lr.ph.i ], [ 0, %0 ], [ 0, %24 ]*/
if (cur_state == LEGUP_F_decode_block_BB5_21 & memory_controller_waitrequest == 1'd0 & decode_block__lr_ph_i_32 == 1'd1)
begin
decode_block__lr_ph_i_indvar_i2_phi_temp <= decode_block__lr_ph_i_tmp4_i;
if (^reset !== 1'bX && ^(decode_block__lr_ph_i_tmp4_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__lr_ph_i_indvar_i2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %24*/
/*   %diff.0.i = phi i32 [ %23, %19 ], [ %13, %12 ]*/
if (cur_state == LEGUP_F_decode_block_BB1_13 & memory_controller_waitrequest == 1'd0 & decode_block_12_18 == 1'd0)
begin
decode_block_24_diff_0_i_phi_temp <= decode_block_12_13_reg;
if (^reset !== 1'bX && ^(decode_block_12_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_24_diff_0_i_phi_temp"); $finish; end
end
/* decode_block: %24*/
/*   %diff.0.i = phi i32 [ %23, %19 ], [ %13, %12 ]*/
if (cur_state == LEGUP_F_decode_block_BB2_16 & memory_controller_waitrequest == 1'd0)
begin
decode_block_24_diff_0_i_phi_temp <= decode_block_19_23;
if (^reset !== 1'bX && ^(decode_block_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_24_diff_0_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
if (cur_state == LEGUP_F_decode_block_BB4_20 & memory_controller_waitrequest == 1'd0)
begin
decode_block__backedge_i_k_0_i_phi_temp <= 32'd1;
if (^reset !== 1'bX && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__backedge_i_k_0_i_phi_temp"); $finish; end
end
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
if (cur_state == LEGUP_F_decode_block_BB11_39 & memory_controller_waitrequest == 1'd0)
begin
decode_block__backedge_i_k_0_i_phi_temp <= decode_block_57_58;
if (^reset !== 1'bX && ^(decode_block_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__backedge_i_k_0_i_phi_temp"); $finish; end
end
/* decode_block: %.backedge.i*/
/*   %k.0.i = phi i32 [ 1, %.preheader.i ], [ %58, %57 ], [ %62, %61 ]*/
if (cur_state == LEGUP_F_decode_block_BB13_41 & memory_controller_waitrequest == 1'd0)
begin
decode_block__backedge_i_k_0_i_phi_temp <= decode_block_61_62;
if (^reset !== 1'bX && ^(decode_block_61_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__backedge_i_k_0_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %DecodeHuffMCU.exit*/
/*   %i.02.i = phi i32 [ %66, %DecodeHuffMCU.exit ], [ 0, %.backedge.i ], [ 0, %41 ], [ 0, %59 ]*/
if (cur_state == LEGUP_F_decode_block_BB6_22 & memory_controller_waitrequest == 1'd0 & decode_block__backedge_i_33 == 1'd0)
begin
decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp"); $finish; end
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %i.02.i = phi i32 [ %66, %DecodeHuffMCU.exit ], [ 0, %.backedge.i ], [ 0, %41 ], [ 0, %59 ]*/
if (cur_state == LEGUP_F_decode_block_BB8_28 & memory_controller_waitrequest == 1'd0 & decode_block_41_43 == 1'd1)
begin
decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp"); $finish; end
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %i.02.i = phi i32 [ %66, %DecodeHuffMCU.exit ], [ 0, %.backedge.i ], [ 0, %41 ], [ 0, %59 ]*/
if (cur_state == LEGUP_F_decode_block_BB12_40 & memory_controller_waitrequest == 1'd0 & decode_block_59_60 == 1'd0)
begin
decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp"); $finish; end
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %i.02.i = phi i32 [ %66, %DecodeHuffMCU.exit ], [ 0, %.backedge.i ], [ 0, %41 ], [ 0, %59 ]*/
if (cur_state == LEGUP_F_decode_block_BB14_46 & memory_controller_waitrequest == 1'd0 & decode_block_DecodeHuffMCU_exit_exitcond10_reg == 1'd0)
begin
decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp <= decode_block_DecodeHuffMCU_exit_66_reg;
if (^reset !== 1'bX && ^(decode_block_DecodeHuffMCU_exit_66_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_DecodeHuffMCU_exit_i_02_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %69*/
/*   %indvar.i4 = phi i32 [ 0, %IZigzagMatrix.exit ], [ %tmp.i5, %69 ]*/
if (cur_state == LEGUP_F_decode_block_BB15_49 & memory_controller_waitrequest == 1'd0)
begin
decode_block_69_indvar_i4_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_69_indvar_i4_phi_temp"); $finish; end
end
/* decode_block: %69*/
/*   %indvar.i4 = phi i32 [ 0, %IZigzagMatrix.exit ], [ %tmp.i5, %69 ]*/
if (cur_state == LEGUP_F_decode_block_BB16_53 & memory_controller_waitrequest == 1'd0 & decode_block_69_exitcond8_reg == 1'd0)
begin
decode_block_69_indvar_i4_phi_temp <= decode_block_69_tmp_i5_reg;
if (^reset !== 1'bX && ^(decode_block_69_tmp_i5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_69_indvar_i4_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %IQuantize.exit*/
/*   %i.027.i = phi i32 [ %135, %IQuantize.exit ], [ 0, %69 ]*/
if (cur_state == LEGUP_F_decode_block_BB16_53 & memory_controller_waitrequest == 1'd0 & decode_block_69_exitcond8_reg == 1'd1)
begin
decode_block_IQuantize_exit_i_027_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_i_027_i_phi_temp"); $finish; end
end
/* decode_block: %IQuantize.exit*/
/*   %i.027.i = phi i32 [ %135, %IQuantize.exit ], [ 0, %69 ]*/
if (cur_state == LEGUP_F_decode_block_BB17_71 & memory_controller_waitrequest == 1'd0 & decode_block_IQuantize_exit_exitcond43_i_reg == 1'd0)
begin
decode_block_IQuantize_exit_i_027_i_phi_temp <= decode_block_IQuantize_exit_135_reg;
if (^reset !== 1'bX && ^(decode_block_IQuantize_exit_135_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_IQuantize_exit_i_027_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %.preheader25.i*/
/*   %i.126.i = phi i32 [ %196, %.preheader25.i ], [ 0, %IQuantize.exit ]*/
if (cur_state == LEGUP_F_decode_block_BB17_71 & memory_controller_waitrequest == 1'd0 & decode_block_IQuantize_exit_exitcond43_i_reg == 1'd1)
begin
decode_block__preheader25_i_i_126_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_i_126_i_phi_temp"); $finish; end
end
/* decode_block: %.preheader25.i*/
/*   %i.126.i = phi i32 [ %196, %.preheader25.i ], [ 0, %IQuantize.exit ]*/
if (cur_state == LEGUP_F_decode_block_BB18_89 & memory_controller_waitrequest == 1'd0 & decode_block__preheader25_i_exitcond28_i_reg == 1'd0)
begin
decode_block__preheader25_i_i_126_i_phi_temp <= decode_block__preheader25_i_196_reg;
if (^reset !== 1'bX && ^(decode_block__preheader25_i_196_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader25_i_i_126_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %.preheader.i8*/
/*   %i.224.i = phi i32 [ %203, %.preheader.i8 ], [ 0, %.preheader25.i ]*/
if (cur_state == LEGUP_F_decode_block_BB18_89 & memory_controller_waitrequest == 1'd0 & decode_block__preheader25_i_exitcond28_i_reg == 1'd1)
begin
decode_block__preheader_i8_i_224_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i8_i_224_i_phi_temp"); $finish; end
end
/* decode_block: %.preheader.i8*/
/*   %i.224.i = phi i32 [ %203, %.preheader.i8 ], [ 0, %.preheader25.i ]*/
if (cur_state == LEGUP_F_decode_block_BB19_140 & memory_controller_waitrequest == 1'd0 & decode_block__preheader_i8_exitcond_i_reg == 1'd0)
begin
decode_block__preheader_i8_i_224_i_phi_temp <= decode_block__preheader_i8_203_reg;
if (^reset !== 1'bX && ^(decode_block__preheader_i8_203_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block__preheader_i8_i_224_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %ChenIDct.exit*/
/*   %indvar.i1 = phi i32 [ %tmp.i3, %ChenIDct.exit ], [ 0, %.preheader.i8 ]*/
if (cur_state == LEGUP_F_decode_block_BB19_140 & memory_controller_waitrequest == 1'd0 & decode_block__preheader_i8_exitcond_i_reg == 1'd1)
begin
decode_block_ChenIDct_exit_indvar_i1_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_ChenIDct_exit_indvar_i1_phi_temp"); $finish; end
end
/* decode_block: %ChenIDct.exit*/
/*   %indvar.i1 = phi i32 [ %tmp.i3, %ChenIDct.exit ], [ 0, %.preheader.i8 ]*/
if (cur_state == LEGUP_F_decode_block_BB20_143 & memory_controller_waitrequest == 1'd0 & decode_block_ChenIDct_exit_exitcond7_reg == 1'd0)
begin
decode_block_ChenIDct_exit_indvar_i1_phi_temp <= decode_block_ChenIDct_exit_tmp_i3_reg;
if (^reset !== 1'bX && ^(decode_block_ChenIDct_exit_tmp_i3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_ChenIDct_exit_indvar_i1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %indvar.i = phi i32 [ %tmp.i, %212 ], [ 0, %ChenIDct.exit ]*/
if (cur_state == LEGUP_F_decode_block_BB20_143 & memory_controller_waitrequest == 1'd0 & decode_block_ChenIDct_exit_exitcond7_reg == 1'd1)
begin
decode_block_PostshiftIDctMatrix_exit_indvar_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_PostshiftIDctMatrix_exit_indvar_i_phi_temp"); $finish; end
end
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %indvar.i = phi i32 [ %tmp.i, %212 ], [ 0, %ChenIDct.exit ]*/
if (cur_state == LEGUP_F_decode_block_BB25_150 & memory_controller_waitrequest == 1'd0 & decode_block_212_exitcond == 1'd0)
begin
decode_block_PostshiftIDctMatrix_exit_indvar_i_phi_temp <= decode_block_PostshiftIDctMatrix_exit_tmp_i_reg;
if (^reset !== 1'bX && ^(decode_block_PostshiftIDctMatrix_exit_tmp_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_PostshiftIDctMatrix_exit_indvar_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* decode_block: %BoundIDctMatrix.exit*/
/*   ret void*/
if (cur_state == LEGUP_F_decode_block_BB26_151)
begin
finish <= memory_controller_waitrequest == 1'd0;
if (^reset !== 1'bX && ^(memory_controller_waitrequest == 1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(*) begin
memory_controller_address = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_address = 0;
end
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
memory_controller_address = DecodeHuffman_memory_controller_address;
end
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
memory_controller_address = buf_getv_memory_controller_address;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
memory_controller_address = DecodeHuffman_memory_controller_address;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
memory_controller_address = buf_getv_memory_controller_address;
end
/* decode_block: %0*/
/*   %2 = load i8* %1, align 1, !tbaa !0*/
if (cur_state == LEGUP_F_decode_block_BB0_1)
begin
memory_controller_address = decode_block_0_1;
end
/* decode_block: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
memory_controller_address = decode_block_0_5;
end
/* decode_block: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB1_11)
begin
memory_controller_address = decode_block_12_15_reg;
end
/* decode_block: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB2_14)
begin
memory_controller_address = decode_block_19_20;
end
/* decode_block: %24*/
/*   %25 = load i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_17)
begin
memory_controller_address = arg_HuffBuff;
end
/* decode_block: %24*/
/*   store i32 %26, i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_19)
begin
memory_controller_address = arg_HuffBuff;
end
/* decode_block: %.lr.ph.i*/
/*   store i32 0, i32* %mptr.03.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB5_21)
begin
memory_controller_address = decode_block__lr_ph_i_mptr_03_i;
end
/* decode_block: %34*/
/*   %35 = load i32* %28, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB7_23)
begin
memory_controller_address = decode_block__preheader_i_28_reg;
end
/* decode_block: %44*/
/*   store i32 %45, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_32)
begin
memory_controller_address = decode_block_44_46_reg;
end
/* decode_block: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_33)
begin
memory_controller_address = decode_block_44_48_reg;
end
/* decode_block: %52*/
/*   %54 = load i32* %53, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_36)
begin
memory_controller_address = decode_block_52_53;
end
/* decode_block: %52*/
/*   store i32 %56, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_38)
begin
memory_controller_address = decode_block_44_46_reg;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %63 = load i32* %scevgep.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_42)
begin
memory_controller_address = decode_block_DecodeHuffMCU_exit_scevgep_i;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %65 = load i32* %64, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_44)
begin
memory_controller_address = decode_block_DecodeHuffMCU_exit_64;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   store i32 %65, i32* %.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_46)
begin
memory_controller_address = decode_block_DecodeHuffMCU_exit__01_i_reg;
end
/* decode_block: %IZigzagMatrix.exit*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if (cur_state == LEGUP_F_decode_block_BB15_47)
begin
memory_controller_address = decode_block_IZigzagMatrix_exit_67;
end
/* decode_block: %69*/
/*   %70 = load i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_50)
begin
memory_controller_address = decode_block_69_mptr_02_i;
end
/* decode_block: %69*/
/*   %71 = load i32* %.01.i6, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_51)
begin
memory_controller_address = decode_block_69__01_i6_reg;
end
/* decode_block: %69*/
/*   store i32 %72, i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_53)
begin
memory_controller_address = decode_block_69_mptr_02_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   %73 = load i32* %scevgep44.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep44_i;
end
/* decode_block: %IQuantize.exit*/
/*   %75 = load i32* %scevgep48.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_55)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep48_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   %76 = load i32* %scevgep51.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_56)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep51_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   %77 = load i32* %scevgep54.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep54_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   %78 = load i32* %scevgep57.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep57_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   %80 = load i32* %scevgep60.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep60_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   %81 = load i32* %scevgep63.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep63_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   %82 = load i32* %scevgep66.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep66_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %127, i32* %scevgep45.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep45_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %128, i32* %scevgep47.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_65)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep47_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %129, i32* %scevgep50.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_66)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep50_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %130, i32* %scevgep53.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_67)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep53_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %131, i32* %scevgep56.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_68)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep56_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %132, i32* %scevgep59.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_69)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep59_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %133, i32* %scevgep62.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_70)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep62_i_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %134, i32* %scevgep65.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_71)
begin
memory_controller_address = decode_block_IQuantize_exit_scevgep65_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   %136 = load i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
memory_controller_address = decode_block__preheader25_i_scevgep42_i;
end
/* decode_block: %.preheader25.i*/
/*   %137 = load i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_73)
begin
memory_controller_address = decode_block__preheader25_i_scevgep41_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   %138 = load i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_74)
begin
memory_controller_address = decode_block__preheader25_i_scevgep39_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   %139 = load i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
memory_controller_address = decode_block__preheader25_i_scevgep37_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   %140 = load i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
memory_controller_address = decode_block__preheader25_i_scevgep35_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   %141 = load i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
memory_controller_address = decode_block__preheader25_i_scevgep33_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   %142 = load i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
memory_controller_address = decode_block__preheader25_i_scevgep31_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   %143 = load i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
memory_controller_address = decode_block__preheader25_i_scevgep_i7_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %188, i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
memory_controller_address = decode_block__preheader25_i_scevgep42_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %189, i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_83)
begin
memory_controller_address = decode_block__preheader25_i_scevgep41_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %190, i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_84)
begin
memory_controller_address = decode_block__preheader25_i_scevgep39_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %191, i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_85)
begin
memory_controller_address = decode_block__preheader25_i_scevgep37_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %192, i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_86)
begin
memory_controller_address = decode_block__preheader25_i_scevgep35_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %193, i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_87)
begin
memory_controller_address = decode_block__preheader25_i_scevgep33_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %194, i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_88)
begin
memory_controller_address = decode_block__preheader25_i_scevgep31_i_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %195, i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_89)
begin
memory_controller_address = decode_block__preheader25_i_scevgep_i7_reg;
end
/* decode_block: %.preheader.i8*/
/*   %197 = load i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_90)
begin
memory_controller_address = decode_block__preheader_i8_aptr_023_i;
end
/* decode_block: %.preheader.i8*/
/*   store i32 %202, i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_140)
begin
memory_controller_address = decode_block__preheader_i8_aptr_023_i_reg;
end
/* decode_block: %ChenIDct.exit*/
/*   %204 = load i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_141)
begin
memory_controller_address = decode_block_ChenIDct_exit_mptr_01_i2;
end
/* decode_block: %ChenIDct.exit*/
/*   store i32 %205, i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_143)
begin
memory_controller_address = decode_block_ChenIDct_exit_mptr_01_i2_reg;
end
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %206 = load i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB21_144)
begin
memory_controller_address = decode_block_PostshiftIDctMatrix_exit_mptr_01_i;
end
/* decode_block: %208*/
/*   store i32 0, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB22_147)
begin
memory_controller_address = decode_block_PostshiftIDctMatrix_exit_mptr_01_i_reg;
end
/* decode_block: %211*/
/*   store i32 255, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB24_149)
begin
memory_controller_address = decode_block_PostshiftIDctMatrix_exit_mptr_01_i_reg;
end
end
always @(*) begin
memory_controller_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_enable = 1'd0;
end
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
memory_controller_enable = DecodeHuffman_memory_controller_enable;
end
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
memory_controller_enable = buf_getv_memory_controller_enable;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
memory_controller_enable = DecodeHuffman_memory_controller_enable;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
memory_controller_enable = buf_getv_memory_controller_enable;
end
/* decode_block: %0*/
/*   %2 = load i8* %1, align 1, !tbaa !0*/
if (cur_state == LEGUP_F_decode_block_BB0_1)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB1_11)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB2_14)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %24*/
/*   %25 = load i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_17)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %24*/
/*   store i32 %26, i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_19)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.lr.ph.i*/
/*   store i32 0, i32* %mptr.03.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB5_21)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %34*/
/*   %35 = load i32* %28, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB7_23)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %44*/
/*   store i32 %45, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_32)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_33)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %52*/
/*   %54 = load i32* %53, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_36)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %52*/
/*   store i32 %56, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_38)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %63 = load i32* %scevgep.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_42)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %65 = load i32* %64, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_44)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   store i32 %65, i32* %.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_46)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IZigzagMatrix.exit*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if (cur_state == LEGUP_F_decode_block_BB15_47)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %69*/
/*   %70 = load i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_50)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %69*/
/*   %71 = load i32* %.01.i6, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_51)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %69*/
/*   store i32 %72, i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_53)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %73 = load i32* %scevgep44.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %75 = load i32* %scevgep48.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_55)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %76 = load i32* %scevgep51.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_56)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %77 = load i32* %scevgep54.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %78 = load i32* %scevgep57.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %80 = load i32* %scevgep60.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %81 = load i32* %scevgep63.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %82 = load i32* %scevgep66.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %127, i32* %scevgep45.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %128, i32* %scevgep47.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_65)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %129, i32* %scevgep50.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_66)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %130, i32* %scevgep53.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_67)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %131, i32* %scevgep56.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_68)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %132, i32* %scevgep59.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_69)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %133, i32* %scevgep62.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_70)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %134, i32* %scevgep65.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_71)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %136 = load i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %137 = load i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_73)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %138 = load i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_74)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %139 = load i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %140 = load i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %141 = load i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %142 = load i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %143 = load i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %188, i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %189, i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_83)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %190, i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_84)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %191, i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_85)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %192, i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_86)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %193, i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_87)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %194, i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_88)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %195, i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_89)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader.i8*/
/*   %197 = load i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_90)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %.preheader.i8*/
/*   store i32 %202, i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_140)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %ChenIDct.exit*/
/*   %204 = load i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_141)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %ChenIDct.exit*/
/*   store i32 %205, i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_143)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %206 = load i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB21_144)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %208*/
/*   store i32 0, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB22_147)
begin
memory_controller_enable = 1'd1;
end
/* decode_block: %211*/
/*   store i32 255, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB24_149)
begin
memory_controller_enable = 1'd1;
end
end
always @(*) begin
memory_controller_write_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
memory_controller_write_enable = DecodeHuffman_memory_controller_write_enable;
end
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
memory_controller_write_enable = buf_getv_memory_controller_write_enable;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
memory_controller_write_enable = DecodeHuffman_memory_controller_write_enable;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
memory_controller_write_enable = buf_getv_memory_controller_write_enable;
end
/* decode_block: %0*/
/*   %2 = load i8* %1, align 1, !tbaa !0*/
if (cur_state == LEGUP_F_decode_block_BB0_1)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB1_11)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB2_14)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %24*/
/*   %25 = load i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_17)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %24*/
/*   store i32 %26, i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_19)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.lr.ph.i*/
/*   store i32 0, i32* %mptr.03.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB5_21)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %34*/
/*   %35 = load i32* %28, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB7_23)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %44*/
/*   store i32 %45, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_32)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_33)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %52*/
/*   %54 = load i32* %53, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_36)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %52*/
/*   store i32 %56, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_38)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %63 = load i32* %scevgep.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_42)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %65 = load i32* %64, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_44)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   store i32 %65, i32* %.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_46)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IZigzagMatrix.exit*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if (cur_state == LEGUP_F_decode_block_BB15_47)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %69*/
/*   %70 = load i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_50)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %69*/
/*   %71 = load i32* %.01.i6, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_51)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %69*/
/*   store i32 %72, i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_53)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   %73 = load i32* %scevgep44.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %IQuantize.exit*/
/*   %75 = load i32* %scevgep48.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_55)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %IQuantize.exit*/
/*   %76 = load i32* %scevgep51.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_56)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %IQuantize.exit*/
/*   %77 = load i32* %scevgep54.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %IQuantize.exit*/
/*   %78 = load i32* %scevgep57.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %IQuantize.exit*/
/*   %80 = load i32* %scevgep60.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %IQuantize.exit*/
/*   %81 = load i32* %scevgep63.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %IQuantize.exit*/
/*   %82 = load i32* %scevgep66.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %127, i32* %scevgep45.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %128, i32* %scevgep47.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_65)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %129, i32* %scevgep50.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_66)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %130, i32* %scevgep53.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_67)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %131, i32* %scevgep56.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_68)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %132, i32* %scevgep59.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_69)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %133, i32* %scevgep62.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_70)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %134, i32* %scevgep65.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_71)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   %136 = load i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader25.i*/
/*   %137 = load i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_73)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader25.i*/
/*   %138 = load i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_74)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader25.i*/
/*   %139 = load i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader25.i*/
/*   %140 = load i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader25.i*/
/*   %141 = load i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader25.i*/
/*   %142 = load i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader25.i*/
/*   %143 = load i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %188, i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %189, i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_83)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %190, i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_84)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %191, i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_85)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %192, i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_86)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %193, i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_87)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %194, i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_88)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %195, i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_89)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %.preheader.i8*/
/*   %197 = load i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_90)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %.preheader.i8*/
/*   store i32 %202, i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_140)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %ChenIDct.exit*/
/*   %204 = load i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_141)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %ChenIDct.exit*/
/*   store i32 %205, i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_143)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %206 = load i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB21_144)
begin
memory_controller_write_enable = 1'd0;
end
/* decode_block: %208*/
/*   store i32 0, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB22_147)
begin
memory_controller_write_enable = 1'd1;
end
/* decode_block: %211*/
/*   store i32 255, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB24_149)
begin
memory_controller_write_enable = 1'd1;
end
end
always @(*) begin
memory_controller_in = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_in = 64'd0;
end
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
memory_controller_in = DecodeHuffman_memory_controller_in;
end
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
memory_controller_in = buf_getv_memory_controller_in;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
memory_controller_in = DecodeHuffman_memory_controller_in;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
memory_controller_in = buf_getv_memory_controller_in;
end
/* decode_block: %24*/
/*   store i32 %26, i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_19)
begin
memory_controller_in = decode_block_24_26;
end
/* decode_block: %.lr.ph.i*/
/*   store i32 0, i32* %mptr.03.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB5_21)
begin
memory_controller_in = 32'd0;
end
/* decode_block: %44*/
/*   store i32 %45, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_32)
begin
memory_controller_in = decode_block_44_45_reg;
end
/* decode_block: %52*/
/*   store i32 %56, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_38)
begin
memory_controller_in = decode_block_52_56;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   store i32 %65, i32* %.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_46)
begin
memory_controller_in = decode_block_DecodeHuffMCU_exit_65;
end
/* decode_block: %69*/
/*   store i32 %72, i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_53)
begin
memory_controller_in = decode_block_69_72;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %127, i32* %scevgep45.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
memory_controller_in = decode_block_IQuantize_exit_127;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %128, i32* %scevgep47.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_65)
begin
memory_controller_in = decode_block_IQuantize_exit_128;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %129, i32* %scevgep50.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_66)
begin
memory_controller_in = decode_block_IQuantize_exit_129_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %130, i32* %scevgep53.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_67)
begin
memory_controller_in = decode_block_IQuantize_exit_130_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %131, i32* %scevgep56.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_68)
begin
memory_controller_in = decode_block_IQuantize_exit_131_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %132, i32* %scevgep59.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_69)
begin
memory_controller_in = decode_block_IQuantize_exit_132_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %133, i32* %scevgep62.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_70)
begin
memory_controller_in = decode_block_IQuantize_exit_133_reg;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %134, i32* %scevgep65.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_71)
begin
memory_controller_in = decode_block_IQuantize_exit_134_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %188, i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
memory_controller_in = decode_block__preheader25_i_188;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %189, i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_83)
begin
memory_controller_in = decode_block__preheader25_i_189;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %190, i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_84)
begin
memory_controller_in = decode_block__preheader25_i_190_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %191, i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_85)
begin
memory_controller_in = decode_block__preheader25_i_191_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %192, i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_86)
begin
memory_controller_in = decode_block__preheader25_i_192_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %193, i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_87)
begin
memory_controller_in = decode_block__preheader25_i_193_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %194, i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_88)
begin
memory_controller_in = decode_block__preheader25_i_194_reg;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %195, i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_89)
begin
memory_controller_in = decode_block__preheader25_i_195_reg;
end
/* decode_block: %.preheader.i8*/
/*   store i32 %202, i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_140)
begin
memory_controller_in = decode_block__preheader_i8_202_reg;
end
/* decode_block: %ChenIDct.exit*/
/*   store i32 %205, i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_143)
begin
memory_controller_in = decode_block_ChenIDct_exit_205;
end
/* decode_block: %208*/
/*   store i32 0, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB22_147)
begin
memory_controller_in = 32'd0;
end
/* decode_block: %211*/
/*   store i32 255, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB24_149)
begin
memory_controller_in = 32'd255;
end
end
always @(*) begin
memory_controller_size = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_size = 2'd0;
end
/* decode_block: %0*/
/*   %10 = call fastcc i32 @DecodeHuffman(i32* %4, i32 %6, i32* %7, i32* %8, i32* %9) nounwind*/
if (cur_state == LEGUP_function_call_6)
begin
memory_controller_size = DecodeHuffman_memory_controller_size;
end
/* decode_block: %12*/
/*   %13 = call fastcc i32 @buf_getv(i32 %10) nounwind*/
if (cur_state == LEGUP_function_call_9)
begin
memory_controller_size = buf_getv_memory_controller_size;
end
/* decode_block: %34*/
/*   %36 = call fastcc i32 @DecodeHuffman(i32* %27, i32 %35, i32* %29, i32* %30, i32* %31) nounwind*/
if (cur_state == LEGUP_function_call_26)
begin
memory_controller_size = DecodeHuffman_memory_controller_size;
end
/* decode_block: %44*/
/*   %45 = call fastcc i32 @buf_getv(i32 %37) nounwind*/
if (cur_state == LEGUP_function_call_30)
begin
memory_controller_size = buf_getv_memory_controller_size;
end
/* decode_block: %0*/
/*   %2 = load i8* %1, align 1, !tbaa !0*/
if (cur_state == LEGUP_F_decode_block_BB0_1)
begin
memory_controller_size = 2'd0;
end
/* decode_block: %0*/
/*   %6 = load i32* %5, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB0_3)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %12*/
/*   %16 = load i32* %15, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB1_11)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB2_14)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %24*/
/*   %25 = load i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_17)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %24*/
/*   store i32 %26, i32* %HuffBuff, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB3_19)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.lr.ph.i*/
/*   store i32 0, i32* %mptr.03.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB5_21)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %34*/
/*   %35 = load i32* %28, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB7_23)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %44*/
/*   store i32 %45, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_32)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %44*/
/*   %49 = load i32* %48, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB9_33)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %52*/
/*   %54 = load i32* %53, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_36)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %52*/
/*   store i32 %56, i32* %46, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB10_38)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %63 = load i32* %scevgep.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_42)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   %65 = load i32* %64, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_44)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %DecodeHuffMCU.exit*/
/*   store i32 %65, i32* %.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB14_46)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IZigzagMatrix.exit*/
/*   %68 = load i8* %67, align 1, !tbaa !0*/
if (cur_state == LEGUP_F_decode_block_BB15_47)
begin
memory_controller_size = 2'd0;
end
/* decode_block: %69*/
/*   %70 = load i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_50)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %69*/
/*   %71 = load i32* %.01.i6, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_51)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %69*/
/*   store i32 %72, i32* %mptr.02.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB16_53)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   %73 = load i32* %scevgep44.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_54)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   %75 = load i32* %scevgep48.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_55)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   %76 = load i32* %scevgep51.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_56)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   %77 = load i32* %scevgep54.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_57)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   %78 = load i32* %scevgep57.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_58)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   %80 = load i32* %scevgep60.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_59)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   %81 = load i32* %scevgep63.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_60)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   %82 = load i32* %scevgep66.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_61)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %127, i32* %scevgep45.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_64)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %128, i32* %scevgep47.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_65)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %129, i32* %scevgep50.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_66)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %130, i32* %scevgep53.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_67)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %131, i32* %scevgep56.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_68)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %132, i32* %scevgep59.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_69)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %133, i32* %scevgep62.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_70)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %IQuantize.exit*/
/*   store i32 %134, i32* %scevgep65.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB17_71)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   %136 = load i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_72)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   %137 = load i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_73)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   %138 = load i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_74)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   %139 = load i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_75)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   %140 = load i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_76)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   %141 = load i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_77)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   %142 = load i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_78)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   %143 = load i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_79)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %188, i32* %scevgep42.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_82)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %189, i32* %scevgep41.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_83)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %190, i32* %scevgep39.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_84)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %191, i32* %scevgep37.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_85)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %192, i32* %scevgep35.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_86)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %193, i32* %scevgep33.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_87)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %194, i32* %scevgep31.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_88)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader25.i*/
/*   store i32 %195, i32* %scevgep.i7, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB18_89)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader.i8*/
/*   %197 = load i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_90)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %.preheader.i8*/
/*   store i32 %202, i32* %aptr.023.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB19_140)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %ChenIDct.exit*/
/*   %204 = load i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_141)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %ChenIDct.exit*/
/*   store i32 %205, i32* %mptr.01.i2, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB20_143)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %PostshiftIDctMatrix.exit*/
/*   %206 = load i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB21_144)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %208*/
/*   store i32 0, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB22_147)
begin
memory_controller_size = 2'd2;
end
/* decode_block: %211*/
/*   store i32 255, i32* %mptr.01.i, align 4, !tbaa !2*/
if (cur_state == LEGUP_F_decode_block_BB24_149)
begin
memory_controller_size = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module buf_getv
(
	clk,
	reset,
	start,
	finish,
	return_val,
	arg_n,
	memory_controller_address,
	memory_controller_enable,
	memory_controller_write_enable,
	memory_controller_waitrequest,
	memory_controller_in,
	memory_controller_size,
	memory_controller_out
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_buf_getv_BB0_1 = 6'd1;
parameter [5:0] LEGUP_F_buf_getv_BB0_2 = 6'd2;
parameter [5:0] LEGUP_F_buf_getv_BB0_3 = 6'd3;
parameter [5:0] LEGUP_F_buf_getv_BB1_4 = 6'd4;
parameter [5:0] LEGUP_F_buf_getv_BB2_5 = 6'd5;
parameter [5:0] LEGUP_F_buf_getv_BB2_6 = 6'd6;
parameter [5:0] LEGUP_F_buf_getv_BB2_7 = 6'd7;
parameter [5:0] LEGUP_F_buf_getv_BB3_8 = 6'd8;
parameter [5:0] LEGUP_F_buf_getv_BB3_9 = 6'd9;
parameter [5:0] LEGUP_F_buf_getv_BB3_10 = 6'd10;
parameter [5:0] LEGUP_F_buf_getv_BB3_11 = 6'd11;
parameter [5:0] LEGUP_F_buf_getv_BB3_12 = 6'd12;
parameter [5:0] LEGUP_F_buf_getv_BB3_13 = 6'd13;
parameter [5:0] LEGUP_F_buf_getv_BB4_14 = 6'd14;
parameter [5:0] LEGUP_F_buf_getv_BB4_15 = 6'd15;
parameter [5:0] LEGUP_F_buf_getv_BB4_16 = 6'd16;
parameter [5:0] LEGUP_F_buf_getv_BB4_17 = 6'd17;
parameter [5:0] LEGUP_F_buf_getv_BB5_18 = 6'd18;
parameter [5:0] LEGUP_F_buf_getv_BB6_19 = 6'd19;
parameter [5:0] LEGUP_F_buf_getv_BB7_20 = 6'd20;
parameter [5:0] LEGUP_F_buf_getv_BB7_21 = 6'd21;
parameter [5:0] LEGUP_F_buf_getv_BB7_22 = 6'd22;
parameter [5:0] LEGUP_F_buf_getv_BB7_23 = 6'd23;
parameter [5:0] LEGUP_F_buf_getv_BB7_24 = 6'd24;
parameter [5:0] LEGUP_F_buf_getv_BB8_25 = 6'd25;
parameter [5:0] LEGUP_F_buf_getv_BB8_26 = 6'd26;
parameter [5:0] LEGUP_F_buf_getv_BB8_27 = 6'd27;
parameter [5:0] LEGUP_F_buf_getv_BB8_28 = 6'd28;
parameter [5:0] LEGUP_F_buf_getv_BB8_29 = 6'd29;
parameter [5:0] LEGUP_F_buf_getv_BB8_30 = 6'd30;
parameter [5:0] LEGUP_F_buf_getv_BB9_31 = 6'd31;
parameter [5:0] LEGUP_F_buf_getv_BB9_32 = 6'd32;
parameter [5:0] LEGUP_F_buf_getv_BB9_33 = 6'd33;
parameter [5:0] LEGUP_F_buf_getv_BB9_34 = 6'd34;
parameter [5:0] LEGUP_F_buf_getv_BB10_35 = 6'd35;
parameter [5:0] LEGUP_F_buf_getv_BB10_36 = 6'd36;
parameter [5:0] LEGUP_F_buf_getv_BB10_37 = 6'd37;
parameter [5:0] LEGUP_F_buf_getv_BB10_38 = 6'd38;
parameter [5:0] LEGUP_F_buf_getv_BB11_39 = 6'd39;
parameter [5:0] LEGUP_F_buf_getv_BB12_40 = 6'd40;
parameter [5:0] LEGUP_F_buf_getv_BB12_41 = 6'd41;
parameter [5:0] LEGUP_F_buf_getv_BB13_42 = 6'd42;
parameter [5:0] LEGUP_F_buf_getv_BB14_43 = 6'd43;
parameter [5:0] LEGUP_F_buf_getv_BB14_44 = 6'd44;
parameter [5:0] LEGUP_F_buf_getv_BB14_45 = 6'd45;
parameter [5:0] LEGUP_F_buf_getv_BB14_46 = 6'd46;
parameter [5:0] LEGUP_F_buf_getv_BB14_47 = 6'd47;
parameter [5:0] LEGUP_F_buf_getv_BB15_48 = 6'd48;
parameter [5:0] LEGUP_F_buf_getv_BB15_49 = 6'd49;
parameter [5:0] LEGUP_F_buf_getv_BB15_50 = 6'd50;
parameter [5:0] LEGUP_F_buf_getv_BB15_51 = 6'd51;
parameter [5:0] LEGUP_F_buf_getv_BB15_52 = 6'd52;
parameter [5:0] LEGUP_F_buf_getv_BB16_53 = 6'd53;

input  clk;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
input [31:0] arg_n;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;
output reg  memory_controller_enable;
output reg  memory_controller_write_enable;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;
output reg [1:0] memory_controller_size;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;
reg [5:0] cur_state;
reg [31:0] buf_getv_0_1;
reg [31:0] buf_getv_0_1_reg;
reg [31:0] buf_getv_0_2;
reg [31:0] buf_getv_0_3;
reg [31:0] buf_getv_0_3_reg;
reg [31:0] buf_getv_4_5;
reg [31:0] buf_getv_4_5_reg;
reg [31:0] buf_getv_4_indvar;
reg [31:0] buf_getv_4_indvar_reg;
reg [31:0] buf_getv_4_tmp;
reg [31:0] buf_getv_4_p_0;
reg [31:0] buf_getv_4_p_0_reg;
reg  buf_getv_4_6;
reg  buf_getv_7_8;
reg  buf_getv_7_8_reg;
reg [31:0] buf_getv_7_9;
reg [31:0] buf_getv_7_9_reg;
reg [31:0] buf_getv_10_11;
reg [31:0] buf_getv_10_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_10_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_10_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_10_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_10_13_reg;
reg [7:0] buf_getv_10_14;
reg  buf_getv_10_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_16_17;
reg [7:0] buf_getv_16_18;
reg [7:0] buf_getv_16_18_reg;
reg  buf_getv_16_19;
reg [7:0] buf_getv_22_temp_0_in_i;
reg [31:0] buf_getv_22_temp_0_i;
reg [31:0] buf_getv_pgetc_exit__0_i;
reg [31:0] buf_getv_pgetc_exit_23;
reg [31:0] buf_getv_pgetc_exit_24;
reg [31:0] buf_getv_pgetc_exit_25;
reg [31:0] buf_getv_pgetc_exit_25_reg;
reg [31:0] buf_getv_pgetc_exit_26;
reg [31:0] buf_getv_pgetc_exit_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_pgetc_exit_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_pgetc_exit_27_reg;
reg [31:0] buf_getv_pgetc_exit_28;
reg [31:0] buf_getv_pgetc_exit_29;
reg [31:0] buf_getv_30_31;
reg [31:0] buf_getv_30_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_30_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_30_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_30_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_30_33_reg;
reg [7:0] buf_getv_30_34;
reg  buf_getv_30_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_36_37;
reg [7:0] buf_getv_36_38;
reg [7:0] buf_getv_36_38_reg;
reg  buf_getv_36_39;
reg [31:0] buf_getv_40__pre_pre;
reg [31:0] buf_getv_42__pre;
reg [7:0] buf_getv_42_temp_0_in_i1;
reg [31:0] buf_getv_42_temp_0_i2;
reg [31:0] buf_getv_pgetc_exit4_43;
reg [31:0] buf_getv_pgetc_exit4__0_i3;
reg [31:0] buf_getv_pgetc_exit4_44;
reg [31:0] buf_getv_pgetc_exit4_45;
reg [31:0] buf_getv_pgetc_exit4_45_reg;
reg [31:0] buf_getv_pgetc_exit4_indvar_next;
reg [31:0] buf_getv_pgetc_exit4_indvar_next_reg;
reg  buf_getv_46_47;
reg [31:0] buf_getv_48_49;
reg [31:0] buf_getv_48_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_48_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_48_50_reg;
reg [31:0] buf_getv_48_51;
reg [31:0] buf_getv_48_52;
reg [31:0] buf_getv_53_54;
reg [31:0] buf_getv_53_54_reg;
reg [31:0] buf_getv_53_55;
reg [31:0] buf_getv_53_56;
reg [31:0] buf_getv_53_57;
reg [31:0] buf_getv_53_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_53_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] buf_getv_53_58_reg;
reg [31:0] buf_getv_53_59;
reg [31:0] buf_getv_53_60;
reg [31:0] buf_getv_61__0;
reg [31:0] buf_getv_signed_multiply_32_0_op0;
reg [31:0] buf_getv_signed_multiply_32_0_op1;
reg [31:0] buf_getv_signed_multiply_32_0;
reg [31:0] buf_getv_4_5_phi_temp;
reg [31:0] buf_getv_4_indvar_phi_temp;
reg [7:0] buf_getv_22_temp_0_in_i_phi_temp;
reg [31:0] buf_getv_pgetc_exit__0_i_phi_temp;
reg [31:0] buf_getv_61__0_phi_temp;
reg [31:0] buf_getv_42__pre_phi_temp;
reg [7:0] buf_getv_42_temp_0_in_i1_phi_temp;
reg [31:0] buf_getv_pgetc_exit4_43_phi_temp;
reg [31:0] buf_getv_pgetc_exit4__0_i3_phi_temp;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* buf_getv: %20*/
/*   %21 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_buf_getv_BB5_18)
begin
$write("Unanticipated marker detected.\n");
end
/* buf_getv: %40*/
/*   %41 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_buf_getv_BB10_35)
begin
$write("Unanticipated marker detected.\n");
end
end
always @(posedge clk) begin
if (reset == 1'd1)
begin
cur_state <= 6'd0;
if (^reset !== 1'bX && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB0_1 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB0_2;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB0_2 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB0_2;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB0_2 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB0_3;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB0_3 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB0_3;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB0_3 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB1_4 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB1_4 & memory_controller_waitrequest == 1'd0 & buf_getv_4_6 == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB2_5;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB1_4 & memory_controller_waitrequest == 1'd0 & buf_getv_4_6 == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB13_42;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB13_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB2_5 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB2_5;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB2_6;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB2_6 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB2_6;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB2_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB2_6 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB2_7;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB2_7 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB2_7;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB2_7 & memory_controller_waitrequest == 1'd0 & buf_getv_7_8_reg == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB3_8;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB2_7 & memory_controller_waitrequest == 1'd0 & buf_getv_7_8_reg == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB8_25;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_8 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB3_8;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_8 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB3_9;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_9 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB3_9;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_9 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB3_10;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_10 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB3_10;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_10 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB3_11;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_11 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB3_11;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_11 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB3_12;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_12 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB3_12;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_12 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB3_13;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_13 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB3_13;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_13 & memory_controller_waitrequest == 1'd0 & buf_getv_10_15 == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB4_14;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB4_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB3_13 & memory_controller_waitrequest == 1'd0 & buf_getv_10_15 == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB6_19;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_14 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB4_14;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB4_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_14 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB4_15;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB4_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_15 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB4_15;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB4_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_15 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB4_16;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB4_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_16 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB4_16;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB4_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_16 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB4_17;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_17 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB4_17;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_17 & memory_controller_waitrequest == 1'd0 & buf_getv_16_19 == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB7_20;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB4_17 & memory_controller_waitrequest == 1'd0 & buf_getv_16_19 == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB5_18;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB5_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB5_18 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB5_18;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB5_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB5_18 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB6_19;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB6_19 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB6_19;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB6_19 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB7_20;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_20 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB7_20;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_20 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB7_21;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_21 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB7_21;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_21 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB7_22;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_22 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB7_22;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_22 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB7_23;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_23 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB7_23;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_23 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB7_24;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_24 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB7_24;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB7_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB7_24 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB16_53;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB16_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_25 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB8_25;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_25 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB8_26;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_26 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB8_26;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_26 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB8_27;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_27 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB8_27;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_27 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB8_28;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_28 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB8_28;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_28 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB8_29;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_29 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB8_29;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_29 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB8_30;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_30 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB8_30;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB8_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_30 & memory_controller_waitrequest == 1'd0 & buf_getv_30_35 == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB9_31;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB9_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB8_30 & memory_controller_waitrequest == 1'd0 & buf_getv_30_35 == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB11_39;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB11_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_31 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB9_31;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB9_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_31 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB9_32;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB9_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_32 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB9_32;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB9_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_32 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB9_33;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB9_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_33 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB9_33;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB9_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_33 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB9_34;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB9_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_34 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB9_34;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB9_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_34 & memory_controller_waitrequest == 1'd0 & buf_getv_36_39 == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB12_40;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB9_34 & memory_controller_waitrequest == 1'd0 & buf_getv_36_39 == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB10_35;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB10_35 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB10_35;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB10_35 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB10_36;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB10_36 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB10_36;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB10_36 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB10_37;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB10_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB10_37 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB10_37;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB10_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB10_37 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB10_38;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB10_38 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB10_38;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB10_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB10_38 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB11_39;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB11_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB11_39 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB11_39;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB11_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB11_39 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB12_40;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB12_40 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB12_40;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB12_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB12_40 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB12_41;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB12_41 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB12_41;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB12_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB12_41 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB13_42 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB13_42;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB13_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB13_42 & memory_controller_waitrequest == 1'd0 & buf_getv_46_47 == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB14_43;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB13_42 & memory_controller_waitrequest == 1'd0 & buf_getv_46_47 == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB15_48;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_43 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB14_43;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_43 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB14_44;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_44 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB14_44;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_44 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB14_45;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_45 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB14_45;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_45 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB14_46;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_46 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB14_46;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_46 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB14_47;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_47 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB14_47;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB14_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB14_47 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB16_53;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB16_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_48 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB15_48;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_48 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB15_49;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_49 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB15_49;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_49 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB15_50;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_50 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB15_50;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_50 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB15_51;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_51 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB15_51;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_51 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB15_52;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_52 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB15_52;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB15_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB15_52 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_buf_getv_BB16_53;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB16_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB16_53 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_buf_getv_BB16_53;
if (^reset !== 1'bX && ^(LEGUP_F_buf_getv_BB16_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_buf_getv_BB16_53 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* buf_getv: %0*/
/*   %1 = add nsw i32 %n, -1*/
begin
buf_getv_0_1 = arg_n + -32'd1;
end
end
always @(posedge clk) begin
/* buf_getv: %0*/
/*   %1 = add nsw i32 %n, -1*/
if (cur_state == LEGUP_F_buf_getv_BB0_1)
begin
buf_getv_0_1_reg <= buf_getv_0_1;
if (^reset !== 1'bX && ^(buf_getv_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_0_1_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %0*/
/*   %2 = load i32* @read_position, align 4, !tbaa !0*/
begin
buf_getv_0_2 = memory_controller_out[31:0];
end
end
always @(*) begin
/* buf_getv: %0*/
/*   %3 = sub nsw i32 %1, %2*/
begin
buf_getv_0_3 = buf_getv_0_1_reg - buf_getv_0_2;
end
end
always @(posedge clk) begin
/* buf_getv: %0*/
/*   %3 = sub nsw i32 %1, %2*/
if (cur_state == LEGUP_F_buf_getv_BB0_3)
begin
buf_getv_0_3_reg <= buf_getv_0_3;
if (^reset !== 1'bX && ^(buf_getv_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_0_3_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_5 = buf_getv_4_5_phi_temp;
end
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
else if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_5 = buf_getv_4_5_phi_temp;
end
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
else if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_5 = buf_getv_4_5_phi_temp;
end
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
else /* if (cur_state == LEGUP_F_buf_getv_BB1_4) */
begin
buf_getv_4_5 = buf_getv_4_5_phi_temp;
end
end
always @(posedge clk) begin
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_5_reg <= buf_getv_4_5;
if (^reset !== 1'bX && ^(buf_getv_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_5_reg"); $finish; end
end
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_5_reg <= buf_getv_4_5;
if (^reset !== 1'bX && ^(buf_getv_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_5_reg"); $finish; end
end
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_5_reg <= buf_getv_4_5;
if (^reset !== 1'bX && ^(buf_getv_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_5_reg"); $finish; end
end
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_5_reg <= buf_getv_4_5;
if (^reset !== 1'bX && ^(buf_getv_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_5_reg"); $finish; end
end
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_5_reg <= buf_getv_4_5;
if (^reset !== 1'bX && ^(buf_getv_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_5_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %4*/
/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_indvar = buf_getv_4_indvar_phi_temp;
end
/* buf_getv: %4*/
/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %0 ]*/
else /* if (cur_state == LEGUP_F_buf_getv_BB1_4) */
begin
buf_getv_4_indvar = buf_getv_4_indvar_phi_temp;
end
end
always @(posedge clk) begin
/* buf_getv: %4*/
/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_indvar_reg <= buf_getv_4_indvar;
if (^reset !== 1'bX && ^(buf_getv_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_indvar_reg"); $finish; end
end
/* buf_getv: %4*/
/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_indvar_reg <= buf_getv_4_indvar;
if (^reset !== 1'bX && ^(buf_getv_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_indvar_reg"); $finish; end
end
/* buf_getv: %4*/
/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_indvar_reg <= buf_getv_4_indvar;
if (^reset !== 1'bX && ^(buf_getv_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_indvar_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %4*/
/*   %tmp = mul i32 %indvar, -8*/
begin
buf_getv_4_tmp = buf_getv_signed_multiply_32_0;
end
end
always @(*) begin
/* buf_getv: %4*/
/*   %p.0 = add i32 %3, %tmp*/
begin
buf_getv_4_p_0 = buf_getv_0_3_reg + buf_getv_4_tmp;
end
end
always @(posedge clk) begin
/* buf_getv: %4*/
/*   %p.0 = add i32 %3, %tmp*/
if (cur_state == LEGUP_F_buf_getv_BB1_4)
begin
buf_getv_4_p_0_reg <= buf_getv_4_p_0;
if (^reset !== 1'bX && ^(buf_getv_4_p_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_p_0_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %4*/
/*   %6 = icmp sgt i32 %p.0, 0*/
begin
buf_getv_4_6 = $signed(buf_getv_4_p_0) > $signed(32'd0);
end
end
always @(*) begin
/* buf_getv: %7*/
/*   %8 = icmp sgt i32 %5, 23*/
begin
buf_getv_7_8 = $signed(buf_getv_4_5_reg) > $signed(32'd23);
end
end
always @(posedge clk) begin
/* buf_getv: %7*/
/*   %8 = icmp sgt i32 %5, 23*/
if (cur_state == LEGUP_F_buf_getv_BB2_5)
begin
buf_getv_7_8_reg <= buf_getv_7_8;
if (^reset !== 1'bX && ^(buf_getv_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_7_8_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %7*/
/*   %9 = load i32* @current_read_byte, align 4, !tbaa !0*/
begin
buf_getv_7_9 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* buf_getv: %7*/
/*   %9 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB2_7)
begin
buf_getv_7_9_reg <= buf_getv_7_9;
if (^reset !== 1'bX && ^(buf_getv_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_7_9_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %10*/
/*   %11 = shl i32 %9, %p.0*/
begin
buf_getv_10_11 = buf_getv_7_9_reg <<< buf_getv_4_p_0_reg % 32;
end
end
always @(posedge clk) begin
/* buf_getv: %10*/
/*   %11 = shl i32 %9, %p.0*/
if (cur_state == LEGUP_F_buf_getv_BB3_8)
begin
buf_getv_10_11_reg <= buf_getv_10_11;
if (^reset !== 1'bX && ^(buf_getv_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_10_11_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %10*/
/*   %12 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
begin
buf_getv_10_12 = memory_controller_out[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* buf_getv: %10*/
/*   %12 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_10)
begin
buf_getv_10_12_reg <= buf_getv_10_12;
if (^reset !== 1'bX && ^(buf_getv_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_10_12_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %10*/
/*   %13 = getelementptr inbounds i8* %12, i32 1*/
begin
buf_getv_10_13 = buf_getv_10_12 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* buf_getv: %10*/
/*   %13 = getelementptr inbounds i8* %12, i32 1*/
if (cur_state == LEGUP_F_buf_getv_BB3_10)
begin
buf_getv_10_13_reg <= buf_getv_10_13;
if (^reset !== 1'bX && ^(buf_getv_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_10_13_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %10*/
/*   %14 = load i8* %12, align 1, !tbaa !1*/
begin
buf_getv_10_14 = memory_controller_out[7:0];
end
end
always @(*) begin
/* buf_getv: %10*/
/*   %15 = icmp eq i8 %14, -1*/
begin
buf_getv_10_15 = buf_getv_10_14 == -8'd1;
end
end
always @(*) begin
/* buf_getv: %16*/
/*   %17 = getelementptr inbounds i8* %12, i32 2*/
begin
buf_getv_16_17 = buf_getv_10_12_reg + 1 * 32'd2;
end
end
always @(*) begin
/* buf_getv: %16*/
/*   %18 = load i8* %13, align 1, !tbaa !1*/
begin
buf_getv_16_18 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* buf_getv: %16*/
/*   %18 = load i8* %13, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB4_17)
begin
buf_getv_16_18_reg <= buf_getv_16_18;
if (^reset !== 1'bX && ^(buf_getv_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_16_18_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %16*/
/*   %19 = icmp eq i8 %18, 0*/
begin
buf_getv_16_19 = buf_getv_16_18 == 8'd0;
end
end
always @(*) begin
/* buf_getv: %22*/
/*   %temp.0.in.i = phi i8 [ %18, %20 ], [ %14, %10 ]*/
begin
buf_getv_22_temp_0_in_i = buf_getv_22_temp_0_in_i_phi_temp;
end
end
always @(*) begin
/* buf_getv: %22*/
/*   %temp.0.i = zext i8 %temp.0.in.i to i32*/
begin
buf_getv_22_temp_0_i = buf_getv_22_temp_0_in_i;
end
end
always @(*) begin
/* buf_getv: %pgetc.exit*/
/*   %.0.i = phi i32 [ %temp.0.i, %22 ], [ 255, %16 ]*/
begin
buf_getv_pgetc_exit__0_i = buf_getv_pgetc_exit__0_i_phi_temp;
end
end
always @(*) begin
/* buf_getv: %pgetc.exit*/
/*   %23 = sub nsw i32 8, %p.0*/
begin
buf_getv_pgetc_exit_23 = 32'd8 - buf_getv_4_p_0_reg;
end
end
always @(*) begin
/* buf_getv: %pgetc.exit*/
/*   %24 = lshr i32 %.0.i, %23*/
begin
buf_getv_pgetc_exit_24 = buf_getv_pgetc_exit__0_i >>> buf_getv_pgetc_exit_23 % 32;
end
end
always @(*) begin
/* buf_getv: %pgetc.exit*/
/*   %25 = or i32 %24, %11*/
begin
buf_getv_pgetc_exit_25 = buf_getv_pgetc_exit_24 | buf_getv_10_11_reg;
end
end
always @(posedge clk) begin
/* buf_getv: %pgetc.exit*/
/*   %25 = or i32 %24, %11*/
if (cur_state == LEGUP_F_buf_getv_BB7_20)
begin
buf_getv_pgetc_exit_25_reg <= buf_getv_pgetc_exit_25;
if (^reset !== 1'bX && ^(buf_getv_pgetc_exit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit_25_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %pgetc.exit*/
/*   %26 = sub nsw i32 7, %p.0*/
begin
buf_getv_pgetc_exit_26 = 32'd7 - buf_getv_4_p_0_reg;
end
end
always @(posedge clk) begin
/* buf_getv: %pgetc.exit*/
/*   %26 = sub nsw i32 7, %p.0*/
if (cur_state == LEGUP_F_buf_getv_BB7_20)
begin
buf_getv_pgetc_exit_26_reg <= buf_getv_pgetc_exit_26;
if (^reset !== 1'bX && ^(buf_getv_pgetc_exit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit_26_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %pgetc.exit*/
/*   %27 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
begin
buf_getv_pgetc_exit_27 = `TAG_g_lmask_a + 4 * buf_getv_0_1_reg;
end
end
always @(posedge clk) begin
/* buf_getv: %pgetc.exit*/
/*   %27 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
if (cur_state == LEGUP_F_buf_getv_BB7_20)
begin
buf_getv_pgetc_exit_27_reg <= buf_getv_pgetc_exit_27;
if (^reset !== 1'bX && ^(buf_getv_pgetc_exit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit_27_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %pgetc.exit*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
begin
buf_getv_pgetc_exit_28 = memory_controller_out[31:0];
end
end
always @(*) begin
/* buf_getv: %pgetc.exit*/
/*   %29 = and i32 %25, %28*/
begin
buf_getv_pgetc_exit_29 = buf_getv_pgetc_exit_25_reg & buf_getv_pgetc_exit_28;
end
end
always @(*) begin
/* buf_getv: %30*/
/*   %31 = shl i32 %9, 8*/
begin
buf_getv_30_31 = buf_getv_7_9_reg <<< 32'd8 % 32;
end
end
always @(posedge clk) begin
/* buf_getv: %30*/
/*   %31 = shl i32 %9, 8*/
if (cur_state == LEGUP_F_buf_getv_BB8_25)
begin
buf_getv_30_31_reg <= buf_getv_30_31;
if (^reset !== 1'bX && ^(buf_getv_30_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_30_31_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %30*/
/*   %32 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
begin
buf_getv_30_32 = memory_controller_out[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* buf_getv: %30*/
/*   %32 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_27)
begin
buf_getv_30_32_reg <= buf_getv_30_32;
if (^reset !== 1'bX && ^(buf_getv_30_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_30_32_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %30*/
/*   %33 = getelementptr inbounds i8* %32, i32 1*/
begin
buf_getv_30_33 = buf_getv_30_32 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* buf_getv: %30*/
/*   %33 = getelementptr inbounds i8* %32, i32 1*/
if (cur_state == LEGUP_F_buf_getv_BB8_27)
begin
buf_getv_30_33_reg <= buf_getv_30_33;
if (^reset !== 1'bX && ^(buf_getv_30_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_30_33_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %30*/
/*   %34 = load i8* %32, align 1, !tbaa !1*/
begin
buf_getv_30_34 = memory_controller_out[7:0];
end
end
always @(*) begin
/* buf_getv: %30*/
/*   %35 = icmp eq i8 %34, -1*/
begin
buf_getv_30_35 = buf_getv_30_34 == -8'd1;
end
end
always @(*) begin
/* buf_getv: %36*/
/*   %37 = getelementptr inbounds i8* %32, i32 2*/
begin
buf_getv_36_37 = buf_getv_30_32_reg + 1 * 32'd2;
end
end
always @(*) begin
/* buf_getv: %36*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
begin
buf_getv_36_38 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* buf_getv: %36*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB9_34)
begin
buf_getv_36_38_reg <= buf_getv_36_38;
if (^reset !== 1'bX && ^(buf_getv_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_36_38_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %36*/
/*   %39 = icmp eq i8 %38, 0*/
begin
buf_getv_36_39 = buf_getv_36_38 == 8'd0;
end
end
always @(*) begin
/* buf_getv: %40*/
/*   %.pre.pre = load i32* @read_position, align 4, !tbaa !0*/
begin
buf_getv_40__pre_pre = memory_controller_out[31:0];
end
end
always @(*) begin
/* buf_getv: %42*/
/*   %.pre = phi i32 [ %.pre.pre, %40 ], [ %5, %30 ]*/
begin
buf_getv_42__pre = buf_getv_42__pre_phi_temp;
end
end
always @(*) begin
/* buf_getv: %42*/
/*   %temp.0.in.i1 = phi i8 [ %38, %40 ], [ %34, %30 ]*/
begin
buf_getv_42_temp_0_in_i1 = buf_getv_42_temp_0_in_i1_phi_temp;
end
end
always @(*) begin
/* buf_getv: %42*/
/*   %temp.0.i2 = zext i8 %temp.0.in.i1 to i32*/
begin
buf_getv_42_temp_0_i2 = buf_getv_42_temp_0_in_i1;
end
end
always @(*) begin
/* buf_getv: %pgetc.exit4*/
/*   %43 = phi i32 [ %.pre, %42 ], [ %5, %36 ]*/
begin
buf_getv_pgetc_exit4_43 = buf_getv_pgetc_exit4_43_phi_temp;
end
end
always @(*) begin
/* buf_getv: %pgetc.exit4*/
/*   %.0.i3 = phi i32 [ %temp.0.i2, %42 ], [ 255, %36 ]*/
begin
buf_getv_pgetc_exit4__0_i3 = buf_getv_pgetc_exit4__0_i3_phi_temp;
end
end
always @(*) begin
/* buf_getv: %pgetc.exit4*/
/*   %44 = or i32 %.0.i3, %31*/
begin
buf_getv_pgetc_exit4_44 = buf_getv_pgetc_exit4__0_i3 | buf_getv_30_31_reg;
end
end
always @(*) begin
/* buf_getv: %pgetc.exit4*/
/*   %45 = add nsw i32 %43, 8*/
begin
buf_getv_pgetc_exit4_45 = buf_getv_pgetc_exit4_43 + 32'd8;
end
end
always @(posedge clk) begin
/* buf_getv: %pgetc.exit4*/
/*   %45 = add nsw i32 %43, 8*/
if (cur_state == LEGUP_F_buf_getv_BB12_40)
begin
buf_getv_pgetc_exit4_45_reg <= buf_getv_pgetc_exit4_45;
if (^reset !== 1'bX && ^(buf_getv_pgetc_exit4_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit4_45_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %pgetc.exit4*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
buf_getv_pgetc_exit4_indvar_next = buf_getv_4_indvar_reg + 32'd1;
end
end
always @(posedge clk) begin
/* buf_getv: %pgetc.exit4*/
/*   %indvar.next = add i32 %indvar, 1*/
if (cur_state == LEGUP_F_buf_getv_BB12_40)
begin
buf_getv_pgetc_exit4_indvar_next_reg <= buf_getv_pgetc_exit4_indvar_next;
if (^reset !== 1'bX && ^(buf_getv_pgetc_exit4_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit4_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %46*/
/*   %47 = icmp eq i32 %p.0, 0*/
begin
buf_getv_46_47 = buf_getv_4_p_0_reg == 32'd0;
end
end
always @(*) begin
/* buf_getv: %48*/
/*   %49 = load i32* @current_read_byte, align 4, !tbaa !0*/
begin
buf_getv_48_49 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* buf_getv: %48*/
/*   %49 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_46)
begin
buf_getv_48_49_reg <= buf_getv_48_49;
if (^reset !== 1'bX && ^(buf_getv_48_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_48_49_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %48*/
/*   %50 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
begin
buf_getv_48_50 = `TAG_g_lmask_a + 4 * buf_getv_0_1_reg;
end
end
always @(posedge clk) begin
/* buf_getv: %48*/
/*   %50 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
if (cur_state == LEGUP_F_buf_getv_BB14_43)
begin
buf_getv_48_50_reg <= buf_getv_48_50;
if (^reset !== 1'bX && ^(buf_getv_48_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_48_50_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %48*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
begin
buf_getv_48_51 = memory_controller_out[31:0];
end
end
always @(*) begin
/* buf_getv: %48*/
/*   %52 = and i32 %51, %49*/
begin
buf_getv_48_52 = buf_getv_48_51 & buf_getv_48_49_reg;
end
end
always @(*) begin
/* buf_getv: %53*/
/*   %54 = sub nsw i32 0, %p.0*/
begin
buf_getv_53_54 = 32'd0 - buf_getv_4_p_0_reg;
end
end
always @(posedge clk) begin
/* buf_getv: %53*/
/*   %54 = sub nsw i32 0, %p.0*/
if (cur_state == LEGUP_F_buf_getv_BB15_48)
begin
buf_getv_53_54_reg <= buf_getv_53_54;
if (^reset !== 1'bX && ^(buf_getv_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_53_54_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %53*/
/*   %55 = xor i32 %p.0, -1*/
begin
buf_getv_53_55 = buf_getv_4_p_0_reg ^ -32'd1;
end
end
always @(*) begin
/* buf_getv: %53*/
/*   %56 = load i32* @current_read_byte, align 4, !tbaa !0*/
begin
buf_getv_53_56 = memory_controller_out[31:0];
end
end
always @(*) begin
/* buf_getv: %53*/
/*   %57 = lshr i32 %56, %54*/
begin
buf_getv_53_57 = buf_getv_53_56 >>> buf_getv_53_54_reg % 32;
end
end
always @(posedge clk) begin
/* buf_getv: %53*/
/*   %57 = lshr i32 %56, %54*/
if (cur_state == LEGUP_F_buf_getv_BB15_51)
begin
buf_getv_53_57_reg <= buf_getv_53_57;
if (^reset !== 1'bX && ^(buf_getv_53_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_53_57_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %53*/
/*   %58 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
begin
buf_getv_53_58 = `TAG_g_lmask_a + 4 * buf_getv_0_1_reg;
end
end
always @(posedge clk) begin
/* buf_getv: %53*/
/*   %58 = getelementptr inbounds [32 x i32]* @lmask, i32 0, i32 %1*/
if (cur_state == LEGUP_F_buf_getv_BB15_48)
begin
buf_getv_53_58_reg <= buf_getv_53_58;
if (^reset !== 1'bX && ^(buf_getv_53_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_53_58_reg"); $finish; end
end
end
always @(*) begin
/* buf_getv: %53*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
begin
buf_getv_53_59 = memory_controller_out[31:0];
end
end
always @(*) begin
/* buf_getv: %53*/
/*   %60 = and i32 %57, %59*/
begin
buf_getv_53_60 = buf_getv_53_57_reg & buf_getv_53_59;
end
end
always @(*) begin
/* buf_getv: %61*/
/*   %.0 = phi i32 [ %29, %pgetc.exit ], [ %60, %53 ], [ %52, %48 ]*/
begin
buf_getv_61__0 = buf_getv_61__0_phi_temp;
end
end
always @(*) begin
/* buf_getv: %4*/
/*   %tmp = mul i32 %indvar, -8*/
begin
buf_getv_signed_multiply_32_0_op0 = buf_getv_4_indvar;
end
end
always @(*) begin
/* buf_getv: %4*/
/*   %tmp = mul i32 %indvar, -8*/
if (reset) begin buf_getv_signed_multiply_32_0_op1 = 0; end
begin
buf_getv_signed_multiply_32_0_op1 = -32'd8;
end
end
always @(*) begin
buf_getv_signed_multiply_32_0 = buf_getv_signed_multiply_32_0_op0 * buf_getv_signed_multiply_32_0_op1;
end
always @(posedge clk) begin
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB0_3 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_4_5_phi_temp <= buf_getv_0_2;
if (^reset !== 1'bX && ^(buf_getv_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_5_phi_temp"); $finish; end
end
/* buf_getv: %4*/
/*   %5 = phi i32 [ %45, %pgetc.exit4 ], [ %2, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB12_41 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_4_5_phi_temp <= buf_getv_pgetc_exit4_45_reg;
if (^reset !== 1'bX && ^(buf_getv_pgetc_exit4_45_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_5_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* buf_getv: %4*/
/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB0_3 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_4_indvar_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_indvar_phi_temp"); $finish; end
end
/* buf_getv: %4*/
/*   %indvar = phi i32 [ %indvar.next, %pgetc.exit4 ], [ 0, %0 ]*/
if (cur_state == LEGUP_F_buf_getv_BB12_41 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_4_indvar_phi_temp <= buf_getv_pgetc_exit4_indvar_next_reg;
if (^reset !== 1'bX && ^(buf_getv_pgetc_exit4_indvar_next_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_4_indvar_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* buf_getv: %22*/
/*   %temp.0.in.i = phi i8 [ %18, %20 ], [ %14, %10 ]*/
if (cur_state == LEGUP_F_buf_getv_BB3_13 & memory_controller_waitrequest == 1'd0 & buf_getv_10_15 == 1'd0)
begin
buf_getv_22_temp_0_in_i_phi_temp <= buf_getv_10_14;
if (^reset !== 1'bX && ^(buf_getv_10_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_22_temp_0_in_i_phi_temp"); $finish; end
end
/* buf_getv: %22*/
/*   %temp.0.in.i = phi i8 [ %18, %20 ], [ %14, %10 ]*/
if (cur_state == LEGUP_F_buf_getv_BB5_18 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_22_temp_0_in_i_phi_temp <= buf_getv_16_18_reg;
if (^reset !== 1'bX && ^(buf_getv_16_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_22_temp_0_in_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* buf_getv: %pgetc.exit*/
/*   %.0.i = phi i32 [ %temp.0.i, %22 ], [ 255, %16 ]*/
if (cur_state == LEGUP_F_buf_getv_BB4_17 & memory_controller_waitrequest == 1'd0 & buf_getv_16_19 == 1'd1)
begin
buf_getv_pgetc_exit__0_i_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit__0_i_phi_temp"); $finish; end
end
/* buf_getv: %pgetc.exit*/
/*   %.0.i = phi i32 [ %temp.0.i, %22 ], [ 255, %16 ]*/
if (cur_state == LEGUP_F_buf_getv_BB6_19 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_pgetc_exit__0_i_phi_temp <= buf_getv_22_temp_0_i;
if (^reset !== 1'bX && ^(buf_getv_22_temp_0_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit__0_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* buf_getv: %61*/
/*   %.0 = phi i32 [ %29, %pgetc.exit ], [ %60, %53 ], [ %52, %48 ]*/
if (cur_state == LEGUP_F_buf_getv_BB7_24 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_61__0_phi_temp <= buf_getv_pgetc_exit_29;
if (^reset !== 1'bX && ^(buf_getv_pgetc_exit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_61__0_phi_temp"); $finish; end
end
/* buf_getv: %61*/
/*   %.0 = phi i32 [ %29, %pgetc.exit ], [ %60, %53 ], [ %52, %48 ]*/
if (cur_state == LEGUP_F_buf_getv_BB14_47 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_61__0_phi_temp <= buf_getv_48_52;
if (^reset !== 1'bX && ^(buf_getv_48_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_61__0_phi_temp"); $finish; end
end
/* buf_getv: %61*/
/*   %.0 = phi i32 [ %29, %pgetc.exit ], [ %60, %53 ], [ %52, %48 ]*/
if (cur_state == LEGUP_F_buf_getv_BB15_52 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_61__0_phi_temp <= buf_getv_53_60;
if (^reset !== 1'bX && ^(buf_getv_53_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_61__0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* buf_getv: %42*/
/*   %.pre = phi i32 [ %.pre.pre, %40 ], [ %5, %30 ]*/
if (cur_state == LEGUP_F_buf_getv_BB8_30 & memory_controller_waitrequest == 1'd0 & buf_getv_30_35 == 1'd0)
begin
buf_getv_42__pre_phi_temp <= buf_getv_4_5_reg;
if (^reset !== 1'bX && ^(buf_getv_4_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_42__pre_phi_temp"); $finish; end
end
/* buf_getv: %42*/
/*   %.pre = phi i32 [ %.pre.pre, %40 ], [ %5, %30 ]*/
if (cur_state == LEGUP_F_buf_getv_BB10_38 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_42__pre_phi_temp <= buf_getv_40__pre_pre;
if (^reset !== 1'bX && ^(buf_getv_40__pre_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_42__pre_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* buf_getv: %42*/
/*   %temp.0.in.i1 = phi i8 [ %38, %40 ], [ %34, %30 ]*/
if (cur_state == LEGUP_F_buf_getv_BB8_30 & memory_controller_waitrequest == 1'd0 & buf_getv_30_35 == 1'd0)
begin
buf_getv_42_temp_0_in_i1_phi_temp <= buf_getv_30_34;
if (^reset !== 1'bX && ^(buf_getv_30_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_42_temp_0_in_i1_phi_temp"); $finish; end
end
/* buf_getv: %42*/
/*   %temp.0.in.i1 = phi i8 [ %38, %40 ], [ %34, %30 ]*/
if (cur_state == LEGUP_F_buf_getv_BB10_38 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_42_temp_0_in_i1_phi_temp <= buf_getv_36_38_reg;
if (^reset !== 1'bX && ^(buf_getv_36_38_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_42_temp_0_in_i1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* buf_getv: %pgetc.exit4*/
/*   %43 = phi i32 [ %.pre, %42 ], [ %5, %36 ]*/
if (cur_state == LEGUP_F_buf_getv_BB9_34 & memory_controller_waitrequest == 1'd0 & buf_getv_36_39 == 1'd1)
begin
buf_getv_pgetc_exit4_43_phi_temp <= buf_getv_4_5_reg;
if (^reset !== 1'bX && ^(buf_getv_4_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit4_43_phi_temp"); $finish; end
end
/* buf_getv: %pgetc.exit4*/
/*   %43 = phi i32 [ %.pre, %42 ], [ %5, %36 ]*/
if (cur_state == LEGUP_F_buf_getv_BB11_39 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_pgetc_exit4_43_phi_temp <= buf_getv_42__pre;
if (^reset !== 1'bX && ^(buf_getv_42__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit4_43_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* buf_getv: %pgetc.exit4*/
/*   %.0.i3 = phi i32 [ %temp.0.i2, %42 ], [ 255, %36 ]*/
if (cur_state == LEGUP_F_buf_getv_BB9_34 & memory_controller_waitrequest == 1'd0 & buf_getv_36_39 == 1'd1)
begin
buf_getv_pgetc_exit4__0_i3_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit4__0_i3_phi_temp"); $finish; end
end
/* buf_getv: %pgetc.exit4*/
/*   %.0.i3 = phi i32 [ %temp.0.i2, %42 ], [ 255, %36 ]*/
if (cur_state == LEGUP_F_buf_getv_BB11_39 & memory_controller_waitrequest == 1'd0)
begin
buf_getv_pgetc_exit4__0_i3_phi_temp <= buf_getv_42_temp_0_i2;
if (^reset !== 1'bX && ^(buf_getv_42_temp_0_i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to buf_getv_pgetc_exit4__0_i3_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* buf_getv: %61*/
/*   ret i32 %.0*/
if (cur_state == LEGUP_F_buf_getv_BB16_53)
begin
finish <= memory_controller_waitrequest == 1'd0;
if (^reset !== 1'bX && ^(memory_controller_waitrequest == 1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* buf_getv: %61*/
/*   ret i32 %.0*/
if (cur_state == LEGUP_F_buf_getv_BB16_53)
begin
return_val <= buf_getv_61__0;
if (^reset !== 1'bX && ^(buf_getv_61__0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_address = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_address = 0;
end
/* buf_getv: %0*/
/*   %2 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB0_1)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* buf_getv: %7*/
/*   %9 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB2_5)
begin
memory_controller_address = `TAG_g_current_read_byte_a;
end
/* buf_getv: %10*/
/*   %12 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_8)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* buf_getv: %10*/
/*   store i8* %13, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_10)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* buf_getv: %10*/
/*   %14 = load i8* %12, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB3_11)
begin
memory_controller_address = buf_getv_10_12_reg;
end
/* buf_getv: %16*/
/*   store i8* %17, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB4_14)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* buf_getv: %16*/
/*   %18 = load i8* %13, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB4_15)
begin
memory_controller_address = buf_getv_10_13_reg;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_20)
begin
memory_controller_address = `TAG_g_current_read_byte_a;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %26, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_21)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* buf_getv: %pgetc.exit*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_22)
begin
memory_controller_address = buf_getv_pgetc_exit_27_reg;
end
/* buf_getv: %30*/
/*   %32 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_25)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* buf_getv: %30*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_27)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* buf_getv: %30*/
/*   %34 = load i8* %32, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB8_28)
begin
memory_controller_address = buf_getv_30_32_reg;
end
/* buf_getv: %36*/
/*   store i8* %37, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB9_31)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* buf_getv: %36*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB9_32)
begin
memory_controller_address = buf_getv_30_33_reg;
end
/* buf_getv: %40*/
/*   %.pre.pre = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB10_36)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %44, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_40)
begin
memory_controller_address = `TAG_g_current_read_byte_a;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %45, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_41)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* buf_getv: %48*/
/*   store i32 -1, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_43)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* buf_getv: %48*/
/*   %49 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_44)
begin
memory_controller_address = `TAG_g_current_read_byte_a;
end
/* buf_getv: %48*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_45)
begin
memory_controller_address = buf_getv_48_50_reg;
end
/* buf_getv: %53*/
/*   store i32 %55, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_48)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* buf_getv: %53*/
/*   %56 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_49)
begin
memory_controller_address = `TAG_g_current_read_byte_a;
end
/* buf_getv: %53*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_50)
begin
memory_controller_address = buf_getv_53_58_reg;
end
end
always @(*) begin
memory_controller_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_enable = 1'd0;
end
/* buf_getv: %0*/
/*   %2 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB0_1)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %7*/
/*   %9 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB2_5)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %10*/
/*   %12 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_8)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %10*/
/*   store i8* %13, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_10)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %10*/
/*   %14 = load i8* %12, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB3_11)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %16*/
/*   store i8* %17, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB4_14)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %16*/
/*   %18 = load i8* %13, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB4_15)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_20)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %26, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_21)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %pgetc.exit*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_22)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %30*/
/*   %32 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_25)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %30*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_27)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %30*/
/*   %34 = load i8* %32, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB8_28)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %36*/
/*   store i8* %37, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB9_31)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %36*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB9_32)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %40*/
/*   %.pre.pre = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB10_36)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %44, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_40)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %45, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_41)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %48*/
/*   store i32 -1, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_43)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %48*/
/*   %49 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_44)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %48*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_45)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %53*/
/*   store i32 %55, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_48)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %53*/
/*   %56 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_49)
begin
memory_controller_enable = 1'd1;
end
/* buf_getv: %53*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_50)
begin
memory_controller_enable = 1'd1;
end
end
always @(*) begin
memory_controller_write_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %0*/
/*   %2 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB0_1)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %7*/
/*   %9 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB2_5)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %10*/
/*   %12 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_8)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %10*/
/*   store i8* %13, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_10)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %10*/
/*   %14 = load i8* %12, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB3_11)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %16*/
/*   store i8* %17, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB4_14)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %16*/
/*   %18 = load i8* %13, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB4_15)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_20)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %26, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_21)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %pgetc.exit*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_22)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %30*/
/*   %32 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_25)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %30*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_27)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %30*/
/*   %34 = load i8* %32, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB8_28)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %36*/
/*   store i8* %37, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB9_31)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %36*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB9_32)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %40*/
/*   %.pre.pre = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB10_36)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %44, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_40)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %45, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_41)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %48*/
/*   store i32 -1, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_43)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %48*/
/*   %49 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_44)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %48*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_45)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %53*/
/*   store i32 %55, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_48)
begin
memory_controller_write_enable = 1'd1;
end
/* buf_getv: %53*/
/*   %56 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_49)
begin
memory_controller_write_enable = 1'd0;
end
/* buf_getv: %53*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_50)
begin
memory_controller_write_enable = 1'd0;
end
end
always @(*) begin
memory_controller_in = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_in = 64'd0;
end
/* buf_getv: %10*/
/*   store i8* %13, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_10)
begin
memory_controller_in = buf_getv_10_13;
end
/* buf_getv: %16*/
/*   store i8* %17, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB4_14)
begin
memory_controller_in = buf_getv_16_17;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_20)
begin
memory_controller_in = buf_getv_pgetc_exit__0_i;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %26, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_21)
begin
memory_controller_in = buf_getv_pgetc_exit_26_reg;
end
/* buf_getv: %30*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_27)
begin
memory_controller_in = buf_getv_30_33;
end
/* buf_getv: %36*/
/*   store i8* %37, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB9_31)
begin
memory_controller_in = buf_getv_36_37;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %44, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_40)
begin
memory_controller_in = buf_getv_pgetc_exit4_44;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %45, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_41)
begin
memory_controller_in = buf_getv_pgetc_exit4_45_reg;
end
/* buf_getv: %48*/
/*   store i32 -1, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_43)
begin
memory_controller_in = -32'd1;
end
/* buf_getv: %53*/
/*   store i32 %55, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_48)
begin
memory_controller_in = buf_getv_53_55;
end
end
always @(*) begin
memory_controller_size = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_size = 2'd0;
end
/* buf_getv: %0*/
/*   %2 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB0_1)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %7*/
/*   %9 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB2_5)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %10*/
/*   %12 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_8)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %10*/
/*   store i8* %13, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB3_10)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %10*/
/*   %14 = load i8* %12, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB3_11)
begin
memory_controller_size = 2'd0;
end
/* buf_getv: %16*/
/*   store i8* %17, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB4_14)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %16*/
/*   %18 = load i8* %13, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB4_15)
begin
memory_controller_size = 2'd0;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %.0.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_20)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %pgetc.exit*/
/*   store i32 %26, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_21)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %pgetc.exit*/
/*   %28 = load i32* %27, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB7_22)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %30*/
/*   %32 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_25)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %30*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB8_27)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %30*/
/*   %34 = load i8* %32, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB8_28)
begin
memory_controller_size = 2'd0;
end
/* buf_getv: %36*/
/*   store i8* %37, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_buf_getv_BB9_31)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %36*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_buf_getv_BB9_32)
begin
memory_controller_size = 2'd0;
end
/* buf_getv: %40*/
/*   %.pre.pre = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB10_36)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %44, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_40)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %pgetc.exit4*/
/*   store i32 %45, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB12_41)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %48*/
/*   store i32 -1, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_43)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %48*/
/*   %49 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_44)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %48*/
/*   %51 = load i32* %50, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB14_45)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %53*/
/*   store i32 %55, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_48)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %53*/
/*   %56 = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_49)
begin
memory_controller_size = 2'd2;
end
/* buf_getv: %53*/
/*   %59 = load i32* %58, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_buf_getv_BB15_50)
begin
memory_controller_size = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module huff_make_dhuff_tb
(
	clk,
	reset,
	start,
	finish,
	return_val,
	arg_p_xhtbl_bits,
	arg_p_dhtbl_maxcode,
	arg_p_dhtbl_mincode,
	arg_p_dhtbl_valptr,
	memory_controller_address,
	memory_controller_enable,
	memory_controller_write_enable,
	memory_controller_waitrequest,
	memory_controller_in,
	memory_controller_size,
	memory_controller_out
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB0_1 = 6'd1;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB1_2 = 6'd2;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB1_3 = 6'd3;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB1_4 = 6'd4;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB2_5 = 6'd5;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB3_6 = 6'd6;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB4_7 = 6'd7;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB5_8 = 6'd8;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB6_9 = 6'd9;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB6_10 = 6'd10;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB6_11 = 6'd11;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB6_12 = 6'd12;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB7_13 = 6'd13;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB8_14 = 6'd14;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB8_15 = 6'd15;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB8_16 = 6'd16;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB8_17 = 6'd17;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB9_18 = 6'd18;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB10_19 = 6'd19;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB11_20 = 6'd20;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB12_21 = 6'd21;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB12_22 = 6'd22;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB12_23 = 6'd23;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB13_24 = 6'd24;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_25 = 6'd25;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_26 = 6'd26;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_27 = 6'd27;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_28 = 6'd28;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_29 = 6'd29;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_30 = 6'd30;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_31 = 6'd31;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_32 = 6'd32;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB14_33 = 6'd33;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB15_34 = 6'd34;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB16_35 = 6'd35;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB16_36 = 6'd36;
parameter [5:0] LEGUP_F_huff_make_dhuff_tb_BB16_37 = 6'd37;

input  clk;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_xhtbl_bits;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_dhtbl_maxcode;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_dhtbl_mincode;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_p_dhtbl_valptr;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;
output reg  memory_controller_enable;
output reg  memory_controller_write_enable;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;
output reg [1:0] memory_controller_size;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;
reg [5:0] cur_state;
reg [31:0] huff_make_dhuff_tb__preheader10_indvar44;
reg [31:0] huff_make_dhuff_tb__preheader10_p_013;
reg [31:0] huff_make_dhuff_tb__preheader10_p_013_reg;
reg [31:0] huff_make_dhuff_tb__preheader10_i_014;
reg [31:0] huff_make_dhuff_tb__preheader10_i_014_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb__preheader10_scevgep48;
reg [31:0] huff_make_dhuff_tb__preheader10_1;
reg [31:0] huff_make_dhuff_tb__preheader10_1_reg;
reg  huff_make_dhuff_tb__preheader10_2;
reg  huff_make_dhuff_tb__lr_ph_tmp37;
reg [31:0] huff_make_dhuff_tb__lr_ph_smax;
reg [31:0] huff_make_dhuff_tb__lr_ph_smax_reg;
reg [31:0] huff_make_dhuff_tb_3_indvar39;
reg [31:0] huff_make_dhuff_tb_3_tmp42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_3_scevgep43;
reg [31:0] huff_make_dhuff_tb_3_indvar_next40;
reg  huff_make_dhuff_tb_3_exitcond41;
reg [31:0] huff_make_dhuff_tb___crit_edge_tmp38;
reg [31:0] huff_make_dhuff_tb_4_p_1_lcssa;
reg [31:0] huff_make_dhuff_tb_4_p_1_lcssa_reg;
reg  huff_make_dhuff_tb_4_exitcond46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_5_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_5_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_5_7_reg;
reg [31:0] huff_make_dhuff_tb_5_8;
reg [31:0] huff_make_dhuff_tb__outer_p_2_ph;
reg [31:0] huff_make_dhuff_tb__outer_p_2_ph_reg;
reg [31:0] huff_make_dhuff_tb__outer_code_0_ph;
reg [31:0] huff_make_dhuff_tb__outer_code_0_ph_reg;
reg [31:0] huff_make_dhuff_tb__outer_size_0_ph;
reg [31:0] huff_make_dhuff_tb__outer_size_0_ph_reg;
reg [31:0] huff_make_dhuff_tb__outer_tmp28;
reg [31:0] huff_make_dhuff_tb__outer_tmp28_reg;
reg [31:0] huff_make_dhuff_tb__outer_tmp3349;
reg [31:0] huff_make_dhuff_tb__outer_tmp3349_reg;
reg [31:0] huff_make_dhuff_tb_9_indvar26;
reg [31:0] huff_make_dhuff_tb_9_indvar26_reg;
reg [31:0] huff_make_dhuff_tb_9_tmp29;
reg [31:0] huff_make_dhuff_tb_9_tmp29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_9_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_9_scevgep30_reg;
reg [31:0] huff_make_dhuff_tb_9_tmp31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_9_scevgep32;
reg [31:0] huff_make_dhuff_tb_9_code_0;
reg [31:0] huff_make_dhuff_tb_9_10;
reg [31:0] huff_make_dhuff_tb_9_10_reg;
reg  huff_make_dhuff_tb_9_11;
reg  huff_make_dhuff_tb_9_12;
reg  huff_make_dhuff_tb_9_12_reg;
reg  huff_make_dhuff_tb_9_or_cond;
reg [31:0] huff_make_dhuff_tb_9_indvar_next27;
reg [31:0] huff_make_dhuff_tb_9_indvar_next27_reg;
reg  huff_make_dhuff_tb__critedge_13;
reg [31:0] huff_make_dhuff_tb__preheader4_tmp34;
reg [31:0] huff_make_dhuff_tb__preheader4_tmp;
reg [31:0] huff_make_dhuff_tb__preheader4_tmp_reg;
reg [31:0] huff_make_dhuff_tb_14_indvar19;
reg [31:0] huff_make_dhuff_tb_14_code_1;
reg [31:0] huff_make_dhuff_tb_14_15;
reg [31:0] huff_make_dhuff_tb_14_indvar_next20;
reg  huff_make_dhuff_tb_14_exitcond21;
reg [31:0] huff_make_dhuff_tb__preheader_indvar;
reg [31:0] huff_make_dhuff_tb__preheader_p_dhtbl_ml_03;
reg [31:0] huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg;
reg [31:0] huff_make_dhuff_tb__preheader_p_31;
reg [31:0] huff_make_dhuff_tb__preheader_p_31_reg;
reg [31:0] huff_make_dhuff_tb__preheader_l_02;
reg [31:0] huff_make_dhuff_tb__preheader_l_02_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb__preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb__preheader_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb__preheader_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb__preheader_scevgep15_reg;
reg [31:0] huff_make_dhuff_tb__preheader_16;
reg  huff_make_dhuff_tb__preheader_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_19_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_19_scevgep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_19_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_19_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_19_20_reg;
reg [31:0] huff_make_dhuff_tb_19_21;
reg [31:0] huff_make_dhuff_tb_19_22;
reg [31:0] huff_make_dhuff_tb_19_23;
reg [31:0] huff_make_dhuff_tb_19_23_reg;
reg [31:0] huff_make_dhuff_tb_19_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_19_25;
reg [31:0] huff_make_dhuff_tb_19_26;
reg [31:0] huff_make_dhuff_tb_19_27;
reg [31:0] huff_make_dhuff_tb_19_27_reg;
reg [31:0] huff_make_dhuff_tb_28_p_4;
reg [31:0] huff_make_dhuff_tb_28_p_dhtbl_ml_1;
reg [31:0] huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg;
reg  huff_make_dhuff_tb_28_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_29_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_29_30_reg;
reg [31:0] huff_make_dhuff_tb_29_31;
reg [31:0] huff_make_dhuff_tb_29_32;
reg [31:0] huff_make_dhuff_tb__preheader10_indvar44_phi_temp;
reg [31:0] huff_make_dhuff_tb__preheader10_p_013_phi_temp;
reg [31:0] huff_make_dhuff_tb_4_p_1_lcssa_phi_temp;
reg [31:0] huff_make_dhuff_tb_3_indvar39_phi_temp;
reg [31:0] huff_make_dhuff_tb__outer_p_2_ph_phi_temp;
reg [31:0] huff_make_dhuff_tb__outer_code_0_ph_phi_temp;
reg [31:0] huff_make_dhuff_tb__outer_size_0_ph_phi_temp;
reg [31:0] huff_make_dhuff_tb_9_indvar26_phi_temp;
reg [31:0] huff_make_dhuff_tb__preheader_indvar_phi_temp;
reg [31:0] huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_phi_temp;
reg [31:0] huff_make_dhuff_tb__preheader_p_31_phi_temp;
reg [31:0] huff_make_dhuff_tb_14_indvar19_phi_temp;
reg [31:0] huff_make_dhuff_tb_14_code_1_phi_temp;
reg [31:0] huff_make_dhuff_tb_28_p_4_phi_temp;
reg [31:0] huff_make_dhuff_tb_28_p_dhtbl_ml_1_phi_temp;


always @(posedge clk) begin
if (reset == 1'd1)
begin
cur_state <= 6'd0;
if (^reset !== 1'bX && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB0_1 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB1_2;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB1_2;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB1_3;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_3 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB1_3;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_3 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_4 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_4 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__preheader10_2 == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB5_8;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_4 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__preheader10_2 == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB2_5;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB2_5 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB2_5;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB3_6;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB3_6;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_3_exitcond41 == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB4_7;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_3_exitcond41 == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB3_6;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB4_7 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB4_7;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB4_7 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB5_8;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB5_8;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_4_exitcond46 == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB6_9;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_4_exitcond46 == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB1_2;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_9 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB6_9;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_9 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB6_10;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_10 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB6_10;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_10 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB6_11;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_11 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB6_11;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_11 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB6_12;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_12 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB6_12;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_12 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB7_13;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB7_13;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_14;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_14;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_15;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_15 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_15;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_15 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_16;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_16 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_16;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_16 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_17;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_17 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_17;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_17 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_9_or_cond == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB8_14;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_17 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_9_or_cond == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB9_18;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB9_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB9_18 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB9_18;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB9_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB9_18 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__critedge_13 == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB12_21;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB9_18 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__critedge_13 == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB10_19;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB10_19 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB10_19;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB10_19 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB11_20;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB11_20 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB11_20;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB11_20 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_14_exitcond21 == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB7_13;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB11_20 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_14_exitcond21 == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB11_20;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB12_21;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB12_22;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_22 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB12_22;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_22 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB12_23;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_23 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB12_23;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_23 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__preheader_17 == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB13_24;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB13_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_23 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__preheader_17 == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_25;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB13_24;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB13_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB15_34;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB15_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_25;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_26;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_26 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_26;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_26 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_27;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_27 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_27;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_27 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_28;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_28 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_28;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_28 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_29;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_29 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_29;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_29 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_30;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_30 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_30;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_30 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_31;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_31 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_31;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_31 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_32;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_32 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_32;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_32 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_33;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB14_33;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB14_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB15_34;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB15_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB15_34;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB15_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_28_exitcond == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB16_35;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB16_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_28_exitcond == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB12_21;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB12_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_35 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB16_35;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB16_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_35 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB16_36;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB16_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_36 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB16_36;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB16_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_36 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB16_37;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB16_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_huff_make_dhuff_tb_BB16_37;
if (^reset !== 1'bX && ^(LEGUP_F_huff_make_dhuff_tb_BB16_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %indvar44 = phi i32 [ 0, %0 ], [ %i.014, %4 ]*/
begin
huff_make_dhuff_tb__preheader10_indvar44 = huff_make_dhuff_tb__preheader10_indvar44_phi_temp;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_p_013 = huff_make_dhuff_tb__preheader10_p_013_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
else if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_p_013 = huff_make_dhuff_tb__preheader10_p_013_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
else if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_p_013 = huff_make_dhuff_tb__preheader10_p_013_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2) */
begin
huff_make_dhuff_tb__preheader10_p_013 = huff_make_dhuff_tb__preheader10_p_013_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_p_013_reg <= huff_make_dhuff_tb__preheader10_p_013;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_p_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_p_013_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_p_013_reg <= huff_make_dhuff_tb__preheader10_p_013;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_p_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_p_013_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_p_013_reg <= huff_make_dhuff_tb__preheader10_p_013;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_p_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_p_013_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_p_013_reg <= huff_make_dhuff_tb__preheader10_p_013;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_p_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_p_013_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_p_013_reg <= huff_make_dhuff_tb__preheader10_p_013;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_p_013) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_p_013_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %i.014 = add i32 %indvar44, 1*/
begin
huff_make_dhuff_tb__preheader10_i_014 = huff_make_dhuff_tb__preheader10_indvar44 + 32'd1;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %i.014 = add i32 %indvar44, 1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
huff_make_dhuff_tb__preheader10_i_014_reg <= huff_make_dhuff_tb__preheader10_i_014;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_i_014) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_i_014_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %scevgep48 = getelementptr i32* %p_xhtbl_bits, i32 %i.014*/
begin
huff_make_dhuff_tb__preheader10_scevgep48 = arg_p_xhtbl_bits + 4 * huff_make_dhuff_tb__preheader10_i_014;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %1 = load i32* %scevgep48, align 4, !tbaa !0*/
begin
huff_make_dhuff_tb__preheader10_1 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %1 = load i32* %scevgep48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_4)
begin
huff_make_dhuff_tb__preheader10_1_reg <= huff_make_dhuff_tb__preheader10_1;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_1_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %2 = icmp slt i32 %1, 1*/
begin
huff_make_dhuff_tb__preheader10_2 = $signed(huff_make_dhuff_tb__preheader10_1) < $signed(32'd1);
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.lr.ph*/
/*   %tmp37 = icmp sgt i32 %1, 1*/
begin
huff_make_dhuff_tb__lr_ph_tmp37 = $signed(huff_make_dhuff_tb__preheader10_1_reg) > $signed(32'd1);
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.lr.ph*/
/*   %smax = select i1 %tmp37, i32 %1, i32 1*/
begin
huff_make_dhuff_tb__lr_ph_smax = (huff_make_dhuff_tb__lr_ph_tmp37 ? huff_make_dhuff_tb__preheader10_1_reg : 32'd1);
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.lr.ph*/
/*   %smax = select i1 %tmp37, i32 %1, i32 1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB2_5)
begin
huff_make_dhuff_tb__lr_ph_smax_reg <= huff_make_dhuff_tb__lr_ph_smax;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__lr_ph_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__lr_ph_smax_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %3*/
/*   %indvar39 = phi i32 [ 0, %.lr.ph ], [ %indvar.next40, %3 ]*/
begin
huff_make_dhuff_tb_3_indvar39 = huff_make_dhuff_tb_3_indvar39_phi_temp;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %3*/
/*   %tmp42 = add i32 %p.013, %indvar39*/
begin
huff_make_dhuff_tb_3_tmp42 = huff_make_dhuff_tb__preheader10_p_013_reg + huff_make_dhuff_tb_3_indvar39;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %3*/
/*   %scevgep43 = getelementptr [257 x i32]* %huffsize, i32 0, i32 %tmp42*/
begin
huff_make_dhuff_tb_3_scevgep43 = `TAG_huff_make_dhuff_tb_0_huffsize_a + 4 * huff_make_dhuff_tb_3_tmp42;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %3*/
/*   %indvar.next40 = add i32 %indvar39, 1*/
begin
huff_make_dhuff_tb_3_indvar_next40 = huff_make_dhuff_tb_3_indvar39 + 32'd1;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %3*/
/*   %exitcond41 = icmp eq i32 %indvar.next40, %smax*/
begin
huff_make_dhuff_tb_3_exitcond41 = huff_make_dhuff_tb_3_indvar_next40 == huff_make_dhuff_tb__lr_ph_smax_reg;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %._crit_edge*/
/*   %tmp38 = add i32 %p.013, %smax*/
begin
huff_make_dhuff_tb___crit_edge_tmp38 = huff_make_dhuff_tb__preheader10_p_013_reg + huff_make_dhuff_tb__lr_ph_smax_reg;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %4*/
/*   %p.1.lcssa = phi i32 [ %tmp38, %._crit_edge ], [ %p.013, %.preheader10 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8)
begin
huff_make_dhuff_tb_4_p_1_lcssa = huff_make_dhuff_tb_4_p_1_lcssa_phi_temp;
end
/* huff_make_dhuff_tb: %4*/
/*   %p.1.lcssa = phi i32 [ %tmp38, %._crit_edge ], [ %p.013, %.preheader10 ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8) */
begin
huff_make_dhuff_tb_4_p_1_lcssa = huff_make_dhuff_tb_4_p_1_lcssa_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %4*/
/*   %p.1.lcssa = phi i32 [ %tmp38, %._crit_edge ], [ %p.013, %.preheader10 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8)
begin
huff_make_dhuff_tb_4_p_1_lcssa_reg <= huff_make_dhuff_tb_4_p_1_lcssa;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_4_p_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_4_p_1_lcssa_reg"); $finish; end
end
/* huff_make_dhuff_tb: %4*/
/*   %p.1.lcssa = phi i32 [ %tmp38, %._crit_edge ], [ %p.013, %.preheader10 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8)
begin
huff_make_dhuff_tb_4_p_1_lcssa_reg <= huff_make_dhuff_tb_4_p_1_lcssa;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_4_p_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_4_p_1_lcssa_reg"); $finish; end
end
/* huff_make_dhuff_tb: %4*/
/*   %p.1.lcssa = phi i32 [ %tmp38, %._crit_edge ], [ %p.013, %.preheader10 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8)
begin
huff_make_dhuff_tb_4_p_1_lcssa_reg <= huff_make_dhuff_tb_4_p_1_lcssa;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_4_p_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_4_p_1_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %4*/
/*   %exitcond46 = icmp eq i32 %i.014, 16*/
begin
huff_make_dhuff_tb_4_exitcond46 = huff_make_dhuff_tb__preheader10_i_014_reg == 32'd16;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %5*/
/*   %6 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 %p.1.lcssa*/
begin
huff_make_dhuff_tb_5_6 = `TAG_huff_make_dhuff_tb_0_huffsize_a + 4 * huff_make_dhuff_tb_4_p_1_lcssa_reg;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %5*/
/*   %7 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 0*/
if (reset) begin huff_make_dhuff_tb_5_7 = 0; end
begin
huff_make_dhuff_tb_5_7 = `TAG_huff_make_dhuff_tb_0_huffsize_a;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %5*/
/*   %7 = getelementptr inbounds [257 x i32]* %huffsize, i32 0, i32 0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_9)
begin
huff_make_dhuff_tb_5_7_reg <= huff_make_dhuff_tb_5_7;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_5_7_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %5*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
begin
huff_make_dhuff_tb_5_8 = memory_controller_out[31:0];
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %p.2.ph = phi i32 [ 0, %5 ], [ %tmp29, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_p_2_ph = huff_make_dhuff_tb__outer_p_2_ph_phi_temp;
end
/* huff_make_dhuff_tb: %.outer*/
/*   %p.2.ph = phi i32 [ 0, %5 ], [ %tmp29, %14 ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13) */
begin
huff_make_dhuff_tb__outer_p_2_ph = huff_make_dhuff_tb__outer_p_2_ph_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %p.2.ph = phi i32 [ 0, %5 ], [ %tmp29, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_p_2_ph_reg <= huff_make_dhuff_tb__outer_p_2_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_p_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_p_2_ph_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %p.2.ph = phi i32 [ 0, %5 ], [ %tmp29, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_p_2_ph_reg <= huff_make_dhuff_tb__outer_p_2_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_p_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_p_2_ph_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %p.2.ph = phi i32 [ 0, %5 ], [ %tmp29, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_p_2_ph_reg <= huff_make_dhuff_tb__outer_p_2_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_p_2_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_p_2_ph_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %code.0.ph = phi i32 [ 0, %5 ], [ %15, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_code_0_ph = huff_make_dhuff_tb__outer_code_0_ph_phi_temp;
end
/* huff_make_dhuff_tb: %.outer*/
/*   %code.0.ph = phi i32 [ 0, %5 ], [ %15, %14 ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13) */
begin
huff_make_dhuff_tb__outer_code_0_ph = huff_make_dhuff_tb__outer_code_0_ph_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %code.0.ph = phi i32 [ 0, %5 ], [ %15, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_code_0_ph_reg <= huff_make_dhuff_tb__outer_code_0_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_code_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_code_0_ph_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %code.0.ph = phi i32 [ 0, %5 ], [ %15, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_code_0_ph_reg <= huff_make_dhuff_tb__outer_code_0_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_code_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_code_0_ph_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %code.0.ph = phi i32 [ 0, %5 ], [ %15, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_code_0_ph_reg <= huff_make_dhuff_tb__outer_code_0_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_code_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_code_0_ph_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_size_0_ph = huff_make_dhuff_tb__outer_size_0_ph_phi_temp;
end
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
else if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_size_0_ph = huff_make_dhuff_tb__outer_size_0_ph_phi_temp;
end
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13) */
begin
huff_make_dhuff_tb__outer_size_0_ph = huff_make_dhuff_tb__outer_size_0_ph_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_size_0_ph_reg <= huff_make_dhuff_tb__outer_size_0_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_size_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_size_0_ph_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_size_0_ph_reg <= huff_make_dhuff_tb__outer_size_0_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_size_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_size_0_ph_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_size_0_ph_reg <= huff_make_dhuff_tb__outer_size_0_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_size_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_size_0_ph_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_size_0_ph_reg <= huff_make_dhuff_tb__outer_size_0_ph;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_size_0_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_size_0_ph_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %tmp28 = add i32 %p.2.ph, 1*/
begin
huff_make_dhuff_tb__outer_tmp28 = huff_make_dhuff_tb__outer_p_2_ph + 32'd1;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %tmp28 = add i32 %p.2.ph, 1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_tmp28_reg <= huff_make_dhuff_tb__outer_tmp28;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_tmp28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_tmp28_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %tmp3349 = or i32 %code.0.ph, 1*/
begin
huff_make_dhuff_tb__outer_tmp3349 = huff_make_dhuff_tb__outer_code_0_ph | 32'd1;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %tmp3349 = or i32 %code.0.ph, 1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13)
begin
huff_make_dhuff_tb__outer_tmp3349_reg <= huff_make_dhuff_tb__outer_tmp3349;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__outer_tmp3349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_tmp3349_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %indvar26 = phi i32 [ 0, %.outer ], [ %indvar.next27, %9 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
huff_make_dhuff_tb_9_indvar26 = huff_make_dhuff_tb_9_indvar26_phi_temp;
end
/* huff_make_dhuff_tb: %9*/
/*   %indvar26 = phi i32 [ 0, %.outer ], [ %indvar.next27, %9 ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14) */
begin
huff_make_dhuff_tb_9_indvar26 = huff_make_dhuff_tb_9_indvar26_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %9*/
/*   %indvar26 = phi i32 [ 0, %.outer ], [ %indvar.next27, %9 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
huff_make_dhuff_tb_9_indvar26_reg <= huff_make_dhuff_tb_9_indvar26;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_indvar26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_indvar26_reg"); $finish; end
end
/* huff_make_dhuff_tb: %9*/
/*   %indvar26 = phi i32 [ 0, %.outer ], [ %indvar.next27, %9 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
huff_make_dhuff_tb_9_indvar26_reg <= huff_make_dhuff_tb_9_indvar26;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_indvar26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_indvar26_reg"); $finish; end
end
/* huff_make_dhuff_tb: %9*/
/*   %indvar26 = phi i32 [ 0, %.outer ], [ %indvar.next27, %9 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
huff_make_dhuff_tb_9_indvar26_reg <= huff_make_dhuff_tb_9_indvar26;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_indvar26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_indvar26_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %tmp29 = add i32 %tmp28, %indvar26*/
begin
huff_make_dhuff_tb_9_tmp29 = huff_make_dhuff_tb__outer_tmp28_reg + huff_make_dhuff_tb_9_indvar26;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %9*/
/*   %tmp29 = add i32 %tmp28, %indvar26*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
huff_make_dhuff_tb_9_tmp29_reg <= huff_make_dhuff_tb_9_tmp29;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_tmp29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_tmp29_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %scevgep30 = getelementptr [257 x i32]* %huffsize, i32 0, i32 %tmp29*/
begin
huff_make_dhuff_tb_9_scevgep30 = `TAG_huff_make_dhuff_tb_0_huffsize_a + 4 * huff_make_dhuff_tb_9_tmp29;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %9*/
/*   %scevgep30 = getelementptr [257 x i32]* %huffsize, i32 0, i32 %tmp29*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
huff_make_dhuff_tb_9_scevgep30_reg <= huff_make_dhuff_tb_9_scevgep30;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_scevgep30_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %tmp31 = add i32 %p.2.ph, %indvar26*/
begin
huff_make_dhuff_tb_9_tmp31 = huff_make_dhuff_tb__outer_p_2_ph_reg + huff_make_dhuff_tb_9_indvar26;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %scevgep32 = getelementptr [257 x i32]* %huffcode, i32 0, i32 %tmp31*/
begin
huff_make_dhuff_tb_9_scevgep32 = `TAG_huff_make_dhuff_tb_0_huffcode_a + 4 * huff_make_dhuff_tb_9_tmp31;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %code.0 = add i32 %code.0.ph, %indvar26*/
begin
huff_make_dhuff_tb_9_code_0 = huff_make_dhuff_tb__outer_code_0_ph_reg + huff_make_dhuff_tb_9_indvar26;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %10 = load i32* %scevgep30, align 4, !tbaa !0*/
begin
huff_make_dhuff_tb_9_10 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %9*/
/*   %10 = load i32* %scevgep30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_17)
begin
huff_make_dhuff_tb_9_10_reg <= huff_make_dhuff_tb_9_10;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_10_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %11 = icmp eq i32 %10, %size.0.ph*/
begin
huff_make_dhuff_tb_9_11 = huff_make_dhuff_tb_9_10 == huff_make_dhuff_tb__outer_size_0_ph_reg;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %12 = icmp slt i32 %tmp29, 257*/
begin
huff_make_dhuff_tb_9_12 = $signed(huff_make_dhuff_tb_9_tmp29) < $signed(32'd257);
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %9*/
/*   %12 = icmp slt i32 %tmp29, 257*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
huff_make_dhuff_tb_9_12_reg <= huff_make_dhuff_tb_9_12;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_12_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %or.cond = and i1 %11, %12*/
begin
huff_make_dhuff_tb_9_or_cond = huff_make_dhuff_tb_9_11 & huff_make_dhuff_tb_9_12_reg;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %9*/
/*   %indvar.next27 = add i32 %indvar26, 1*/
begin
huff_make_dhuff_tb_9_indvar_next27 = huff_make_dhuff_tb_9_indvar26 + 32'd1;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %9*/
/*   %indvar.next27 = add i32 %indvar26, 1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
huff_make_dhuff_tb_9_indvar_next27_reg <= huff_make_dhuff_tb_9_indvar_next27;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_indvar_next27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_indvar_next27_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.critedge*/
/*   %13 = icmp eq i32 %10, 0*/
begin
huff_make_dhuff_tb__critedge_13 = huff_make_dhuff_tb_9_10_reg == 32'd0;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader4*/
/*   %tmp34 = add i32 %tmp3349, %indvar26*/
begin
huff_make_dhuff_tb__preheader4_tmp34 = huff_make_dhuff_tb__outer_tmp3349_reg + huff_make_dhuff_tb_9_indvar26_reg;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader4*/
/*   %tmp = sub i32 %10, %size.0.ph*/
begin
huff_make_dhuff_tb__preheader4_tmp = huff_make_dhuff_tb_9_10_reg - huff_make_dhuff_tb__outer_size_0_ph_reg;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader4*/
/*   %tmp = sub i32 %10, %size.0.ph*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB10_19)
begin
huff_make_dhuff_tb__preheader4_tmp_reg <= huff_make_dhuff_tb__preheader4_tmp;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader4_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader4_tmp_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %14*/
/*   %indvar19 = phi i32 [ 0, %.preheader4 ], [ %indvar.next20, %14 ]*/
begin
huff_make_dhuff_tb_14_indvar19 = huff_make_dhuff_tb_14_indvar19_phi_temp;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %14*/
/*   %code.1 = phi i32 [ %tmp34, %.preheader4 ], [ %15, %14 ]*/
begin
huff_make_dhuff_tb_14_code_1 = huff_make_dhuff_tb_14_code_1_phi_temp;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %14*/
/*   %15 = shl i32 %code.1, 1*/
begin
huff_make_dhuff_tb_14_15 = huff_make_dhuff_tb_14_code_1 <<< 32'd1 % 32;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %14*/
/*   %indvar.next20 = add i32 %indvar19, 1*/
begin
huff_make_dhuff_tb_14_indvar_next20 = huff_make_dhuff_tb_14_indvar19 + 32'd1;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %14*/
/*   %exitcond21 = icmp eq i32 %indvar.next20, %tmp*/
begin
huff_make_dhuff_tb_14_exitcond21 = huff_make_dhuff_tb_14_indvar_next20 == huff_make_dhuff_tb__preheader4_tmp_reg;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %indvar = phi i32 [ %l.02, %28 ], [ 0, %.critedge ]*/
begin
huff_make_dhuff_tb__preheader_indvar = huff_make_dhuff_tb__preheader_indvar_phi_temp;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %p_dhtbl_ml.03 = phi i32 [ %p_dhtbl_ml.1, %28 ], [ 1, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_dhtbl_ml_03 = huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p_dhtbl_ml.03 = phi i32 [ %p_dhtbl_ml.1, %28 ], [ 1, %.critedge ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21) */
begin
huff_make_dhuff_tb__preheader_p_dhtbl_ml_03 = huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %p_dhtbl_ml.03 = phi i32 [ %p_dhtbl_ml.1, %28 ], [ 1, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg <= huff_make_dhuff_tb__preheader_p_dhtbl_ml_03;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_dhtbl_ml_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p_dhtbl_ml.03 = phi i32 [ %p_dhtbl_ml.1, %28 ], [ 1, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg <= huff_make_dhuff_tb__preheader_p_dhtbl_ml_03;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_dhtbl_ml_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p_dhtbl_ml.03 = phi i32 [ %p_dhtbl_ml.1, %28 ], [ 1, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg <= huff_make_dhuff_tb__preheader_p_dhtbl_ml_03;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_dhtbl_ml_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31 = huff_make_dhuff_tb__preheader_p_31_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
else if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31 = huff_make_dhuff_tb__preheader_p_31_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
else if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31 = huff_make_dhuff_tb__preheader_p_31_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
else if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31 = huff_make_dhuff_tb__preheader_p_31_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
else if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31 = huff_make_dhuff_tb__preheader_p_31_phi_temp;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21) */
begin
huff_make_dhuff_tb__preheader_p_31 = huff_make_dhuff_tb__preheader_p_31_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31_reg <= huff_make_dhuff_tb__preheader_p_31;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31_reg <= huff_make_dhuff_tb__preheader_p_31;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31_reg <= huff_make_dhuff_tb__preheader_p_31;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31_reg <= huff_make_dhuff_tb__preheader_p_31;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31_reg <= huff_make_dhuff_tb__preheader_p_31;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31_reg <= huff_make_dhuff_tb__preheader_p_31;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_reg"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_p_31_reg <= huff_make_dhuff_tb__preheader_p_31;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %l.02 = add i32 %indvar, 1*/
begin
huff_make_dhuff_tb__preheader_l_02 = huff_make_dhuff_tb__preheader_indvar + 32'd1;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %l.02 = add i32 %indvar, 1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_l_02_reg <= huff_make_dhuff_tb__preheader_l_02;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_l_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_l_02_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %scevgep = getelementptr i32* %p_xhtbl_bits, i32 %l.02*/
begin
huff_make_dhuff_tb__preheader_scevgep = arg_p_xhtbl_bits + 4 * huff_make_dhuff_tb__preheader_l_02;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %scevgep = getelementptr i32* %p_xhtbl_bits, i32 %l.02*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_scevgep_reg <= huff_make_dhuff_tb__preheader_scevgep;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %scevgep15 = getelementptr i32* %p_dhtbl_maxcode, i32 %l.02*/
begin
huff_make_dhuff_tb__preheader_scevgep15 = arg_p_dhtbl_maxcode + 4 * huff_make_dhuff_tb__preheader_l_02;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %scevgep15 = getelementptr i32* %p_dhtbl_maxcode, i32 %l.02*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
huff_make_dhuff_tb__preheader_scevgep15_reg <= huff_make_dhuff_tb__preheader_scevgep15;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_scevgep15_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !0*/
begin
huff_make_dhuff_tb__preheader_16 = memory_controller_out[31:0];
end
end
always @(*) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %17 = icmp eq i32 %16, 0*/
begin
huff_make_dhuff_tb__preheader_17 = huff_make_dhuff_tb__preheader_16 == 32'd0;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %scevgep17 = getelementptr i32* %p_dhtbl_mincode, i32 %l.02*/
begin
huff_make_dhuff_tb_19_scevgep17 = arg_p_dhtbl_mincode + 4 * huff_make_dhuff_tb__preheader_l_02_reg;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %19*/
/*   %scevgep17 = getelementptr i32* %p_dhtbl_mincode, i32 %l.02*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25)
begin
huff_make_dhuff_tb_19_scevgep17_reg <= huff_make_dhuff_tb_19_scevgep17;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_19_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_19_scevgep17_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %scevgep16 = getelementptr i32* %p_dhtbl_valptr, i32 %l.02*/
begin
huff_make_dhuff_tb_19_scevgep16 = arg_p_dhtbl_valptr + 4 * huff_make_dhuff_tb__preheader_l_02_reg;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %20 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %p.31*/
begin
huff_make_dhuff_tb_19_20 = `TAG_huff_make_dhuff_tb_0_huffcode_a + 4 * huff_make_dhuff_tb__preheader_p_31_reg;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %19*/
/*   %20 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %p.31*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25)
begin
huff_make_dhuff_tb_19_20_reg <= huff_make_dhuff_tb_19_20;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_19_20_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
begin
huff_make_dhuff_tb_19_21 = memory_controller_out[31:0];
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
begin
huff_make_dhuff_tb_19_22 = memory_controller_out[31:0];
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %23 = add i32 %p.31, -1*/
begin
huff_make_dhuff_tb_19_23 = huff_make_dhuff_tb__preheader_p_31_reg + -32'd1;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %19*/
/*   %23 = add i32 %p.31, -1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25)
begin
huff_make_dhuff_tb_19_23_reg <= huff_make_dhuff_tb_19_23;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_19_23_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %24 = add i32 %23, %22*/
begin
huff_make_dhuff_tb_19_24 = huff_make_dhuff_tb_19_23_reg + huff_make_dhuff_tb_19_22;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %25 = getelementptr inbounds [257 x i32]* %huffcode, i32 0, i32 %24*/
begin
huff_make_dhuff_tb_19_25 = `TAG_huff_make_dhuff_tb_0_huffcode_a + 4 * huff_make_dhuff_tb_19_24;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
begin
huff_make_dhuff_tb_19_26 = memory_controller_out[31:0];
end
end
always @(*) begin
/* huff_make_dhuff_tb: %19*/
/*   %27 = add i32 %22, %p.31*/
begin
huff_make_dhuff_tb_19_27 = huff_make_dhuff_tb_19_22 + huff_make_dhuff_tb__preheader_p_31_reg;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %19*/
/*   %27 = add i32 %22, %p.31*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_31)
begin
huff_make_dhuff_tb_19_27_reg <= huff_make_dhuff_tb_19_27;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_19_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_19_27_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %28*/
/*   %p.4 = phi i32 [ %p.31, %18 ], [ %27, %19 ]*/
begin
huff_make_dhuff_tb_28_p_4 = huff_make_dhuff_tb_28_p_4_phi_temp;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34)
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1 = huff_make_dhuff_tb_28_p_dhtbl_ml_1_phi_temp;
end
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
else if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34)
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1 = huff_make_dhuff_tb_28_p_dhtbl_ml_1_phi_temp;
end
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
else /* if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34) */
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1 = huff_make_dhuff_tb_28_p_dhtbl_ml_1_phi_temp;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34)
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg <= huff_make_dhuff_tb_28_p_dhtbl_ml_1;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_28_p_dhtbl_ml_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg"); $finish; end
end
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34)
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg <= huff_make_dhuff_tb_28_p_dhtbl_ml_1;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_28_p_dhtbl_ml_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg"); $finish; end
end
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34)
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg <= huff_make_dhuff_tb_28_p_dhtbl_ml_1;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_28_p_dhtbl_ml_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg"); $finish; end
end
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34)
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg <= huff_make_dhuff_tb_28_p_dhtbl_ml_1;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_28_p_dhtbl_ml_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %28*/
/*   %exitcond = icmp eq i32 %l.02, 16*/
begin
huff_make_dhuff_tb_28_exitcond = huff_make_dhuff_tb__preheader_l_02_reg == 32'd16;
end
end
always @(*) begin
/* huff_make_dhuff_tb: %29*/
/*   %30 = getelementptr inbounds i32* %p_dhtbl_maxcode, i32 %p_dhtbl_ml.1*/
begin
huff_make_dhuff_tb_29_30 = arg_p_dhtbl_maxcode + 4 * huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %29*/
/*   %30 = getelementptr inbounds i32* %p_dhtbl_maxcode, i32 %p_dhtbl_ml.1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_35)
begin
huff_make_dhuff_tb_29_30_reg <= huff_make_dhuff_tb_29_30;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_29_30_reg"); $finish; end
end
end
always @(*) begin
/* huff_make_dhuff_tb: %29*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
begin
huff_make_dhuff_tb_29_31 = memory_controller_out[31:0];
end
end
always @(*) begin
/* huff_make_dhuff_tb: %29*/
/*   %32 = add nsw i32 %31, 1*/
begin
huff_make_dhuff_tb_29_32 = huff_make_dhuff_tb_29_31 + 32'd1;
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %indvar44 = phi i32 [ 0, %0 ], [ %i.014, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb__preheader10_indvar44_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_indvar44_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %indvar44 = phi i32 [ 0, %0 ], [ %i.014, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_4_exitcond46 == 1'd0)
begin
huff_make_dhuff_tb__preheader10_indvar44_phi_temp <= huff_make_dhuff_tb__preheader10_i_014_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_i_014_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_indvar44_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb__preheader10_p_013_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_p_013_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %p.013 = phi i32 [ 0, %0 ], [ %p.1.lcssa, %4 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB5_8 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_4_exitcond46 == 1'd0)
begin
huff_make_dhuff_tb__preheader10_p_013_phi_temp <= huff_make_dhuff_tb_4_p_1_lcssa;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_4_p_1_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader10_p_013_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %4*/
/*   %p.1.lcssa = phi i32 [ %tmp38, %._crit_edge ], [ %p.013, %.preheader10 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_4 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__preheader10_2 == 1'd1)
begin
huff_make_dhuff_tb_4_p_1_lcssa_phi_temp <= huff_make_dhuff_tb__preheader10_p_013_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader10_p_013_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_4_p_1_lcssa_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %4*/
/*   %p.1.lcssa = phi i32 [ %tmp38, %._crit_edge ], [ %p.013, %.preheader10 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB4_7 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_4_p_1_lcssa_phi_temp <= huff_make_dhuff_tb___crit_edge_tmp38;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb___crit_edge_tmp38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_4_p_1_lcssa_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %3*/
/*   %indvar39 = phi i32 [ 0, %.lr.ph ], [ %indvar.next40, %3 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_3_indvar39_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_3_indvar39_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %3*/
/*   %indvar39 = phi i32 [ 0, %.lr.ph ], [ %indvar.next40, %3 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_3_exitcond41 == 1'd0)
begin
huff_make_dhuff_tb_3_indvar39_phi_temp <= huff_make_dhuff_tb_3_indvar_next40;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_3_indvar_next40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_3_indvar39_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %p.2.ph = phi i32 [ 0, %5 ], [ %tmp29, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_12 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb__outer_p_2_ph_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_p_2_ph_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %p.2.ph = phi i32 [ 0, %5 ], [ %tmp29, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB11_20 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_14_exitcond21 == 1'd1)
begin
huff_make_dhuff_tb__outer_p_2_ph_phi_temp <= huff_make_dhuff_tb_9_tmp29_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_tmp29_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_p_2_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %code.0.ph = phi i32 [ 0, %5 ], [ %15, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_12 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb__outer_code_0_ph_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_code_0_ph_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %code.0.ph = phi i32 [ 0, %5 ], [ %15, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB11_20 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_14_exitcond21 == 1'd1)
begin
huff_make_dhuff_tb__outer_code_0_ph_phi_temp <= huff_make_dhuff_tb_14_15;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_code_0_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_12 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb__outer_size_0_ph_phi_temp <= huff_make_dhuff_tb_5_8;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_size_0_ph_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %.outer*/
/*   %size.0.ph = phi i32 [ %8, %5 ], [ %10, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB11_20 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_14_exitcond21 == 1'd1)
begin
huff_make_dhuff_tb__outer_size_0_ph_phi_temp <= huff_make_dhuff_tb_9_10_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__outer_size_0_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %9*/
/*   %indvar26 = phi i32 [ 0, %.outer ], [ %indvar.next27, %9 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB7_13 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_9_indvar26_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_indvar26_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %9*/
/*   %indvar26 = phi i32 [ 0, %.outer ], [ %indvar.next27, %9 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_17 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_9_or_cond == 1'd1)
begin
huff_make_dhuff_tb_9_indvar26_phi_temp <= huff_make_dhuff_tb_9_indvar_next27_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_9_indvar_next27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_9_indvar26_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %indvar = phi i32 [ %l.02, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB9_18 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__critedge_13 == 1'd1)
begin
huff_make_dhuff_tb__preheader_indvar_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_indvar_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %indvar = phi i32 [ %l.02, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_28_exitcond == 1'd0)
begin
huff_make_dhuff_tb__preheader_indvar_phi_temp <= huff_make_dhuff_tb__preheader_l_02_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_l_02_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_indvar_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %p_dhtbl_ml.03 = phi i32 [ %p_dhtbl_ml.1, %28 ], [ 1, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB9_18 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__critedge_13 == 1'd1)
begin
huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_phi_temp <= 32'd1;
if (^reset !== 1'bX && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p_dhtbl_ml.03 = phi i32 [ %p_dhtbl_ml.1, %28 ], [ 1, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_28_exitcond == 1'd0)
begin
huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_phi_temp <= huff_make_dhuff_tb_28_p_dhtbl_ml_1;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_28_p_dhtbl_ml_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB9_18 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb__critedge_13 == 1'd1)
begin
huff_make_dhuff_tb__preheader_p_31_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %p.31 = phi i32 [ %p.4, %28 ], [ 0, %.critedge ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB15_34 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_28_exitcond == 1'd0)
begin
huff_make_dhuff_tb__preheader_p_31_phi_temp <= huff_make_dhuff_tb_28_p_4;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_28_p_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb__preheader_p_31_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %14*/
/*   %indvar19 = phi i32 [ 0, %.preheader4 ], [ %indvar.next20, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB10_19 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_14_indvar19_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_14_indvar19_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %14*/
/*   %indvar19 = phi i32 [ 0, %.preheader4 ], [ %indvar.next20, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB11_20 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_14_exitcond21 == 1'd0)
begin
huff_make_dhuff_tb_14_indvar19_phi_temp <= huff_make_dhuff_tb_14_indvar_next20;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_14_indvar_next20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_14_indvar19_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %14*/
/*   %code.1 = phi i32 [ %tmp34, %.preheader4 ], [ %15, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB10_19 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_14_code_1_phi_temp <= huff_make_dhuff_tb__preheader4_tmp34;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader4_tmp34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_14_code_1_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %14*/
/*   %code.1 = phi i32 [ %tmp34, %.preheader4 ], [ %15, %14 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB11_20 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_14_exitcond21 == 1'd0)
begin
huff_make_dhuff_tb_14_code_1_phi_temp <= huff_make_dhuff_tb_14_15;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_14_code_1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %28*/
/*   %p.4 = phi i32 [ %p.31, %18 ], [ %27, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_28_p_4_phi_temp <= huff_make_dhuff_tb__preheader_p_31_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_31_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_28_p_4_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %28*/
/*   %p.4 = phi i32 [ %p.31, %18 ], [ %27, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_28_p_4_phi_temp <= huff_make_dhuff_tb_19_27_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_19_27_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_28_p_4_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1_phi_temp <= huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_p_dhtbl_ml_03_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_28_p_dhtbl_ml_1_phi_temp"); $finish; end
end
/* huff_make_dhuff_tb: %28*/
/*   %p_dhtbl_ml.1 = phi i32 [ %p_dhtbl_ml.03, %18 ], [ %l.02, %19 ]*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33 & memory_controller_waitrequest == 1'd0)
begin
huff_make_dhuff_tb_28_p_dhtbl_ml_1_phi_temp <= huff_make_dhuff_tb__preheader_l_02_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb__preheader_l_02_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_28_p_dhtbl_ml_1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* huff_make_dhuff_tb: %29*/
/*   ret i32 %p_dhtbl_ml.1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37)
begin
finish <= memory_controller_waitrequest == 1'd0;
if (^reset !== 1'bX && ^(memory_controller_waitrequest == 1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* huff_make_dhuff_tb: %29*/
/*   ret i32 %p_dhtbl_ml.1*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37)
begin
return_val <= huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg;
if (^reset !== 1'bX && ^(huff_make_dhuff_tb_28_p_dhtbl_ml_1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_address = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_address = 0;
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %1 = load i32* %scevgep48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
memory_controller_address = huff_make_dhuff_tb__preheader10_scevgep48;
end
/* huff_make_dhuff_tb: %3*/
/*   store i32 %i.014, i32* %scevgep43, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6)
begin
memory_controller_address = huff_make_dhuff_tb_3_scevgep43;
end
/* huff_make_dhuff_tb: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_9)
begin
memory_controller_address = huff_make_dhuff_tb_5_6;
end
/* huff_make_dhuff_tb: %5*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_10)
begin
memory_controller_address = huff_make_dhuff_tb_5_7_reg;
end
/* huff_make_dhuff_tb: %9*/
/*   store i32 %code.0, i32* %scevgep32, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
memory_controller_address = huff_make_dhuff_tb_9_scevgep32;
end
/* huff_make_dhuff_tb: %9*/
/*   %10 = load i32* %scevgep30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_15)
begin
memory_controller_address = huff_make_dhuff_tb_9_scevgep30_reg;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
memory_controller_address = huff_make_dhuff_tb__preheader_scevgep;
end
/* huff_make_dhuff_tb: %18*/
/*   store i32 -1, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24)
begin
memory_controller_address = huff_make_dhuff_tb__preheader_scevgep15_reg;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %p.31, i32* %scevgep16, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25)
begin
memory_controller_address = huff_make_dhuff_tb_19_scevgep16;
end
/* huff_make_dhuff_tb: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_26)
begin
memory_controller_address = huff_make_dhuff_tb_19_20_reg;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %21, i32* %scevgep17, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_28)
begin
memory_controller_address = huff_make_dhuff_tb_19_scevgep17_reg;
end
/* huff_make_dhuff_tb: %19*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_29)
begin
memory_controller_address = huff_make_dhuff_tb__preheader_scevgep_reg;
end
/* huff_make_dhuff_tb: %19*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_31)
begin
memory_controller_address = huff_make_dhuff_tb_19_25;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %26, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33)
begin
memory_controller_address = huff_make_dhuff_tb__preheader_scevgep15_reg;
end
/* huff_make_dhuff_tb: %29*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_35)
begin
memory_controller_address = huff_make_dhuff_tb_29_30;
end
/* huff_make_dhuff_tb: %29*/
/*   store i32 %32, i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37)
begin
memory_controller_address = huff_make_dhuff_tb_29_30_reg;
end
end
always @(*) begin
memory_controller_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_enable = 1'd0;
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %1 = load i32* %scevgep48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %3*/
/*   store i32 %i.014, i32* %scevgep43, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_9)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %5*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_10)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %9*/
/*   store i32 %code.0, i32* %scevgep32, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %9*/
/*   %10 = load i32* %scevgep30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_15)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %18*/
/*   store i32 -1, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %p.31, i32* %scevgep16, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_26)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %21, i32* %scevgep17, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_28)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_29)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_31)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %26, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %29*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_35)
begin
memory_controller_enable = 1'd1;
end
/* huff_make_dhuff_tb: %29*/
/*   store i32 %32, i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37)
begin
memory_controller_enable = 1'd1;
end
end
always @(*) begin
memory_controller_write_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %1 = load i32* %scevgep48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %3*/
/*   store i32 %i.014, i32* %scevgep43, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6)
begin
memory_controller_write_enable = 1'd1;
end
/* huff_make_dhuff_tb: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_9)
begin
memory_controller_write_enable = 1'd1;
end
/* huff_make_dhuff_tb: %5*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_10)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %9*/
/*   store i32 %code.0, i32* %scevgep32, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
memory_controller_write_enable = 1'd1;
end
/* huff_make_dhuff_tb: %9*/
/*   %10 = load i32* %scevgep30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_15)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %18*/
/*   store i32 -1, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24)
begin
memory_controller_write_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %p.31, i32* %scevgep16, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25)
begin
memory_controller_write_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_26)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %21, i32* %scevgep17, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_28)
begin
memory_controller_write_enable = 1'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_29)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %19*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_31)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %26, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33)
begin
memory_controller_write_enable = 1'd1;
end
/* huff_make_dhuff_tb: %29*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_35)
begin
memory_controller_write_enable = 1'd0;
end
/* huff_make_dhuff_tb: %29*/
/*   store i32 %32, i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37)
begin
memory_controller_write_enable = 1'd1;
end
end
always @(*) begin
memory_controller_in = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_in = 64'd0;
end
/* huff_make_dhuff_tb: %3*/
/*   store i32 %i.014, i32* %scevgep43, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6)
begin
memory_controller_in = huff_make_dhuff_tb__preheader10_i_014_reg;
end
/* huff_make_dhuff_tb: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_9)
begin
memory_controller_in = 32'd0;
end
/* huff_make_dhuff_tb: %9*/
/*   store i32 %code.0, i32* %scevgep32, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
memory_controller_in = huff_make_dhuff_tb_9_code_0;
end
/* huff_make_dhuff_tb: %18*/
/*   store i32 -1, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24)
begin
memory_controller_in = -32'd1;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %p.31, i32* %scevgep16, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25)
begin
memory_controller_in = huff_make_dhuff_tb__preheader_p_31_reg;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %21, i32* %scevgep17, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_28)
begin
memory_controller_in = huff_make_dhuff_tb_19_21;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %26, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33)
begin
memory_controller_in = huff_make_dhuff_tb_19_26;
end
/* huff_make_dhuff_tb: %29*/
/*   store i32 %32, i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37)
begin
memory_controller_in = huff_make_dhuff_tb_29_32;
end
end
always @(*) begin
memory_controller_size = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_size = 2'd0;
end
/* huff_make_dhuff_tb: %.preheader10*/
/*   %1 = load i32* %scevgep48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB1_2)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %3*/
/*   store i32 %i.014, i32* %scevgep43, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB3_6)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %5*/
/*   store i32 0, i32* %6, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_9)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %5*/
/*   %8 = load i32* %7, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB6_10)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %9*/
/*   store i32 %code.0, i32* %scevgep32, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_14)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %9*/
/*   %10 = load i32* %scevgep30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB8_15)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %.preheader*/
/*   %16 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB12_21)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %18*/
/*   store i32 -1, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB13_24)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %p.31, i32* %scevgep16, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_25)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %19*/
/*   %21 = load i32* %20, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_26)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %21, i32* %scevgep17, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_28)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %19*/
/*   %22 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_29)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %19*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_31)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %19*/
/*   store i32 %26, i32* %scevgep15, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB14_33)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %29*/
/*   %31 = load i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_35)
begin
memory_controller_size = 2'd2;
end
/* huff_make_dhuff_tb: %29*/
/*   store i32 %32, i32* %30, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_huff_make_dhuff_tb_BB16_37)
begin
memory_controller_size = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module DecodeHuffman
(
	clk,
	reset,
	start,
	finish,
	return_val,
	arg_Xhuff_huffval,
	arg_Dhuff_ml,
	arg_Dhuff_maxcode,
	arg_Dhuff_mincode,
	arg_Dhuff_valptr,
	memory_controller_address,
	memory_controller_enable,
	memory_controller_write_enable,
	memory_controller_waitrequest,
	memory_controller_in,
	memory_controller_size,
	memory_controller_out
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_DecodeHuffman_BB0_1 = 6'd1;
parameter [5:0] LEGUP_F_DecodeHuffman_BB0_2 = 6'd2;
parameter [5:0] LEGUP_F_DecodeHuffman_BB0_3 = 6'd3;
parameter [5:0] LEGUP_F_DecodeHuffman_BB1_4 = 6'd4;
parameter [5:0] LEGUP_F_DecodeHuffman_BB1_5 = 6'd5;
parameter [5:0] LEGUP_F_DecodeHuffman_BB1_6 = 6'd6;
parameter [5:0] LEGUP_F_DecodeHuffman_BB2_7 = 6'd7;
parameter [5:0] LEGUP_F_DecodeHuffman_BB2_8 = 6'd8;
parameter [5:0] LEGUP_F_DecodeHuffman_BB2_9 = 6'd9;
parameter [5:0] LEGUP_F_DecodeHuffman_BB2_10 = 6'd10;
parameter [5:0] LEGUP_F_DecodeHuffman_BB2_11 = 6'd11;
parameter [5:0] LEGUP_F_DecodeHuffman_BB2_12 = 6'd12;
parameter [5:0] LEGUP_F_DecodeHuffman_BB3_13 = 6'd13;
parameter [5:0] LEGUP_F_DecodeHuffman_BB3_14 = 6'd14;
parameter [5:0] LEGUP_F_DecodeHuffman_BB3_15 = 6'd15;
parameter [5:0] LEGUP_F_DecodeHuffman_BB3_16 = 6'd16;
parameter [5:0] LEGUP_F_DecodeHuffman_BB4_17 = 6'd17;
parameter [5:0] LEGUP_F_DecodeHuffman_BB5_18 = 6'd18;
parameter [5:0] LEGUP_F_DecodeHuffman_BB6_19 = 6'd19;
parameter [5:0] LEGUP_F_DecodeHuffman_BB6_20 = 6'd20;
parameter [5:0] LEGUP_F_DecodeHuffman_BB7_21 = 6'd21;
parameter [5:0] LEGUP_F_DecodeHuffman_BB7_22 = 6'd22;
parameter [5:0] LEGUP_F_DecodeHuffman_BB7_23 = 6'd23;
parameter [5:0] LEGUP_F_DecodeHuffman_BB7_24 = 6'd24;
parameter [5:0] LEGUP_F_DecodeHuffman_BB7_25 = 6'd25;
parameter [5:0] LEGUP_F_DecodeHuffman_BB8_26 = 6'd26;
parameter [5:0] LEGUP_F_DecodeHuffman_BB9_27 = 6'd27;
parameter [5:0] LEGUP_F_DecodeHuffman_BB9_28 = 6'd28;
parameter [5:0] LEGUP_F_DecodeHuffman_BB9_29 = 6'd29;
parameter [5:0] LEGUP_F_DecodeHuffman_BB9_30 = 6'd30;
parameter [5:0] LEGUP_F_DecodeHuffman_BB9_31 = 6'd31;
parameter [5:0] LEGUP_F_DecodeHuffman_BB9_32 = 6'd32;
parameter [5:0] LEGUP_F_DecodeHuffman_BB10_33 = 6'd33;
parameter [5:0] LEGUP_F_DecodeHuffman_BB10_34 = 6'd34;
parameter [5:0] LEGUP_F_DecodeHuffman_BB10_35 = 6'd35;
parameter [5:0] LEGUP_F_DecodeHuffman_BB10_36 = 6'd36;
parameter [5:0] LEGUP_F_DecodeHuffman_BB11_37 = 6'd37;
parameter [5:0] LEGUP_F_DecodeHuffman_BB12_38 = 6'd38;
parameter [5:0] LEGUP_F_DecodeHuffman_BB13_39 = 6'd39;
parameter [5:0] LEGUP_F_DecodeHuffman_BB13_40 = 6'd40;
parameter [5:0] LEGUP_F_DecodeHuffman_BB14_41 = 6'd41;
parameter [5:0] LEGUP_F_DecodeHuffman_BB14_42 = 6'd42;
parameter [5:0] LEGUP_F_DecodeHuffman_BB14_43 = 6'd43;
parameter [5:0] LEGUP_F_DecodeHuffman_BB14_44 = 6'd44;
parameter [5:0] LEGUP_F_DecodeHuffman_BB14_45 = 6'd45;
parameter [5:0] LEGUP_F_DecodeHuffman_BB15_46 = 6'd46;
parameter [5:0] LEGUP_F_DecodeHuffman_BB15_47 = 6'd47;
parameter [5:0] LEGUP_F_DecodeHuffman_BB15_48 = 6'd48;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_49 = 6'd49;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_50 = 6'd50;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_51 = 6'd51;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_52 = 6'd52;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_53 = 6'd53;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_54 = 6'd54;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_55 = 6'd55;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_56 = 6'd56;
parameter [5:0] LEGUP_F_DecodeHuffman_BB16_57 = 6'd57;
parameter [5:0] LEGUP_F_DecodeHuffman_BB17_58 = 6'd58;

input  clk;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_Xhuff_huffval;
input [31:0] arg_Dhuff_ml;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_Dhuff_maxcode;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_Dhuff_mincode;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_Dhuff_valptr;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;
output reg  memory_controller_enable;
output reg  memory_controller_write_enable;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;
output reg [1:0] memory_controller_size;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;
reg [5:0] cur_state;
reg [31:0] DecodeHuffman_0_1;
reg [31:0] DecodeHuffman_0_1_reg;
reg  DecodeHuffman_0_2;
reg [31:0] DecodeHuffman___crit_edge_i__pre_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_3_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_3_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_3_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_3_5_reg;
reg [7:0] DecodeHuffman_3_6;
reg  DecodeHuffman_3_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_8_9;
reg [7:0] DecodeHuffman_8_10;
reg [7:0] DecodeHuffman_8_10_reg;
reg  DecodeHuffman_8_11;
reg [7:0] DecodeHuffman_14_temp_0_in_i_i;
reg [31:0] DecodeHuffman_14_temp_0_i_i;
reg [31:0] DecodeHuffman_pgetc_exit_i__0_i_i;
reg [31:0] DecodeHuffman_pgetc_exit_i__0_i_i_reg;
reg [31:0] DecodeHuffman_buf_getb_exit_15;
reg [31:0] DecodeHuffman_buf_getb_exit_15_reg;
reg [31:0] DecodeHuffman_buf_getb_exit_16;
reg [31:0] DecodeHuffman_buf_getb_exit_17;
reg [31:0] DecodeHuffman_buf_getb_exit_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getb_exit_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getb_exit_18_reg;
reg [31:0] DecodeHuffman_buf_getb_exit_19;
reg [31:0] DecodeHuffman_buf_getb_exit_20;
reg  DecodeHuffman_buf_getb_exit_not__i;
reg [31:0] DecodeHuffman_buf_getb_exit___i;
reg [31:0] DecodeHuffman_buf_getb_exit___i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getb_exit_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getb_exit_21_reg;
reg [31:0] DecodeHuffman_buf_getb_exit_22;
reg  DecodeHuffman_buf_getb_exit_23;
reg [31:0] DecodeHuffman__lr_ph__pre_i1;
reg [31:0] DecodeHuffman__lr_ph_24;
reg [31:0] DecodeHuffman__lr_ph_indvar;
reg [31:0] DecodeHuffman__lr_ph_indvar_reg;
reg [31:0] DecodeHuffman__lr_ph_code_010;
reg [31:0] DecodeHuffman__lr_ph_tmp;
reg [31:0] DecodeHuffman__lr_ph_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman__lr_ph_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman__lr_ph_scevgep_reg;
reg [31:0] DecodeHuffman__lr_ph_25;
reg [31:0] DecodeHuffman__lr_ph_25_reg;
reg  DecodeHuffman__lr_ph_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_27_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_27_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_27_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_27_29_reg;
reg [7:0] DecodeHuffman_27_30;
reg  DecodeHuffman_27_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_32_33;
reg [7:0] DecodeHuffman_32_34;
reg [7:0] DecodeHuffman_32_34_reg;
reg  DecodeHuffman_32_35;
reg [7:0] DecodeHuffman_38_temp_0_in_i_i3;
reg [31:0] DecodeHuffman_38_temp_0_i_i4;
reg [31:0] DecodeHuffman_pgetc_exit_i6__0_i_i5;
reg [31:0] DecodeHuffman_pgetc_exit_i6__0_i_i5_reg;
reg [31:0] DecodeHuffman_buf_getb_exit9_39;
reg [31:0] DecodeHuffman_buf_getb_exit9_39_reg;
reg [31:0] DecodeHuffman_buf_getb_exit9_40;
reg [31:0] DecodeHuffman_buf_getb_exit9_41;
reg [31:0] DecodeHuffman_buf_getb_exit9_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getb_exit9_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_buf_getb_exit9_42_reg;
reg [31:0] DecodeHuffman_buf_getb_exit9_43;
reg [31:0] DecodeHuffman_buf_getb_exit9_44;
reg  DecodeHuffman_buf_getb_exit9_not__i7;
reg [31:0] DecodeHuffman_buf_getb_exit9___i8;
reg [31:0] DecodeHuffman_buf_getb_exit9_45;
reg [31:0] DecodeHuffman_buf_getb_exit9_45_reg;
reg [31:0] DecodeHuffman_buf_getb_exit9_46;
reg  DecodeHuffman_buf_getb_exit9_47;
reg [31:0] DecodeHuffman_buf_getb_exit9_indvar_next;
reg [31:0] DecodeHuffman_buf_getb_exit9_indvar_next_reg;
reg [31:0] DecodeHuffman___crit_edge_l_0_lcssa;
reg [31:0] DecodeHuffman___crit_edge_l_0_lcssa_reg;
reg [31:0] DecodeHuffman___crit_edge_code_0_lcssa;
reg [31:0] DecodeHuffman___crit_edge_code_0_lcssa_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman___crit_edge_48;
reg [31:0] DecodeHuffman___crit_edge_49;
reg  DecodeHuffman___crit_edge_50;
reg [31:0] DecodeHuffman_51_52;
reg [31:0] DecodeHuffman_51_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_51_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_51_54_reg;
reg [31:0] DecodeHuffman_51_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_51_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_51_56_reg;
reg [31:0] DecodeHuffman_51_57;
reg [31:0] DecodeHuffman_51_58;
reg [31:0] DecodeHuffman_51_58_reg;
reg [31:0] DecodeHuffman_51_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] DecodeHuffman_51_60;
reg [31:0] DecodeHuffman_51_61;
reg [31:0] DecodeHuffman_buf_getb_exit_15_phi_temp;
reg [31:0] DecodeHuffman_buf_getb_exit_16_phi_temp;
reg [7:0] DecodeHuffman_14_temp_0_in_i_i_phi_temp;
reg [31:0] DecodeHuffman_pgetc_exit_i__0_i_i_phi_temp;
reg [31:0] DecodeHuffman__lr_ph__pre_i1_phi_temp;
reg [31:0] DecodeHuffman__lr_ph_24_phi_temp;
reg [31:0] DecodeHuffman__lr_ph_indvar_phi_temp;
reg [31:0] DecodeHuffman__lr_ph_code_010_phi_temp;
reg [31:0] DecodeHuffman___crit_edge_l_0_lcssa_phi_temp;
reg [31:0] DecodeHuffman___crit_edge_code_0_lcssa_phi_temp;
reg [31:0] DecodeHuffman_buf_getb_exit9_39_phi_temp;
reg [31:0] DecodeHuffman_buf_getb_exit9_40_phi_temp;
reg [7:0] DecodeHuffman_38_temp_0_in_i_i3_phi_temp;
reg [31:0] DecodeHuffman_pgetc_exit_i6__0_i_i5_phi_temp;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* DecodeHuffman: %12*/
/*   %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_DecodeHuffman_BB4_17)
begin
$write("Unanticipated marker detected.\n");
end
/* DecodeHuffman: %36*/
/*   %37 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str30, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_DecodeHuffman_BB11_37)
begin
$write("Unanticipated marker detected.\n");
end
/* DecodeHuffman: %62*/
/*   %63 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str26, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_DecodeHuffman_BB17_58)
begin
$write("Huffman read error\n");
end
/* DecodeHuffman: %62*/
/*   tail call void @exit(i32 0) noreturn nounwind*/
if (cur_state == LEGUP_F_DecodeHuffman_BB17_58)
begin
$finish;
end
end
always @(posedge clk) begin
if (reset == 1'd1)
begin
cur_state <= 6'd0;
if (^reset !== 1'bX && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB0_1 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB0_2;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB0_2 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB0_2;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB0_2 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB0_3;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB0_3 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB0_3;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB0_3 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_0_2 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_7;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB0_3 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_0_2 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB1_4 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB1_4 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB1_5;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB1_5 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB1_5;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB1_5 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB1_6;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB1_6 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB1_6;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB1_6 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_21;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_7 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_7;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_7 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_8;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_8 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_8;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_8 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_9;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_9;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_10;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_10 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_10;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_10 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_11;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_11 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_11;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_11 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_12;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_12 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB2_12;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB2_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_12 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_3_7 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB3_13;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB2_12 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_3_7 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB5_18;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB5_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_13 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB3_13;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB3_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_13 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB3_14;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_14 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB3_14;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB3_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_14 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB3_15;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_15 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB3_15;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB3_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_15 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB3_16;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB3_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_16 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB3_16;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB3_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_16 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_8_11 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB6_19;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB3_16 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_8_11 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB4_17;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB4_17 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB4_17;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB4_17 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB5_18;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB5_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB5_18 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB5_18;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB5_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB5_18 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB6_19;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB6_19;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB6_20;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB6_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB6_20;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB6_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_21;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_21;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_22;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_22 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_22;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_22 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_23;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_23 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_23;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_23 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_24;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_24 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_24;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_24 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_25;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB7_25;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB7_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit_23 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB8_26;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB8_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit_23 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB15_46;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB15_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB8_26;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB8_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26 & memory_controller_waitrequest == 1'd0 & DecodeHuffman__lr_ph_26 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_27;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26 & memory_controller_waitrequest == 1'd0 & DecodeHuffman__lr_ph_26 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_41;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_27 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_27;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_27 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_28;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_28 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_28;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_28 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_29;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_29;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_30;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_30 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_30;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_30 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_31;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_31 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_31;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_31 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_32;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_32 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB9_32;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB9_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_32 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_27_31 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB10_33;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB10_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB9_32 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_27_31 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB12_38;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_33 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB10_33;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB10_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_33 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB10_34;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB10_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_34 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB10_34;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB10_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_34 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB10_35;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_35 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB10_35;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB10_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_35 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB10_36;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_36 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB10_36;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB10_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_36 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_32_35 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB13_39;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB13_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB10_36 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_32_35 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB11_37;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB11_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB11_37 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB11_37;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB11_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB11_37 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB12_38;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB12_38 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB12_38;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB12_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB12_38 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB13_39;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB13_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB13_39;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB13_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB13_40;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB13_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB13_40;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB13_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_41;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_41;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_42;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_42 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_42;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_42 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_43;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_43 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_43;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_43 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_44;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_44 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_44;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_44 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_45;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB14_45;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB14_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit9_47 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB8_26;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB8_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit9_47 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB15_46;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB15_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB15_46;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB15_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB15_47;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB15_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB15_47 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB15_47;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB15_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB15_47 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB15_48;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB15_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB15_48 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB15_48;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB15_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB15_48 & memory_controller_waitrequest == 1'd0 & DecodeHuffman___crit_edge_50 == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_49;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB15_48 & memory_controller_waitrequest == 1'd0 & DecodeHuffman___crit_edge_50 == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB17_58;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB17_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_49 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_49;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_49 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_50;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_50 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_50;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_50 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_51;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_51 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_51;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_51 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_52;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_52 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_52;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_52 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_53;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_53 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_53;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_53 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_54;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_54 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_54;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_54 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_55;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_55 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_55;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_55 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_56;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_56 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_56;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_56 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_57;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_57 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB16_57;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB16_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB16_57 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB17_58 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_DecodeHuffman_BB17_58;
if (^reset !== 1'bX && ^(LEGUP_F_DecodeHuffman_BB17_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_DecodeHuffman_BB17_58 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %0*/
/*   %1 = load i32* @read_position, align 4, !tbaa !0*/
begin
DecodeHuffman_0_1 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* DecodeHuffman: %0*/
/*   %1 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB0_3)
begin
DecodeHuffman_0_1_reg <= DecodeHuffman_0_1;
if (^reset !== 1'bX && ^(DecodeHuffman_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_0_1_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %0*/
/*   %2 = icmp slt i32 %1, 0*/
begin
DecodeHuffman_0_2 = $signed(DecodeHuffman_0_1) < $signed(32'd0);
end
end
always @(*) begin
/* DecodeHuffman: %._crit_edge.i*/
/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !0*/
begin
DecodeHuffman___crit_edge_i__pre_i = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %3*/
/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
begin
DecodeHuffman_3_4 = memory_controller_out[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* DecodeHuffman: %3*/
/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9)
begin
DecodeHuffman_3_4_reg <= DecodeHuffman_3_4;
if (^reset !== 1'bX && ^(DecodeHuffman_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_3_4_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %3*/
/*   %5 = getelementptr inbounds i8* %4, i32 1*/
begin
DecodeHuffman_3_5 = DecodeHuffman_3_4 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %3*/
/*   %5 = getelementptr inbounds i8* %4, i32 1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9)
begin
DecodeHuffman_3_5_reg <= DecodeHuffman_3_5;
if (^reset !== 1'bX && ^(DecodeHuffman_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_3_5_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %3*/
/*   %6 = load i8* %4, align 1, !tbaa !1*/
begin
DecodeHuffman_3_6 = memory_controller_out[7:0];
end
end
always @(*) begin
/* DecodeHuffman: %3*/
/*   %7 = icmp eq i8 %6, -1*/
begin
DecodeHuffman_3_7 = DecodeHuffman_3_6 == -8'd1;
end
end
always @(*) begin
/* DecodeHuffman: %8*/
/*   %9 = getelementptr inbounds i8* %4, i32 2*/
begin
DecodeHuffman_8_9 = DecodeHuffman_3_4_reg + 1 * 32'd2;
end
end
always @(*) begin
/* DecodeHuffman: %8*/
/*   %10 = load i8* %5, align 1, !tbaa !1*/
begin
DecodeHuffman_8_10 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* DecodeHuffman: %8*/
/*   %10 = load i8* %5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_16)
begin
DecodeHuffman_8_10_reg <= DecodeHuffman_8_10;
if (^reset !== 1'bX && ^(DecodeHuffman_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_8_10_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %8*/
/*   %11 = icmp eq i8 %10, 0*/
begin
DecodeHuffman_8_11 = DecodeHuffman_8_10 == 8'd0;
end
end
always @(*) begin
/* DecodeHuffman: %14*/
/*   %temp.0.in.i.i = phi i8 [ %10, %12 ], [ %6, %3 ]*/
begin
DecodeHuffman_14_temp_0_in_i_i = DecodeHuffman_14_temp_0_in_i_i_phi_temp;
end
end
always @(*) begin
/* DecodeHuffman: %14*/
/*   %temp.0.i.i = zext i8 %temp.0.in.i.i to i32*/
begin
DecodeHuffman_14_temp_0_i_i = DecodeHuffman_14_temp_0_in_i_i;
end
end
always @(*) begin
/* DecodeHuffman: %pgetc.exit.i*/
/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
DecodeHuffman_pgetc_exit_i__0_i_i = DecodeHuffman_pgetc_exit_i__0_i_i_phi_temp;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
else /* if (cur_state == LEGUP_F_DecodeHuffman_BB6_19) */
begin
DecodeHuffman_pgetc_exit_i__0_i_i = DecodeHuffman_pgetc_exit_i__0_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %pgetc.exit.i*/
/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
DecodeHuffman_pgetc_exit_i__0_i_i_reg <= DecodeHuffman_pgetc_exit_i__0_i_i;
if (^reset !== 1'bX && ^(DecodeHuffman_pgetc_exit_i__0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i__0_i_i_reg"); $finish; end
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
DecodeHuffman_pgetc_exit_i__0_i_i_reg <= DecodeHuffman_pgetc_exit_i__0_i_i;
if (^reset !== 1'bX && ^(DecodeHuffman_pgetc_exit_i__0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i__0_i_i_reg"); $finish; end
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
DecodeHuffman_pgetc_exit_i__0_i_i_reg <= DecodeHuffman_pgetc_exit_i__0_i_i;
if (^reset !== 1'bX && ^(DecodeHuffman_pgetc_exit_i__0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i__0_i_i_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_15 = DecodeHuffman_buf_getb_exit_15_phi_temp;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
else if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_15 = DecodeHuffman_buf_getb_exit_15_phi_temp;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
else /* if (cur_state == LEGUP_F_DecodeHuffman_BB7_21) */
begin
DecodeHuffman_buf_getb_exit_15 = DecodeHuffman_buf_getb_exit_15_phi_temp;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_15_reg <= DecodeHuffman_buf_getb_exit_15;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_15_reg"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_15_reg <= DecodeHuffman_buf_getb_exit_15;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_15_reg"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_15_reg <= DecodeHuffman_buf_getb_exit_15;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_15_reg"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_15_reg <= DecodeHuffman_buf_getb_exit_15;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_15_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %16 = phi i32 [ 7, %pgetc.exit.i ], [ %1, %._crit_edge.i ]*/
begin
DecodeHuffman_buf_getb_exit_16 = DecodeHuffman_buf_getb_exit_16_phi_temp;
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %17 = add nsw i32 %16, -1*/
begin
DecodeHuffman_buf_getb_exit_17 = DecodeHuffman_buf_getb_exit_16 + -32'd1;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %17 = add nsw i32 %16, -1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_17_reg <= DecodeHuffman_buf_getb_exit_17;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_17_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %18 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %16*/
begin
DecodeHuffman_buf_getb_exit_18 = `TAG_g_bit_set_mask_a + 4 * DecodeHuffman_buf_getb_exit_16;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %18 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %16*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_18_reg <= DecodeHuffman_buf_getb_exit_18;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_18_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
begin
DecodeHuffman_buf_getb_exit_19 = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %20 = and i32 %19, %15*/
begin
DecodeHuffman_buf_getb_exit_20 = DecodeHuffman_buf_getb_exit_19 & DecodeHuffman_buf_getb_exit_15_reg;
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %not..i = icmp ne i32 %20, 0*/
begin
DecodeHuffman_buf_getb_exit_not__i = DecodeHuffman_buf_getb_exit_20 != 32'd0;
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %..i = zext i1 %not..i to i32*/
begin
DecodeHuffman_buf_getb_exit___i = DecodeHuffman_buf_getb_exit_not__i;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %..i = zext i1 %not..i to i32*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_24)
begin
DecodeHuffman_buf_getb_exit___i_reg <= DecodeHuffman_buf_getb_exit___i;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit___i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit___i_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %21 = getelementptr inbounds i32* %Dhuff_maxcode, i32 1*/
begin
DecodeHuffman_buf_getb_exit_21 = arg_Dhuff_maxcode + 4 * 32'd1;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %21 = getelementptr inbounds i32* %Dhuff_maxcode, i32 1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
DecodeHuffman_buf_getb_exit_21_reg <= DecodeHuffman_buf_getb_exit_21;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_21_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
begin
DecodeHuffman_buf_getb_exit_22 = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %23 = icmp sgt i32 %..i, %22*/
begin
DecodeHuffman_buf_getb_exit_23 = $signed(DecodeHuffman_buf_getb_exit___i_reg) > $signed(DecodeHuffman_buf_getb_exit_22);
end
end
always @(*) begin
/* DecodeHuffman: %.lr.ph*/
/*   %.pre.i1 = phi i32 [ %39, %buf_getb.exit9 ], [ %15, %buf_getb.exit ]*/
begin
DecodeHuffman__lr_ph__pre_i1 = DecodeHuffman__lr_ph__pre_i1_phi_temp;
end
end
always @(*) begin
/* DecodeHuffman: %.lr.ph*/
/*   %24 = phi i32 [ %41, %buf_getb.exit9 ], [ %17, %buf_getb.exit ]*/
begin
DecodeHuffman__lr_ph_24 = DecodeHuffman__lr_ph_24_phi_temp;
end
end
always @(*) begin
/* DecodeHuffman: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %buf_getb.exit9 ], [ 0, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26)
begin
DecodeHuffman__lr_ph_indvar = DecodeHuffman__lr_ph_indvar_phi_temp;
end
/* DecodeHuffman: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %buf_getb.exit9 ], [ 0, %buf_getb.exit ]*/
else /* if (cur_state == LEGUP_F_DecodeHuffman_BB8_26) */
begin
DecodeHuffman__lr_ph_indvar = DecodeHuffman__lr_ph_indvar_phi_temp;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %buf_getb.exit9 ], [ 0, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26)
begin
DecodeHuffman__lr_ph_indvar_reg <= DecodeHuffman__lr_ph_indvar;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_indvar_reg"); $finish; end
end
/* DecodeHuffman: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %buf_getb.exit9 ], [ 0, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26)
begin
DecodeHuffman__lr_ph_indvar_reg <= DecodeHuffman__lr_ph_indvar;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_indvar_reg"); $finish; end
end
/* DecodeHuffman: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %buf_getb.exit9 ], [ 0, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26)
begin
DecodeHuffman__lr_ph_indvar_reg <= DecodeHuffman__lr_ph_indvar;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_indvar_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %.lr.ph*/
/*   %code.010 = phi i32 [ %45, %buf_getb.exit9 ], [ %..i, %buf_getb.exit ]*/
begin
DecodeHuffman__lr_ph_code_010 = DecodeHuffman__lr_ph_code_010_phi_temp;
end
end
always @(*) begin
/* DecodeHuffman: %.lr.ph*/
/*   %tmp = add i32 %indvar, 2*/
begin
DecodeHuffman__lr_ph_tmp = DecodeHuffman__lr_ph_indvar + 32'd2;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %.lr.ph*/
/*   %tmp = add i32 %indvar, 2*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26)
begin
DecodeHuffman__lr_ph_tmp_reg <= DecodeHuffman__lr_ph_tmp;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_tmp_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %.lr.ph*/
/*   %scevgep = getelementptr i32* %Dhuff_maxcode, i32 %tmp*/
begin
DecodeHuffman__lr_ph_scevgep = arg_Dhuff_maxcode + 4 * DecodeHuffman__lr_ph_tmp;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %.lr.ph*/
/*   %scevgep = getelementptr i32* %Dhuff_maxcode, i32 %tmp*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26)
begin
DecodeHuffman__lr_ph_scevgep_reg <= DecodeHuffman__lr_ph_scevgep;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_scevgep_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %.lr.ph*/
/*   %25 = shl i32 %code.010, 1*/
begin
DecodeHuffman__lr_ph_25 = DecodeHuffman__lr_ph_code_010 <<< 32'd1 % 32;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %.lr.ph*/
/*   %25 = shl i32 %code.010, 1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26)
begin
DecodeHuffman__lr_ph_25_reg <= DecodeHuffman__lr_ph_25;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_25_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %.lr.ph*/
/*   %26 = icmp slt i32 %24, 0*/
begin
DecodeHuffman__lr_ph_26 = $signed(DecodeHuffman__lr_ph_24) < $signed(32'd0);
end
end
always @(*) begin
/* DecodeHuffman: %27*/
/*   %28 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
begin
DecodeHuffman_27_28 = memory_controller_out[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
end
always @(posedge clk) begin
/* DecodeHuffman: %27*/
/*   %28 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29)
begin
DecodeHuffman_27_28_reg <= DecodeHuffman_27_28;
if (^reset !== 1'bX && ^(DecodeHuffman_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_27_28_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %27*/
/*   %29 = getelementptr inbounds i8* %28, i32 1*/
begin
DecodeHuffman_27_29 = DecodeHuffman_27_28 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %27*/
/*   %29 = getelementptr inbounds i8* %28, i32 1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29)
begin
DecodeHuffman_27_29_reg <= DecodeHuffman_27_29;
if (^reset !== 1'bX && ^(DecodeHuffman_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_27_29_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %27*/
/*   %30 = load i8* %28, align 1, !tbaa !1*/
begin
DecodeHuffman_27_30 = memory_controller_out[7:0];
end
end
always @(*) begin
/* DecodeHuffman: %27*/
/*   %31 = icmp eq i8 %30, -1*/
begin
DecodeHuffman_27_31 = DecodeHuffman_27_30 == -8'd1;
end
end
always @(*) begin
/* DecodeHuffman: %32*/
/*   %33 = getelementptr inbounds i8* %28, i32 2*/
begin
DecodeHuffman_32_33 = DecodeHuffman_27_28_reg + 1 * 32'd2;
end
end
always @(*) begin
/* DecodeHuffman: %32*/
/*   %34 = load i8* %29, align 1, !tbaa !1*/
begin
DecodeHuffman_32_34 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* DecodeHuffman: %32*/
/*   %34 = load i8* %29, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_36)
begin
DecodeHuffman_32_34_reg <= DecodeHuffman_32_34;
if (^reset !== 1'bX && ^(DecodeHuffman_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_32_34_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %32*/
/*   %35 = icmp eq i8 %34, 0*/
begin
DecodeHuffman_32_35 = DecodeHuffman_32_34 == 8'd0;
end
end
always @(*) begin
/* DecodeHuffman: %38*/
/*   %temp.0.in.i.i3 = phi i8 [ %34, %36 ], [ %30, %27 ]*/
begin
DecodeHuffman_38_temp_0_in_i_i3 = DecodeHuffman_38_temp_0_in_i_i3_phi_temp;
end
end
always @(*) begin
/* DecodeHuffman: %38*/
/*   %temp.0.i.i4 = zext i8 %temp.0.in.i.i3 to i32*/
begin
DecodeHuffman_38_temp_0_i_i4 = DecodeHuffman_38_temp_0_in_i_i3;
end
end
always @(*) begin
/* DecodeHuffman: %pgetc.exit.i6*/
/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %38 ], [ 255, %32 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
DecodeHuffman_pgetc_exit_i6__0_i_i5 = DecodeHuffman_pgetc_exit_i6__0_i_i5_phi_temp;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %38 ], [ 255, %32 ]*/
else /* if (cur_state == LEGUP_F_DecodeHuffman_BB13_39) */
begin
DecodeHuffman_pgetc_exit_i6__0_i_i5 = DecodeHuffman_pgetc_exit_i6__0_i_i5_phi_temp;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %pgetc.exit.i6*/
/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %38 ], [ 255, %32 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
DecodeHuffman_pgetc_exit_i6__0_i_i5_reg <= DecodeHuffman_pgetc_exit_i6__0_i_i5;
if (^reset !== 1'bX && ^(DecodeHuffman_pgetc_exit_i6__0_i_i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i6__0_i_i5_reg"); $finish; end
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %38 ], [ 255, %32 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
DecodeHuffman_pgetc_exit_i6__0_i_i5_reg <= DecodeHuffman_pgetc_exit_i6__0_i_i5;
if (^reset !== 1'bX && ^(DecodeHuffman_pgetc_exit_i6__0_i_i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i6__0_i_i5_reg"); $finish; end
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %38 ], [ 255, %32 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
DecodeHuffman_pgetc_exit_i6__0_i_i5_reg <= DecodeHuffman_pgetc_exit_i6__0_i_i5;
if (^reset !== 1'bX && ^(DecodeHuffman_pgetc_exit_i6__0_i_i5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i6__0_i_i5_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_39 = DecodeHuffman_buf_getb_exit9_39_phi_temp;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
else if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_39 = DecodeHuffman_buf_getb_exit9_39_phi_temp;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
else /* if (cur_state == LEGUP_F_DecodeHuffman_BB14_41) */
begin
DecodeHuffman_buf_getb_exit9_39 = DecodeHuffman_buf_getb_exit9_39_phi_temp;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_39_reg <= DecodeHuffman_buf_getb_exit9_39;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_39_reg"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_39_reg <= DecodeHuffman_buf_getb_exit9_39;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_39_reg"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_39_reg <= DecodeHuffman_buf_getb_exit9_39;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_39_reg"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_39_reg <= DecodeHuffman_buf_getb_exit9_39;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_39_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %40 = phi i32 [ 7, %pgetc.exit.i6 ], [ %24, %.lr.ph ]*/
begin
DecodeHuffman_buf_getb_exit9_40 = DecodeHuffman_buf_getb_exit9_40_phi_temp;
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %41 = add nsw i32 %40, -1*/
begin
DecodeHuffman_buf_getb_exit9_41 = DecodeHuffman_buf_getb_exit9_40 + -32'd1;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %41 = add nsw i32 %40, -1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_41_reg <= DecodeHuffman_buf_getb_exit9_41;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_41_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %42 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %40*/
begin
DecodeHuffman_buf_getb_exit9_42 = `TAG_g_bit_set_mask_a + 4 * DecodeHuffman_buf_getb_exit9_40;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %42 = getelementptr inbounds [32 x i32]* @bit_set_mask, i32 0, i32 %40*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_42_reg <= DecodeHuffman_buf_getb_exit9_42;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_42_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
begin
DecodeHuffman_buf_getb_exit9_43 = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %44 = and i32 %43, %39*/
begin
DecodeHuffman_buf_getb_exit9_44 = DecodeHuffman_buf_getb_exit9_43 & DecodeHuffman_buf_getb_exit9_39_reg;
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %not..i7 = icmp ne i32 %44, 0*/
begin
DecodeHuffman_buf_getb_exit9_not__i7 = DecodeHuffman_buf_getb_exit9_44 != 32'd0;
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %..i8 = zext i1 %not..i7 to i32*/
begin
DecodeHuffman_buf_getb_exit9___i8 = DecodeHuffman_buf_getb_exit9_not__i7;
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %45 = or i32 %..i8, %25*/
begin
DecodeHuffman_buf_getb_exit9_45 = DecodeHuffman_buf_getb_exit9___i8 | DecodeHuffman__lr_ph_25_reg;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %45 = or i32 %..i8, %25*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_44)
begin
DecodeHuffman_buf_getb_exit9_45_reg <= DecodeHuffman_buf_getb_exit9_45;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_45_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %46 = load i32* %scevgep, align 4, !tbaa !0*/
begin
DecodeHuffman_buf_getb_exit9_46 = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %47 = icmp sgt i32 %45, %46*/
begin
DecodeHuffman_buf_getb_exit9_47 = $signed(DecodeHuffman_buf_getb_exit9_45_reg) > $signed(DecodeHuffman_buf_getb_exit9_46);
end
end
always @(*) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %indvar.next = add i32 %indvar, 1*/
begin
DecodeHuffman_buf_getb_exit9_indvar_next = DecodeHuffman__lr_ph_indvar_reg + 32'd1;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %indvar.next = add i32 %indvar, 1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
DecodeHuffman_buf_getb_exit9_indvar_next_reg <= DecodeHuffman_buf_getb_exit9_indvar_next;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_indvar_next) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_indvar_next_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_l_0_lcssa = DecodeHuffman___crit_edge_l_0_lcssa_phi_temp;
end
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
else if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_l_0_lcssa = DecodeHuffman___crit_edge_l_0_lcssa_phi_temp;
end
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
else /* if (cur_state == LEGUP_F_DecodeHuffman_BB15_46) */
begin
DecodeHuffman___crit_edge_l_0_lcssa = DecodeHuffman___crit_edge_l_0_lcssa_phi_temp;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_l_0_lcssa_reg <= DecodeHuffman___crit_edge_l_0_lcssa;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_l_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_l_0_lcssa_reg"); $finish; end
end
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_l_0_lcssa_reg <= DecodeHuffman___crit_edge_l_0_lcssa;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_l_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_l_0_lcssa_reg"); $finish; end
end
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_l_0_lcssa_reg <= DecodeHuffman___crit_edge_l_0_lcssa;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_l_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_l_0_lcssa_reg"); $finish; end
end
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_l_0_lcssa_reg <= DecodeHuffman___crit_edge_l_0_lcssa;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_l_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_l_0_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_code_0_lcssa = DecodeHuffman___crit_edge_code_0_lcssa_phi_temp;
end
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
else if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_code_0_lcssa = DecodeHuffman___crit_edge_code_0_lcssa_phi_temp;
end
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
else /* if (cur_state == LEGUP_F_DecodeHuffman_BB15_46) */
begin
DecodeHuffman___crit_edge_code_0_lcssa = DecodeHuffman___crit_edge_code_0_lcssa_phi_temp;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_code_0_lcssa_reg <= DecodeHuffman___crit_edge_code_0_lcssa;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_code_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_code_0_lcssa_reg"); $finish; end
end
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_code_0_lcssa_reg <= DecodeHuffman___crit_edge_code_0_lcssa;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_code_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_code_0_lcssa_reg"); $finish; end
end
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_code_0_lcssa_reg <= DecodeHuffman___crit_edge_code_0_lcssa;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_code_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_code_0_lcssa_reg"); $finish; end
end
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
DecodeHuffman___crit_edge_code_0_lcssa_reg <= DecodeHuffman___crit_edge_code_0_lcssa;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_code_0_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_code_0_lcssa_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %._crit_edge*/
/*   %48 = getelementptr inbounds i32* %Dhuff_maxcode, i32 %Dhuff_ml*/
begin
DecodeHuffman___crit_edge_48 = arg_Dhuff_maxcode + 4 * arg_Dhuff_ml;
end
end
always @(*) begin
/* DecodeHuffman: %._crit_edge*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
begin
DecodeHuffman___crit_edge_49 = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %._crit_edge*/
/*   %50 = icmp slt i32 %code.0.lcssa, %49*/
begin
DecodeHuffman___crit_edge_50 = $signed(DecodeHuffman___crit_edge_code_0_lcssa_reg) < $signed(DecodeHuffman___crit_edge_49);
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %52 = load i32* @main_result, align 4, !tbaa !0*/
begin
DecodeHuffman_51_52 = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %53 = add nsw i32 %52, 1*/
begin
DecodeHuffman_51_53 = DecodeHuffman_51_52 + 32'd1;
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %54 = getelementptr inbounds i32* %Dhuff_valptr, i32 %l.0.lcssa*/
begin
DecodeHuffman_51_54 = arg_Dhuff_valptr + 4 * DecodeHuffman___crit_edge_l_0_lcssa_reg;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %51*/
/*   %54 = getelementptr inbounds i32* %Dhuff_valptr, i32 %l.0.lcssa*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_49)
begin
DecodeHuffman_51_54_reg <= DecodeHuffman_51_54;
if (^reset !== 1'bX && ^(DecodeHuffman_51_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_51_54_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %55 = load i32* %54, align 4, !tbaa !0*/
begin
DecodeHuffman_51_55 = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %56 = getelementptr inbounds i32* %Dhuff_mincode, i32 %l.0.lcssa*/
begin
DecodeHuffman_51_56 = arg_Dhuff_mincode + 4 * DecodeHuffman___crit_edge_l_0_lcssa_reg;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %51*/
/*   %56 = getelementptr inbounds i32* %Dhuff_mincode, i32 %l.0.lcssa*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_49)
begin
DecodeHuffman_51_56_reg <= DecodeHuffman_51_56;
if (^reset !== 1'bX && ^(DecodeHuffman_51_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_51_56_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
begin
DecodeHuffman_51_57 = memory_controller_out[31:0];
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %58 = add i32 %55, %code.0.lcssa*/
begin
DecodeHuffman_51_58 = DecodeHuffman_51_55 + DecodeHuffman___crit_edge_code_0_lcssa_reg;
end
end
always @(posedge clk) begin
/* DecodeHuffman: %51*/
/*   %58 = add i32 %55, %code.0.lcssa*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_54)
begin
DecodeHuffman_51_58_reg <= DecodeHuffman_51_58;
if (^reset !== 1'bX && ^(DecodeHuffman_51_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_51_58_reg"); $finish; end
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %59 = sub i32 %58, %57*/
begin
DecodeHuffman_51_59 = DecodeHuffman_51_58_reg - DecodeHuffman_51_57;
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %60 = getelementptr inbounds i32* %Xhuff_huffval, i32 %59*/
begin
DecodeHuffman_51_60 = arg_Xhuff_huffval + 4 * DecodeHuffman_51_59;
end
end
always @(*) begin
/* DecodeHuffman: %51*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
begin
DecodeHuffman_51_61 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB1_6 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_buf_getb_exit_15_phi_temp <= DecodeHuffman___crit_edge_i__pre_i;
if (^reset !== 1'bX && ^(DecodeHuffman___crit_edge_i__pre_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_15_phi_temp"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %15 = phi i32 [ %.0.i.i, %pgetc.exit.i ], [ %.pre.i, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_buf_getb_exit_15_phi_temp <= DecodeHuffman_pgetc_exit_i__0_i_i_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_pgetc_exit_i__0_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_15_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit*/
/*   %16 = phi i32 [ 7, %pgetc.exit.i ], [ %1, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB1_6 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_buf_getb_exit_16_phi_temp <= DecodeHuffman_0_1_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_0_1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_16_phi_temp"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %16 = phi i32 [ 7, %pgetc.exit.i ], [ %1, %._crit_edge.i ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_buf_getb_exit_16_phi_temp <= 32'd7;
if (^reset !== 1'bX && ^(32'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit_16_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %14*/
/*   %temp.0.in.i.i = phi i8 [ %10, %12 ], [ %6, %3 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_12 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_3_7 == 1'd0)
begin
DecodeHuffman_14_temp_0_in_i_i_phi_temp <= DecodeHuffman_3_6;
if (^reset !== 1'bX && ^(DecodeHuffman_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_14_temp_0_in_i_i_phi_temp"); $finish; end
end
/* DecodeHuffman: %14*/
/*   %temp.0.in.i.i = phi i8 [ %10, %12 ], [ %6, %3 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB4_17 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_14_temp_0_in_i_i_phi_temp <= DecodeHuffman_8_10_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_8_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_14_temp_0_in_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %pgetc.exit.i*/
/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_16 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_8_11 == 1'd1)
begin
DecodeHuffman_pgetc_exit_i__0_i_i_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i__0_i_i_phi_temp"); $finish; end
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   %.0.i.i = phi i32 [ %temp.0.i.i, %14 ], [ 255, %8 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB5_18 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_pgetc_exit_i__0_i_i_phi_temp <= DecodeHuffman_14_temp_0_i_i;
if (^reset !== 1'bX && ^(DecodeHuffman_14_temp_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i__0_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %.lr.ph*/
/*   %.pre.i1 = phi i32 [ %39, %buf_getb.exit9 ], [ %15, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit_23 == 1'd1)
begin
DecodeHuffman__lr_ph__pre_i1_phi_temp <= DecodeHuffman_buf_getb_exit_15_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_15_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph__pre_i1_phi_temp"); $finish; end
end
/* DecodeHuffman: %.lr.ph*/
/*   %.pre.i1 = phi i32 [ %39, %buf_getb.exit9 ], [ %15, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit9_47 == 1'd1)
begin
DecodeHuffman__lr_ph__pre_i1_phi_temp <= DecodeHuffman_buf_getb_exit9_39_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_39_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph__pre_i1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %.lr.ph*/
/*   %24 = phi i32 [ %41, %buf_getb.exit9 ], [ %17, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit_23 == 1'd1)
begin
DecodeHuffman__lr_ph_24_phi_temp <= DecodeHuffman_buf_getb_exit_17_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit_17_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_24_phi_temp"); $finish; end
end
/* DecodeHuffman: %.lr.ph*/
/*   %24 = phi i32 [ %41, %buf_getb.exit9 ], [ %17, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit9_47 == 1'd1)
begin
DecodeHuffman__lr_ph_24_phi_temp <= DecodeHuffman_buf_getb_exit9_41_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_41_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_24_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %buf_getb.exit9 ], [ 0, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit_23 == 1'd1)
begin
DecodeHuffman__lr_ph_indvar_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_indvar_phi_temp"); $finish; end
end
/* DecodeHuffman: %.lr.ph*/
/*   %indvar = phi i32 [ %indvar.next, %buf_getb.exit9 ], [ 0, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit9_47 == 1'd1)
begin
DecodeHuffman__lr_ph_indvar_phi_temp <= DecodeHuffman_buf_getb_exit9_indvar_next_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_indvar_next_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_indvar_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %.lr.ph*/
/*   %code.010 = phi i32 [ %45, %buf_getb.exit9 ], [ %..i, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit_23 == 1'd1)
begin
DecodeHuffman__lr_ph_code_010_phi_temp <= DecodeHuffman_buf_getb_exit___i_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit___i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_code_010_phi_temp"); $finish; end
end
/* DecodeHuffman: %.lr.ph*/
/*   %code.010 = phi i32 [ %45, %buf_getb.exit9 ], [ %..i, %buf_getb.exit ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit9_47 == 1'd1)
begin
DecodeHuffman__lr_ph_code_010_phi_temp <= DecodeHuffman_buf_getb_exit9_45_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_45_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman__lr_ph_code_010_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit_23 == 1'd0)
begin
DecodeHuffman___crit_edge_l_0_lcssa_phi_temp <= 32'd1;
if (^reset !== 1'bX && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_l_0_lcssa_phi_temp"); $finish; end
end
/* DecodeHuffman: %._crit_edge*/
/*   %l.0.lcssa = phi i32 [ 1, %buf_getb.exit ], [ %tmp, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit9_47 == 1'd0)
begin
DecodeHuffman___crit_edge_l_0_lcssa_phi_temp <= DecodeHuffman__lr_ph_tmp_reg;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph_tmp_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_l_0_lcssa_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_25 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit_23 == 1'd0)
begin
DecodeHuffman___crit_edge_code_0_lcssa_phi_temp <= DecodeHuffman_buf_getb_exit___i_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit___i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_code_0_lcssa_phi_temp"); $finish; end
end
/* DecodeHuffman: %._crit_edge*/
/*   %code.0.lcssa = phi i32 [ %..i, %buf_getb.exit ], [ %45, %buf_getb.exit9 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_45 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_buf_getb_exit9_47 == 1'd0)
begin
DecodeHuffman___crit_edge_code_0_lcssa_phi_temp <= DecodeHuffman_buf_getb_exit9_45_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_buf_getb_exit9_45_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman___crit_edge_code_0_lcssa_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26 & memory_controller_waitrequest == 1'd0 & DecodeHuffman__lr_ph_26 == 1'd0)
begin
DecodeHuffman_buf_getb_exit9_39_phi_temp <= DecodeHuffman__lr_ph__pre_i1;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph__pre_i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_39_phi_temp"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %39 = phi i32 [ %.0.i.i5, %pgetc.exit.i6 ], [ %.pre.i1, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_buf_getb_exit9_39_phi_temp <= DecodeHuffman_pgetc_exit_i6__0_i_i5_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_pgetc_exit_i6__0_i_i5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_39_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %buf_getb.exit9*/
/*   %40 = phi i32 [ 7, %pgetc.exit.i6 ], [ %24, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB8_26 & memory_controller_waitrequest == 1'd0 & DecodeHuffman__lr_ph_26 == 1'd0)
begin
DecodeHuffman_buf_getb_exit9_40_phi_temp <= DecodeHuffman__lr_ph_24;
if (^reset !== 1'bX && ^(DecodeHuffman__lr_ph_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_40_phi_temp"); $finish; end
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %40 = phi i32 [ 7, %pgetc.exit.i6 ], [ %24, %.lr.ph ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_buf_getb_exit9_40_phi_temp <= 32'd7;
if (^reset !== 1'bX && ^(32'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_buf_getb_exit9_40_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %38*/
/*   %temp.0.in.i.i3 = phi i8 [ %34, %36 ], [ %30, %27 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_32 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_27_31 == 1'd0)
begin
DecodeHuffman_38_temp_0_in_i_i3_phi_temp <= DecodeHuffman_27_30;
if (^reset !== 1'bX && ^(DecodeHuffman_27_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_38_temp_0_in_i_i3_phi_temp"); $finish; end
end
/* DecodeHuffman: %38*/
/*   %temp.0.in.i.i3 = phi i8 [ %34, %36 ], [ %30, %27 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB11_37 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_38_temp_0_in_i_i3_phi_temp <= DecodeHuffman_32_34_reg;
if (^reset !== 1'bX && ^(DecodeHuffman_32_34_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_38_temp_0_in_i_i3_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* DecodeHuffman: %pgetc.exit.i6*/
/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %38 ], [ 255, %32 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_36 & memory_controller_waitrequest == 1'd0 & DecodeHuffman_32_35 == 1'd1)
begin
DecodeHuffman_pgetc_exit_i6__0_i_i5_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i6__0_i_i5_phi_temp"); $finish; end
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   %.0.i.i5 = phi i32 [ %temp.0.i.i4, %38 ], [ 255, %32 ]*/
if (cur_state == LEGUP_F_DecodeHuffman_BB12_38 & memory_controller_waitrequest == 1'd0)
begin
DecodeHuffman_pgetc_exit_i6__0_i_i5_phi_temp <= DecodeHuffman_38_temp_0_i_i4;
if (^reset !== 1'bX && ^(DecodeHuffman_38_temp_0_i_i4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to DecodeHuffman_pgetc_exit_i6__0_i_i5_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* DecodeHuffman: %51*/
/*   ret i32 %61*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_57)
begin
finish <= memory_controller_waitrequest == 1'd0;
if (^reset !== 1'bX && ^(memory_controller_waitrequest == 1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* DecodeHuffman: %51*/
/*   ret i32 %61*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_57)
begin
return_val <= DecodeHuffman_51_61;
if (^reset !== 1'bX && ^(DecodeHuffman_51_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_address = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_address = 0;
end
/* DecodeHuffman: %0*/
/*   %1 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB0_1)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* DecodeHuffman: %._crit_edge.i*/
/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB1_4)
begin
memory_controller_address = `TAG_g_current_read_byte_a;
end
/* DecodeHuffman: %3*/
/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_7)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* DecodeHuffman: %3*/
/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* DecodeHuffman: %3*/
/*   %6 = load i8* %4, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_10)
begin
memory_controller_address = DecodeHuffman_3_4_reg;
end
/* DecodeHuffman: %8*/
/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_13)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* DecodeHuffman: %8*/
/*   %10 = load i8* %5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_14)
begin
memory_controller_address = DecodeHuffman_3_5_reg;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
memory_controller_address = `TAG_g_current_read_byte_a;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   store i32 %17, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_22)
begin
memory_controller_address = DecodeHuffman_buf_getb_exit_18_reg;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_23)
begin
memory_controller_address = DecodeHuffman_buf_getb_exit_21_reg;
end
/* DecodeHuffman: %27*/
/*   %28 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_27)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* DecodeHuffman: %27*/
/*   store i8* %29, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* DecodeHuffman: %27*/
/*   %30 = load i8* %28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_30)
begin
memory_controller_address = DecodeHuffman_27_28_reg;
end
/* DecodeHuffman: %32*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_33)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* DecodeHuffman: %32*/
/*   %34 = load i8* %29, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_34)
begin
memory_controller_address = DecodeHuffman_27_29_reg;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
memory_controller_address = `TAG_g_current_read_byte_a;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   store i32 %41, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
memory_controller_address = `TAG_g_read_position_a;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_42)
begin
memory_controller_address = DecodeHuffman_buf_getb_exit9_42_reg;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %46 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_43)
begin
memory_controller_address = DecodeHuffman__lr_ph_scevgep_reg;
end
/* DecodeHuffman: %._crit_edge*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
memory_controller_address = DecodeHuffman___crit_edge_48;
end
/* DecodeHuffman: %51*/
/*   %52 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_49)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* DecodeHuffman: %51*/
/*   store i32 %53, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_51)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* DecodeHuffman: %51*/
/*   %55 = load i32* %54, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_52)
begin
memory_controller_address = DecodeHuffman_51_54_reg;
end
/* DecodeHuffman: %51*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_53)
begin
memory_controller_address = DecodeHuffman_51_56_reg;
end
/* DecodeHuffman: %51*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_55)
begin
memory_controller_address = DecodeHuffman_51_60;
end
end
always @(*) begin
memory_controller_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_enable = 1'd0;
end
/* DecodeHuffman: %0*/
/*   %1 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB0_1)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %._crit_edge.i*/
/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB1_4)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %3*/
/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_7)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %3*/
/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %3*/
/*   %6 = load i8* %4, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_10)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %8*/
/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_13)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %8*/
/*   %10 = load i8* %5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_14)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   store i32 %17, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_22)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_23)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %27*/
/*   %28 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_27)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %27*/
/*   store i8* %29, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %27*/
/*   %30 = load i8* %28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_30)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %32*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_33)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %32*/
/*   %34 = load i8* %29, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_34)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   store i32 %41, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_42)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %46 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_43)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %._crit_edge*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %51*/
/*   %52 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_49)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %51*/
/*   store i32 %53, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_51)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %51*/
/*   %55 = load i32* %54, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_52)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %51*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_53)
begin
memory_controller_enable = 1'd1;
end
/* DecodeHuffman: %51*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_55)
begin
memory_controller_enable = 1'd1;
end
end
always @(*) begin
memory_controller_write_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %0*/
/*   %1 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB0_1)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %._crit_edge.i*/
/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB1_4)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %3*/
/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_7)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %3*/
/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %3*/
/*   %6 = load i8* %4, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_10)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %8*/
/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_13)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %8*/
/*   %10 = load i8* %5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_14)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   store i32 %17, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_22)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_23)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %27*/
/*   %28 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_27)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %27*/
/*   store i8* %29, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %27*/
/*   %30 = load i8* %28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_30)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %32*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_33)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %32*/
/*   %34 = load i8* %29, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_34)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   store i32 %41, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_42)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %46 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_43)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %._crit_edge*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %51*/
/*   %52 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_49)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %51*/
/*   store i32 %53, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_51)
begin
memory_controller_write_enable = 1'd1;
end
/* DecodeHuffman: %51*/
/*   %55 = load i32* %54, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_52)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %51*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_53)
begin
memory_controller_write_enable = 1'd0;
end
/* DecodeHuffman: %51*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_55)
begin
memory_controller_write_enable = 1'd0;
end
end
always @(*) begin
memory_controller_in = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_in = 64'd0;
end
/* DecodeHuffman: %3*/
/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9)
begin
memory_controller_in = DecodeHuffman_3_5;
end
/* DecodeHuffman: %8*/
/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_13)
begin
memory_controller_in = DecodeHuffman_8_9;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
memory_controller_in = DecodeHuffman_pgetc_exit_i__0_i_i;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20)
begin
memory_controller_in = 32'd7;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   store i32 %17, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
memory_controller_in = DecodeHuffman_buf_getb_exit_17;
end
/* DecodeHuffman: %27*/
/*   store i8* %29, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29)
begin
memory_controller_in = DecodeHuffman_27_29;
end
/* DecodeHuffman: %32*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_33)
begin
memory_controller_in = DecodeHuffman_32_33;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
memory_controller_in = DecodeHuffman_pgetc_exit_i6__0_i_i5;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40)
begin
memory_controller_in = 32'd7;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   store i32 %41, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
memory_controller_in = DecodeHuffman_buf_getb_exit9_41;
end
/* DecodeHuffman: %51*/
/*   store i32 %53, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_51)
begin
memory_controller_in = DecodeHuffman_51_53;
end
end
always @(*) begin
memory_controller_size = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_size = 2'd0;
end
/* DecodeHuffman: %0*/
/*   %1 = load i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB0_1)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %._crit_edge.i*/
/*   %.pre.i = load i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB1_4)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %3*/
/*   %4 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_7)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %3*/
/*   store i8* %5, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_9)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %3*/
/*   %6 = load i8* %4, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB2_10)
begin
memory_controller_size = 2'd0;
end
/* DecodeHuffman: %8*/
/*   store i8* %9, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_13)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %8*/
/*   %10 = load i8* %5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB3_14)
begin
memory_controller_size = 2'd0;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 %.0.i.i, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_19)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %pgetc.exit.i*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB6_20)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   store i32 %17, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_21)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %19 = load i32* %18, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_22)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %buf_getb.exit*/
/*   %22 = load i32* %21, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB7_23)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %27*/
/*   %28 = load i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_27)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %27*/
/*   store i8* %29, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_29)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %27*/
/*   %30 = load i8* %28, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB9_30)
begin
memory_controller_size = 2'd0;
end
/* DecodeHuffman: %32*/
/*   store i8* %33, i8** @CurHuffReadBuf, align 4, !tbaa !3*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_33)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %32*/
/*   %34 = load i8* %29, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_DecodeHuffman_BB10_34)
begin
memory_controller_size = 2'd0;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 %.0.i.i5, i32* @current_read_byte, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_39)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %pgetc.exit.i6*/
/*   store i32 7, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB13_40)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   store i32 %41, i32* @read_position, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_41)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %43 = load i32* %42, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_42)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %buf_getb.exit9*/
/*   %46 = load i32* %scevgep, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB14_43)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %._crit_edge*/
/*   %49 = load i32* %48, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB15_46)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %51*/
/*   %52 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_49)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %51*/
/*   store i32 %53, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_51)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %51*/
/*   %55 = load i32* %54, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_52)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %51*/
/*   %57 = load i32* %56, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_53)
begin
memory_controller_size = 2'd2;
end
/* DecodeHuffman: %51*/
/*   %61 = load i32* %60, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_DecodeHuffman_BB16_55)
begin
memory_controller_size = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	reset,
	start,
	finish,
	return_val,
	memory_controller_address,
	memory_controller_enable,
	memory_controller_write_enable,
	memory_controller_waitrequest,
	memory_controller_in,
	memory_controller_size,
	memory_controller_out
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB0_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB1_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB1_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB1_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB2_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB3_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB4_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB5_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB6_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB7_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB7_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB7_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB7_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB8_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB9_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB9_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB9_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB10_18 = 9'd18;
parameter [8:0] LEGUP_F_main_BB11_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB11_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB11_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB12_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB12_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB12_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB13_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB14_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB15_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB15_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB15_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB16_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB17_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB17_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB17_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB17_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB18_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB18_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB18_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB19_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB20_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB20_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB20_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB20_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB20_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB20_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB20_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB20_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB20_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB20_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB20_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB20_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB20_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB20_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB20_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB20_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB20_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB20_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB20_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB21_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB21_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB21_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB22_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB23_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB23_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB23_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB24_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB24_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB24_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB25_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB25_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB25_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB26_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB26_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB26_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB27_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB27_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB27_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB28_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB29_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB29_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB29_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB30_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB31_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB31_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB31_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB31_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB31_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB31_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB31_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB31_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB31_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB31_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB31_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB31_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB31_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB31_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB31_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB31_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB31_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB31_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB31_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB31_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB31_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB31_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB31_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB31_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB31_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB31_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB31_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB32_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB32_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB32_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB33_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB33_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB33_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB33_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB34_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB34_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB34_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB35_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB35_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB35_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB35_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB36_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB36_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB36_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB37_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB37_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB37_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB38_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB38_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB38_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB39_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB39_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB39_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB39_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB40_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB40_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB40_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB41_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB42_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB42_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB42_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB43_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB44_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB45_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB45_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB45_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB45_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB45_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB46_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB46_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB46_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB47_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB48_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB48_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB48_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB49_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB50_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB51_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB51_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB51_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB51_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB52_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB53_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB53_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB53_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB54_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB55_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB56_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB56_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB56_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB56_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB56_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB56_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB56_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB56_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB56_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB56_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB56_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB56_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB56_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB56_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB57_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB57_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB57_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB58_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB58_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB58_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB58_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB59_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB59_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB59_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB60_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB60_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB60_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB61_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB61_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB61_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB62_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB63_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB64_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB64_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB64_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB64_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB64_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB64_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB64_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB65_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB65_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB65_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB66_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB67_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB67_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB67_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB67_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB67_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB67_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB68_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB68_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB68_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB69_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB70_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB71_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB72_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB73_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB73_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB73_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB74_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB74_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB74_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB74_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB75_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB75_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB75_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB76_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB77_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB77_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB77_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB78_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB79_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB79_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB79_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB79_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB79_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB79_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB79_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB80_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB80_248 = 9'd248;
parameter [8:0] LEGUP_F_main_BB80_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB81_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB82_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB82_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB82_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB82_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB82_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB82_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB83_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB83_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB83_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB84_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB84_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB84_262 = 9'd262;
parameter [8:0] LEGUP_F_main_BB85_263 = 9'd263;
parameter [8:0] LEGUP_F_main_BB85_264 = 9'd264;
parameter [8:0] LEGUP_F_main_BB85_265 = 9'd265;
parameter [8:0] LEGUP_F_main_BB86_266 = 9'd266;
parameter [8:0] LEGUP_F_main_BB87_267 = 9'd267;
parameter [8:0] LEGUP_F_main_BB87_268 = 9'd268;
parameter [8:0] LEGUP_F_main_BB87_269 = 9'd269;
parameter [8:0] LEGUP_F_main_BB87_270 = 9'd270;
parameter [8:0] LEGUP_F_main_BB88_271 = 9'd271;
parameter [8:0] LEGUP_F_main_BB88_272 = 9'd272;
parameter [8:0] LEGUP_F_main_BB88_273 = 9'd273;
parameter [8:0] LEGUP_F_main_BB88_274 = 9'd274;
parameter [8:0] LEGUP_F_main_BB88_275 = 9'd275;
parameter [8:0] LEGUP_F_main_BB89_276 = 9'd276;
parameter [8:0] LEGUP_F_main_BB90_277 = 9'd277;
parameter [8:0] LEGUP_F_main_BB90_278 = 9'd278;
parameter [8:0] LEGUP_F_main_BB90_279 = 9'd279;
parameter [8:0] LEGUP_F_main_BB90_280 = 9'd280;
parameter [8:0] LEGUP_F_main_BB90_281 = 9'd281;
parameter [8:0] LEGUP_F_main_BB90_282 = 9'd282;
parameter [8:0] LEGUP_F_main_BB90_283 = 9'd283;
parameter [8:0] LEGUP_F_main_BB90_284 = 9'd284;
parameter [8:0] LEGUP_F_main_BB90_285 = 9'd285;
parameter [8:0] LEGUP_F_main_BB90_286 = 9'd286;
parameter [8:0] LEGUP_F_main_BB90_287 = 9'd287;
parameter [8:0] LEGUP_F_main_BB90_288 = 9'd288;
parameter [8:0] LEGUP_F_main_BB90_289 = 9'd289;
parameter [8:0] LEGUP_F_main_BB90_290 = 9'd290;
parameter [8:0] LEGUP_F_main_BB90_291 = 9'd291;
parameter [8:0] LEGUP_F_main_BB90_292 = 9'd292;
parameter [8:0] LEGUP_F_main_BB90_293 = 9'd293;
parameter [8:0] LEGUP_F_main_BB90_294 = 9'd294;
parameter [8:0] LEGUP_F_main_BB90_295 = 9'd295;
parameter [8:0] LEGUP_F_main_BB90_296 = 9'd296;
parameter [8:0] LEGUP_F_main_BB90_297 = 9'd297;
parameter [8:0] LEGUP_F_main_BB90_298 = 9'd298;
parameter [8:0] LEGUP_F_main_BB90_299 = 9'd299;
parameter [8:0] LEGUP_F_main_BB90_300 = 9'd300;
parameter [8:0] LEGUP_F_main_BB90_301 = 9'd301;
parameter [8:0] LEGUP_F_main_BB90_302 = 9'd302;
parameter [8:0] LEGUP_F_main_BB90_303 = 9'd303;
parameter [8:0] LEGUP_F_main_BB90_304 = 9'd304;
parameter [8:0] LEGUP_F_main_BB90_305 = 9'd305;
parameter [8:0] LEGUP_F_main_BB90_306 = 9'd306;
parameter [8:0] LEGUP_F_main_BB90_307 = 9'd307;
parameter [8:0] LEGUP_F_main_BB90_308 = 9'd308;
parameter [8:0] LEGUP_F_main_BB90_309 = 9'd309;
parameter [8:0] LEGUP_F_main_BB90_310 = 9'd310;
parameter [8:0] LEGUP_F_main_BB90_311 = 9'd311;
parameter [8:0] LEGUP_F_main_BB90_312 = 9'd312;
parameter [8:0] LEGUP_F_main_BB90_313 = 9'd313;
parameter [8:0] LEGUP_F_main_BB90_314 = 9'd314;
parameter [8:0] LEGUP_F_main_BB90_315 = 9'd315;
parameter [8:0] LEGUP_F_main_BB90_316 = 9'd316;
parameter [8:0] LEGUP_F_main_BB90_317 = 9'd317;
parameter [8:0] LEGUP_F_main_BB90_318 = 9'd318;
parameter [8:0] LEGUP_F_main_BB90_319 = 9'd319;
parameter [8:0] LEGUP_F_main_BB90_320 = 9'd320;
parameter [8:0] LEGUP_F_main_BB90_321 = 9'd321;
parameter [8:0] LEGUP_F_main_BB90_322 = 9'd322;
parameter [8:0] LEGUP_F_main_BB90_323 = 9'd323;
parameter [8:0] LEGUP_F_main_BB90_324 = 9'd324;
parameter [8:0] LEGUP_F_main_BB90_325 = 9'd325;
parameter [8:0] LEGUP_F_main_BB90_326 = 9'd326;
parameter [8:0] LEGUP_F_main_BB90_327 = 9'd327;
parameter [8:0] LEGUP_F_main_BB90_328 = 9'd328;
parameter [8:0] LEGUP_F_main_BB90_329 = 9'd329;
parameter [8:0] LEGUP_F_main_BB90_332 = 9'd332;
parameter [8:0] LEGUP_F_main_BB90_333 = 9'd333;
parameter [8:0] LEGUP_F_main_BB90_336 = 9'd336;
parameter [8:0] LEGUP_F_main_BB90_337 = 9'd337;
parameter [8:0] LEGUP_F_main_BB90_340 = 9'd340;
parameter [8:0] LEGUP_F_main_BB90_341 = 9'd341;
parameter [8:0] LEGUP_F_main_BB90_344 = 9'd344;
parameter [8:0] LEGUP_F_main_BB90_345 = 9'd345;
parameter [8:0] LEGUP_F_main_BB90_346 = 9'd346;
parameter [8:0] LEGUP_F_main_BB90_347 = 9'd347;
parameter [8:0] LEGUP_F_main_BB90_348 = 9'd348;
parameter [8:0] LEGUP_F_main_BB90_349 = 9'd349;
parameter [8:0] LEGUP_F_main_BB90_350 = 9'd350;
parameter [8:0] LEGUP_F_main_BB90_351 = 9'd351;
parameter [8:0] LEGUP_F_main_BB90_352 = 9'd352;
parameter [8:0] LEGUP_F_main_BB90_353 = 9'd353;
parameter [8:0] LEGUP_F_main_BB90_354 = 9'd354;
parameter [8:0] LEGUP_F_main_BB91_355 = 9'd355;
parameter [8:0] LEGUP_F_main_BB92_356 = 9'd356;
parameter [8:0] LEGUP_F_main_BB93_357 = 9'd357;
parameter [8:0] LEGUP_F_main_BB93_360 = 9'd360;
parameter [8:0] LEGUP_F_main_BB93_363 = 9'd363;
parameter [8:0] LEGUP_F_main_BB94_366 = 9'd366;
parameter [8:0] LEGUP_F_main_BB94_367 = 9'd367;
parameter [8:0] LEGUP_F_main_BB94_368 = 9'd368;
parameter [8:0] LEGUP_F_main_BB94_369 = 9'd369;
parameter [8:0] LEGUP_F_main_BB94_370 = 9'd370;
parameter [8:0] LEGUP_F_main_BB94_371 = 9'd371;
parameter [8:0] LEGUP_F_main_BB95_372 = 9'd372;
parameter [8:0] LEGUP_F_main_BB96_373 = 9'd373;
parameter [8:0] LEGUP_F_main_BB97_374 = 9'd374;
parameter [8:0] LEGUP_F_main_BB98_375 = 9'd375;
parameter [8:0] LEGUP_F_main_BB99_376 = 9'd376;
parameter [8:0] LEGUP_F_main_BB100_377 = 9'd377;
parameter [8:0] LEGUP_F_main_BB101_378 = 9'd378;
parameter [8:0] LEGUP_F_main_BB102_379 = 9'd379;
parameter [8:0] LEGUP_F_main_BB103_380 = 9'd380;
parameter [8:0] LEGUP_F_main_BB103_381 = 9'd381;
parameter [8:0] LEGUP_F_main_BB103_382 = 9'd382;
parameter [8:0] LEGUP_F_main_BB104_383 = 9'd383;
parameter [8:0] LEGUP_F_main_BB104_384 = 9'd384;
parameter [8:0] LEGUP_F_main_BB104_385 = 9'd385;
parameter [8:0] LEGUP_F_main_BB104_386 = 9'd386;
parameter [8:0] LEGUP_F_main_BB104_387 = 9'd387;
parameter [8:0] LEGUP_F_main_BB104_388 = 9'd388;
parameter [8:0] LEGUP_F_main_BB105_389 = 9'd389;
parameter [8:0] LEGUP_F_main_BB105_390 = 9'd390;
parameter [8:0] LEGUP_F_main_BB105_391 = 9'd391;
parameter [8:0] LEGUP_F_main_BB106_392 = 9'd392;
parameter [8:0] LEGUP_F_main_BB106_393 = 9'd393;
parameter [8:0] LEGUP_F_main_BB106_394 = 9'd394;
parameter [8:0] LEGUP_F_main_BB107_395 = 9'd395;
parameter [8:0] LEGUP_F_main_BB108_396 = 9'd396;
parameter [8:0] LEGUP_F_main_BB108_397 = 9'd397;
parameter [8:0] LEGUP_F_main_BB108_398 = 9'd398;
parameter [8:0] LEGUP_F_main_BB109_399 = 9'd399;
parameter [8:0] LEGUP_F_main_BB110_400 = 9'd400;
parameter [8:0] LEGUP_F_main_BB110_401 = 9'd401;
parameter [8:0] LEGUP_F_main_BB110_402 = 9'd402;
parameter [8:0] LEGUP_F_main_BB111_403 = 9'd403;
parameter [8:0] LEGUP_F_main_BB112_404 = 9'd404;
parameter [8:0] LEGUP_F_main_BB113_405 = 9'd405;
parameter [8:0] LEGUP_F_main_BB114_406 = 9'd406;
parameter [8:0] LEGUP_F_main_BB115_407 = 9'd407;
parameter [8:0] LEGUP_F_main_BB116_408 = 9'd408;
parameter [8:0] LEGUP_F_main_BB116_411 = 9'd411;
parameter [8:0] LEGUP_F_main_BB116_414 = 9'd414;
parameter [8:0] LEGUP_F_main_BB116_417 = 9'd417;
parameter [8:0] LEGUP_F_main_BB116_420 = 9'd420;
parameter [8:0] LEGUP_F_main_BB116_423 = 9'd423;
parameter [8:0] LEGUP_F_main_BB117_426 = 9'd426;
parameter [8:0] LEGUP_F_main_BB118_427 = 9'd427;
parameter [8:0] LEGUP_F_main_BB118_428 = 9'd428;
parameter [8:0] LEGUP_F_main_BB118_429 = 9'd429;
parameter [8:0] LEGUP_F_main_BB118_430 = 9'd430;
parameter [8:0] LEGUP_F_main_BB118_431 = 9'd431;
parameter [8:0] LEGUP_F_main_BB118_432 = 9'd432;
parameter [8:0] LEGUP_F_main_BB119_433 = 9'd433;
parameter [8:0] LEGUP_F_main_BB120_434 = 9'd434;
parameter [8:0] LEGUP_F_main_BB121_435 = 9'd435;
parameter [8:0] LEGUP_F_main_BB122_436 = 9'd436;
parameter [8:0] LEGUP_F_main_BB123_437 = 9'd437;
parameter [8:0] LEGUP_F_main_BB124_438 = 9'd438;
parameter [8:0] LEGUP_F_main_BB125_439 = 9'd439;
parameter [8:0] LEGUP_F_main_BB126_440 = 9'd440;
parameter [8:0] LEGUP_F_main_BB127_441 = 9'd441;
parameter [8:0] LEGUP_F_main_BB127_442 = 9'd442;
parameter [8:0] LEGUP_F_main_BB127_443 = 9'd443;
parameter [8:0] LEGUP_F_main_BB128_444 = 9'd444;
parameter [8:0] LEGUP_F_main_BB129_445 = 9'd445;
parameter [8:0] LEGUP_F_main_BB129_448 = 9'd448;
parameter [8:0] LEGUP_F_main_BB129_451 = 9'd451;
parameter [8:0] LEGUP_F_main_BB130_454 = 9'd454;
parameter [8:0] LEGUP_F_main_BB130_455 = 9'd455;
parameter [8:0] LEGUP_F_main_BB130_456 = 9'd456;
parameter [8:0] LEGUP_F_main_BB131_457 = 9'd457;
parameter [8:0] LEGUP_F_main_BB131_458 = 9'd458;
parameter [8:0] LEGUP_F_main_BB131_459 = 9'd459;
parameter [8:0] LEGUP_F_main_BB131_460 = 9'd460;
parameter [8:0] LEGUP_F_main_BB132_461 = 9'd461;
parameter [8:0] LEGUP_F_main_BB132_462 = 9'd462;
parameter [8:0] LEGUP_F_main_BB132_463 = 9'd463;
parameter [8:0] LEGUP_F_main_BB132_464 = 9'd464;
parameter [8:0] LEGUP_F_main_BB133_465 = 9'd465;
parameter [8:0] LEGUP_F_main_BB133_466 = 9'd466;
parameter [8:0] LEGUP_F_main_BB133_467 = 9'd467;
parameter [8:0] LEGUP_F_main_BB133_468 = 9'd468;
parameter [8:0] LEGUP_F_main_BB134_469 = 9'd469;
parameter [8:0] LEGUP_F_main_BB134_470 = 9'd470;
parameter [8:0] LEGUP_F_main_BB134_471 = 9'd471;
parameter [8:0] LEGUP_F_main_BB134_472 = 9'd472;
parameter [8:0] LEGUP_F_main_BB135_473 = 9'd473;
parameter [8:0] LEGUP_F_main_BB136_474 = 9'd474;
parameter [8:0] LEGUP_F_main_BB137_475 = 9'd475;
parameter [8:0] LEGUP_F_main_BB137_476 = 9'd476;
parameter [8:0] LEGUP_F_main_BB137_477 = 9'd477;
parameter [8:0] LEGUP_function_call_330 = 9'd330;
parameter [8:0] LEGUP_function_call_331 = 9'd331;
parameter [8:0] LEGUP_function_call_334 = 9'd334;
parameter [8:0] LEGUP_function_call_335 = 9'd335;
parameter [8:0] LEGUP_function_call_338 = 9'd338;
parameter [8:0] LEGUP_function_call_339 = 9'd339;
parameter [8:0] LEGUP_function_call_342 = 9'd342;
parameter [8:0] LEGUP_function_call_343 = 9'd343;
parameter [8:0] LEGUP_function_call_358 = 9'd358;
parameter [8:0] LEGUP_function_call_359 = 9'd359;
parameter [8:0] LEGUP_function_call_361 = 9'd361;
parameter [8:0] LEGUP_function_call_362 = 9'd362;
parameter [8:0] LEGUP_function_call_364 = 9'd364;
parameter [8:0] LEGUP_function_call_365 = 9'd365;
parameter [8:0] LEGUP_function_call_409 = 9'd409;
parameter [8:0] LEGUP_function_call_410 = 9'd410;
parameter [8:0] LEGUP_function_call_412 = 9'd412;
parameter [8:0] LEGUP_function_call_413 = 9'd413;
parameter [8:0] LEGUP_function_call_415 = 9'd415;
parameter [8:0] LEGUP_function_call_416 = 9'd416;
parameter [8:0] LEGUP_function_call_418 = 9'd418;
parameter [8:0] LEGUP_function_call_419 = 9'd419;
parameter [8:0] LEGUP_function_call_421 = 9'd421;
parameter [8:0] LEGUP_function_call_422 = 9'd422;
parameter [8:0] LEGUP_function_call_424 = 9'd424;
parameter [8:0] LEGUP_function_call_425 = 9'd425;
parameter [8:0] LEGUP_function_call_446 = 9'd446;
parameter [8:0] LEGUP_function_call_447 = 9'd447;
parameter [8:0] LEGUP_function_call_449 = 9'd449;
parameter [8:0] LEGUP_function_call_450 = 9'd450;
parameter [8:0] LEGUP_function_call_452 = 9'd452;
parameter [8:0] LEGUP_function_call_453 = 9'd453;

input  clk;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;
output reg  memory_controller_enable;
output reg  memory_controller_write_enable;
input  memory_controller_waitrequest;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;
output reg [1:0] memory_controller_size;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;
reg [8:0] cur_state;
reg [31:0] main_1_i_05_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_c_06_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_c_06_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep13_i;
reg [7:0] main_1_2;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg  main_1_exitcond11_i;
reg  main_1_exitcond11_i_reg;
reg [31:0] main__outer_i_i_i_marker_0;
reg [31:0] main__outer_i_i_i_get_dht_0;
reg [31:0] main__outer_i_i_i_get_dqt_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__outer_i_i_ReadBuf_0;
reg [7:0] main__outer_i_i_p_jinfo_num_components_0;
reg  main__outer_i_i_p_jinfo_smp_fact_b_0;
reg  main__outer_i_i_sow_SOI_0_ph_i_i;
reg  main__outer_i_i_sow_SOI_0_ph_i_i_reg;
reg [31:0] main__backedge_i_i_outer_i_marker_1_ph;
reg [31:0] main__backedge_i_i_outer_i_get_dht_1_ph;
reg [31:0] main__backedge_i_i_outer_i_get_dht_1_ph_reg;
reg [31:0] main__backedge_i_i_outer_i_get_dqt_1_ph;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer_ReadBuf_1_ph;
reg [7:0] main__backedge_i_i_outer_p_jinfo_num_components_1_ph;
reg  main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer_4_reg;
reg [31:0] main__backedge_i_i_outer4_i_marker_1_ph5;
reg [31:0] main__backedge_i_i_outer4_i_get_dqt_1_ph6;
reg [31:0] main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer4_ReadBuf_1_ph7;
reg [7:0] main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8;
reg  main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer4_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer4_5_reg;
reg [31:0] main__backedge_i_i_outer10_i_marker_1_ph11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer10_ReadBuf_1_ph12;
reg [7:0] main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13;
reg [7:0] main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg;
reg  main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14;
reg  main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg;
reg [31:0] main__backedge_i_i_i_marker_1;
reg [31:0] main__backedge_i_i_i_marker_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_ReadBuf_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_ReadBuf_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_7_reg;
reg [7:0] main_6_8;
reg [7:0] main_6_9;
reg [7:0] main_6_9_reg;
reg  main_6_10;
reg  main_6_10_reg;
reg  main_6_11;
reg  main_6_or_cond_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_first_marker_exit_i_i_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_first_marker_exit_i_i_14_reg;
reg [31:0] main_first_marker_exit_i_i_15;
reg [31:0] main_first_marker_exit_i_i_15_reg;
reg [31:0] main_first_marker_exit_i_i_16;
reg [31:0] main_first_marker_exit_i_i_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit3_i_i_i_loopexit_scevgep13_i_i_le;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit3_i_i_i_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit3_i_i_i_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit3_i_i_i_storemerge1_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit3_i_i_i_storemerge1_i_i_i_reg;
reg [7:0] main__loopexit3_i_i_i_c_0_in2_i_i_i;
reg  main__loopexit3_i_i_i_19;
reg [31:0] main__lr_ph_i_i_i_indvar_i_i;
reg [31:0] main__lr_ph_i_i_i_indvar_i_i_reg;
reg [31:0] main__lr_ph_i_i_i_tmp_i_i;
reg [31:0] main__lr_ph_i_i_i_tmp_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i_i_i_scevgep_i_i;
reg [7:0] main__lr_ph_i_i_i_c_0_in_i_i_i;
reg  main__lr_ph_i_i_i_20;
reg [31:0] main__loopexit_i_preheader_i_i_loopexit_tmp4_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_i_preheader_i_i_loopexit_storemerge_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_i_preheader_i_i__ph_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_i_preheader_i_i__ph_i_i_reg;
reg [31:0] main__loopexit_i_i_i_indvar9_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_i_i_i_scevgep11_i_i;
reg [31:0] main__loopexit_i_i_i_tmp12_i_i;
reg [31:0] main__loopexit_i_i_i_tmp12_i_i_reg;
reg [7:0] main__loopexit_i_i_i_21;
reg [31:0] main__loopexit_i_i_i_22;
reg [31:0] main__loopexit_i_i_i_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_next_marker_exit_i_i_loopexit_scevgep13_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_next_marker_exit_i_i_ReadBuf_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_next_marker_exit_i_i_ReadBuf_2_reg;
reg [31:0] main_next_marker_exit_i_i_unread_marker_0_i_i;
reg [31:0] main_next_marker_exit_i_i_unread_marker_0_i_i_reg;
reg [31:0] main_next_marker_exit_i_i_24;
reg [31:0] main_next_marker_exit_i_i_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_next_marker_exit_i_i_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_next_marker_exit_i_i_25_reg;
reg [31:0] main_next_marker_exit_i_i_26;
reg  main_next_marker_exit_i_i_27;
reg [31:0] main_28_29;
reg [31:0] main_28_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_33_reg;
reg [7:0] main_32_34;
reg [15:0] main_32_35;
reg [15:0] main_32_36;
reg [15:0] main_32_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_37_reg;
reg [7:0] main_32_38;
reg [15:0] main_32_39;
reg [15:0] main_32_40;
reg [31:0] main_32_41;
reg [31:0] main_32_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_42_reg;
reg [7:0] main_32_43;
reg [7:0] main_32_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_44_reg;
reg [7:0] main_32_45;
reg [15:0] main_32_46;
reg [15:0] main_32_47;
reg [15:0] main_32_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_48_reg;
reg [7:0] main_32_49;
reg [15:0] main_32_50;
reg [15:0] main_32_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_52_reg;
reg [7:0] main_32_53;
reg [15:0] main_32_54;
reg [15:0] main_32_55;
reg [15:0] main_32_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_56_reg;
reg [7:0] main_32_57;
reg [15:0] main_32_58;
reg [15:0] main_32_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_32_60_reg;
reg [7:0] main_32_61;
reg [7:0] main_32_61_reg;
reg [31:0] main_32_63;
reg [31:0] main_32_63_reg;
reg [15:0] main_32_65;
reg [31:0] main_32_66;
reg [15:0] main_32_68;
reg [31:0] main_32_69;
reg [31:0] main_32_71;
reg [31:0] main_32_71_reg;
reg  main_32_73;
reg  main_32_73_reg;
reg [31:0] main_74_75;
reg [31:0] main_74_76;
reg  main_77_78;
reg [31:0] main_79_80;
reg [31:0] main_79_81;
reg [15:0] main_82_83;
reg  main_82_84;
reg [31:0] main_85_86;
reg [31:0] main_85_87;
reg [15:0] main_88_89;
reg  main_88_90;
reg [31:0] main_91_92;
reg [31:0] main_91_93;
reg  main_94_95;
reg [31:0] main__preheader_i_i_i_thread_96;
reg [31:0] main__preheader_i_i_i_thread_97;
reg  main__preheader_i_i_i_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_ReadBuf_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_ReadBuf_3_reg;
reg [31:0] main__lr_ph_i1_i_i_ci_02_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep3_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep3_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep4_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep4_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep5_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep5_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep6_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep6_i_i_i_reg;
reg [7:0] main__lr_ph_i1_i_i_tmp_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep7_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep7_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep8_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep8_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep9_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep9_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep11_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_scevgep11_i_i_i_reg;
reg [31:0] main__lr_ph_i1_i_i_tmp12_i_i_i;
reg [31:0] main__lr_ph_i1_i_i_tmp12_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_99_reg;
reg [7:0] main__lr_ph_i1_i_i_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_101_reg;
reg [7:0] main__lr_ph_i1_i_i_102;
reg [7:0] main__lr_ph_i1_i_i_103;
reg [7:0] main__lr_ph_i1_i_i_104;
reg [7:0] main__lr_ph_i1_i_i_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_105_reg;
reg [7:0] main__lr_ph_i1_i_i_106;
reg [31:0] main__lr_ph_i1_i_i_107;
reg [31:0] main__lr_ph_i1_i_i_107_reg;
reg [7:0] main__lr_ph_i1_i_i_109;
reg [31:0] main__lr_ph_i1_i_i_110;
reg [7:0] main__lr_ph_i1_i_i_112;
reg [31:0] main__lr_ph_i1_i_i_113;
reg [7:0] main__lr_ph_i1_i_i_115;
reg [31:0] main__lr_ph_i1_i_i_116;
reg [7:0] main__lr_ph_i1_i_i_118;
reg [31:0] main__lr_ph_i1_i_i_119;
reg [7:0] main__lr_ph_i1_i_i_121;
reg [31:0] main__lr_ph_i1_i_i_122;
reg [31:0] main__lr_ph_i1_i_i_122_reg;
reg [31:0] main__lr_ph_i1_i_i_123;
reg  main__lr_ph_i1_i_i_124;
reg [31:0] main_125_126;
reg [31:0] main_125_127;
reg [7:0] main_128_129;
reg [31:0] main_128_130;
reg [31:0] main_128_130_reg;
reg [31:0] main_128_131;
reg  main_128_132;
reg [31:0] main_133_134;
reg [31:0] main_133_135;
reg [7:0] main_136_137;
reg [31:0] main_136_138;
reg [31:0] main_136_138_reg;
reg [31:0] main_136_139;
reg [31:0] main_136_139_reg;
reg  main_136_140;
reg [31:0] main_141_142;
reg [31:0] main_141_143;
reg [7:0] main_144_145;
reg [31:0] main_144_146;
reg  main_144_147;
reg [31:0] main_148_149;
reg [31:0] main_148_150;
reg [7:0] main_151_152;
reg [31:0] main_151_153;
reg [31:0] main_151_153_reg;
reg [31:0] main_151_154;
reg  main_151_155;
reg [31:0] main_156_157;
reg [31:0] main_156_158;
reg  main_159_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___crit_edge_i_i_i_ReadBuf_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___crit_edge_i_i_i_ReadBuf_4_reg;
reg [7:0] main___crit_edge_i_i_i_161;
reg  main___crit_edge_i_i_i_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_167_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_167_168_reg;
reg [7:0] main_167_169;
reg [15:0] main_167_170;
reg [15:0] main_167_171;
reg [15:0] main_167_171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_167_172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_167_172_reg;
reg [7:0] main_167_173;
reg [15:0] main_167_174;
reg [15:0] main_167_175;
reg [31:0] main_167_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_167_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_167_177_reg;
reg [7:0] main_167_178;
reg [7:0] main_167_178_reg;
reg [31:0] main_167_179;
reg [31:0] main_167_179_reg;
reg  main_167_182;
reg  main_167_182_reg;
reg [31:0] main_183_184;
reg [31:0] main_183_185;
reg  main_186_187;
reg [31:0] main_188_189;
reg [31:0] main_188_190;
reg [31:0] main__preheader5_i_i_i_preheader_191;
reg [31:0] main__preheader5_i_i_i_preheader_191_reg;
reg [31:0] main__preheader5_i_i_i_i_get_sos_0;
reg [31:0] main__preheader5_i_i_i_i_get_sos_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader5_i_i_i_ReadBuf_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader5_i_i_i_ReadBuf_5_reg;
reg [31:0] main__preheader5_i_i_i_192;
reg [31:0] main__preheader5_i_i_i_192_reg;
reg  main__preheader5_i_i_i_193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_194_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_194_195_reg;
reg [7:0] main_194_196;
reg [31:0] main_194_197;
reg [31:0] main_194_197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_194_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_194_198_reg;
reg [7:0] main_194_199;
reg [7:0] main_194_199_reg;
reg [31:0] main_200_201;
reg [31:0] main_200_201_reg;
reg  main_200_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_203_scevgep9_i4_i_i;
reg [7:0] main_203_204;
reg [31:0] main_203_205;
reg  main_203_206;
reg [31:0] main_207_208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_211_scevgep8_i5_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_211_scevgep8_i5_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_211_scevgep7_i6_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_211_scevgep7_i6_i_i_reg;
reg [31:0] main_211_212;
reg [31:0] main_211_213;
reg [7:0] main_211_214;
reg [7:0] main_211_214_reg;
reg [7:0] main_211_215;
reg [7:0] main_211_215_reg;
reg [7:0] main_211_217;
reg [31:0] main_211_218;
reg [7:0] main_211_220;
reg [31:0] main_211_221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_211_223;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_211_223_reg;
reg [31:0] main_211_224;
reg  main_211_225;
reg [31:0] main_226_227;
reg [31:0] main_226_228;
reg [7:0] main_229_230;
reg [31:0] main_229_231;
reg [31:0] main_229_231_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_229_232;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_229_232_reg;
reg [31:0] main_229_233;
reg [31:0] main_229_233_reg;
reg  main_229_234;
reg [31:0] main_235_236;
reg [31:0] main_235_237;
reg [7:0] main_238_239;
reg [31:0] main_238_240;
reg  main_238_241;
reg [31:0] main_242_243;
reg [31:0] main_242_244;
reg [31:0] main_245_246;
reg [31:0] main_245_247;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_get_sos_exit_i_i_scevgep_i2_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_248_249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_248_249_reg;
reg [7:0] main_248_250;
reg [15:0] main_248_251;
reg [15:0] main_248_252;
reg [15:0] main_248_252_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_248_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_248_253_reg;
reg [7:0] main_248_254;
reg [15:0] main_248_255;
reg [15:0] main_248_256;
reg [31:0] main_248_257;
reg [31:0] main_248_258;
reg [31:0] main_248_258_reg;
reg [31:0] main_248_260;
reg  main_248_261;
reg [31:0] main_262_263;
reg [31:0] main_262_264;
reg  main__preheader_i7_i_i_265;
reg [31:0] main__lr_ph5_i_i_i_i_get_dht_2;
reg [31:0] main__lr_ph5_i_i_i_i_get_dht_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph5_i_i_i_ReadBuf_6;
reg [31:0] main__lr_ph5_i_i_i_length_04_i_i_i;
reg [31:0] main__lr_ph5_i_i_i_length_04_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph5_i_i_i_266;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph5_i_i_i_266_reg;
reg [7:0] main__lr_ph5_i_i_i_267;
reg [31:0] main__lr_ph5_i_i_i_268;
reg [31:0] main__lr_ph5_i_i_i_268_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph5_i_i_i_270;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph5_i_i_i_270_reg;
reg [31:0] main__lr_ph5_i_i_i_271;
reg  main__lr_ph5_i_i_i_272;
reg [31:0] main_273_274;
reg [31:0] main_273_275;
reg [31:0] main_276_277;
reg  main_276_278;
reg [31:0] main_279_280;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_281;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_279_282;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_283_284;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_283_285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_huffval_0_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_huffval_0_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_bits_0_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_bits_0_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_287_288;
reg [31:0] main_287_indvar_i_i_i;
reg [31:0] main_287_count_01_i_i_i;
reg [31:0] main_287_count_01_i_i_i_reg;
reg [31:0] main_287_tmp_i8_i_i;
reg [31:0] main_287_tmp_i8_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_287_scevgep_i9_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_287_scevgep_i9_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_287_289;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_287_289_reg;
reg [7:0] main_287_290;
reg [31:0] main_287_291;
reg [31:0] main_287_292;
reg [31:0] main_287_292_reg;
reg  main_287_exitcond_i_i_i;
reg  main_287_exitcond_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_295;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_293_295_reg;
reg [31:0] main_293_296;
reg  main_293_297;
reg [31:0] main_298_299;
reg [31:0] main_298_300;
reg [31:0] main_301_302;
reg [31:0] main_301_302_reg;
reg  main_301_303;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i10_i_i_304;
reg [31:0] main__lr_ph_i10_i_i_i_13_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i10_i_i_scevgep8_i11_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i10_i_i_scevgep8_i11_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i10_i_i_305;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i10_i_i_305_reg;
reg [7:0] main__lr_ph_i10_i_i_306;
reg [31:0] main__lr_ph_i10_i_i_307;
reg [31:0] main__lr_ph_i10_i_i_308;
reg [31:0] main__lr_ph_i10_i_i_308_reg;
reg  main__lr_ph_i10_i_i_exitcond7_i_i_i;
reg  main__lr_ph_i10_i_i_exitcond7_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___crit_edge_i12_i_i_ReadBuf_7;
reg [31:0] main___crit_edge_i12_i_i_309;
reg [31:0] main___crit_edge_i12_i_i_310;
reg  main___crit_edge_i12_i_i_311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_312_313;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_312_313_reg;
reg [7:0] main_312_314;
reg [15:0] main_312_315;
reg [15:0] main_312_316;
reg [15:0] main_312_316_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_312_317;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_312_317_reg;
reg [7:0] main_312_318;
reg [15:0] main_312_319;
reg [15:0] main_312_320;
reg [31:0] main_312_321;
reg [31:0] main_312_322;
reg [31:0] main_312_322_reg;
reg [31:0] main_312_324;
reg  main_312_325;
reg [31:0] main_326_327;
reg [31:0] main_326_328;
reg  main__preheader_i13_i_i_329;
reg [31:0] main__lr_ph_i15_i_i_i_get_dqt_2;
reg [31:0] main__lr_ph_i15_i_i_i_get_dqt_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i15_i_i_330;
reg [31:0] main__lr_ph_i15_i_i_length_02_i_i_i;
reg [31:0] main__lr_ph_i15_i_i_length_02_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i15_i_i_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i15_i_i_331_reg;
reg [7:0] main__lr_ph_i15_i_i_332;
reg [31:0] main__lr_ph_i15_i_i_333;
reg [31:0] main__lr_ph_i15_i_i_334;
reg [31:0] main__lr_ph_i15_i_i_334_reg;
reg [31:0] main__lr_ph_i15_i_i_335;
reg [31:0] main__lr_ph_i15_i_i_335_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i15_i_i_338;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i15_i_i_338_reg;
reg [31:0] main__lr_ph_i15_i_i_339;
reg  main__lr_ph_i15_i_i_340;
reg [31:0] main_341_342;
reg [31:0] main_341_343;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_344_345;
reg [31:0] main_344_346;
reg  main_344_347;
reg [31:0] main_348_349;
reg [31:0] main_348_350;
reg [31:0] main_351_352;
reg [31:0] main_351_352_reg;
reg  main_351_353;
reg  main_351_353_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__split_us_i_i_i_354;
reg [31:0] main__split_us_i_i_i_i_01_us_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__split_us_i_i_i_scevgep_i16_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__split_us_i_i_i_scevgep_i16_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__split_us_i_i_i_355;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__split_us_i_i_i_355_reg;
reg [7:0] main__split_us_i_i_i_356;
reg [31:0] main__split_us_i_i_i_357;
reg [31:0] main__split_us_i_i_i_357_reg;
reg [31:0] main__split_us_i_i_i_358;
reg [31:0] main__split_us_i_i_i__sum_us_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__split_us_i_i_i_359;
reg [31:0] main__split_us_i_i_i_360;
reg [31:0] main__split_us_i_i_i_360_reg;
reg  main__split_us_i_i_i_exitcond_i17_i_i;
reg  main__split_us_i_i_i_exitcond_i17_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_361;
reg [31:0] main___split_crit_edge_i_i_i_i_01_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_scevgep4_i18_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_scevgep4_i18_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_362;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_362_reg;
reg [7:0] main___split_crit_edge_i_i_i_363;
reg [31:0] main___split_crit_edge_i_i_i_364;
reg [31:0] main___split_crit_edge_i_i_i_365;
reg [31:0] main___split_crit_edge_i_i_i_365_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_366;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_366_reg;
reg [7:0] main___split_crit_edge_i_i_i_367;
reg [31:0] main___split_crit_edge_i_i_i_368;
reg [31:0] main___split_crit_edge_i_i_i_369;
reg [31:0] main___split_crit_edge_i_i_i_369_reg;
reg [31:0] main___split_crit_edge_i_i_i_370;
reg [31:0] main___split_crit_edge_i_i_i__sum_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_371;
reg [31:0] main___split_crit_edge_i_i_i_372;
reg [31:0] main___split_crit_edge_i_i_i_372_reg;
reg  main___split_crit_edge_i_i_i_exitcond3_i_i_i;
reg  main___split_crit_edge_i_i_i_exitcond3_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__us_lcssa_us_i_i_i_ReadBuf_8;
reg [31:0] main__us_lcssa_us_i_i_i___v_i_i_i;
reg [31:0] main__us_lcssa_us_i_i_i___i_i_i;
reg  main__us_lcssa_us_i_i_i_373;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_p_jinfo_jpeg_data_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_p_jinfo_jpeg_data_0_reg;
reg [15:0] main_read_markers_exit_i_374;
reg [15:0] main_read_markers_exit_i_374_reg;
reg [31:0] main_read_markers_exit_i_375;
reg [31:0] main_read_markers_exit_i_376;
reg [31:0] main_read_markers_exit_i_376_reg;
reg [31:0] main_read_markers_exit_i_377;
reg [31:0] main_read_markers_exit_i_377_reg;
reg [31:0] main_read_markers_exit_i_378;
reg [31:0] main_read_markers_exit_i_378_reg;
reg [15:0] main_read_markers_exit_i_379;
reg [15:0] main_read_markers_exit_i_379_reg;
reg [31:0] main_read_markers_exit_i_380;
reg [31:0] main_read_markers_exit_i_381;
reg [31:0] main_read_markers_exit_i_381_reg;
reg [31:0] main_read_markers_exit_i_382;
reg [31:0] main_read_markers_exit_i_382_reg;
reg [31:0] main_read_markers_exit_i_383;
reg [31:0] main_read_markers_exit_i_384;
reg [31:0] main_read_markers_exit_i_384_reg;
reg [31:0] main_read_markers_exit_i_385;
reg [31:0] main_read_markers_exit_i_385_reg;
reg [31:0] main_read_markers_exit_i_386;
reg [31:0] main_read_markers_exit_i_386_reg;
reg [31:0] main_read_markers_exit_i_387;
reg [31:0] main_read_markers_exit_i_387_reg;
reg [31:0] main_read_markers_exit_i_388;
reg [31:0] main_read_markers_exit_i_388_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_scevgep148_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_scevgep148_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_scevgep148_1_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_scevgep148_1_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_scevgep148_2_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_scevgep148_2_i_i_reg;
reg  main_389_391;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader21_i_i_preheader_scevgep51_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader21_i_i_preheader_scevgep51_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader21_i_i_preheader_scevgep51_1_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader21_i_i_preheader_scevgep51_1_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader21_i_i_preheader_scevgep51_2_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader21_i_i_preheader_scevgep51_2_i_i_reg;
reg [31:0] main__preheader21_i_i_CurrentMCU_026_i_i;
reg [31:0] main__preheader21_i_i_tmp143_i_i;
reg [31:0] main__preheader21_i_i_tmp143_i_i_reg;
reg [31:0] main_392_i_01_i_i1_i;
reg [31:0] main_392_i_01_i_i1_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep3_i_i2_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep3_i_i2_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep2_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep2_i_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep_i_i3_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep6_i_i4_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep6_i_i4_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep5_i_i5_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep5_i_i5_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep4_i_i6_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_392_scevgep4_i_i6_i_reg;
reg [31:0] main_392_393;
reg [31:0] main_392_394;
reg [31:0] main_392_395;
reg [31:0] main_392_396;
reg [31:0] main_392_397;
reg [31:0] main_392_398;
reg [31:0] main_392_399;
reg [31:0] main_392_400;
reg [31:0] main_392_400_reg;
reg [31:0] main_392_401;
reg [31:0] main_392_401_reg;
reg [31:0] main_392_402;
reg [31:0] main_392_402_reg;
reg [31:0] main_392_403;
reg [31:0] main_392_404;
reg [31:0] main_392_405;
reg [31:0] main_392_405_reg;
reg [31:0] main_392_406;
reg [31:0] main_392_406_reg;
reg [31:0] main_392_407;
reg [31:0] main_392_407_reg;
reg [31:0] main_392_408;
reg [31:0] main_392_409;
reg [31:0] main_392_409_reg;
reg [31:0] main_392_410;
reg [31:0] main_392_410_reg;
reg  main_392_411;
reg  main_412_413;
reg [31:0] main_415_r_0_i_i_i;
reg [31:0] main_415_r_0_i_i_i_reg;
reg  main_415_416;
reg  main_417_418;
reg [31:0] main_420_g_0_i_i_i;
reg [31:0] main_420_g_0_i_i_i_reg;
reg  main_420_421;
reg  main_422_423;
reg [31:0] main_425_b_0_i_i_i;
reg [31:0] main_425_b_0_i_i_i_reg;
reg [31:0] main_425_426;
reg [31:0] main_425_426_reg;
reg  main_425_exitcond53_i_i;
reg  main_425_exitcond53_i_i_reg;
reg [15:0] main_YuvToRgb_exit_loopexit_i_i_427;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i_428;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i_428_reg;
reg [15:0] main_YuvToRgb_exit_loopexit_i_i_429;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i_430;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i_430_reg;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i_tmp120_i_i;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i_tmp120_i_i_reg;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i__pre_i_i;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i__pre_i_i_reg;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i_431;
reg [31:0] main_YuvToRgb_exit_loopexit_i_i_431_reg;
reg [31:0] main_432_433;
reg [31:0] main_432_i_324_i_i;
reg [31:0] main_432_i_324_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_432_scevgep139_i_i;
reg [31:0] main_432_tmp141_i_i;
reg [31:0] main_432_tmp141_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_432_scevgep142_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_432_scevgep142_i_i_reg;
reg [31:0] main_432_434;
reg [31:0] main_432_434_reg;
reg [31:0] main_432_435;
reg [31:0] main_432_435_reg;
reg [31:0] main_432_436;
reg [31:0] main_432_436_reg;
reg  main_432_437;
reg  main_432_438;
reg  main_432_438_reg;
reg  main_432_or_cond_i_i_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp61_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp62149_i_i;
reg  main__lr_ph8_split_us_i_i_i_i_tmp63_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_smax_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_smax_i_i_reg;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp64_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp67_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp67_i_i_reg;
reg  main__lr_ph8_split_us_i_i_i_i_tmp68_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_umax_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_umax_i_i_reg;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp69_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp69_i_i_reg;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp82_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp83150_i_i;
reg  main__lr_ph8_split_us_i_i_i_i_tmp84_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_smax85_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_smax85_i_i_reg;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp86_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp89_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp89_i_i_reg;
reg  main__lr_ph8_split_us_i_i_i_i_tmp90_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_umax91_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_umax91_i_i_reg;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp92_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp92_i_i_reg;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp121_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp122_i_i;
reg [31:0] main__lr_ph8_split_us_i_i_i_i_tmp122_i_i_reg;
reg [31:0] main_439_indvar_next18_i_i_i_i;
reg  main_439_exitcond93_i_i;
reg [31:0] main_440_indvar_i_i_i_i;
reg [31:0] main_440_tmp124_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_440_scevgep24_i_i_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_440_scevgep24_i_i_i_i_reg;
reg [31:0] main_440_tmp137_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_440__14_us_i_i_i_i;
reg [31:0] main_440_441;
reg [7:0] main_440_442;
reg [31:0] main_440_indvar_next_i_i_i_i;
reg [31:0] main_440_indvar_next_i_i_i_i_reg;
reg  main_440_exitcond70_i_i;
reg  main_440_exitcond70_i_i_reg;
reg [31:0] main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i;
reg [31:0] main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_reg;
reg [31:0] main__lr_ph_us_i_i_i_i_tmp118_i_i;
reg [31:0] main__lr_ph_us_i_i_i_i_tmp123_i_i;
reg [31:0] main__lr_ph_us_i_i_i_i_tmp123_i_i_reg;
reg [31:0] main__lr_ph_us_i_i_i_i_tmp136_i_i;
reg [31:0] main__lr_ph_us_i_i_i_i_tmp136_i_i_reg;
reg [31:0] main_WriteOneBlock_exit_i_i_i_443;
reg  main_WriteOneBlock_exit_i_i_i_444;
reg [31:0] main_WriteBlock_exit_i_i_446;
reg  main_WriteBlock_exit_i_i_exitcond116_i_i;
reg  main_447_448;
reg  main_449_451;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_452;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_452_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_453;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_453_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_scevgep_i8_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_scevgep_i8_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_scevgep_1_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_scevgep_1_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_scevgep_2_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_scevgep_2_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_scevgep_3_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_lr_ph_i_i_scevgep_3_i_i_reg;
reg [31:0] main__preheader_i_i_indvar_i7_i;
reg [31:0] main__preheader_i_i_indvar_i7_i_reg;
reg [31:0] main__preheader_i_i_tmp48_i_i;
reg [31:0] main__preheader_i_i_tmp49_i_i;
reg [31:0] main__preheader_i_i_tmp49_i_i_reg;
reg [31:0] main__preheader16_i_i_i_517_i_i;
reg [31:0] main__preheader16_i_i_i_517_i_i_reg;
reg [31:0] main_454_i_01_i2_i_i;
reg [31:0] main_454_i_01_i2_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep4_i6_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep4_i6_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep5_i7_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep5_i7_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep6_i8_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep6_i8_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep_i3_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep3_i5_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep3_i5_i_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep2_i4_i_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_454_scevgep2_i4_i_i_reg;
reg [31:0] main_454_455;
reg [31:0] main_454_456;
reg [31:0] main_454_457;
reg [31:0] main_454_458;
reg [31:0] main_454_459;
reg [31:0] main_454_460;
reg [31:0] main_454_461;
reg [31:0] main_454_462;
reg [31:0] main_454_462_reg;
reg [31:0] main_454_463;
reg [31:0] main_454_463_reg;
reg [31:0] main_454_464;
reg [31:0] main_454_464_reg;
reg [31:0] main_454_465;
reg [31:0] main_454_466;
reg [31:0] main_454_467;
reg [31:0] main_454_467_reg;
reg [31:0] main_454_468;
reg [31:0] main_454_468_reg;
reg [31:0] main_454_469;
reg [31:0] main_454_469_reg;
reg [31:0] main_454_470;
reg [31:0] main_454_471;
reg [31:0] main_454_471_reg;
reg [31:0] main_454_472;
reg [31:0] main_454_472_reg;
reg  main_454_473;
reg  main_474_475;
reg [31:0] main_477_r_0_i9_i_i;
reg [31:0] main_477_r_0_i9_i_i_reg;
reg  main_477_478;
reg  main_479_480;
reg [31:0] main_482_g_0_i10_i_i;
reg [31:0] main_482_g_0_i10_i_i_reg;
reg  main_482_483;
reg  main_484_485;
reg [31:0] main_487_b_0_i11_i_i;
reg [31:0] main_487_b_0_i11_i_i_reg;
reg [31:0] main_487_488;
reg [31:0] main_487_488_reg;
reg  main_487_exitcond_i_i;
reg  main_487_exitcond_i_i_reg;
reg [31:0] main_YuvToRgb_exit13_i_i_489;
reg  main_YuvToRgb_exit13_i_i_exitcond35_i_i;
reg  main__loopexit_i_i_490;
reg  main__loopexit_i_i_490_reg;
reg [31:0] main__loopexit_i_i_indvar_next_i_i;
reg [31:0] main__loopexit_i_i_indvar_next_i_i_reg;
reg [31:0] main_decode_start_exit_i_main_result_promoted3_i;
reg [31:0] main_491_492;
reg [31:0] main_491_492_reg;
reg [31:0] main_491_j_01_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_491_scevgep7_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_491_scevgep7_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_491_scevgep_i;
reg [7:0] main_491_493;
reg [7:0] main_491_493_reg;
reg [7:0] main_491_494;
reg  main_491_495;
reg [31:0] main_491_496;
reg [31:0] main_491_497;
reg [31:0] main_491_498;
reg [31:0] main_491_498_reg;
reg  main_491_exitcond_i;
reg  main_491_exitcond_i_reg;
reg [31:0] main__preheader_1_i_499;
reg [31:0] main__preheader_1_i_499_reg;
reg [31:0] main__preheader_1_i_j_01_1_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_1_i_scevgep7_1_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_1_i_scevgep7_1_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_1_i_scevgep_1_i;
reg [7:0] main__preheader_1_i_500;
reg [7:0] main__preheader_1_i_500_reg;
reg [7:0] main__preheader_1_i_501;
reg  main__preheader_1_i_502;
reg [31:0] main__preheader_1_i_503;
reg [31:0] main__preheader_1_i_504;
reg [31:0] main__preheader_1_i_505;
reg [31:0] main__preheader_1_i_505_reg;
reg  main__preheader_1_i_exitcond_1_i;
reg  main__preheader_1_i_exitcond_1_i_reg;
reg  main_jpeg2bmp_main_exit_506;
reg [31:0] main_jpeg2bmp_main_exit_507;
reg [31:0] main_jpeg2bmp_main_exit_storemerge;
reg  main_jpeg2bmp_main_exit_508;
reg [31:0] main_jpeg2bmp_main_exit_509;
reg [31:0] main_jpeg2bmp_main_exit__storemerge;
reg [31:0] main_jpeg2bmp_main_exit_511;
reg  main_jpeg2bmp_main_exit_512;
reg [31:0] main__preheader_2_i_513;
reg [31:0] main__preheader_2_i_513_reg;
reg [31:0] main__preheader_2_i_j_01_2_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_2_i_scevgep7_2_i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_2_i_scevgep7_2_i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader_2_i_scevgep_2_i;
reg [7:0] main__preheader_2_i_514;
reg [7:0] main__preheader_2_i_514_reg;
reg [7:0] main__preheader_2_i_515;
reg  main__preheader_2_i_516;
reg [31:0] main__preheader_2_i_517;
reg [31:0] main__preheader_2_i_518;
reg [31:0] main__preheader_2_i_518_reg;
reg [31:0] main__preheader_2_i_519;
reg [31:0] main__preheader_2_i_519_reg;
reg  main__preheader_2_i_exitcond_2_i;
reg  main__preheader_2_i_exitcond_2_i_reg;
reg [31:0] main_524_525;
reg  huff_make_dhuff_tb_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_arg_p_xhtbl_bits;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_arg_p_dhtbl_maxcode;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_arg_p_dhtbl_mincode;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_arg_p_dhtbl_valptr;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] huff_make_dhuff_tb_memory_controller_address;
wire  huff_make_dhuff_tb_memory_controller_write_enable;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] huff_make_dhuff_tb_memory_controller_in;
reg  huff_make_dhuff_tb_memory_controller_waitrequest;
wire  huff_make_dhuff_tb_memory_controller_enable;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] huff_make_dhuff_tb_memory_controller_out;
wire [1:0] huff_make_dhuff_tb_memory_controller_size;
wire  huff_make_dhuff_tb_finish;
wire [31:0] huff_make_dhuff_tb_return_val;
reg  legup_function_call;
reg  decode_block_start;
reg [31:0] decode_block_arg_comp_no;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_arg_out_buf;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_arg_HuffBuff;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] decode_block_memory_controller_address;
wire  decode_block_memory_controller_write_enable;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] decode_block_memory_controller_in;
reg  decode_block_memory_controller_waitrequest;
wire  decode_block_memory_controller_enable;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] decode_block_memory_controller_out;
wire [1:0] decode_block_memory_controller_size;
wire  decode_block_finish;
reg  Write4Blocks_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_store1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_store2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_store3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_store4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_p_out_vpos;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_p_out_hpos;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_arg_p_out_buf;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Write4Blocks_memory_controller_address;
wire  Write4Blocks_memory_controller_write_enable;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Write4Blocks_memory_controller_in;
reg  Write4Blocks_memory_controller_waitrequest;
wire  Write4Blocks_memory_controller_enable;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Write4Blocks_memory_controller_out;
wire [1:0] Write4Blocks_memory_controller_size;
wire  Write4Blocks_finish;
reg [31:0] main_signed_multiply_32_1_op0;
reg [31:0] main_signed_multiply_32_1_op1;
reg [31:0] main_signed_multiply_32_1;
reg [31:0] main_signed_multiply_32_2_op0;
reg [31:0] main_signed_multiply_32_2_op1;
reg [31:0] main_signed_multiply_32_2;
reg [31:0] main_signed_multiply_32_0_op0;
reg [31:0] main_signed_multiply_32_0_op1;
reg [31:0] main_signed_multiply_32_0;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
reg [31:0] main_signed_divide_32_0;
wire [31:0] lpm_divide_main_read_markers_exit_i_377_out;
wire [31:0] main_read_markers_exit_i_377_unused;
reg  lpm_divide_main_read_markers_exit_i_377_en;
reg [31:0] main_1_i_05_i_phi_temp;
reg [31:0] main__outer_i_i_i_marker_0_phi_temp;
reg [31:0] main__outer_i_i_i_get_dht_0_phi_temp;
reg [31:0] main__outer_i_i_i_get_dqt_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__outer_i_i_ReadBuf_0_phi_temp;
reg [7:0] main__outer_i_i_p_jinfo_num_components_0_phi_temp;
reg  main__outer_i_i_p_jinfo_smp_fact_b_0_phi_temp;
reg  main__outer_i_i_sow_SOI_0_ph_i_i_phi_temp;
reg [31:0] main__backedge_i_i_outer_i_marker_1_ph_phi_temp;
reg [31:0] main__backedge_i_i_outer_i_get_dht_1_ph_phi_temp;
reg [31:0] main__backedge_i_i_outer_i_get_dqt_1_ph_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer_ReadBuf_1_ph_phi_temp;
reg [7:0] main__backedge_i_i_outer_p_jinfo_num_components_1_ph_phi_temp;
reg  main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph_phi_temp;
reg [31:0] main__backedge_i_i_outer4_i_marker_1_ph5_phi_temp;
reg [31:0] main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer4_ReadBuf_1_ph7_phi_temp;
reg [7:0] main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8_phi_temp;
reg  main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9_phi_temp;
reg [31:0] main__backedge_i_i_outer10_i_marker_1_ph11_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_outer10_ReadBuf_1_ph12_phi_temp;
reg [7:0] main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp;
reg  main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp;
reg [31:0] main__backedge_i_i_i_marker_1_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__backedge_i_i_ReadBuf_1_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit3_i_i_i_18_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
reg [31:0] main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__loopexit_i_preheader_i_i__ph_i_i_phi_temp;
reg [31:0] main__lr_ph_i_i_i_indvar_i_i_phi_temp;
reg [31:0] main__loopexit_i_i_i_indvar9_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_read_markers_exit_i_p_jinfo_jpeg_data_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i1_i_i_ReadBuf_3_phi_temp;
reg [31:0] main__lr_ph_i1_i_i_ci_02_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___crit_edge_i_i_i_ReadBuf_4_phi_temp;
reg [31:0] main__preheader5_i_i_i_i_get_sos_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__preheader5_i_i_i_ReadBuf_5_phi_temp;
reg [31:0] main__preheader5_i_i_i_192_phi_temp;
reg [31:0] main_200_201_phi_temp;
reg [31:0] main__lr_ph5_i_i_i_i_get_dht_2_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph5_i_i_i_ReadBuf_6_phi_temp;
reg [31:0] main__lr_ph5_i_i_i_length_04_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_huffval_0_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_286_p_xhtbl_bits_0_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_287_288_phi_temp;
reg [31:0] main_287_indvar_i_i_i_phi_temp;
reg [31:0] main_287_count_01_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i10_i_i_304_phi_temp;
reg [31:0] main__lr_ph_i10_i_i_i_13_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___crit_edge_i12_i_i_ReadBuf_7_phi_temp;
reg [31:0] main__lr_ph_i15_i_i_i_get_dqt_2_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__lr_ph_i15_i_i_330_phi_temp;
reg [31:0] main__lr_ph_i15_i_i_length_02_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__split_us_i_i_i_354_phi_temp;
reg [31:0] main__split_us_i_i_i_i_01_us_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___split_crit_edge_i_i_i_361_phi_temp;
reg [31:0] main___split_crit_edge_i_i_i_i_01_i_i_i_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__us_lcssa_us_i_i_i_ReadBuf_8_phi_temp;
reg [31:0] main__preheader21_i_i_CurrentMCU_026_i_i_phi_temp;
reg [31:0] main_392_i_01_i_i1_i_phi_temp;
reg [31:0] main_415_r_0_i_i_i_phi_temp;
reg [31:0] main_420_g_0_i_i_i_phi_temp;
reg [31:0] main_425_b_0_i_i_i_phi_temp;
reg [31:0] main_432_433_phi_temp;
reg [31:0] main_432_i_324_i_i_phi_temp;
reg [31:0] main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_phi_temp;
reg [31:0] main_440_indvar_i_i_i_i_phi_temp;
reg [31:0] main_WriteBlock_exit_i_i_446_phi_temp;
reg [31:0] main__preheader_i_i_indvar_i7_i_phi_temp;
reg [31:0] main__preheader16_i_i_i_517_i_i_phi_temp;
reg [31:0] main_454_i_01_i2_i_i_phi_temp;
reg [31:0] main_477_r_0_i9_i_i_phi_temp;
reg [31:0] main_482_g_0_i10_i_i_phi_temp;
reg [31:0] main_487_b_0_i11_i_i_phi_temp;
reg [31:0] main_491_492_phi_temp;
reg [31:0] main_491_j_01_i_phi_temp;
reg [31:0] main__preheader_1_i_499_phi_temp;
reg [31:0] main__preheader_1_i_j_01_1_i_phi_temp;
reg [31:0] main__preheader_2_i_513_phi_temp;
reg [31:0] main__preheader_2_i_j_01_2_i_phi_temp;

/*   %377 = sdiv i32 %376, 8*/
lpm_divide lpm_divide_main_read_markers_exit_i_377 (
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1),
	.quotient (lpm_divide_main_read_markers_exit_i_377_out),
	.remain (main_read_markers_exit_i_377_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_read_markers_exit_i_377_en)
);

defparam
	lpm_divide_main_read_markers_exit_i_377.lpm_pipeline = 32,
	lpm_divide_main_read_markers_exit_i_377.lpm_widthd = 32,
	lpm_divide_main_read_markers_exit_i_377.lpm_widthn = 32,
	lpm_divide_main_read_markers_exit_i_377.lpm_drepresentation = "SIGNED",
	lpm_divide_main_read_markers_exit_i_377.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_read_markers_exit_i_377.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


huff_make_dhuff_tb huff_make_dhuff_tb_inst (
	.clk (clk),
	.reset (reset),
	.start (huff_make_dhuff_tb_start),
	.finish (huff_make_dhuff_tb_finish),
	.return_val (huff_make_dhuff_tb_return_val),
	.memory_controller_address (huff_make_dhuff_tb_memory_controller_address),
	.memory_controller_write_enable (huff_make_dhuff_tb_memory_controller_write_enable),
	.memory_controller_enable (huff_make_dhuff_tb_memory_controller_enable),
	.memory_controller_in (huff_make_dhuff_tb_memory_controller_in),
	.memory_controller_size (huff_make_dhuff_tb_memory_controller_size),
	.memory_controller_waitrequest (huff_make_dhuff_tb_memory_controller_waitrequest),
	.memory_controller_out (huff_make_dhuff_tb_memory_controller_out),
	.arg_p_xhtbl_bits (huff_make_dhuff_tb_arg_p_xhtbl_bits),
	.arg_p_dhtbl_maxcode (huff_make_dhuff_tb_arg_p_dhtbl_maxcode),
	.arg_p_dhtbl_mincode (huff_make_dhuff_tb_arg_p_dhtbl_mincode),
	.arg_p_dhtbl_valptr (huff_make_dhuff_tb_arg_p_dhtbl_valptr)
);



decode_block decode_block_inst (
	.clk (clk),
	.reset (reset),
	.start (decode_block_start),
	.finish (decode_block_finish),
	.memory_controller_address (decode_block_memory_controller_address),
	.memory_controller_write_enable (decode_block_memory_controller_write_enable),
	.memory_controller_enable (decode_block_memory_controller_enable),
	.memory_controller_in (decode_block_memory_controller_in),
	.memory_controller_size (decode_block_memory_controller_size),
	.memory_controller_waitrequest (decode_block_memory_controller_waitrequest),
	.memory_controller_out (decode_block_memory_controller_out),
	.arg_comp_no (decode_block_arg_comp_no),
	.arg_out_buf (decode_block_arg_out_buf),
	.arg_HuffBuff (decode_block_arg_HuffBuff)
);



Write4Blocks Write4Blocks_inst (
	.clk (clk),
	.reset (reset),
	.start (Write4Blocks_start),
	.finish (Write4Blocks_finish),
	.memory_controller_address (Write4Blocks_memory_controller_address),
	.memory_controller_write_enable (Write4Blocks_memory_controller_write_enable),
	.memory_controller_enable (Write4Blocks_memory_controller_enable),
	.memory_controller_in (Write4Blocks_memory_controller_in),
	.memory_controller_size (Write4Blocks_memory_controller_size),
	.memory_controller_waitrequest (Write4Blocks_memory_controller_waitrequest),
	.memory_controller_out (Write4Blocks_memory_controller_out),
	.arg_store1 (Write4Blocks_arg_store1),
	.arg_store2 (Write4Blocks_arg_store2),
	.arg_store3 (Write4Blocks_arg_store3),
	.arg_store4 (Write4Blocks_arg_store4),
	.arg_p_out_vpos (Write4Blocks_arg_p_out_vpos),
	.arg_p_out_hpos (Write4Blocks_arg_p_out_hpos),
	.arg_p_out_buf (Write4Blocks_arg_p_out_buf)
);



/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %12*/
/*   %13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB8_14)
begin
$write("Not Jpeg File!\n");
end
/* main: %12*/
/*   tail call void @exit(i32 0) noreturn nounwind*/
if (cur_state == LEGUP_F_main_BB8_14)
begin
$finish;
end
/* main: %next_marker.exit.i.i*/
/*   %23 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str23, i32 0, i32 0), i32 %unread_marker.0.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
$write("\nmarker = 0x%0x\n", main_next_marker_exit_i_i_unread_marker_0_i_i);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) finish <= 0;
end
/* main: %32*/
/*   %62 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str1, i32 0, i32 0), i32 %41) nounwind*/
if (cur_state == LEGUP_F_main_BB20_51)
begin
$write("length         = %d\n", main_32_41_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_32_41_reg) === 1'bX) finish <= 0;
end
/* main: %32*/
/*   %64 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str2, i32 0, i32 0), i32 %63) nounwind*/
if (cur_state == LEGUP_F_main_BB20_51)
begin
$write("data_precision = %d\n", main_32_63_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_32_63_reg) === 1'bX) finish <= 0;
end
/* main: %32*/
/*   %67 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str3, i32 0, i32 0), i32 %66) nounwind*/
if (cur_state == LEGUP_F_main_BB20_54)
begin
$write("image_height   = %d\n", main_32_66);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_32_66) === 1'bX) finish <= 0;
end
/* main: %32*/
/*   %70 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str4, i32 0, i32 0), i32 %69) nounwind*/
if (cur_state == LEGUP_F_main_BB20_57)
begin
$write("image_width    = %d\n", main_32_69);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_32_69) === 1'bX) finish <= 0;
end
/* main: %32*/
/*   %72 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str5, i32 0, i32 0), i32 %71) nounwind*/
if (cur_state == LEGUP_F_main_BB20_57)
begin
$write("num_components = %d\n", main_32_71_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_32_71_reg) === 1'bX) finish <= 0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %108 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str6, i32 0, i32 0), i32 %107) nounwind*/
if (cur_state == LEGUP_F_main_BB31_92)
begin
$write(" index         = %d\n", main__lr_ph_i1_i_i_107_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_107_reg) === 1'bX) finish <= 0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %111 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str7, i32 0, i32 0), i32 %110) nounwind*/
if (cur_state == LEGUP_F_main_BB31_95)
begin
$write(" id            = %d\n", main__lr_ph_i1_i_i_110);
// to fix quartus warning
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_110) === 1'bX) finish <= 0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %114 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str8, i32 0, i32 0), i32 %113) nounwind*/
if (cur_state == LEGUP_F_main_BB31_98)
begin
$write(" h_samp_factor = %d\n", main__lr_ph_i1_i_i_113);
// to fix quartus warning
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_113) === 1'bX) finish <= 0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %117 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str9, i32 0, i32 0), i32 %116) nounwind*/
if (cur_state == LEGUP_F_main_BB31_101)
begin
$write(" v_samp_factor = %d\n", main__lr_ph_i1_i_i_116);
// to fix quartus warning
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_116) === 1'bX) finish <= 0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %120 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([22 x i8]* @.str10, i32 0, i32 0), i32 %119) nounwind*/
if (cur_state == LEGUP_F_main_BB31_104)
begin
$write(" quant_tbl_no  = %d\n\n", main__lr_ph_i1_i_i_119);
// to fix quartus warning
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_119) === 1'bX) finish <= 0;
end
/* main: %163*/
/*   %164 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str11, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB43_143)
begin
$write("\nSampling Factor is 4:1:1\n");
end
/* main: %165*/
/*   %166 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([27 x i8]* @.str12, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB44_144)
begin
$write("\nSampling Factor is 1:1:1\n");
end
/* main: %167*/
/*   %180 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %176) nounwind*/
if (cur_state == LEGUP_F_main_BB45_148)
begin
$write(" length = %d\n", main_167_176);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_167_176) === 1'bX) finish <= 0;
end
/* main: %167*/
/*   %181 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str14, i32 0, i32 0), i32 %179) nounwind*/
if (cur_state == LEGUP_F_main_BB45_149)
begin
$write(" num_comp = %d\n", main_167_179);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_167_179) === 1'bX) finish <= 0;
end
/* main: %209*/
/*   %210 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str15, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB55_168)
begin
$write("Bad Component ID!\n");
end
/* main: %209*/
/*   tail call void @exit(i32 0) noreturn nounwind*/
if (cur_state == LEGUP_F_main_BB55_168)
begin
$finish;
end
/* main: %211*/
/*   %216 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str16, i32 0, i32 0), i32 %197) nounwind*/
if (cur_state == LEGUP_F_main_BB56_173)
begin
$write(" comp_id       = %d\n", main_194_197_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_194_197_reg) === 1'bX) finish <= 0;
end
/* main: %211*/
/*   %219 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str17, i32 0, i32 0), i32 %218) nounwind*/
if (cur_state == LEGUP_F_main_BB56_176)
begin
$write(" dc_tbl_no     = %d\n", main_211_218);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_211_218) === 1'bX) finish <= 0;
end
/* main: %211*/
/*   %222 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str18, i32 0, i32 0), i32 %221) nounwind*/
if (cur_state == LEGUP_F_main_BB56_179)
begin
$write(" ac_tbl_no     = %d\n", main_211_221);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_211_221) === 1'bX) finish <= 0;
end
/* main: %248*/
/*   %259 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %258) nounwind*/
if (cur_state == LEGUP_F_main_BB64_204)
begin
$write(" length = %d\n", main_248_258);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_248_258) === 1'bX) finish <= 0;
end
/* main: %.lr.ph5.i.i.i*/
/*   %269 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str19, i32 0, i32 0), i32 %268) nounwind*/
if (cur_state == LEGUP_F_main_BB67_214)
begin
$write(" index = 0x%0x\n", main__lr_ph5_i_i_i_268);
// to fix quartus warning
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_268) === 1'bX) finish <= 0;
end
/* main: %293*/
/*   %294 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str20, i32 0, i32 0), i32 %292) nounwind*/
if (cur_state == LEGUP_F_main_BB74_228)
begin
$write(" count = %d\n", main_287_292_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_287_292_reg) === 1'bX) finish <= 0;
end
/* main: %312*/
/*   %323 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i32 %322) nounwind*/
if (cur_state == LEGUP_F_main_BB79_243)
begin
$write(" length = %d\n", main_312_322);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_312_322) === 1'bX) finish <= 0;
end
/* main: %.lr.ph.i15.i.i*/
/*   %336 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str21, i32 0, i32 0), i32 %334) nounwind*/
if (cur_state == LEGUP_F_main_BB82_253)
begin
$write(" prec = %d\n", main__lr_ph_i15_i_i_334);
// to fix quartus warning
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_334) === 1'bX) finish <= 0;
end
/* main: %.lr.ph.i15.i.i*/
/*   %337 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str22, i32 0, i32 0), i32 %335) nounwind*/
if (cur_state == LEGUP_F_main_BB82_253)
begin
$write(" num  = %d\n", main__lr_ph_i15_i_i_335);
// to fix quartus warning
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_335) === 1'bX) finish <= 0;
end
/* main: %389*/
/*   %390 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str24, i32 0, i32 0), i32 %384) nounwind*/
if (cur_state == LEGUP_F_main_BB91_355)
begin
$write("Decode 1:1:1 NumMCU = %d\n", main_read_markers_exit_i_384_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_read_markers_exit_i_384_reg) === 1'bX) finish <= 0;
end
/* main: %449*/
/*   %450 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str25, i32 0, i32 0), i32 %384) nounwind*/
if (cur_state == LEGUP_F_main_BB114_406)
begin
$write("Decode 4:1:1 NumMCU = %d\n", main_read_markers_exit_i_384_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_read_markers_exit_i_384_reg) === 1'bX) finish <= 0;
end
/* main: %jpeg2bmp_main.exit*/
/*   %510 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str27, i32 0, i32 0), i32 %.storemerge) nounwind*/
if (cur_state == LEGUP_F_main_BB133_465)
begin
$write("Result: %d\n", main_jpeg2bmp_main_exit__storemerge);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_jpeg2bmp_main_exit__storemerge) === 1'bX) finish <= 0;
end
/* main: %520*/
/*   %521 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str28, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB135_473)
begin
$write("RESULT: PASS\n");
end
/* main: %522*/
/*   %523 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str29, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB136_474)
begin
$write("RESULT: FAIL\n");
end
end
always @(posedge clk) begin
if (reset == 1'd1)
begin
cur_state <= 9'd0;
if (^reset !== 1'bX && ^(9'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd1)
begin
cur_state <= LEGUP_F_main_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_0 & start == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB0_1 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB1_2 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB1_2 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB1_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB1_3 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB1_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB1_3 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB1_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB2_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB2_5 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB2_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB3_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB3_6 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB3_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB3_6 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB4_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB4_7 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB4_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB4_7 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB5_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB5_8 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB5_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB5_8 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB6_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB6_9 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB6_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB6_9 & memory_controller_waitrequest == 1'd0 & main__outer_i_i_sow_SOI_0_ph_i_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB7_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB7_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB6_9 & memory_controller_waitrequest == 1'd0 & main__outer_i_i_sow_SOI_0_ph_i_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB11_19;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB11_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_10 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB7_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB7_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_10 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB7_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_11 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB7_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB7_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_11 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB7_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB7_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_12 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB7_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB7_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_12 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB7_13;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_13 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB7_13;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB7_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_13 & memory_controller_waitrequest == 1'd0 & main_6_or_cond_i_i_i == 1'd1)
begin
cur_state <= LEGUP_F_main_BB9_15;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB9_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB7_13 & memory_controller_waitrequest == 1'd0 & main_6_or_cond_i_i_i == 1'd0)
begin
cur_state <= LEGUP_F_main_BB8_14;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB8_14 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB8_14;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB8_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB8_14 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB9_15 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB9_15;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB9_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB9_15 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB9_16;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB9_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB9_16 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB9_16;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB9_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB9_16 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB9_17;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB9_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB9_17 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB9_17;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB9_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB9_17 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB17_31;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB10_18 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB10_18;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB10_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB10_18 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB11_19;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB11_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB11_19 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB11_19;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB11_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB11_19 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB11_20;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB11_20 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB11_20;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB11_20 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB11_21;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB11_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB11_21 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB11_21;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB11_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB11_21 & memory_controller_waitrequest == 1'd0 & main__loopexit3_i_i_i_19 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB14_26;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB14_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB11_21 & memory_controller_waitrequest == 1'd0 & main__loopexit3_i_i_i_19 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB12_22;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB12_22 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB12_22;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB12_22 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB12_23;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB12_23 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB12_23;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB12_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB12_23 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB12_24;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB12_24 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB12_24;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB12_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB12_24 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i_i_i_20 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB13_25;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB13_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB12_24 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i_i_i_20 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB12_22;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB12_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB13_25 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB13_25;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB13_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB13_25 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB14_26;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB14_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB14_26 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB14_26;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB14_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB14_26 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB15_27;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB15_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB15_27 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB15_27;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB15_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB15_27 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB15_28;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB15_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB15_28 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB15_28;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB15_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB15_28 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB15_29;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB15_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB15_29 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB15_29;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB15_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB15_29 & memory_controller_waitrequest == 1'd0 & main__loopexit_i_i_i_22 == 32'd255)
begin
cur_state <= LEGUP_F_main_BB15_27;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB15_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB15_29 & memory_controller_waitrequest == 1'd0 & main__loopexit_i_i_i_22 == 32'd0)
begin
cur_state <= LEGUP_F_main_BB10_18;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB10_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB15_29 & memory_controller_waitrequest == 1'd0 & main__loopexit_i_i_i_22 != 32'd255 & main__loopexit_i_i_i_22 != 32'd0)
begin
cur_state <= LEGUP_F_main_BB16_30;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB16_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB16_30 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB16_30;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB16_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB16_30 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB17_31;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_31 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB17_31;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_31 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB17_32;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_32 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB17_32;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_32 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB17_33;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_33 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB17_33;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_33 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB17_34;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_34 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB17_34;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB17_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_34 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_27 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB18_35;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB18_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB17_34 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_27 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB19_38;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB19_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB18_35 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB18_35;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB18_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB18_35 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB18_36;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB18_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB18_36 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB18_36;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB18_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB18_36 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB18_37;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB18_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB18_37 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB18_37;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB18_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB18_37 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB19_38;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB19_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB19_38;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB19_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd216)
begin
cur_state <= LEGUP_F_main_BB2_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd192)
begin
cur_state <= LEGUP_F_main_BB20_39;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd218)
begin
cur_state <= LEGUP_F_main_BB45_145;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd196)
begin
cur_state <= LEGUP_F_main_BB64_201;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd219)
begin
cur_state <= LEGUP_F_main_BB79_240;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd217)
begin
cur_state <= LEGUP_F_main_BB90_277;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd216 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd192 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd218 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd196 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd219 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd217)
begin
cur_state <= LEGUP_F_main_BB6_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_39 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_39;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_39 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_40;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_40 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_40;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_40 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_41;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_41 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_41;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_41 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_42;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_42 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_42;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_42 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_43;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_43 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_43;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_43 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_44;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_44 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_44;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_44 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_45;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_45 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_45;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_45 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_46;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_46 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_46;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_46 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_47;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_47 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_47;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_47 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_48;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_48 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_48;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_48 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_49;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_49 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_49;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_49 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_50;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_50 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_50;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_50 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_51;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_51 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_51;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_51 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_52;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_52 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_52;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_52 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_53;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_53 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_53;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_53 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_54;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_54 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_54;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_54 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_55;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_55 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_55;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_55 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_56;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_56 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_56;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_56 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB20_57;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_57 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB20_57;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB20_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_57 & memory_controller_waitrequest == 1'd0 & main_32_73_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB21_58;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB21_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB20_57 & memory_controller_waitrequest == 1'd0 & main_32_73_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB22_61;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB22_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB21_58 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB21_58;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB21_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB21_58 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB21_59;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB21_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB21_59 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB21_59;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB21_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB21_59 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB21_60;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB21_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB21_60 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB21_60;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB21_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB21_60 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB22_61;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB22_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB22_61 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB22_61;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB22_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB22_61 & memory_controller_waitrequest == 1'd0 & main_77_78 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB23_62;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB23_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB22_61 & memory_controller_waitrequest == 1'd0 & main_77_78 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB24_65;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB24_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB23_62 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB23_62;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB23_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB23_62 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB23_63;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB23_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB23_63 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB23_63;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB23_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB23_63 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB23_64;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB23_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB23_64 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB23_64;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB23_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB23_64 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB24_65;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB24_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB24_65 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB24_65;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB24_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB24_65 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB24_66;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB24_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB24_66 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB24_66;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB24_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB24_66 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB24_67;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB24_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB24_67 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB24_67;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB24_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB24_67 & memory_controller_waitrequest == 1'd0 & main_82_84 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB25_68;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB25_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB24_67 & memory_controller_waitrequest == 1'd0 & main_82_84 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB26_71;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB26_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB25_68 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB25_68;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB25_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB25_68 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB25_69;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB25_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB25_69 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB25_69;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB25_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB25_69 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB25_70;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB25_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB25_70 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB25_70;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB25_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB25_70 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB26_71;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB26_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB26_71 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB26_71;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB26_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB26_71 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB26_72;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB26_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB26_72 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB26_72;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB26_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB26_72 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB26_73;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB26_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB26_73 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB26_73;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB26_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB26_73 & memory_controller_waitrequest == 1'd0 & main_88_90 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB27_74;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB27_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB26_73 & memory_controller_waitrequest == 1'd0 & main_88_90 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB28_77;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB28_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB27_74 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB27_74;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB27_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB27_74 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB27_75;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB27_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB27_75 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB27_75;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB27_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB27_75 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB27_76;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB27_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB27_76 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB27_76;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB27_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB27_76 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB28_77;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB28_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB28_77 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB28_77;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB28_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB28_77 & memory_controller_waitrequest == 1'd0 & main_94_95 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB29_78;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB29_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB28_77 & memory_controller_waitrequest == 1'd0 & main_94_95 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB30_81;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB30_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB29_78 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB29_78;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB29_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB29_78 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB29_79;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB29_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB29_79 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB29_79;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB29_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB29_79 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB29_80;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB29_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB29_80 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB29_80;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB29_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB29_80 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_82;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB30_81 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB30_81;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB30_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB30_81 & memory_controller_waitrequest == 1'd0 & main__preheader_i_i_i_98 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_82;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB30_81 & memory_controller_waitrequest == 1'd0 & main__preheader_i_i_i_98 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB42_140;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB42_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_82 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_82;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_82 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_83;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_83 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_83;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_83 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_84;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_84 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_84;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_84 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_85;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_85 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_85;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_85 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_86;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_86 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_86;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_86 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_87;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_87 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_87;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_87 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_88;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_88 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_88;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_88 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_89;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_89 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_89;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_89 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_90;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_90 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_90;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_90 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_91;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_91 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_91;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_91 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_92;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_92 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_92;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_92 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_93;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_93 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_93;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_93 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_94;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_94 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_94;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_94 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_95;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_95 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_95;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_95 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_96;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_96 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_96;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_96 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_97;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_97 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_97;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_97 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_98;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_98 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_98;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_98 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_99;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_99 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_99;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_99 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_100;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_100 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_100;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_100 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_101;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_101 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_101;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_101 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_102;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_102 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_102;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_102 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_103;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_103 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_103;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_103 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_104;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_104 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_104;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_104 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_105;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_105 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_105;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_105 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_106;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_106 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_106;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_106 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_107;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_107 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_107;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_107 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB31_108;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_108 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_108;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_108 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i1_i_i_124 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB32_109;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB32_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB31_108 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i1_i_i_124 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB33_112;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB32_109 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB32_109;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB32_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB32_109 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB32_110;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB32_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB32_110 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB32_110;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB32_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB32_110 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB32_111;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB32_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB32_111 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB32_111;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB32_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB32_111 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB33_112;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_112 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB33_112;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_112 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB33_113;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_113 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB33_113;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_113 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB33_114;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_114 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB33_114;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_114 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB33_115;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_115 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB33_115;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB33_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_115 & memory_controller_waitrequest == 1'd0 & main_128_132 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB34_116;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB34_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB33_115 & memory_controller_waitrequest == 1'd0 & main_128_132 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB35_119;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB34_116 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB34_116;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB34_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB34_116 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB34_117;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB34_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB34_117 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB34_117;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB34_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB34_117 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB34_118;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB34_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB34_118 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB34_118;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB34_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB34_118 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB35_119;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_119 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB35_119;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_119 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB35_120;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_120 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB35_120;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_120 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB35_121;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_121 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB35_121;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_121 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB35_122;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_122 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB35_122;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB35_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_122 & memory_controller_waitrequest == 1'd0 & main_136_140 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB36_123;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB36_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB35_122 & memory_controller_waitrequest == 1'd0 & main_136_140 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB37_126;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB37_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB36_123 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB36_123;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB36_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB36_123 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB36_124;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB36_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB36_124 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB36_124;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB36_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB36_124 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB36_125;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB36_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB36_125 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB36_125;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB36_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB36_125 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB37_126;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB37_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB37_126 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB37_126;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB37_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB37_126 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB37_127;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB37_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB37_127 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB37_127;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB37_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB37_127 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB37_128;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB37_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB37_128 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB37_128;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB37_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB37_128 & memory_controller_waitrequest == 1'd0 & main_144_147 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB38_129;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB38_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB37_128 & memory_controller_waitrequest == 1'd0 & main_144_147 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB39_132;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB38_129 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB38_129;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB38_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB38_129 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB38_130;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB38_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB38_130 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB38_130;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB38_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB38_130 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB38_131;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB38_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB38_131 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB38_131;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB38_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB38_131 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB39_132;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_132 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB39_132;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_132 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB39_133;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_133 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB39_133;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_133 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB39_134;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_134 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB39_134;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_134 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB39_135;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_135 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB39_135;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB39_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_135 & memory_controller_waitrequest == 1'd0 & main_151_155 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB40_136;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB40_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB39_135 & memory_controller_waitrequest == 1'd0 & main_151_155 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB41_139;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB41_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB40_136 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB40_136;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB40_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB40_136 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB40_137;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB40_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB40_137 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB40_137;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB40_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB40_137 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB40_138;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB40_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB40_138 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB40_138;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB40_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB40_138 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB41_139;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB41_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB41_139 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB41_139;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB41_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB41_139 & memory_controller_waitrequest == 1'd0 & main_159_160 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB31_82;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB31_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB41_139 & memory_controller_waitrequest == 1'd0 & main_159_160 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB42_140;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB42_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB42_140 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB42_140;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB42_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB42_140 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB42_141;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB42_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB42_141 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB42_141;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB42_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB42_141 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB42_142;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB42_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB42_142 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB42_142;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB42_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB42_142 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i_i_i_162 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB43_143;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB43_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB42_142 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i_i_i_162 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB44_144;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB44_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB43_143 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB43_143;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB43_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB43_143 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB5_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB44_144 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB44_144;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB44_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB44_144 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB5_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_145 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB45_145;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_145 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB45_146;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_146 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB45_146;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_146 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB45_147;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_147 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB45_147;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_147 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB45_148;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_148 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB45_148;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_148 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB45_149;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_149 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB45_149;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB45_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_149 & memory_controller_waitrequest == 1'd0 & main_167_182_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB46_150;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB46_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB45_149 & memory_controller_waitrequest == 1'd0 & main_167_182_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB47_153;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB47_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB46_150 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB46_150;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB46_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB46_150 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB46_151;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB46_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB46_151 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB46_151;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB46_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB46_151 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB46_152;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB46_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB46_152 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB46_152;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB46_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB46_152 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB47_153;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB47_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB47_153 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB47_153;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB47_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB47_153 & memory_controller_waitrequest == 1'd0 & main_186_187 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB48_154;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB48_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB47_153 & memory_controller_waitrequest == 1'd0 & main_186_187 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB49_157;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB49_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB48_154 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB48_154;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB48_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB48_154 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB48_155;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB48_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB48_155 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB48_155;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB48_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB48_155 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB48_156;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB48_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB48_156 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB48_156;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB48_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB48_156 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB49_157;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB49_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB49_157 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB49_157;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB49_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB49_157 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB50_158;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB50_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB50_158 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB50_158;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB50_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB50_158 & memory_controller_waitrequest == 1'd0 & main__preheader5_i_i_i_193 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB51_159;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB51_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB50_158 & memory_controller_waitrequest == 1'd0 & main__preheader5_i_i_i_193 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB63_200;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB63_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB51_159 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB51_159;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB51_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB51_159 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB51_160;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB51_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB51_160 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB51_160;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB51_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB51_160 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB51_161;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB51_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB51_161 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB51_161;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB51_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB51_161 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB51_162;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB51_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB51_162 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB51_162;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB51_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB51_162 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB52_163;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB52_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB52_163 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB52_163;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB52_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB52_163 & memory_controller_waitrequest == 1'd0 & main_200_202 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB53_164;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB53_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB52_163 & memory_controller_waitrequest == 1'd0 & main_200_202 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB55_168;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB55_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB53_164 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB53_164;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB53_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB53_164 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB53_165;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB53_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB53_165 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB53_165;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB53_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB53_165 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB53_166;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB53_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB53_166 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB53_166;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB53_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB53_166 & memory_controller_waitrequest == 1'd0 & main_203_206 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_169;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB53_166 & memory_controller_waitrequest == 1'd0 & main_203_206 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB54_167;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB54_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB54_167 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB54_167;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB54_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB54_167 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB52_163;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB52_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB55_168 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB55_168;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB55_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB55_168 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_169 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_169;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_169 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_170;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_170 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_170;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_170 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_171;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_171 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_171;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_171 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_172;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_172 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_172;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_172 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_173;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_173 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_173;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_173 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_174;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_174 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_174;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_174 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_175;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_175 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_175;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_175 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_176;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_176 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_176;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_176 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_177;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_177 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_177;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_177 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_178;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_178 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_178;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_178 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_179;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_179 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_179;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_179 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_180;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_180 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_180;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_180 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_181;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_181 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_181;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_181 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB56_182;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_182 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB56_182;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB56_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_182 & memory_controller_waitrequest == 1'd0 & main_211_225 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB57_183;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB57_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB56_182 & memory_controller_waitrequest == 1'd0 & main_211_225 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB58_186;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB57_183 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB57_183;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB57_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB57_183 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB57_184;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB57_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB57_184 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB57_184;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB57_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB57_184 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB57_185;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB57_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB57_185 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB57_185;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB57_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB57_185 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB58_186;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_186 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB58_186;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_186 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB58_187;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_187 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB58_187;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_187 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB58_188;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_188 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB58_188;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_188 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB58_189;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_189 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB58_189;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB58_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_189 & memory_controller_waitrequest == 1'd0 & main_229_234 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB59_190;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB59_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB58_189 & memory_controller_waitrequest == 1'd0 & main_229_234 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB60_193;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB60_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB59_190 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB59_190;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB59_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB59_190 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB59_191;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB59_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB59_191 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB59_191;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB59_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB59_191 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB59_192;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB59_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB59_192 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB59_192;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB59_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB59_192 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB60_193;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB60_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB60_193 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB60_193;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB60_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB60_193 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB60_194;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB60_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB60_194 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB60_194;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB60_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB60_194 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB60_195;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB60_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB60_195 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB60_195;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB60_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB60_195 & memory_controller_waitrequest == 1'd0 & main_238_241 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB61_196;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB61_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB60_195 & memory_controller_waitrequest == 1'd0 & main_238_241 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB62_199;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB62_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB61_196 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB61_196;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB61_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB61_196 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB61_197;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB61_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB61_197 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB61_197;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB61_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB61_197 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB61_198;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB61_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB61_198 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB61_198;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB61_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB61_198 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB62_199;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB62_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB62_199 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB62_199;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB62_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB62_199 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB50_158;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB50_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB63_200 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB63_200;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB63_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB63_200 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_277;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_201 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB64_201;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_201 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB64_202;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_202 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB64_202;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_202 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB64_203;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_203 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB64_203;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_203 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB64_204;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_204 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB64_204;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_204 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB64_205;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_205 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB64_205;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_205 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB64_206;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_206 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB64_206;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_206 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB64_207;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_207 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB64_207;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB64_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_207 & memory_controller_waitrequest == 1'd0 & main_248_261 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB65_208;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB65_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB64_207 & memory_controller_waitrequest == 1'd0 & main_248_261 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB66_211;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB66_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB65_208 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB65_208;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB65_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB65_208 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB65_209;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB65_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB65_209 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB65_209;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB65_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB65_209 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB65_210;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB65_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB65_210 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB65_210;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB65_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB65_210 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB66_211;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB66_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB66_211 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB66_211;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB66_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB66_211 & memory_controller_waitrequest == 1'd0 & main__preheader_i7_i_i_265 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB67_212;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB66_211 & memory_controller_waitrequest == 1'd0 & main__preheader_i7_i_i_265 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB6_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_212 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB67_212;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_212 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB67_213;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_213 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB67_213;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_213 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB67_214;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_214 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB67_214;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_214 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB67_215;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_215 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB67_215;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_215 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB67_216;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_216 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB67_216;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_216 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB67_217;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_217 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB67_217;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_217 & memory_controller_waitrequest == 1'd0 & main__lr_ph5_i_i_i_272 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB68_218;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB68_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB67_217 & memory_controller_waitrequest == 1'd0 & main__lr_ph5_i_i_i_272 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB69_221;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB69_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB68_218 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB68_218;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB68_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB68_218 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB68_219;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB68_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB68_219 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB68_219;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB68_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB68_219 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB68_220;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB68_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB68_220 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB68_220;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB68_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB68_220 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB69_221;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB69_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB69_221 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB69_221;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB69_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB69_221 & memory_controller_waitrequest == 1'd0 & main_276_278 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB71_223;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB71_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB69_221 & memory_controller_waitrequest == 1'd0 & main_276_278 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB70_222;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB70_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB70_222 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB70_222;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB70_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB70_222 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB72_224;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB72_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB71_223 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB71_223;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB71_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB71_223 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB72_224;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB72_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB72_224 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB72_224;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB72_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB72_224 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB73_225;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB73_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB73_225 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB73_225;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB73_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB73_225 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB73_226;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB73_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB73_226 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB73_226;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB73_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB73_226 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB73_227;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB73_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB73_227 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB73_227;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB73_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB73_227 & memory_controller_waitrequest == 1'd0 & main_287_exitcond_i_i_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB74_228;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB74_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB73_227 & memory_controller_waitrequest == 1'd0 & main_287_exitcond_i_i_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB73_225;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB73_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_228 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB74_228;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB74_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_228 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB74_229;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB74_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_229 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB74_229;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB74_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_229 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB74_230;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB74_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_230 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB74_230;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB74_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_230 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB74_231;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB74_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_231 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB74_231;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB74_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_231 & memory_controller_waitrequest == 1'd0 & main_293_297 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB75_232;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB75_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB74_231 & memory_controller_waitrequest == 1'd0 & main_293_297 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB76_235;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB76_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB75_232 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB75_232;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB75_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB75_232 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB75_233;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB75_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB75_233 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB75_233;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB75_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB75_233 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB75_234;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB75_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB75_234 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB75_234;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB75_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB75_234 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB76_235;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB76_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB76_235 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB76_235;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB76_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB76_235 & memory_controller_waitrequest == 1'd0 & main_301_303 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB77_236;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB77_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB76_235 & memory_controller_waitrequest == 1'd0 & main_301_303 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB78_239;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB78_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB77_236 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB77_236;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB77_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB77_236 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB77_237;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB77_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB77_237 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB77_237;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB77_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB77_237 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB77_238;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB77_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB77_238 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB77_238;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB77_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB77_238 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i10_i_i_exitcond7_i_i_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB78_239;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB78_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB77_238 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i10_i_i_exitcond7_i_i_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB77_236;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB77_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB78_239;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB78_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB67_212;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB67_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB3_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_240 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB79_240;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_240 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB79_241;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_241 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB79_241;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_241 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB79_242;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_242 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB79_242;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_242 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB79_243;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_243 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB79_243;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_243 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB79_244;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_244 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB79_244;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_244 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB79_245;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_245 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB79_245;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_245 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB79_246;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_246 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB79_246;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB79_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_246 & memory_controller_waitrequest == 1'd0 & main_312_325 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB80_247;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB80_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB79_246 & memory_controller_waitrequest == 1'd0 & main_312_325 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB81_250;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB81_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB80_247 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB80_247;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB80_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB80_247 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB80_248;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB80_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB80_248 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB80_248;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB80_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB80_248 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB80_249;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB80_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB80_249 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB80_249;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB80_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB80_249 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB81_250;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB81_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB81_250 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB81_250;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB81_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB81_250 & memory_controller_waitrequest == 1'd0 & main__preheader_i13_i_i_329 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB82_251;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB81_250 & memory_controller_waitrequest == 1'd0 & main__preheader_i13_i_i_329 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB6_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_251 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB82_251;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_251 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB82_252;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_252 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB82_252;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_252 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB82_253;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_253 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB82_253;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_253 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB82_254;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_254 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB82_254;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_254 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB82_255;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_255 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB82_255;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_255 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB82_256;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_256 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB82_256;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_256 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i15_i_i_340 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB83_257;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB83_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB82_256 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i15_i_i_340 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB84_260;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB84_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB83_257 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB83_257;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB83_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB83_257 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB83_258;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB83_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB83_258 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB83_258;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB83_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB83_258 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB83_259;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB83_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB83_259 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB83_259;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB83_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB83_259 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB84_260;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB84_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB84_260 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB84_260;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB84_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB84_260 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB84_261;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB84_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB84_261 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB84_261;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB84_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB84_261 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB84_262;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB84_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB84_262 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB84_262;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB84_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB84_262 & memory_controller_waitrequest == 1'd0 & main_344_347 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB85_263;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB85_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB84_262 & memory_controller_waitrequest == 1'd0 & main_344_347 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB86_266;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB86_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB85_263 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB85_263;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB85_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB85_263 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB85_264;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB85_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB85_264 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB85_264;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB85_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB85_264 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB85_265;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB85_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB85_265 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB85_265;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB85_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB85_265 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB86_266;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB86_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB86_266 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB86_266;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB86_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB86_266 & memory_controller_waitrequest == 1'd0 & main_351_353 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB87_267;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB86_266 & memory_controller_waitrequest == 1'd0 & main_351_353 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB88_271;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_267 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB87_267;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_267 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB87_268;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_268 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB87_268;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_268 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB87_269;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_269 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB87_269;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_269 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB87_270;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_270 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB87_270;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_270 & memory_controller_waitrequest == 1'd0 & main__split_us_i_i_i_exitcond_i17_i_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB89_276;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB89_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB87_270 & memory_controller_waitrequest == 1'd0 & main__split_us_i_i_i_exitcond_i17_i_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB87_267;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB87_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_271 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB88_271;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_271 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB88_272;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_272 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB88_272;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_272 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB88_273;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_273 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB88_273;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_273 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB88_274;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_274 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB88_274;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_274 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB88_275;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_275 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB88_275;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_275 & memory_controller_waitrequest == 1'd0 & main___split_crit_edge_i_i_i_exitcond3_i_i_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB89_276;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB89_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB88_275 & memory_controller_waitrequest == 1'd0 & main___split_crit_edge_i_i_i_exitcond3_i_i_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB88_271;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB88_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB89_276;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB89_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB82_251;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB82_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB4_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_277 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_277;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_277 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_278;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_278 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_278;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_278 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_279;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_279 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_279;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_279 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_280;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_280 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_280;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_280 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_281;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_281 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_281;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_281 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_282;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_282 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_282;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_282 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_283;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_283 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_283;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_283 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_284;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_284 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_284;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_284 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_285;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_285 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_285;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_285 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_286;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_286 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_286;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_286 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_287;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_287 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_287;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_287 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_288;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_288 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_288;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_288 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_289;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_289 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_289;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_289 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_290;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_290 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_290;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_290 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_291;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_291 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_291;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_291 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_292;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_292 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_292;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_292 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_293;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_293 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_293;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_293 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_294;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_294 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_294;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_294 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_295;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_295 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_295;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_295 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_296;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_296 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_296;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_296 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_297;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_297 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_297;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_297 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_298;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_298 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_298;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_298 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_299;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_299 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_299;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_299 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_300;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_300 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_300;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_300 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_301;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_301 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_301;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_301 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_302;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_302 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_302;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_302 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_303;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_303 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_303;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_303 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_304;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_304 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_304;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_304 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_305;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_305 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_305;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_305 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_306;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_306 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_306;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_306 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_307;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_307 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_307;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_307 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_308;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_308 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_308;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_308 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_309;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_309 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_309;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_309 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_310;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_310 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_310;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_310 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_311;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_311 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_311;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_311 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_312;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_312 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_312;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_312 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_313;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_313 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_313;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_313 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_314;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_314 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_314;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_314 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_315;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_315 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_315;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_315 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_316;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_316 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_316;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_316 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_317;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_317 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_317;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_317 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_318;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_318 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_318;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_318 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_319;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_319 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_319;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_319 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_320;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_320 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_320;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_320 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_321;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_321 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_321;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_321 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_322;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_322 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_322;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_322 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_323;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_323 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_323;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_323 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_324;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_324 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_324;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_324 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_325;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_325 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_325;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_325 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_326;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_326 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_326;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_326 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_327;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_327 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_327;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_327 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_328;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_328 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_328;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_328 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_329;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_329 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_329;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_329 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_330;
if (^reset !== 1'bX && ^(LEGUP_function_call_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_330 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_330;
if (^reset !== 1'bX && ^(LEGUP_function_call_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_330 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_331;
if (^reset !== 1'bX && ^(LEGUP_function_call_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_330 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_330;
if (^reset !== 1'bX && ^(LEGUP_function_call_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_331 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_331;
if (^reset !== 1'bX && ^(LEGUP_function_call_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_331 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_332;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_332 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_332;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_332 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_333;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_333 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_333;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_333 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_334;
if (^reset !== 1'bX && ^(LEGUP_function_call_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_334 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_334;
if (^reset !== 1'bX && ^(LEGUP_function_call_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_334 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_335;
if (^reset !== 1'bX && ^(LEGUP_function_call_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_334 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_334;
if (^reset !== 1'bX && ^(LEGUP_function_call_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_335 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_335;
if (^reset !== 1'bX && ^(LEGUP_function_call_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_335 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_336;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_336 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_336;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_336 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_337;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_337 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_337;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_337 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_338;
if (^reset !== 1'bX && ^(LEGUP_function_call_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_338 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_338;
if (^reset !== 1'bX && ^(LEGUP_function_call_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_338 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_339;
if (^reset !== 1'bX && ^(LEGUP_function_call_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_338 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_338;
if (^reset !== 1'bX && ^(LEGUP_function_call_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_339 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_339;
if (^reset !== 1'bX && ^(LEGUP_function_call_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_339 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_340;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_340 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_340;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_340 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_341;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_341 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_341;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_341 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_342;
if (^reset !== 1'bX && ^(LEGUP_function_call_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_342 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_342;
if (^reset !== 1'bX && ^(LEGUP_function_call_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_342 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_343;
if (^reset !== 1'bX && ^(LEGUP_function_call_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_342 & memory_controller_waitrequest == 1'd0 & huff_make_dhuff_tb_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_342;
if (^reset !== 1'bX && ^(LEGUP_function_call_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_343 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_343;
if (^reset !== 1'bX && ^(LEGUP_function_call_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_343 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_344;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_344 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_344;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_344 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_345;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_345 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_345;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_345 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_346;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_346 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_346;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_346 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_347;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_347 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_347;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_347 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_348;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_348 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_348;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_348 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_349;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_349 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_349;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_349 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_350;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_350 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_350;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_350 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_351;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_351 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_351;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_351 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_352;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_352 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_352;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_352 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_353;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_353 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_353;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_353 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB90_354;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_354 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB90_354;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB90_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_354 & memory_controller_waitrequest == 1'd0 & main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB114_406;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB114_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB90_354 & memory_controller_waitrequest == 1'd0 & main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB91_355;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB91_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB91_355 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB91_355;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB91_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB91_355 & memory_controller_waitrequest == 1'd0 & main_389_391 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB92_356;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB92_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB91_355 & memory_controller_waitrequest == 1'd0 & main_389_391 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB130_454;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB92_356 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB92_356;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB92_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB92_356 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB93_357;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB93_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB93_357 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB93_357;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB93_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB93_357 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_358;
if (^reset !== 1'bX && ^(LEGUP_function_call_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_358 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_358;
if (^reset !== 1'bX && ^(LEGUP_function_call_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_358 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_359;
if (^reset !== 1'bX && ^(LEGUP_function_call_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_358 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_358;
if (^reset !== 1'bX && ^(LEGUP_function_call_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_359 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_359;
if (^reset !== 1'bX && ^(LEGUP_function_call_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_359 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB93_360;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB93_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB93_360 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB93_360;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB93_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB93_360 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_361;
if (^reset !== 1'bX && ^(LEGUP_function_call_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_361 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_361;
if (^reset !== 1'bX && ^(LEGUP_function_call_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_361 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_362;
if (^reset !== 1'bX && ^(LEGUP_function_call_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_361 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_361;
if (^reset !== 1'bX && ^(LEGUP_function_call_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_362 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_362;
if (^reset !== 1'bX && ^(LEGUP_function_call_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_362 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB93_363;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB93_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB93_363 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB93_363;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB93_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB93_363 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_364;
if (^reset !== 1'bX && ^(LEGUP_function_call_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_364 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_364;
if (^reset !== 1'bX && ^(LEGUP_function_call_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_364 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_365;
if (^reset !== 1'bX && ^(LEGUP_function_call_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_364 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_364;
if (^reset !== 1'bX && ^(LEGUP_function_call_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_365 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_365;
if (^reset !== 1'bX && ^(LEGUP_function_call_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_365 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB94_366;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_366 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB94_366;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_366 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB94_367;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_367 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB94_367;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_367 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB94_368;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_368 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB94_368;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_368 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB94_369;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_369 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB94_369;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_369 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB94_370;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_370 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB94_370;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_370 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB94_371;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_371 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB94_371;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_371 & memory_controller_waitrequest == 1'd0 & main_392_411 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB97_374;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB97_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB94_371 & memory_controller_waitrequest == 1'd0 & main_392_411 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB95_372;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB95_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB95_372 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB95_372;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB95_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB95_372 & memory_controller_waitrequest == 1'd0 & main_412_413 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB96_373;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB96_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB95_372 & memory_controller_waitrequest == 1'd0 & main_412_413 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB97_374;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB97_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB96_373 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB96_373;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB96_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB96_373 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB97_374;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB97_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB97_374 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB97_374;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB97_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB97_374 & memory_controller_waitrequest == 1'd0 & main_415_416 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB100_377;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB100_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB97_374 & memory_controller_waitrequest == 1'd0 & main_415_416 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB98_375;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB98_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB98_375 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB98_375;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB98_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB98_375 & memory_controller_waitrequest == 1'd0 & main_417_418 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB99_376;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB99_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB98_375 & memory_controller_waitrequest == 1'd0 & main_417_418 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB100_377;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB100_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB99_376 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB99_376;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB99_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB99_376 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB100_377;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB100_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB100_377 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB100_377;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB100_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB100_377 & memory_controller_waitrequest == 1'd0 & main_420_421 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB103_380;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB103_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB100_377 & memory_controller_waitrequest == 1'd0 & main_420_421 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB101_378;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB101_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB101_378 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB101_378;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB101_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB101_378 & memory_controller_waitrequest == 1'd0 & main_422_423 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB102_379;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB102_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB101_378 & memory_controller_waitrequest == 1'd0 & main_422_423 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB103_380;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB103_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB102_379 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB102_379;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB102_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB102_379 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB103_380;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB103_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB103_380 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB103_380;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB103_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB103_380 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB103_381;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB103_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB103_381 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB103_381;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB103_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB103_381 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB103_382;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB103_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB103_382 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB103_382;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB103_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB103_382 & memory_controller_waitrequest == 1'd0 & main_425_exitcond53_i_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB104_383;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB103_382 & memory_controller_waitrequest == 1'd0 & main_425_exitcond53_i_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB94_366;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB94_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_383 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB104_383;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_383 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB104_384;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_384 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB104_384;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_384 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB104_385;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_385 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB104_385;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_385 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB104_386;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_386 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB104_386;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_386 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB104_387;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_387 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB104_387;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_387 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB104_388;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_388 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB104_388;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB104_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB104_388 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB105_389;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB105_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB105_389 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB105_389;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB105_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB105_389 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB105_390;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB105_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB105_390 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB105_390;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB105_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB105_390 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB105_391;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB105_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB105_391 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB105_391;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB105_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB105_391 & memory_controller_waitrequest == 1'd0 & main_432_or_cond_i_i_i_i == 1'd1)
begin
cur_state <= LEGUP_F_main_BB106_392;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB106_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB105_391 & memory_controller_waitrequest == 1'd0 & main_432_or_cond_i_i_i_i == 1'd0)
begin
cur_state <= LEGUP_F_main_BB110_400;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB110_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB106_392 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB106_392;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB106_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB106_392 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB106_393;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB106_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB106_393 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB106_393;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB106_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB106_393 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB106_394;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB106_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB106_394 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB106_394;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB106_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB106_394 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB109_399;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB109_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB107_395 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB107_395;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB107_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB107_395 & memory_controller_waitrequest == 1'd0 & main_439_exitcond93_i_i == 1'd1)
begin
cur_state <= LEGUP_F_main_BB110_400;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB110_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB107_395 & memory_controller_waitrequest == 1'd0 & main_439_exitcond93_i_i == 1'd0)
begin
cur_state <= LEGUP_F_main_BB109_399;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB109_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB108_396 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB108_396;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB108_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB108_396 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB108_397;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB108_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB108_397 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB108_397;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB108_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB108_397 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB108_398;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB108_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB108_398 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB108_398;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB108_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB108_398 & memory_controller_waitrequest == 1'd0 & main_440_exitcond70_i_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB107_395;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB107_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB108_398 & memory_controller_waitrequest == 1'd0 & main_440_exitcond70_i_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB108_396;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB108_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB109_399 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB109_399;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB109_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB109_399 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB108_396;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB108_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB110_400 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB110_400;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB110_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB110_400 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB110_401;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB110_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB110_401 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB110_401;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB110_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB110_401 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB110_402;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB110_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB110_402 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB110_402;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB110_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB110_402 & memory_controller_waitrequest == 1'd0 & main_WriteOneBlock_exit_i_i_i_444 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB112_404;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB112_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB110_402 & memory_controller_waitrequest == 1'd0 & main_WriteOneBlock_exit_i_i_i_444 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB111_403;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB111_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB111_403 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB111_403;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB111_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB111_403 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB112_404;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB112_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB112_404 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB112_404;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB112_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB112_404 & memory_controller_waitrequest == 1'd0 & main_WriteBlock_exit_i_i_exitcond116_i_i == 1'd1)
begin
cur_state <= LEGUP_F_main_BB113_405;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB113_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB112_404 & memory_controller_waitrequest == 1'd0 & main_WriteBlock_exit_i_i_exitcond116_i_i == 1'd0)
begin
cur_state <= LEGUP_F_main_BB105_389;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB105_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB113_405 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB113_405;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB113_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB113_405 & memory_controller_waitrequest == 1'd0 & main_447_448 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB93_357;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB93_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB113_405 & memory_controller_waitrequest == 1'd0 & main_447_448 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB130_454;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB114_406 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB114_406;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB114_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB114_406 & memory_controller_waitrequest == 1'd0 & main_449_451 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB115_407;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB115_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB114_406 & memory_controller_waitrequest == 1'd0 & main_449_451 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB130_454;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB115_407 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB115_407;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB115_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB115_407 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB116_408;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_408 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB116_408;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_408 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_409;
if (^reset !== 1'bX && ^(LEGUP_function_call_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_409 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_409;
if (^reset !== 1'bX && ^(LEGUP_function_call_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_409 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_410;
if (^reset !== 1'bX && ^(LEGUP_function_call_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_409 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_409;
if (^reset !== 1'bX && ^(LEGUP_function_call_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_410 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_410;
if (^reset !== 1'bX && ^(LEGUP_function_call_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_410 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB116_411;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_411 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB116_411;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_411 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_412;
if (^reset !== 1'bX && ^(LEGUP_function_call_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_412 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_412;
if (^reset !== 1'bX && ^(LEGUP_function_call_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_412 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_413;
if (^reset !== 1'bX && ^(LEGUP_function_call_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_412 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_412;
if (^reset !== 1'bX && ^(LEGUP_function_call_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_413 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_413;
if (^reset !== 1'bX && ^(LEGUP_function_call_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_413 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB116_414;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_414 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB116_414;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_414 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_415;
if (^reset !== 1'bX && ^(LEGUP_function_call_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_415 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_415;
if (^reset !== 1'bX && ^(LEGUP_function_call_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_415 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_416;
if (^reset !== 1'bX && ^(LEGUP_function_call_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_415 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_415;
if (^reset !== 1'bX && ^(LEGUP_function_call_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_416 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_416;
if (^reset !== 1'bX && ^(LEGUP_function_call_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_416 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB116_417;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_417 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB116_417;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_417 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_418;
if (^reset !== 1'bX && ^(LEGUP_function_call_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_418 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_418;
if (^reset !== 1'bX && ^(LEGUP_function_call_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_418 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_419;
if (^reset !== 1'bX && ^(LEGUP_function_call_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_418 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_418;
if (^reset !== 1'bX && ^(LEGUP_function_call_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_419 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_419;
if (^reset !== 1'bX && ^(LEGUP_function_call_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_419 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB116_420;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_420 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB116_420;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_420 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_421;
if (^reset !== 1'bX && ^(LEGUP_function_call_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_421 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_421;
if (^reset !== 1'bX && ^(LEGUP_function_call_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_421 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_422;
if (^reset !== 1'bX && ^(LEGUP_function_call_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_421 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_421;
if (^reset !== 1'bX && ^(LEGUP_function_call_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_422 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_422;
if (^reset !== 1'bX && ^(LEGUP_function_call_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_422 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB116_423;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_423 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB116_423;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB116_423 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_424;
if (^reset !== 1'bX && ^(LEGUP_function_call_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_424 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_424;
if (^reset !== 1'bX && ^(LEGUP_function_call_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_424 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_425;
if (^reset !== 1'bX && ^(LEGUP_function_call_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_424 & memory_controller_waitrequest == 1'd0 & decode_block_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_424;
if (^reset !== 1'bX && ^(LEGUP_function_call_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_425 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_425;
if (^reset !== 1'bX && ^(LEGUP_function_call_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_425 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB117_426;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB117_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB117_426 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB117_426;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB117_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB117_426 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB118_427;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_427 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB118_427;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_427 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB118_428;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_428 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB118_428;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_428 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB118_429;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_429 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB118_429;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_429 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB118_430;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_430 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB118_430;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_430 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB118_431;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_431 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB118_431;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_431 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB118_432;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_432 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB118_432;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_432 & memory_controller_waitrequest == 1'd0 & main_454_473 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB121_435;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB121_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB118_432 & memory_controller_waitrequest == 1'd0 & main_454_473 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB119_433;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB119_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB119_433 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB119_433;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB119_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB119_433 & memory_controller_waitrequest == 1'd0 & main_474_475 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB120_434;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB120_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB119_433 & memory_controller_waitrequest == 1'd0 & main_474_475 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB121_435;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB121_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB120_434 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB120_434;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB120_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB120_434 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB121_435;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB121_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB121_435 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB121_435;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB121_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB121_435 & memory_controller_waitrequest == 1'd0 & main_477_478 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB124_438;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB124_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB121_435 & memory_controller_waitrequest == 1'd0 & main_477_478 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB122_436;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB122_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB122_436 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB122_436;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB122_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB122_436 & memory_controller_waitrequest == 1'd0 & main_479_480 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB123_437;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB123_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB122_436 & memory_controller_waitrequest == 1'd0 & main_479_480 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB124_438;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB124_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB123_437 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB123_437;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB123_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB123_437 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB124_438;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB124_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB124_438 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB124_438;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB124_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB124_438 & memory_controller_waitrequest == 1'd0 & main_482_483 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB127_441;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB127_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB124_438 & memory_controller_waitrequest == 1'd0 & main_482_483 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB125_439;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB125_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB125_439 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB125_439;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB125_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB125_439 & memory_controller_waitrequest == 1'd0 & main_484_485 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB126_440;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB126_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB125_439 & memory_controller_waitrequest == 1'd0 & main_484_485 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB127_441;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB127_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB126_440 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB126_440;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB126_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB126_440 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB127_441;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB127_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB127_441 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB127_441;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB127_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB127_441 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB127_442;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB127_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB127_442 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB127_442;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB127_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB127_442 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB127_443;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB127_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB127_443 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB127_443;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB127_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB127_443 & memory_controller_waitrequest == 1'd0 & main_487_exitcond_i_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB128_444;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB128_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB127_443 & memory_controller_waitrequest == 1'd0 & main_487_exitcond_i_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB118_427;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB118_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB128_444 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB128_444;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB128_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB128_444 & memory_controller_waitrequest == 1'd0 & main_YuvToRgb_exit13_i_i_exitcond35_i_i == 1'd1)
begin
cur_state <= LEGUP_F_main_BB129_445;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB129_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB128_444 & memory_controller_waitrequest == 1'd0 & main_YuvToRgb_exit13_i_i_exitcond35_i_i == 1'd0)
begin
cur_state <= LEGUP_F_main_BB117_426;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB117_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB129_445 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB129_445;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB129_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB129_445 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_446;
if (^reset !== 1'bX && ^(LEGUP_function_call_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_446 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_446;
if (^reset !== 1'bX && ^(LEGUP_function_call_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_446 & memory_controller_waitrequest == 1'd0 & Write4Blocks_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_447;
if (^reset !== 1'bX && ^(LEGUP_function_call_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_446 & memory_controller_waitrequest == 1'd0 & Write4Blocks_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_446;
if (^reset !== 1'bX && ^(LEGUP_function_call_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_447 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_447;
if (^reset !== 1'bX && ^(LEGUP_function_call_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_447 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB129_448;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB129_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB129_448 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB129_448;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB129_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB129_448 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_449;
if (^reset !== 1'bX && ^(LEGUP_function_call_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_449 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_449;
if (^reset !== 1'bX && ^(LEGUP_function_call_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_449 & memory_controller_waitrequest == 1'd0 & Write4Blocks_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_450;
if (^reset !== 1'bX && ^(LEGUP_function_call_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_449 & memory_controller_waitrequest == 1'd0 & Write4Blocks_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_449;
if (^reset !== 1'bX && ^(LEGUP_function_call_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_450 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_450;
if (^reset !== 1'bX && ^(LEGUP_function_call_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_450 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB129_451;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB129_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB129_451 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB129_451;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB129_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB129_451 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_function_call_452;
if (^reset !== 1'bX && ^(LEGUP_function_call_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_452 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_452;
if (^reset !== 1'bX && ^(LEGUP_function_call_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_452 & memory_controller_waitrequest == 1'd0 & Write4Blocks_finish == 1'd1)
begin
cur_state <= LEGUP_function_call_453;
if (^reset !== 1'bX && ^(LEGUP_function_call_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_452 & memory_controller_waitrequest == 1'd0 & Write4Blocks_finish == 1'd0)
begin
cur_state <= LEGUP_function_call_452;
if (^reset !== 1'bX && ^(LEGUP_function_call_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_453 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_function_call_453;
if (^reset !== 1'bX && ^(LEGUP_function_call_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_453 & memory_controller_waitrequest == 1'd0 & main__loopexit_i_i_490_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB116_408;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB116_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_function_call_453 & memory_controller_waitrequest == 1'd0 & main__loopexit_i_i_490_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB130_454;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB130_454 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB130_454;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB130_454 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB130_455;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB130_455 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB130_455;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB130_455 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB130_456;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB130_456 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB130_456;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB130_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB130_456 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB131_457;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_457 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB131_457;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_457 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB131_458;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_458 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB131_458;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_458 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB131_459;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_459 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB131_459;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_459 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB131_460;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_460 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB131_460;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_460 & memory_controller_waitrequest == 1'd0 & main_491_exitcond_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB132_461;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB131_460 & memory_controller_waitrequest == 1'd0 & main_491_exitcond_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB131_457;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB131_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_461 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB132_461;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_461 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB132_462;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_462 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB132_462;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_462 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB132_463;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_463 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB132_463;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_463 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB132_464;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_464 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB132_464;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_464 & memory_controller_waitrequest == 1'd0 & main__preheader_1_i_exitcond_1_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB134_469;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB132_464 & memory_controller_waitrequest == 1'd0 & main__preheader_1_i_exitcond_1_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB132_461;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB132_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_465 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB133_465;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB133_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_465 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB133_466;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB133_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_466 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB133_466;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB133_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_466 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB133_467;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB133_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_467 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB133_467;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB133_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_467 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB133_468;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB133_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_468 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB133_468;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB133_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_468 & memory_controller_waitrequest == 1'd0 & main_jpeg2bmp_main_exit_512 == 1'd1)
begin
cur_state <= LEGUP_F_main_BB135_473;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB135_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB133_468 & memory_controller_waitrequest == 1'd0 & main_jpeg2bmp_main_exit_512 == 1'd0)
begin
cur_state <= LEGUP_F_main_BB136_474;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB136_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_469 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB134_469;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_469 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB134_470;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_470 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB134_470;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_470 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB134_471;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_471 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB134_471;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_471 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB134_472;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_472 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB134_472;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_472 & memory_controller_waitrequest == 1'd0 & main__preheader_2_i_exitcond_2_i_reg == 1'd1)
begin
cur_state <= LEGUP_F_main_BB133_465;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB133_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB134_472 & memory_controller_waitrequest == 1'd0 & main__preheader_2_i_exitcond_2_i_reg == 1'd0)
begin
cur_state <= LEGUP_F_main_BB134_469;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB134_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB135_473 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB135_473;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB135_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB135_473 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB137_475;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB137_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB136_474 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB136_474;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB136_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB136_474 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB137_475;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB137_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB137_475 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB137_475;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB137_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB137_475 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB137_476;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB137_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB137_476 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB137_476;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB137_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB137_476 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_F_main_BB137_477;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB137_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB137_477 & memory_controller_waitrequest == 1'd1)
begin
cur_state <= LEGUP_F_main_BB137_477;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB137_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (cur_state == LEGUP_F_main_BB137_477 & memory_controller_waitrequest == 1'd0)
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %i.05.i = phi i32 [ 0, %0 ], [ %3, %1 ]*/
begin
main_1_i_05_i = main_1_i_05_i_phi_temp;
end
end
always @(*) begin
/* main: %1*/
/*   %c.06.i = getelementptr [5310 x i8]* @JpegFileBuf, i32 0, i32 %i.05.i*/
begin
main_1_c_06_i = `TAG_g_JpegFileBuf_a + 1 * main_1_i_05_i;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %c.06.i = getelementptr [5310 x i8]* @JpegFileBuf, i32 0, i32 %i.05.i*/
if (cur_state == LEGUP_F_main_BB1_2)
begin
main_1_c_06_i_reg <= main_1_c_06_i;
if (^reset !== 1'bX && ^(main_1_c_06_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_c_06_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %scevgep13.i = getelementptr [5207 x i8]* @hana_jpg, i32 0, i32 %i.05.i*/
begin
main_1_scevgep13_i = `TAG_g_hana_jpg_a + 1 * main_1_i_05_i;
end
end
always @(*) begin
/* main: %1*/
/*   %2 = load i8* %scevgep13.i, align 1, !tbaa !1*/
begin
main_1_2 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %1*/
/*   %3 = add nsw i32 %i.05.i, 1*/
begin
main_1_3 = main_1_i_05_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %3 = add nsw i32 %i.05.i, 1*/
if (cur_state == LEGUP_F_main_BB1_2)
begin
main_1_3_reg <= main_1_3;
if (^reset !== 1'bX && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %exitcond11.i = icmp eq i32 %3, 5207*/
begin
main_1_exitcond11_i = main_1_3 == 32'd5207;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %exitcond11.i = icmp eq i32 %3, 5207*/
if (cur_state == LEGUP_F_main_BB1_2)
begin
main_1_exitcond11_i_reg <= main_1_exitcond11_i;
if (^reset !== 1'bX && ^(main_1_exitcond11_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond11_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.outer.i.i*/
/*   %i_marker.0 = phi i32 [ 0, %1 ], [ %24, %31 ]*/
begin
main__outer_i_i_i_marker_0 = main__outer_i_i_i_marker_0_phi_temp;
end
end
always @(*) begin
/* main: %.outer.i.i*/
/*   %i_get_dht.0 = phi i32 [ 0, %1 ], [ %i_get_dht.1.ph, %31 ]*/
begin
main__outer_i_i_i_get_dht_0 = main__outer_i_i_i_get_dht_0_phi_temp;
end
end
always @(*) begin
/* main: %.outer.i.i*/
/*   %i_get_dqt.0 = phi i32 [ 0, %1 ], [ %i_get_dqt.1.ph6, %31 ]*/
begin
main__outer_i_i_i_get_dqt_0 = main__outer_i_i_i_get_dqt_0_phi_temp;
end
end
always @(*) begin
/* main: %.outer.i.i*/
/*   %ReadBuf.0 = phi i8* [ getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), %1 ], [ %ReadBuf.2, %31 ]*/
begin
main__outer_i_i_ReadBuf_0 = main__outer_i_i_ReadBuf_0_phi_temp;
end
end
always @(*) begin
/* main: %.outer.i.i*/
/*   %p_jinfo_num_components.0 = phi i8 [ 0, %1 ], [ %p_jinfo_num_components.1.ph13, %31 ]*/
begin
main__outer_i_i_p_jinfo_num_components_0 = main__outer_i_i_p_jinfo_num_components_0_phi_temp;
end
end
always @(*) begin
/* main: %.outer.i.i*/
/*   %p_jinfo_smp_fact.b.0 = phi i1 [ false, %1 ], [ %p_jinfo_smp_fact.b.1.ph14, %31 ]*/
begin
main__outer_i_i_p_jinfo_smp_fact_b_0 = main__outer_i_i_p_jinfo_smp_fact_b_0_phi_temp;
end
end
always @(*) begin
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
if (cur_state == LEGUP_F_main_BB2_5)
begin
main__outer_i_i_sow_SOI_0_ph_i_i = main__outer_i_i_sow_SOI_0_ph_i_i_phi_temp;
end
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
else if (cur_state == LEGUP_F_main_BB2_5)
begin
main__outer_i_i_sow_SOI_0_ph_i_i = main__outer_i_i_sow_SOI_0_ph_i_i_phi_temp;
end
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
else /* if (cur_state == LEGUP_F_main_BB2_5) */
begin
main__outer_i_i_sow_SOI_0_ph_i_i = main__outer_i_i_sow_SOI_0_ph_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
if (cur_state == LEGUP_F_main_BB2_5)
begin
main__outer_i_i_sow_SOI_0_ph_i_i_reg <= main__outer_i_i_sow_SOI_0_ph_i_i;
if (^reset !== 1'bX && ^(main__outer_i_i_sow_SOI_0_ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_sow_SOI_0_ph_i_i_reg"); $finish; end
end
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
if (cur_state == LEGUP_F_main_BB2_5)
begin
main__outer_i_i_sow_SOI_0_ph_i_i_reg <= main__outer_i_i_sow_SOI_0_ph_i_i;
if (^reset !== 1'bX && ^(main__outer_i_i_sow_SOI_0_ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_sow_SOI_0_ph_i_i_reg"); $finish; end
end
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
if (cur_state == LEGUP_F_main_BB2_5)
begin
main__outer_i_i_sow_SOI_0_ph_i_i_reg <= main__outer_i_i_sow_SOI_0_ph_i_i;
if (^reset !== 1'bX && ^(main__outer_i_i_sow_SOI_0_ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_sow_SOI_0_ph_i_i_reg"); $finish; end
end
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
if (cur_state == LEGUP_F_main_BB2_5)
begin
main__outer_i_i_sow_SOI_0_ph_i_i_reg <= main__outer_i_i_sow_SOI_0_ph_i_i;
if (^reset !== 1'bX && ^(main__outer_i_i_sow_SOI_0_ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_sow_SOI_0_ph_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.i.i.outer*/
/*   %i_marker.1.ph = phi i32 [ %i_marker.0, %.outer.i.i ], [ %24, %._crit_edge.i12.i.i ]*/
begin
main__backedge_i_i_outer_i_marker_1_ph = main__backedge_i_i_outer_i_marker_1_ph_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6)
begin
main__backedge_i_i_outer_i_get_dht_1_ph = main__backedge_i_i_outer_i_get_dht_1_ph_phi_temp;
end
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
else if (cur_state == LEGUP_F_main_BB3_6)
begin
main__backedge_i_i_outer_i_get_dht_1_ph = main__backedge_i_i_outer_i_get_dht_1_ph_phi_temp;
end
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB3_6) */
begin
main__backedge_i_i_outer_i_get_dht_1_ph = main__backedge_i_i_outer_i_get_dht_1_ph_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6)
begin
main__backedge_i_i_outer_i_get_dht_1_ph_reg <= main__backedge_i_i_outer_i_get_dht_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_i_get_dht_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_get_dht_1_ph_reg"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6)
begin
main__backedge_i_i_outer_i_get_dht_1_ph_reg <= main__backedge_i_i_outer_i_get_dht_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_i_get_dht_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_get_dht_1_ph_reg"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6)
begin
main__backedge_i_i_outer_i_get_dht_1_ph_reg <= main__backedge_i_i_outer_i_get_dht_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_i_get_dht_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_get_dht_1_ph_reg"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6)
begin
main__backedge_i_i_outer_i_get_dht_1_ph_reg <= main__backedge_i_i_outer_i_get_dht_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_i_get_dht_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_get_dht_1_ph_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.i.i.outer*/
/*   %i_get_dqt.1.ph = phi i32 [ %i_get_dqt.0, %.outer.i.i ], [ %i_get_dqt.1.ph6, %._crit_edge.i12.i.i ]*/
begin
main__backedge_i_i_outer_i_get_dqt_1_ph = main__backedge_i_i_outer_i_get_dqt_1_ph_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer*/
/*   %ReadBuf.1.ph = phi i8* [ %ReadBuf.0, %.outer.i.i ], [ %ReadBuf.7, %._crit_edge.i12.i.i ]*/
begin
main__backedge_i_i_outer_ReadBuf_1_ph = main__backedge_i_i_outer_ReadBuf_1_ph_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer*/
/*   %p_jinfo_num_components.1.ph = phi i8 [ %p_jinfo_num_components.0, %.outer.i.i ], [ %p_jinfo_num_components.1.ph13, %._crit_edge.i12.i.i ]*/
begin
main__backedge_i_i_outer_p_jinfo_num_components_1_ph = main__backedge_i_i_outer_p_jinfo_num_components_1_ph_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer*/
/*   %p_jinfo_smp_fact.b.1.ph = phi i1 [ %p_jinfo_smp_fact.b.0, %.outer.i.i ], [ %p_jinfo_smp_fact.b.1.ph14, %._crit_edge.i12.i.i ]*/
begin
main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph = main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer*/
/*   %4 = getelementptr inbounds [4 x i32]* @out_length_get_dht, i32 0, i32 %i_get_dht.1.ph*/
begin
main__backedge_i_i_outer_4 = `TAG_g_out_length_get_dht_a + 4 * main__backedge_i_i_outer_i_get_dht_1_ph;
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer*/
/*   %4 = getelementptr inbounds [4 x i32]* @out_length_get_dht, i32 0, i32 %i_get_dht.1.ph*/
if (cur_state == LEGUP_F_main_BB3_6)
begin
main__backedge_i_i_outer_4_reg <= main__backedge_i_i_outer_4;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.i.i.outer4*/
/*   %i_marker.1.ph5 = phi i32 [ %i_marker.1.ph, %.backedge.i.i.outer ], [ %24, %.us-lcssa.us.i.i.i ]*/
begin
main__backedge_i_i_outer4_i_marker_1_ph5 = main__backedge_i_i_outer4_i_marker_1_ph5_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6 = main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp;
end
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
else if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6 = main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp;
end
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
else if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6 = main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp;
end
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB4_7) */
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6 = main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg <= main__backedge_i_i_outer4_i_get_dqt_1_ph6;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_get_dqt_1_ph6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg <= main__backedge_i_i_outer4_i_get_dqt_1_ph6;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_get_dqt_1_ph6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg <= main__backedge_i_i_outer4_i_get_dqt_1_ph6;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_get_dqt_1_ph6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg <= main__backedge_i_i_outer4_i_get_dqt_1_ph6;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_get_dqt_1_ph6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg <= main__backedge_i_i_outer4_i_get_dqt_1_ph6;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_get_dqt_1_ph6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.i.i.outer4*/
/*   %ReadBuf.1.ph7 = phi i8* [ %ReadBuf.1.ph, %.backedge.i.i.outer ], [ %ReadBuf.8, %.us-lcssa.us.i.i.i ]*/
begin
main__backedge_i_i_outer4_ReadBuf_1_ph7 = main__backedge_i_i_outer4_ReadBuf_1_ph7_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer4*/
/*   %p_jinfo_num_components.1.ph8 = phi i8 [ %p_jinfo_num_components.1.ph, %.backedge.i.i.outer ], [ %p_jinfo_num_components.1.ph13, %.us-lcssa.us.i.i.i ]*/
begin
main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8 = main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer4*/
/*   %p_jinfo_smp_fact.b.1.ph9 = phi i1 [ %p_jinfo_smp_fact.b.1.ph, %.backedge.i.i.outer ], [ %p_jinfo_smp_fact.b.1.ph14, %.us-lcssa.us.i.i.i ]*/
begin
main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9 = main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer4*/
/*   %5 = getelementptr inbounds [2 x i32]* @out_length_get_dqt, i32 0, i32 %i_get_dqt.1.ph6*/
begin
main__backedge_i_i_outer4_5 = `TAG_g_out_length_get_dqt_a + 4 * main__backedge_i_i_outer4_i_get_dqt_1_ph6;
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer4*/
/*   %5 = getelementptr inbounds [2 x i32]* @out_length_get_dqt, i32 0, i32 %i_get_dqt.1.ph6*/
if (cur_state == LEGUP_F_main_BB4_7)
begin
main__backedge_i_i_outer4_5_reg <= main__backedge_i_i_outer4_5;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.i.i.outer10*/
/*   %i_marker.1.ph11 = phi i32 [ %i_marker.1.ph5, %.backedge.i.i.outer4 ], [ %24, %163 ], [ %24, %165 ]*/
begin
main__backedge_i_i_outer10_i_marker_1_ph11 = main__backedge_i_i_outer10_i_marker_1_ph11_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer10*/
/*   %ReadBuf.1.ph12 = phi i8* [ %ReadBuf.1.ph7, %.backedge.i.i.outer4 ], [ %ReadBuf.4, %163 ], [ %ReadBuf.4, %165 ]*/
begin
main__backedge_i_i_outer10_ReadBuf_1_ph12 = main__backedge_i_i_outer10_ReadBuf_1_ph12_phi_temp;
end
end
always @(*) begin
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13 = main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
else if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13 = main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
else if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13 = main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
else if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13 = main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
else /* if (cur_state == LEGUP_F_main_BB5_8) */
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13 = main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14 = main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
else if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14 = main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
else if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14 = main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
else if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14 = main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
else if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14 = main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp;
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
else /* if (cur_state == LEGUP_F_main_BB5_8) */
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14 = main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB5_8)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_i_marker_1 = main__backedge_i_i_i_marker_1_phi_temp;
end
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
else if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_i_marker_1 = main__backedge_i_i_i_marker_1_phi_temp;
end
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB6_9) */
begin
main__backedge_i_i_i_marker_1 = main__backedge_i_i_i_marker_1_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_i_marker_1_reg <= main__backedge_i_i_i_marker_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_i_marker_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_i_marker_1_reg"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_i_marker_1_reg <= main__backedge_i_i_i_marker_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_i_marker_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_i_marker_1_reg"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_i_marker_1_reg <= main__backedge_i_i_i_marker_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_i_marker_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_i_marker_1_reg"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_i_marker_1_reg <= main__backedge_i_i_i_marker_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_i_marker_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_i_marker_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_ReadBuf_1 = main__backedge_i_i_ReadBuf_1_phi_temp;
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
else if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_ReadBuf_1 = main__backedge_i_i_ReadBuf_1_phi_temp;
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
else if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_ReadBuf_1 = main__backedge_i_i_ReadBuf_1_phi_temp;
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB6_9) */
begin
main__backedge_i_i_ReadBuf_1 = main__backedge_i_i_ReadBuf_1_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_ReadBuf_1_reg <= main__backedge_i_i_ReadBuf_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_ReadBuf_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_reg"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_ReadBuf_1_reg <= main__backedge_i_i_ReadBuf_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_ReadBuf_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_reg"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_ReadBuf_1_reg <= main__backedge_i_i_ReadBuf_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_ReadBuf_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_reg"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_ReadBuf_1_reg <= main__backedge_i_i_ReadBuf_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_ReadBuf_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_reg"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9)
begin
main__backedge_i_i_ReadBuf_1_reg <= main__backedge_i_i_ReadBuf_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_ReadBuf_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %6*/
/*   %7 = getelementptr inbounds i8* %ReadBuf.1, i32 1*/
begin
main_6_7 = main__backedge_i_i_ReadBuf_1_reg + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %6*/
/*   %7 = getelementptr inbounds i8* %ReadBuf.1, i32 1*/
if (cur_state == LEGUP_F_main_BB7_10)
begin
main_6_7_reg <= main_6_7;
if (^reset !== 1'bX && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %6*/
/*   %8 = load i8* %ReadBuf.1, align 1, !tbaa !1*/
begin
main_6_8 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %6*/
/*   %9 = load i8* %7, align 1, !tbaa !1*/
begin
main_6_9 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* main: %6*/
/*   %9 = load i8* %7, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_13)
begin
main_6_9_reg <= main_6_9;
if (^reset !== 1'bX && ^(main_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %6*/
/*   %10 = icmp eq i8 %8, -1*/
begin
main_6_10 = main_6_8 == -8'd1;
end
end
always @(posedge clk) begin
/* main: %6*/
/*   %10 = icmp eq i8 %8, -1*/
if (cur_state == LEGUP_F_main_BB7_12)
begin
main_6_10_reg <= main_6_10;
if (^reset !== 1'bX && ^(main_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %6*/
/*   %11 = icmp eq i8 %9, -40*/
begin
main_6_11 = main_6_9 == -8'd40;
end
end
always @(*) begin
/* main: %6*/
/*   %or.cond.i.i.i = and i1 %10, %11*/
begin
main_6_or_cond_i_i_i = main_6_10_reg & main_6_11;
end
end
always @(*) begin
/* main: %first_marker.exit.i.i*/
/*   %14 = getelementptr inbounds i8* %ReadBuf.1, i32 2*/
begin
main_first_marker_exit_i_i_14 = main__backedge_i_i_ReadBuf_1_reg + 1 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %first_marker.exit.i.i*/
/*   %14 = getelementptr inbounds i8* %ReadBuf.1, i32 2*/
if (cur_state == LEGUP_F_main_BB9_15)
begin
main_first_marker_exit_i_i_14_reg <= main_first_marker_exit_i_i_14;
if (^reset !== 1'bX && ^(main_first_marker_exit_i_i_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_first_marker_exit_i_i_14_reg"); $finish; end
end
end
always @(*) begin
/* main: %first_marker.exit.i.i*/
/*   %15 = zext i8 %9 to i32*/
begin
main_first_marker_exit_i_i_15 = main_6_9_reg;
end
end
always @(posedge clk) begin
/* main: %first_marker.exit.i.i*/
/*   %15 = zext i8 %9 to i32*/
if (cur_state == LEGUP_F_main_BB9_15)
begin
main_first_marker_exit_i_i_15_reg <= main_first_marker_exit_i_i_15;
if (^reset !== 1'bX && ^(main_first_marker_exit_i_i_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_first_marker_exit_i_i_15_reg"); $finish; end
end
end
always @(*) begin
/* main: %first_marker.exit.i.i*/
/*   %16 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_first_marker_exit_i_i_16 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %first_marker.exit.i.i*/
/*   %17 = add nsw i32 %16, 1*/
begin
main_first_marker_exit_i_i_17 = main_first_marker_exit_i_i_16 + 32'd1;
end
end
always @(*) begin
/* main: %.loopexit3.i.i.i.loopexit*/
/*   %scevgep13.i.i.le = getelementptr i8* %.ph.i.i, i32 %tmp12.i.i*/
begin
main__loopexit3_i_i_i_loopexit_scevgep13_i_i_le = main__loopexit_i_preheader_i_i__ph_i_i_reg + 1 * main__loopexit_i_i_i_tmp12_i_i_reg;
end
end
always @(*) begin
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
main__loopexit3_i_i_i_18 = main__loopexit3_i_i_i_18_phi_temp;
end
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
else if (cur_state == LEGUP_F_main_BB11_19)
begin
main__loopexit3_i_i_i_18 = main__loopexit3_i_i_i_18_phi_temp;
end
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB11_19) */
begin
main__loopexit3_i_i_i_18 = main__loopexit3_i_i_i_18_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
main__loopexit3_i_i_i_18_reg <= main__loopexit3_i_i_i_18;
if (^reset !== 1'bX && ^(main__loopexit3_i_i_i_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit3_i_i_i_18_reg"); $finish; end
end
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
main__loopexit3_i_i_i_18_reg <= main__loopexit3_i_i_i_18;
if (^reset !== 1'bX && ^(main__loopexit3_i_i_i_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit3_i_i_i_18_reg"); $finish; end
end
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
main__loopexit3_i_i_i_18_reg <= main__loopexit3_i_i_i_18;
if (^reset !== 1'bX && ^(main__loopexit3_i_i_i_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit3_i_i_i_18_reg"); $finish; end
end
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
main__loopexit3_i_i_i_18_reg <= main__loopexit3_i_i_i_18;
if (^reset !== 1'bX && ^(main__loopexit3_i_i_i_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit3_i_i_i_18_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit3.i.i.i*/
/*   %storemerge1.i.i.i = getelementptr inbounds i8* %18, i32 1*/
begin
main__loopexit3_i_i_i_storemerge1_i_i_i = main__loopexit3_i_i_i_18 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %.loopexit3.i.i.i*/
/*   %storemerge1.i.i.i = getelementptr inbounds i8* %18, i32 1*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
main__loopexit3_i_i_i_storemerge1_i_i_i_reg <= main__loopexit3_i_i_i_storemerge1_i_i_i;
if (^reset !== 1'bX && ^(main__loopexit3_i_i_i_storemerge1_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit3_i_i_i_storemerge1_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit3.i.i.i*/
/*   %c.0.in2.i.i.i = load i8* %18, align 1*/
begin
main__loopexit3_i_i_i_c_0_in2_i_i_i = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.loopexit3.i.i.i*/
/*   %19 = icmp eq i8 %c.0.in2.i.i.i, -1*/
begin
main__loopexit3_i_i_i_19 = main__loopexit3_i_i_i_c_0_in2_i_i_i == -8'd1;
end
end
always @(*) begin
/* main: %.lr.ph.i.i.i*/
/*   %indvar.i.i = phi i32 [ %tmp.i.i, %.lr.ph.i.i.i ], [ 0, %.loopexit3.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
main__lr_ph_i_i_i_indvar_i_i = main__lr_ph_i_i_i_indvar_i_i_phi_temp;
end
/* main: %.lr.ph.i.i.i*/
/*   %indvar.i.i = phi i32 [ %tmp.i.i, %.lr.ph.i.i.i ], [ 0, %.loopexit3.i.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB12_22) */
begin
main__lr_ph_i_i_i_indvar_i_i = main__lr_ph_i_i_i_indvar_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i.i.i*/
/*   %indvar.i.i = phi i32 [ %tmp.i.i, %.lr.ph.i.i.i ], [ 0, %.loopexit3.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
main__lr_ph_i_i_i_indvar_i_i_reg <= main__lr_ph_i_i_i_indvar_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i_i_i_indvar_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_i_i_indvar_i_i_reg"); $finish; end
end
/* main: %.lr.ph.i.i.i*/
/*   %indvar.i.i = phi i32 [ %tmp.i.i, %.lr.ph.i.i.i ], [ 0, %.loopexit3.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
main__lr_ph_i_i_i_indvar_i_i_reg <= main__lr_ph_i_i_i_indvar_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i_i_i_indvar_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_i_i_indvar_i_i_reg"); $finish; end
end
/* main: %.lr.ph.i.i.i*/
/*   %indvar.i.i = phi i32 [ %tmp.i.i, %.lr.ph.i.i.i ], [ 0, %.loopexit3.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
main__lr_ph_i_i_i_indvar_i_i_reg <= main__lr_ph_i_i_i_indvar_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i_i_i_indvar_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_i_i_indvar_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i.i.i*/
/*   %tmp.i.i = add i32 %indvar.i.i, 1*/
begin
main__lr_ph_i_i_i_tmp_i_i = main__lr_ph_i_i_i_indvar_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i.i.i*/
/*   %tmp.i.i = add i32 %indvar.i.i, 1*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
main__lr_ph_i_i_i_tmp_i_i_reg <= main__lr_ph_i_i_i_tmp_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i_i_i_tmp_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_i_i_tmp_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i.i.i*/
/*   %scevgep.i.i = getelementptr i8* %18, i32 %tmp.i.i*/
begin
main__lr_ph_i_i_i_scevgep_i_i = main__loopexit3_i_i_i_18_reg + 1 * main__lr_ph_i_i_i_tmp_i_i;
end
end
always @(*) begin
/* main: %.lr.ph.i.i.i*/
/*   %c.0.in.i.i.i = load i8* %scevgep.i.i, align 1*/
begin
main__lr_ph_i_i_i_c_0_in_i_i_i = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i.i.i*/
/*   %20 = icmp eq i8 %c.0.in.i.i.i, -1*/
begin
main__lr_ph_i_i_i_20 = main__lr_ph_i_i_i_c_0_in_i_i_i == -8'd1;
end
end
always @(*) begin
/* main: %.loopexit.i.preheader.i.i.loopexit*/
/*   %tmp4.i.i = add i32 %indvar.i.i, 2*/
begin
main__loopexit_i_preheader_i_i_loopexit_tmp4_i_i = main__lr_ph_i_i_i_indvar_i_i_reg + 32'd2;
end
end
always @(*) begin
/* main: %.loopexit.i.preheader.i.i.loopexit*/
/*   %storemerge.i.i.i = getelementptr i8* %18, i32 %tmp4.i.i*/
begin
main__loopexit_i_preheader_i_i_loopexit_storemerge_i_i_i = main__loopexit3_i_i_i_18_reg + 1 * main__loopexit_i_preheader_i_i_loopexit_tmp4_i_i;
end
end
always @(*) begin
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB14_26)
begin
main__loopexit_i_preheader_i_i__ph_i_i = main__loopexit_i_preheader_i_i__ph_i_i_phi_temp;
end
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB14_26)
begin
main__loopexit_i_preheader_i_i__ph_i_i = main__loopexit_i_preheader_i_i__ph_i_i_phi_temp;
end
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB14_26)
begin
main__loopexit_i_preheader_i_i__ph_i_i = main__loopexit_i_preheader_i_i__ph_i_i_phi_temp;
end
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
else /* if (cur_state == LEGUP_F_main_BB14_26) */
begin
main__loopexit_i_preheader_i_i__ph_i_i = main__loopexit_i_preheader_i_i__ph_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB14_26)
begin
main__loopexit_i_preheader_i_i__ph_i_i_reg <= main__loopexit_i_preheader_i_i__ph_i_i;
if (^reset !== 1'bX && ^(main__loopexit_i_preheader_i_i__ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_preheader_i_i__ph_i_i_reg"); $finish; end
end
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB14_26)
begin
main__loopexit_i_preheader_i_i__ph_i_i_reg <= main__loopexit_i_preheader_i_i__ph_i_i;
if (^reset !== 1'bX && ^(main__loopexit_i_preheader_i_i__ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_preheader_i_i__ph_i_i_reg"); $finish; end
end
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB14_26)
begin
main__loopexit_i_preheader_i_i__ph_i_i_reg <= main__loopexit_i_preheader_i_i__ph_i_i;
if (^reset !== 1'bX && ^(main__loopexit_i_preheader_i_i__ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_preheader_i_i__ph_i_i_reg"); $finish; end
end
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB14_26)
begin
main__loopexit_i_preheader_i_i__ph_i_i_reg <= main__loopexit_i_preheader_i_i__ph_i_i;
if (^reset !== 1'bX && ^(main__loopexit_i_preheader_i_i__ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_preheader_i_i__ph_i_i_reg"); $finish; end
end
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB14_26)
begin
main__loopexit_i_preheader_i_i__ph_i_i_reg <= main__loopexit_i_preheader_i_i__ph_i_i;
if (^reset !== 1'bX && ^(main__loopexit_i_preheader_i_i__ph_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_preheader_i_i__ph_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit.i.i.i*/
/*   %indvar9.i.i = phi i32 [ 0, %.loopexit.i.preheader.i.i ], [ %tmp12.i.i, %.loopexit.i.i.i ]*/
begin
main__loopexit_i_i_i_indvar9_i_i = main__loopexit_i_i_i_indvar9_i_i_phi_temp;
end
end
always @(*) begin
/* main: %.loopexit.i.i.i*/
/*   %scevgep11.i.i = getelementptr i8* %.ph.i.i, i32 %indvar9.i.i*/
begin
main__loopexit_i_i_i_scevgep11_i_i = main__loopexit_i_preheader_i_i__ph_i_i_reg + 1 * main__loopexit_i_i_i_indvar9_i_i;
end
end
always @(*) begin
/* main: %.loopexit.i.i.i*/
/*   %tmp12.i.i = add i32 %indvar9.i.i, 1*/
begin
main__loopexit_i_i_i_tmp12_i_i = main__loopexit_i_i_i_indvar9_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i.i*/
/*   %tmp12.i.i = add i32 %indvar9.i.i, 1*/
if (cur_state == LEGUP_F_main_BB15_27)
begin
main__loopexit_i_i_i_tmp12_i_i_reg <= main__loopexit_i_i_i_tmp12_i_i;
if (^reset !== 1'bX && ^(main__loopexit_i_i_i_tmp12_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_i_i_tmp12_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit.i.i.i*/
/*   %21 = load i8* %scevgep11.i.i, align 1, !tbaa !1*/
begin
main__loopexit_i_i_i_21 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.loopexit.i.i.i*/
/*   %22 = zext i8 %21 to i32*/
begin
main__loopexit_i_i_i_22 = main__loopexit_i_i_i_21;
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i.i*/
/*   %22 = zext i8 %21 to i32*/
if (cur_state == LEGUP_F_main_BB15_29)
begin
main__loopexit_i_i_i_22_reg <= main__loopexit_i_i_i_22;
if (^reset !== 1'bX && ^(main__loopexit_i_i_i_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_i_i_22_reg"); $finish; end
end
end
always @(*) begin
/* main: %next_marker.exit.i.i.loopexit*/
/*   %scevgep13.i.i = getelementptr i8* %.ph.i.i, i32 %tmp12.i.i*/
begin
main_next_marker_exit_i_i_loopexit_scevgep13_i_i = main__loopexit_i_preheader_i_i__ph_i_i_reg + 1 * main__loopexit_i_i_i_tmp12_i_i_reg;
end
end
always @(*) begin
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
else /* if (cur_state == LEGUP_F_main_BB17_31) */
begin
main_next_marker_exit_i_i_ReadBuf_2 = main_next_marker_exit_i_i_ReadBuf_2_phi_temp;
end
end
always @(posedge clk) begin
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_ReadBuf_2_reg <= main_next_marker_exit_i_i_ReadBuf_2;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
else /* if (cur_state == LEGUP_F_main_BB17_31) */
begin
main_next_marker_exit_i_i_unread_marker_0_i_i = main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_reg <= main_next_marker_exit_i_i_unread_marker_0_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_unread_marker_0_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %next_marker.exit.i.i*/
/*   %24 = add nsw i32 %i_marker.1, 1*/
begin
main_next_marker_exit_i_i_24 = main__backedge_i_i_i_marker_1_reg + 32'd1;
end
end
always @(posedge clk) begin
/* main: %next_marker.exit.i.i*/
/*   %24 = add nsw i32 %i_marker.1, 1*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_24_reg <= main_next_marker_exit_i_i_24;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_24_reg"); $finish; end
end
end
always @(*) begin
/* main: %next_marker.exit.i.i*/
/*   %25 = getelementptr inbounds [10 x i32]* @out_unread_marker, i32 0, i32 %i_marker.1*/
begin
main_next_marker_exit_i_i_25 = `TAG_g_out_unread_marker_a + 4 * main__backedge_i_i_i_marker_1_reg;
end
end
always @(posedge clk) begin
/* main: %next_marker.exit.i.i*/
/*   %25 = getelementptr inbounds [10 x i32]* @out_unread_marker, i32 0, i32 %i_marker.1*/
if (cur_state == LEGUP_F_main_BB17_31)
begin
main_next_marker_exit_i_i_25_reg <= main_next_marker_exit_i_i_25;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_25_reg"); $finish; end
end
end
always @(*) begin
/* main: %next_marker.exit.i.i*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
begin
main_next_marker_exit_i_i_26 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %next_marker.exit.i.i*/
/*   %27 = icmp eq i32 %unread_marker.0.i.i, %26*/
begin
main_next_marker_exit_i_i_27 = main_next_marker_exit_i_i_unread_marker_0_i_i_reg == main_next_marker_exit_i_i_26;
end
end
always @(*) begin
/* main: %28*/
/*   %29 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_28_29 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %28*/
/*   %30 = add nsw i32 %29, 1*/
begin
main_28_30 = main_28_29 + 32'd1;
end
end
always @(*) begin
/* main: %32*/
/*   %33 = getelementptr inbounds i8* %ReadBuf.2, i32 1*/
begin
main_32_33 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %33 = getelementptr inbounds i8* %ReadBuf.2, i32 1*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
main_32_33_reg <= main_32_33;
if (^reset !== 1'bX && ^(main_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_33_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %34 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
begin
main_32_34 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %32*/
/*   %35 = zext i8 %34 to i16*/
begin
main_32_35 = main_32_34;
end
end
always @(*) begin
/* main: %32*/
/*   %36 = shl nuw i16 %35, 8*/
begin
main_32_36 = main_32_35 <<< 16'd8 % 16'd16;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %36 = shl nuw i16 %35, 8*/
if (cur_state == LEGUP_F_main_BB20_41)
begin
main_32_36_reg <= main_32_36;
if (^reset !== 1'bX && ^(main_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_36_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %37 = getelementptr inbounds i8* %ReadBuf.2, i32 2*/
begin
main_32_37 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %37 = getelementptr inbounds i8* %ReadBuf.2, i32 2*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
main_32_37_reg <= main_32_37;
if (^reset !== 1'bX && ^(main_32_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_37_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
begin
main_32_38 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %32*/
/*   %39 = zext i8 %38 to i16*/
begin
main_32_39 = main_32_38;
end
end
always @(*) begin
/* main: %32*/
/*   %40 = or i16 %36, %39*/
begin
main_32_40 = main_32_36_reg | main_32_39;
end
end
always @(*) begin
/* main: %32*/
/*   %41 = sext i16 %40 to i32*/
begin
main_32_41 = $signed(main_32_40);
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %41 = sext i16 %40 to i32*/
if (cur_state == LEGUP_F_main_BB20_42)
begin
main_32_41_reg <= main_32_41;
if (^reset !== 1'bX && ^(main_32_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_41_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %42 = getelementptr inbounds i8* %ReadBuf.2, i32 3*/
begin
main_32_42 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd3;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %42 = getelementptr inbounds i8* %ReadBuf.2, i32 3*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
main_32_42_reg <= main_32_42;
if (^reset !== 1'bX && ^(main_32_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_42_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %43 = load i8* %37, align 1, !tbaa !1*/
begin
main_32_43 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %43 = load i8* %37, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_43)
begin
main_32_43_reg <= main_32_43;
if (^reset !== 1'bX && ^(main_32_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_43_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %44 = getelementptr inbounds i8* %ReadBuf.2, i32 4*/
begin
main_32_44 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd4;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %44 = getelementptr inbounds i8* %ReadBuf.2, i32 4*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
main_32_44_reg <= main_32_44;
if (^reset !== 1'bX && ^(main_32_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_44_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %45 = load i8* %42, align 1, !tbaa !1*/
begin
main_32_45 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %32*/
/*   %46 = zext i8 %45 to i16*/
begin
main_32_46 = main_32_45;
end
end
always @(*) begin
/* main: %32*/
/*   %47 = shl nuw i16 %46, 8*/
begin
main_32_47 = main_32_46 <<< 16'd8 % 16'd16;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %47 = shl nuw i16 %46, 8*/
if (cur_state == LEGUP_F_main_BB20_44)
begin
main_32_47_reg <= main_32_47;
if (^reset !== 1'bX && ^(main_32_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_47_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %48 = getelementptr inbounds i8* %ReadBuf.2, i32 5*/
begin
main_32_48 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd5;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %48 = getelementptr inbounds i8* %ReadBuf.2, i32 5*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
main_32_48_reg <= main_32_48;
if (^reset !== 1'bX && ^(main_32_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_48_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %49 = load i8* %44, align 1, !tbaa !1*/
begin
main_32_49 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %32*/
/*   %50 = zext i8 %49 to i16*/
begin
main_32_50 = main_32_49;
end
end
always @(*) begin
/* main: %32*/
/*   %51 = or i16 %47, %50*/
begin
main_32_51 = main_32_47_reg | main_32_50;
end
end
always @(*) begin
/* main: %32*/
/*   %52 = getelementptr inbounds i8* %ReadBuf.2, i32 6*/
begin
main_32_52 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd6;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %52 = getelementptr inbounds i8* %ReadBuf.2, i32 6*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
main_32_52_reg <= main_32_52;
if (^reset !== 1'bX && ^(main_32_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_52_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %53 = load i8* %48, align 1, !tbaa !1*/
begin
main_32_53 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %32*/
/*   %54 = zext i8 %53 to i16*/
begin
main_32_54 = main_32_53;
end
end
always @(*) begin
/* main: %32*/
/*   %55 = shl nuw i16 %54, 8*/
begin
main_32_55 = main_32_54 <<< 16'd8 % 16'd16;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %55 = shl nuw i16 %54, 8*/
if (cur_state == LEGUP_F_main_BB20_48)
begin
main_32_55_reg <= main_32_55;
if (^reset !== 1'bX && ^(main_32_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_55_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %56 = getelementptr inbounds i8* %ReadBuf.2, i32 7*/
begin
main_32_56 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd7;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %56 = getelementptr inbounds i8* %ReadBuf.2, i32 7*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
main_32_56_reg <= main_32_56;
if (^reset !== 1'bX && ^(main_32_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_56_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %57 = load i8* %52, align 1, !tbaa !1*/
begin
main_32_57 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %32*/
/*   %58 = zext i8 %57 to i16*/
begin
main_32_58 = main_32_57;
end
end
always @(*) begin
/* main: %32*/
/*   %59 = or i16 %55, %58*/
begin
main_32_59 = main_32_55_reg | main_32_58;
end
end
always @(*) begin
/* main: %32*/
/*   %60 = getelementptr inbounds i8* %ReadBuf.2, i32 8*/
begin
main_32_60 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd8;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %60 = getelementptr inbounds i8* %ReadBuf.2, i32 8*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
main_32_60_reg <= main_32_60;
if (^reset !== 1'bX && ^(main_32_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_60_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %61 = load i8* %56, align 1, !tbaa !1*/
begin
main_32_61 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %61 = load i8* %56, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_52)
begin
main_32_61_reg <= main_32_61;
if (^reset !== 1'bX && ^(main_32_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_61_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %63 = sext i8 %43 to i32*/
begin
main_32_63 = $signed(main_32_43);
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %63 = sext i8 %43 to i32*/
if (cur_state == LEGUP_F_main_BB20_43)
begin
main_32_63_reg <= main_32_63;
if (^reset !== 1'bX && ^(main_32_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_63_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %65 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
begin
main_32_65 = memory_controller_out[15:0];
end
end
always @(*) begin
/* main: %32*/
/*   %66 = sext i16 %65 to i32*/
begin
main_32_66 = $signed(main_32_65);
end
end
always @(*) begin
/* main: %32*/
/*   %68 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
begin
main_32_68 = memory_controller_out[15:0];
end
end
always @(*) begin
/* main: %32*/
/*   %69 = sext i16 %68 to i32*/
begin
main_32_69 = $signed(main_32_68);
end
end
always @(*) begin
/* main: %32*/
/*   %71 = sext i8 %61 to i32*/
begin
main_32_71 = $signed(main_32_61);
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %71 = sext i8 %61 to i32*/
if (cur_state == LEGUP_F_main_BB20_52)
begin
main_32_71_reg <= main_32_71;
if (^reset !== 1'bX && ^(main_32_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_71_reg"); $finish; end
end
end
always @(*) begin
/* main: %32*/
/*   %73 = icmp eq i16 %40, 17*/
begin
main_32_73 = main_32_40 == 16'd17;
end
end
always @(posedge clk) begin
/* main: %32*/
/*   %73 = icmp eq i16 %40, 17*/
if (cur_state == LEGUP_F_main_BB20_42)
begin
main_32_73_reg <= main_32_73;
if (^reset !== 1'bX && ^(main_32_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_32_73_reg"); $finish; end
end
end
always @(*) begin
/* main: %74*/
/*   %75 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_74_75 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %74*/
/*   %76 = add nsw i32 %75, 1*/
begin
main_74_76 = main_74_75 + 32'd1;
end
end
always @(*) begin
/* main: %77*/
/*   %78 = icmp eq i8 %43, 8*/
begin
main_77_78 = main_32_43_reg == 8'd8;
end
end
always @(*) begin
/* main: %79*/
/*   %80 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_79_80 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %79*/
/*   %81 = add nsw i32 %80, 1*/
begin
main_79_81 = main_79_80 + 32'd1;
end
end
always @(*) begin
/* main: %82*/
/*   %83 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
begin
main_82_83 = memory_controller_out[15:0];
end
end
always @(*) begin
/* main: %82*/
/*   %84 = icmp eq i16 %83, 59*/
begin
main_82_84 = main_82_83 == 16'd59;
end
end
always @(*) begin
/* main: %85*/
/*   %86 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_85_86 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %85*/
/*   %87 = add nsw i32 %86, 1*/
begin
main_85_87 = main_85_86 + 32'd1;
end
end
always @(*) begin
/* main: %88*/
/*   %89 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
begin
main_88_89 = memory_controller_out[15:0];
end
end
always @(*) begin
/* main: %88*/
/*   %90 = icmp eq i16 %89, 90*/
begin
main_88_90 = main_88_89 == 16'd90;
end
end
always @(*) begin
/* main: %91*/
/*   %92 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_91_92 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %91*/
/*   %93 = add nsw i32 %92, 1*/
begin
main_91_93 = main_91_92 + 32'd1;
end
end
always @(*) begin
/* main: %94*/
/*   %95 = icmp eq i8 %61, 3*/
begin
main_94_95 = main_32_61_reg == 8'd3;
end
end
always @(*) begin
/* main: %.preheader.i.i.i.thread*/
/*   %96 = load i32* @main_result, align 4, !tbaa !0*/
begin
main__preheader_i_i_i_thread_96 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %.preheader.i.i.i.thread*/
/*   %97 = add nsw i32 %96, 1*/
begin
main__preheader_i_i_i_thread_97 = main__preheader_i_i_i_thread_96 + 32'd1;
end
end
always @(*) begin
/* main: %.preheader.i.i.i*/
/*   %98 = icmp sgt i8 %61, 0*/
begin
main__preheader_i_i_i_98 = $signed(main_32_61_reg) > $signed(8'd0);
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %ReadBuf.3 = phi i8* [ %105, %159 ], [ %60, %.preheader.i.i.i.thread ], [ %60, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_ReadBuf_3 = main__lr_ph_i1_i_i_ReadBuf_3_phi_temp;
end
/* main: %.lr.ph.i1.i.i*/
/*   %ReadBuf.3 = phi i8* [ %105, %159 ], [ %60, %.preheader.i.i.i.thread ], [ %60, %.preheader.i.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB31_82) */
begin
main__lr_ph_i1_i_i_ReadBuf_3 = main__lr_ph_i1_i_i_ReadBuf_3_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %ReadBuf.3 = phi i8* [ %105, %159 ], [ %60, %.preheader.i.i.i.thread ], [ %60, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_ReadBuf_3_reg <= main__lr_ph_i1_i_i_ReadBuf_3;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_ReadBuf_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ReadBuf_3_reg"); $finish; end
end
/* main: %.lr.ph.i1.i.i*/
/*   %ReadBuf.3 = phi i8* [ %105, %159 ], [ %60, %.preheader.i.i.i.thread ], [ %60, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_ReadBuf_3_reg <= main__lr_ph_i1_i_i_ReadBuf_3;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_ReadBuf_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ReadBuf_3_reg"); $finish; end
end
/* main: %.lr.ph.i1.i.i*/
/*   %ReadBuf.3 = phi i8* [ %105, %159 ], [ %60, %.preheader.i.i.i.thread ], [ %60, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_ReadBuf_3_reg <= main__lr_ph_i1_i_i_ReadBuf_3;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_ReadBuf_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ReadBuf_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %ci.02.i.i.i = phi i32 [ %tmp12.i.i.i, %159 ], [ 0, %.preheader.i.i.i.thread ], [ 0, %.preheader.i.i.i ]*/
begin
main__lr_ph_i1_i_i_ci_02_i_i_i = main__lr_ph_i1_i_i_ci_02_i_i_i_phi_temp;
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_index, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep_i_i_i = `TAG_g_p_jinfo_comps_info_index_a + 1 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_index, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep3.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep3_i_i_i = `TAG_g_p_jinfo_comps_info_id_a + 1 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep3.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep3_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep3_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep3_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep3_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep4.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep4_i_i_i = `TAG_g_p_jinfo_comps_info_h_samp_factor_a + 1 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep4.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep4_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep4_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep4_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep4_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep5.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_v_samp_factor, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep5_i_i_i = `TAG_g_p_jinfo_comps_info_v_samp_factor_a + 1 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep5.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_v_samp_factor, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep5_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep5_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep5_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep5_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep6.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep6_i_i_i = `TAG_g_p_jinfo_comps_info_quant_tbl_no_a + 1 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep6.i.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep6_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep6_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep6_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep6_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %tmp.i.i.i = trunc i32 %ci.02.i.i.i to i8*/
begin
main__lr_ph_i1_i_i_tmp_i_i_i = main__lr_ph_i1_i_i_ci_02_i_i_i[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep7.i.i.i = getelementptr [3 x i32]* @out_index_get_sof, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep7_i_i_i = `TAG_g_out_index_get_sof_a + 4 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep7.i.i.i = getelementptr [3 x i32]* @out_index_get_sof, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep7_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep7_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep7_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep7_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep8.i.i.i = getelementptr [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep8_i_i_i = `TAG_g_out_comp_id_get_sos_a + 4 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep8.i.i.i = getelementptr [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep8_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep8_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep8_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep8_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep9.i.i.i = getelementptr [3 x i32]* @out_v_samp_factor_get_sof, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep9_i_i_i = `TAG_g_out_v_samp_factor_get_sof_a + 4 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep9.i.i.i = getelementptr [3 x i32]* @out_v_samp_factor_get_sof, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep9_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep9_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep9_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep9_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep11.i.i.i = getelementptr [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %ci.02.i.i.i*/
begin
main__lr_ph_i1_i_i_scevgep11_i_i_i = `TAG_g_out_ac_tbl_no_get_sos_a + 4 * main__lr_ph_i1_i_i_ci_02_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %scevgep11.i.i.i = getelementptr [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %ci.02.i.i.i*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_scevgep11_i_i_i_reg <= main__lr_ph_i1_i_i_scevgep11_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_scevgep11_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_scevgep11_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %tmp12.i.i.i = add i32 %ci.02.i.i.i, 1*/
begin
main__lr_ph_i1_i_i_tmp12_i_i_i = main__lr_ph_i1_i_i_ci_02_i_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %tmp12.i.i.i = add i32 %ci.02.i.i.i, 1*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_tmp12_i_i_i_reg <= main__lr_ph_i1_i_i_tmp12_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_tmp12_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_tmp12_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %99 = getelementptr inbounds i8* %ReadBuf.3, i32 1*/
begin
main__lr_ph_i1_i_i_99 = main__lr_ph_i1_i_i_ReadBuf_3 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %99 = getelementptr inbounds i8* %ReadBuf.3, i32 1*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_99_reg <= main__lr_ph_i1_i_i_99;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_99_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %100 = load i8* %ReadBuf.3, align 1, !tbaa !1*/
begin
main__lr_ph_i1_i_i_100 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %101 = getelementptr inbounds i8* %ReadBuf.3, i32 2*/
begin
main__lr_ph_i1_i_i_101 = main__lr_ph_i1_i_i_ReadBuf_3 + 1 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %101 = getelementptr inbounds i8* %ReadBuf.3, i32 2*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_101_reg <= main__lr_ph_i1_i_i_101;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_101_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %102 = load i8* %99, align 1, !tbaa !1*/
begin
main__lr_ph_i1_i_i_102 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %103 = lshr i8 %102, 4*/
begin
main__lr_ph_i1_i_i_103 = main__lr_ph_i1_i_i_102 >>> 8'd4 % 8'd8;
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %104 = and i8 %102, 15*/
begin
main__lr_ph_i1_i_i_104 = main__lr_ph_i1_i_i_102 & 8'd15;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %104 = and i8 %102, 15*/
if (cur_state == LEGUP_F_main_BB31_88)
begin
main__lr_ph_i1_i_i_104_reg <= main__lr_ph_i1_i_i_104;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_104_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %105 = getelementptr inbounds i8* %ReadBuf.3, i32 3*/
begin
main__lr_ph_i1_i_i_105 = main__lr_ph_i1_i_i_ReadBuf_3 + 1 * 32'd3;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %105 = getelementptr inbounds i8* %ReadBuf.3, i32 3*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_105_reg <= main__lr_ph_i1_i_i_105;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_105_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %106 = load i8* %101, align 1, !tbaa !1*/
begin
main__lr_ph_i1_i_i_106 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %107 = sext i8 %tmp.i.i.i to i32*/
begin
main__lr_ph_i1_i_i_107 = $signed(main__lr_ph_i1_i_i_tmp_i_i_i);
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %107 = sext i8 %tmp.i.i.i to i32*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
main__lr_ph_i1_i_i_107_reg <= main__lr_ph_i1_i_i_107;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_107_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %109 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
begin
main__lr_ph_i1_i_i_109 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %110 = sext i8 %109 to i32*/
begin
main__lr_ph_i1_i_i_110 = $signed(main__lr_ph_i1_i_i_109);
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %112 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
begin
main__lr_ph_i1_i_i_112 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %113 = sext i8 %112 to i32*/
begin
main__lr_ph_i1_i_i_113 = $signed(main__lr_ph_i1_i_i_112);
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %115 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
begin
main__lr_ph_i1_i_i_115 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %116 = sext i8 %115 to i32*/
begin
main__lr_ph_i1_i_i_116 = $signed(main__lr_ph_i1_i_i_115);
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %118 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
begin
main__lr_ph_i1_i_i_118 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %119 = sext i8 %118 to i32*/
begin
main__lr_ph_i1_i_i_119 = $signed(main__lr_ph_i1_i_i_118);
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %121 = load i8* %scevgep.i.i.i, align 1, !tbaa !1*/
begin
main__lr_ph_i1_i_i_121 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %122 = sext i8 %121 to i32*/
begin
main__lr_ph_i1_i_i_122 = $signed(main__lr_ph_i1_i_i_121);
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %122 = sext i8 %121 to i32*/
if (cur_state == LEGUP_F_main_BB31_107)
begin
main__lr_ph_i1_i_i_122_reg <= main__lr_ph_i1_i_i_122;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_122_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %123 = load i32* %scevgep7.i.i.i, align 4, !tbaa !0*/
begin
main__lr_ph_i1_i_i_123 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %.lr.ph.i1.i.i*/
/*   %124 = icmp eq i32 %122, %123*/
begin
main__lr_ph_i1_i_i_124 = main__lr_ph_i1_i_i_122_reg == main__lr_ph_i1_i_i_123;
end
end
always @(*) begin
/* main: %125*/
/*   %126 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_125_126 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %125*/
/*   %127 = add nsw i32 %126, 1*/
begin
main_125_127 = main_125_126 + 32'd1;
end
end
always @(*) begin
/* main: %128*/
/*   %129 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
begin
main_128_129 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %128*/
/*   %130 = sext i8 %129 to i32*/
begin
main_128_130 = $signed(main_128_129);
end
end
always @(posedge clk) begin
/* main: %128*/
/*   %130 = sext i8 %129 to i32*/
if (cur_state == LEGUP_F_main_BB33_114)
begin
main_128_130_reg <= main_128_130;
if (^reset !== 1'bX && ^(main_128_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_128_130_reg"); $finish; end
end
end
always @(*) begin
/* main: %128*/
/*   %131 = load i32* %scevgep8.i.i.i, align 4, !tbaa !0*/
begin
main_128_131 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %128*/
/*   %132 = icmp eq i32 %130, %131*/
begin
main_128_132 = main_128_130_reg == main_128_131;
end
end
always @(*) begin
/* main: %133*/
/*   %134 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_133_134 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %133*/
/*   %135 = add nsw i32 %134, 1*/
begin
main_133_135 = main_133_134 + 32'd1;
end
end
always @(*) begin
/* main: %136*/
/*   %137 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
begin
main_136_137 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %136*/
/*   %138 = sext i8 %137 to i32*/
begin
main_136_138 = $signed(main_136_137);
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %138 = sext i8 %137 to i32*/
if (cur_state == LEGUP_F_main_BB35_121)
begin
main_136_138_reg <= main_136_138;
if (^reset !== 1'bX && ^(main_136_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_138_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %139 = load i32* %scevgep9.i.i.i, align 4, !tbaa !0*/
begin
main_136_139 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* main: %136*/
/*   %139 = load i32* %scevgep9.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB35_122)
begin
main_136_139_reg <= main_136_139;
if (^reset !== 1'bX && ^(main_136_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_136_139_reg"); $finish; end
end
end
always @(*) begin
/* main: %136*/
/*   %140 = icmp eq i32 %138, %139*/
begin
main_136_140 = main_136_138_reg == main_136_139;
end
end
always @(*) begin
/* main: %141*/
/*   %142 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_141_142 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %141*/
/*   %143 = add nsw i32 %142, 1*/
begin
main_141_143 = main_141_142 + 32'd1;
end
end
always @(*) begin
/* main: %144*/
/*   %145 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
begin
main_144_145 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %144*/
/*   %146 = sext i8 %145 to i32*/
begin
main_144_146 = $signed(main_144_145);
end
end
always @(*) begin
/* main: %144*/
/*   %147 = icmp eq i32 %146, %139*/
begin
main_144_147 = main_144_146 == main_136_139_reg;
end
end
always @(*) begin
/* main: %148*/
/*   %149 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_148_149 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %148*/
/*   %150 = add nsw i32 %149, 1*/
begin
main_148_150 = main_148_149 + 32'd1;
end
end
always @(*) begin
/* main: %151*/
/*   %152 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
begin
main_151_152 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %151*/
/*   %153 = sext i8 %152 to i32*/
begin
main_151_153 = $signed(main_151_152);
end
end
always @(posedge clk) begin
/* main: %151*/
/*   %153 = sext i8 %152 to i32*/
if (cur_state == LEGUP_F_main_BB39_134)
begin
main_151_153_reg <= main_151_153;
if (^reset !== 1'bX && ^(main_151_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_151_153_reg"); $finish; end
end
end
always @(*) begin
/* main: %151*/
/*   %154 = load i32* %scevgep11.i.i.i, align 4, !tbaa !0*/
begin
main_151_154 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %151*/
/*   %155 = icmp eq i32 %153, %154*/
begin
main_151_155 = main_151_153_reg == main_151_154;
end
end
always @(*) begin
/* main: %156*/
/*   %157 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_156_157 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %156*/
/*   %158 = add nsw i32 %157, 1*/
begin
main_156_158 = main_156_157 + 32'd1;
end
end
always @(*) begin
/* main: %159*/
/*   %160 = icmp slt i32 %tmp12.i.i.i, %71*/
begin
main_159_160 = $signed(main__lr_ph_i1_i_i_tmp12_i_i_i_reg) < $signed(main_32_71_reg);
end
end
always @(*) begin
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
main___crit_edge_i_i_i_ReadBuf_4 = main___crit_edge_i_i_i_ReadBuf_4_phi_temp;
end
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
else if (cur_state == LEGUP_F_main_BB42_140)
begin
main___crit_edge_i_i_i_ReadBuf_4 = main___crit_edge_i_i_i_ReadBuf_4_phi_temp;
end
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
else /* if (cur_state == LEGUP_F_main_BB42_140) */
begin
main___crit_edge_i_i_i_ReadBuf_4 = main___crit_edge_i_i_i_ReadBuf_4_phi_temp;
end
end
always @(posedge clk) begin
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
main___crit_edge_i_i_i_ReadBuf_4_reg <= main___crit_edge_i_i_i_ReadBuf_4;
if (^reset !== 1'bX && ^(main___crit_edge_i_i_i_ReadBuf_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___crit_edge_i_i_i_ReadBuf_4_reg"); $finish; end
end
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
main___crit_edge_i_i_i_ReadBuf_4_reg <= main___crit_edge_i_i_i_ReadBuf_4;
if (^reset !== 1'bX && ^(main___crit_edge_i_i_i_ReadBuf_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___crit_edge_i_i_i_ReadBuf_4_reg"); $finish; end
end
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
main___crit_edge_i_i_i_ReadBuf_4_reg <= main___crit_edge_i_i_i_ReadBuf_4;
if (^reset !== 1'bX && ^(main___crit_edge_i_i_i_ReadBuf_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___crit_edge_i_i_i_ReadBuf_4_reg"); $finish; end
end
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
main___crit_edge_i_i_i_ReadBuf_4_reg <= main___crit_edge_i_i_i_ReadBuf_4;
if (^reset !== 1'bX && ^(main___crit_edge_i_i_i_ReadBuf_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___crit_edge_i_i_i_ReadBuf_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %._crit_edge.i.i.i*/
/*   %161 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !1*/
begin
main___crit_edge_i_i_i_161 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %._crit_edge.i.i.i*/
/*   %162 = icmp eq i8 %161, 2*/
begin
main___crit_edge_i_i_i_162 = main___crit_edge_i_i_i_161 == 8'd2;
end
end
always @(*) begin
/* main: %167*/
/*   %168 = getelementptr inbounds i8* %ReadBuf.2, i32 1*/
begin
main_167_168 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %167*/
/*   %168 = getelementptr inbounds i8* %ReadBuf.2, i32 1*/
if (cur_state == LEGUP_F_main_BB45_145)
begin
main_167_168_reg <= main_167_168;
if (^reset !== 1'bX && ^(main_167_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_168_reg"); $finish; end
end
end
always @(*) begin
/* main: %167*/
/*   %169 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
begin
main_167_169 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %167*/
/*   %170 = zext i8 %169 to i16*/
begin
main_167_170 = main_167_169;
end
end
always @(*) begin
/* main: %167*/
/*   %171 = shl nuw i16 %170, 8*/
begin
main_167_171 = main_167_170 <<< 16'd8 % 16'd16;
end
end
always @(posedge clk) begin
/* main: %167*/
/*   %171 = shl nuw i16 %170, 8*/
if (cur_state == LEGUP_F_main_BB45_147)
begin
main_167_171_reg <= main_167_171;
if (^reset !== 1'bX && ^(main_167_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_171_reg"); $finish; end
end
end
always @(*) begin
/* main: %167*/
/*   %172 = getelementptr inbounds i8* %ReadBuf.2, i32 2*/
begin
main_167_172 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %167*/
/*   %172 = getelementptr inbounds i8* %ReadBuf.2, i32 2*/
if (cur_state == LEGUP_F_main_BB45_145)
begin
main_167_172_reg <= main_167_172;
if (^reset !== 1'bX && ^(main_167_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_172_reg"); $finish; end
end
end
always @(*) begin
/* main: %167*/
/*   %173 = load i8* %168, align 1, !tbaa !1*/
begin
main_167_173 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %167*/
/*   %174 = zext i8 %173 to i16*/
begin
main_167_174 = main_167_173;
end
end
always @(*) begin
/* main: %167*/
/*   %175 = or i16 %171, %174*/
begin
main_167_175 = main_167_171_reg | main_167_174;
end
end
always @(*) begin
/* main: %167*/
/*   %176 = sext i16 %175 to i32*/
begin
main_167_176 = $signed(main_167_175);
end
end
always @(*) begin
/* main: %167*/
/*   %177 = getelementptr inbounds i8* %ReadBuf.2, i32 3*/
begin
main_167_177 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd3;
end
end
always @(posedge clk) begin
/* main: %167*/
/*   %177 = getelementptr inbounds i8* %ReadBuf.2, i32 3*/
if (cur_state == LEGUP_F_main_BB45_145)
begin
main_167_177_reg <= main_167_177;
if (^reset !== 1'bX && ^(main_167_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_177_reg"); $finish; end
end
end
always @(*) begin
/* main: %167*/
/*   %178 = load i8* %172, align 1, !tbaa !1*/
begin
main_167_178 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* main: %167*/
/*   %178 = load i8* %172, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_149)
begin
main_167_178_reg <= main_167_178;
if (^reset !== 1'bX && ^(main_167_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_178_reg"); $finish; end
end
end
always @(*) begin
/* main: %167*/
/*   %179 = zext i8 %178 to i32*/
begin
main_167_179 = main_167_178;
end
end
always @(posedge clk) begin
/* main: %167*/
/*   %179 = zext i8 %178 to i32*/
if (cur_state == LEGUP_F_main_BB45_149)
begin
main_167_179_reg <= main_167_179;
if (^reset !== 1'bX && ^(main_167_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_179_reg"); $finish; end
end
end
always @(*) begin
/* main: %167*/
/*   %182 = icmp eq i16 %175, 12*/
begin
main_167_182 = main_167_175 == 16'd12;
end
end
always @(posedge clk) begin
/* main: %167*/
/*   %182 = icmp eq i16 %175, 12*/
if (cur_state == LEGUP_F_main_BB45_148)
begin
main_167_182_reg <= main_167_182;
if (^reset !== 1'bX && ^(main_167_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_182_reg"); $finish; end
end
end
always @(*) begin
/* main: %183*/
/*   %184 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_183_184 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %183*/
/*   %185 = add nsw i32 %184, 1*/
begin
main_183_185 = main_183_184 + 32'd1;
end
end
always @(*) begin
/* main: %186*/
/*   %187 = icmp eq i8 %178, 3*/
begin
main_186_187 = main_167_178_reg == 8'd3;
end
end
always @(*) begin
/* main: %188*/
/*   %189 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_188_189 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %188*/
/*   %190 = add nsw i32 %189, 1*/
begin
main_188_190 = main_188_189 + 32'd1;
end
end
always @(*) begin
/* main: %.preheader5.i.i.i.preheader*/
/*   %191 = sext i8 %p_jinfo_num_components.1.ph13 to i32*/
begin
main__preheader5_i_i_i_preheader_191 = $signed(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg);
end
end
always @(posedge clk) begin
/* main: %.preheader5.i.i.i.preheader*/
/*   %191 = sext i8 %p_jinfo_num_components.1.ph13 to i32*/
if (cur_state == LEGUP_F_main_BB49_157)
begin
main__preheader5_i_i_i_preheader_191_reg <= main__preheader5_i_i_i_preheader_191;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_preheader_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_preheader_191_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_i_get_sos_0 = main__preheader5_i_i_i_i_get_sos_0_phi_temp;
end
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
else if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_i_get_sos_0 = main__preheader5_i_i_i_i_get_sos_0_phi_temp;
end
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
else if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_i_get_sos_0 = main__preheader5_i_i_i_i_get_sos_0_phi_temp;
end
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
else /* if (cur_state == LEGUP_F_main_BB50_158) */
begin
main__preheader5_i_i_i_i_get_sos_0 = main__preheader5_i_i_i_i_get_sos_0_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_i_get_sos_0_reg <= main__preheader5_i_i_i_i_get_sos_0;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_i_get_sos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_i_get_sos_0_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_i_get_sos_0_reg <= main__preheader5_i_i_i_i_get_sos_0;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_i_get_sos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_i_get_sos_0_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_i_get_sos_0_reg <= main__preheader5_i_i_i_i_get_sos_0;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_i_get_sos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_i_get_sos_0_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_i_get_sos_0_reg <= main__preheader5_i_i_i_i_get_sos_0;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_i_get_sos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_i_get_sos_0_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_i_get_sos_0_reg <= main__preheader5_i_i_i_i_get_sos_0;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_i_get_sos_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_i_get_sos_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5 = main__preheader5_i_i_i_ReadBuf_5_phi_temp;
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
else if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5 = main__preheader5_i_i_i_ReadBuf_5_phi_temp;
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
else if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5 = main__preheader5_i_i_i_ReadBuf_5_phi_temp;
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
else if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5 = main__preheader5_i_i_i_ReadBuf_5_phi_temp;
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
else /* if (cur_state == LEGUP_F_main_BB50_158) */
begin
main__preheader5_i_i_i_ReadBuf_5 = main__preheader5_i_i_i_ReadBuf_5_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5_reg <= main__preheader5_i_i_i_ReadBuf_5;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_ReadBuf_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_ReadBuf_5_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5_reg <= main__preheader5_i_i_i_ReadBuf_5;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_ReadBuf_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_ReadBuf_5_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5_reg <= main__preheader5_i_i_i_ReadBuf_5;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_ReadBuf_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_ReadBuf_5_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5_reg <= main__preheader5_i_i_i_ReadBuf_5;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_ReadBuf_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_ReadBuf_5_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5_reg <= main__preheader5_i_i_i_ReadBuf_5;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_ReadBuf_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_ReadBuf_5_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_ReadBuf_5_reg <= main__preheader5_i_i_i_ReadBuf_5;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_ReadBuf_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_ReadBuf_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader5.i.i.i*/
/*   %192 = phi i32 [ %247, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_192 = main__preheader5_i_i_i_192_phi_temp;
end
/* main: %.preheader5.i.i.i*/
/*   %192 = phi i32 [ %247, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
else /* if (cur_state == LEGUP_F_main_BB50_158) */
begin
main__preheader5_i_i_i_192 = main__preheader5_i_i_i_192_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader5.i.i.i*/
/*   %192 = phi i32 [ %247, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_192_reg <= main__preheader5_i_i_i_192;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_192_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %192 = phi i32 [ %247, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_192_reg <= main__preheader5_i_i_i_192;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_192_reg"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %192 = phi i32 [ %247, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB50_158)
begin
main__preheader5_i_i_i_192_reg <= main__preheader5_i_i_i_192;
if (^reset !== 1'bX && ^(main__preheader5_i_i_i_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_192_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader5.i.i.i*/
/*   %193 = icmp slt i32 %192, %179*/
begin
main__preheader5_i_i_i_193 = $signed(main__preheader5_i_i_i_192) < $signed(main_167_179_reg);
end
end
always @(*) begin
/* main: %194*/
/*   %195 = getelementptr inbounds i8* %ReadBuf.5, i32 1*/
begin
main_194_195 = main__preheader5_i_i_i_ReadBuf_5_reg + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %195 = getelementptr inbounds i8* %ReadBuf.5, i32 1*/
if (cur_state == LEGUP_F_main_BB51_159)
begin
main_194_195_reg <= main_194_195;
if (^reset !== 1'bX && ^(main_194_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_195_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %196 = load i8* %ReadBuf.5, align 1, !tbaa !1*/
begin
main_194_196 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %194*/
/*   %197 = zext i8 %196 to i32*/
begin
main_194_197 = main_194_196;
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %197 = zext i8 %196 to i32*/
if (cur_state == LEGUP_F_main_BB51_161)
begin
main_194_197_reg <= main_194_197;
if (^reset !== 1'bX && ^(main_194_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_197_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %198 = getelementptr inbounds i8* %ReadBuf.5, i32 2*/
begin
main_194_198 = main__preheader5_i_i_i_ReadBuf_5_reg + 1 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %198 = getelementptr inbounds i8* %ReadBuf.5, i32 2*/
if (cur_state == LEGUP_F_main_BB51_159)
begin
main_194_198_reg <= main_194_198;
if (^reset !== 1'bX && ^(main_194_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_198_reg"); $finish; end
end
end
always @(*) begin
/* main: %194*/
/*   %199 = load i8* %195, align 1, !tbaa !1*/
begin
main_194_199 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* main: %194*/
/*   %199 = load i8* %195, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_162)
begin
main_194_199_reg <= main_194_199;
if (^reset !== 1'bX && ^(main_194_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_199_reg"); $finish; end
end
end
always @(*) begin
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201 = main_200_201_phi_temp;
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
else if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201 = main_200_201_phi_temp;
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
else if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201 = main_200_201_phi_temp;
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
else if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201 = main_200_201_phi_temp;
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
else /* if (cur_state == LEGUP_F_main_BB52_163) */
begin
main_200_201 = main_200_201_phi_temp;
end
end
always @(posedge clk) begin
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201_reg <= main_200_201;
if (^reset !== 1'bX && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201_reg <= main_200_201;
if (^reset !== 1'bX && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201_reg <= main_200_201;
if (^reset !== 1'bX && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201_reg <= main_200_201;
if (^reset !== 1'bX && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201_reg <= main_200_201;
if (^reset !== 1'bX && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB52_163)
begin
main_200_201_reg <= main_200_201;
if (^reset !== 1'bX && ^(main_200_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_reg"); $finish; end
end
end
always @(*) begin
/* main: %200*/
/*   %202 = icmp slt i32 %201, %191*/
begin
main_200_202 = $signed(main_200_201) < $signed(main__preheader5_i_i_i_preheader_191_reg);
end
end
always @(*) begin
/* main: %203*/
/*   %scevgep9.i4.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_id, i32 0, i32 %201*/
begin
main_203_scevgep9_i4_i_i = `TAG_g_p_jinfo_comps_info_id_a + 1 * main_200_201_reg;
end
end
always @(*) begin
/* main: %203*/
/*   %204 = load i8* %scevgep9.i4.i.i, align 1, !tbaa !1*/
begin
main_203_204 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %203*/
/*   %205 = sext i8 %204 to i32*/
begin
main_203_205 = $signed(main_203_204);
end
end
always @(*) begin
/* main: %203*/
/*   %206 = icmp eq i32 %197, %205*/
begin
main_203_206 = main_194_197_reg == main_203_205;
end
end
always @(*) begin
/* main: %207*/
/*   %208 = add nsw i32 %201, 1*/
begin
main_207_208 = main_200_201_reg + 32'd1;
end
end
always @(*) begin
/* main: %211*/
/*   %scevgep8.i5.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %201*/
begin
main_211_scevgep8_i5_i_i = `TAG_g_p_jinfo_comps_info_dc_tbl_no_a + 1 * main_200_201_reg;
end
end
always @(posedge clk) begin
/* main: %211*/
/*   %scevgep8.i5.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i32 0, i32 %201*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
main_211_scevgep8_i5_i_i_reg <= main_211_scevgep8_i5_i_i;
if (^reset !== 1'bX && ^(main_211_scevgep8_i5_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_211_scevgep8_i5_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %211*/
/*   %scevgep7.i6.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_ac_tbl_no, i32 0, i32 %201*/
begin
main_211_scevgep7_i6_i_i = `TAG_g_p_jinfo_comps_info_ac_tbl_no_a + 1 * main_200_201_reg;
end
end
always @(posedge clk) begin
/* main: %211*/
/*   %scevgep7.i6.i.i = getelementptr [3 x i8]* @p_jinfo_comps_info_ac_tbl_no, i32 0, i32 %201*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
main_211_scevgep7_i6_i_i_reg <= main_211_scevgep7_i6_i_i;
if (^reset !== 1'bX && ^(main_211_scevgep7_i6_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_211_scevgep7_i6_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %211*/
/*   %212 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_211_212 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %211*/
/*   %213 = add nsw i32 %212, 1*/
begin
main_211_213 = main_211_212 + 32'd1;
end
end
always @(*) begin
/* main: %211*/
/*   %214 = lshr i8 %199, 4*/
begin
main_211_214 = main_194_199_reg >>> 8'd4 % 8'd8;
end
end
always @(posedge clk) begin
/* main: %211*/
/*   %214 = lshr i8 %199, 4*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
main_211_214_reg <= main_211_214;
if (^reset !== 1'bX && ^(main_211_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_211_214_reg"); $finish; end
end
end
always @(*) begin
/* main: %211*/
/*   %215 = and i8 %199, 15*/
begin
main_211_215 = main_194_199_reg & 8'd15;
end
end
always @(posedge clk) begin
/* main: %211*/
/*   %215 = and i8 %199, 15*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
main_211_215_reg <= main_211_215;
if (^reset !== 1'bX && ^(main_211_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_211_215_reg"); $finish; end
end
end
always @(*) begin
/* main: %211*/
/*   %217 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
begin
main_211_217 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %211*/
/*   %218 = sext i8 %217 to i32*/
begin
main_211_218 = $signed(main_211_217);
end
end
always @(*) begin
/* main: %211*/
/*   %220 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
begin
main_211_220 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %211*/
/*   %221 = sext i8 %220 to i32*/
begin
main_211_221 = $signed(main_211_220);
end
end
always @(*) begin
/* main: %211*/
/*   %223 = getelementptr inbounds [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %i_get_sos.0*/
begin
main_211_223 = `TAG_g_out_comp_id_get_sos_a + 4 * main__preheader5_i_i_i_i_get_sos_0_reg;
end
end
always @(posedge clk) begin
/* main: %211*/
/*   %223 = getelementptr inbounds [3 x i32]* @out_comp_id_get_sos, i32 0, i32 %i_get_sos.0*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
main_211_223_reg <= main_211_223;
if (^reset !== 1'bX && ^(main_211_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_211_223_reg"); $finish; end
end
end
always @(*) begin
/* main: %211*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
begin
main_211_224 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %211*/
/*   %225 = icmp eq i32 %197, %224*/
begin
main_211_225 = main_194_197_reg == main_211_224;
end
end
always @(*) begin
/* main: %226*/
/*   %227 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_226_227 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %226*/
/*   %228 = add nsw i32 %227, 1*/
begin
main_226_228 = main_226_227 + 32'd1;
end
end
always @(*) begin
/* main: %229*/
/*   %230 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
begin
main_229_230 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %229*/
/*   %231 = sext i8 %230 to i32*/
begin
main_229_231 = $signed(main_229_230);
end
end
always @(posedge clk) begin
/* main: %229*/
/*   %231 = sext i8 %230 to i32*/
if (cur_state == LEGUP_F_main_BB58_188)
begin
main_229_231_reg <= main_229_231;
if (^reset !== 1'bX && ^(main_229_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_231_reg"); $finish; end
end
end
always @(*) begin
/* main: %229*/
/*   %232 = getelementptr inbounds [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %i_get_sos.0*/
begin
main_229_232 = `TAG_g_out_ac_tbl_no_get_sos_a + 4 * main__preheader5_i_i_i_i_get_sos_0_reg;
end
end
always @(posedge clk) begin
/* main: %229*/
/*   %232 = getelementptr inbounds [3 x i32]* @out_ac_tbl_no_get_sos, i32 0, i32 %i_get_sos.0*/
if (cur_state == LEGUP_F_main_BB58_186)
begin
main_229_232_reg <= main_229_232;
if (^reset !== 1'bX && ^(main_229_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_232_reg"); $finish; end
end
end
always @(*) begin
/* main: %229*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
begin
main_229_233 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* main: %229*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB58_189)
begin
main_229_233_reg <= main_229_233;
if (^reset !== 1'bX && ^(main_229_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_229_233_reg"); $finish; end
end
end
always @(*) begin
/* main: %229*/
/*   %234 = icmp eq i32 %231, %233*/
begin
main_229_234 = main_229_231_reg == main_229_233;
end
end
always @(*) begin
/* main: %235*/
/*   %236 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_235_236 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %235*/
/*   %237 = add nsw i32 %236, 1*/
begin
main_235_237 = main_235_236 + 32'd1;
end
end
always @(*) begin
/* main: %238*/
/*   %239 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
begin
main_238_239 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %238*/
/*   %240 = sext i8 %239 to i32*/
begin
main_238_240 = $signed(main_238_239);
end
end
always @(*) begin
/* main: %238*/
/*   %241 = icmp eq i32 %240, %233*/
begin
main_238_241 = main_238_240 == main_229_233_reg;
end
end
always @(*) begin
/* main: %242*/
/*   %243 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_242_243 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %242*/
/*   %244 = add nsw i32 %243, 1*/
begin
main_242_244 = main_242_243 + 32'd1;
end
end
always @(*) begin
/* main: %245*/
/*   %246 = add nsw i32 %i_get_sos.0, 1*/
begin
main_245_246 = main__preheader5_i_i_i_i_get_sos_0_reg + 32'd1;
end
end
always @(*) begin
/* main: %245*/
/*   %247 = add nsw i32 %192, 1*/
begin
main_245_247 = main__preheader5_i_i_i_192_reg + 32'd1;
end
end
always @(*) begin
/* main: %get_sos.exit.i.i*/
/*   %scevgep.i2.i.i = getelementptr i8* %ReadBuf.5, i32 3*/
begin
main_get_sos_exit_i_i_scevgep_i2_i_i = main__preheader5_i_i_i_ReadBuf_5_reg + 1 * 32'd3;
end
end
always @(*) begin
/* main: %248*/
/*   %249 = getelementptr inbounds i8* %ReadBuf.2, i32 1*/
begin
main_248_249 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %248*/
/*   %249 = getelementptr inbounds i8* %ReadBuf.2, i32 1*/
if (cur_state == LEGUP_F_main_BB64_201)
begin
main_248_249_reg <= main_248_249;
if (^reset !== 1'bX && ^(main_248_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_249_reg"); $finish; end
end
end
always @(*) begin
/* main: %248*/
/*   %250 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
begin
main_248_250 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %248*/
/*   %251 = zext i8 %250 to i16*/
begin
main_248_251 = main_248_250;
end
end
always @(*) begin
/* main: %248*/
/*   %252 = shl nuw i16 %251, 8*/
begin
main_248_252 = main_248_251 <<< 16'd8 % 16'd16;
end
end
always @(posedge clk) begin
/* main: %248*/
/*   %252 = shl nuw i16 %251, 8*/
if (cur_state == LEGUP_F_main_BB64_203)
begin
main_248_252_reg <= main_248_252;
if (^reset !== 1'bX && ^(main_248_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_252_reg"); $finish; end
end
end
always @(*) begin
/* main: %248*/
/*   %253 = getelementptr inbounds i8* %ReadBuf.2, i32 2*/
begin
main_248_253 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %248*/
/*   %253 = getelementptr inbounds i8* %ReadBuf.2, i32 2*/
if (cur_state == LEGUP_F_main_BB64_201)
begin
main_248_253_reg <= main_248_253;
if (^reset !== 1'bX && ^(main_248_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_253_reg"); $finish; end
end
end
always @(*) begin
/* main: %248*/
/*   %254 = load i8* %249, align 1, !tbaa !1*/
begin
main_248_254 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %248*/
/*   %255 = zext i8 %254 to i16*/
begin
main_248_255 = main_248_254;
end
end
always @(*) begin
/* main: %248*/
/*   %256 = or i16 %252, %255*/
begin
main_248_256 = main_248_252_reg | main_248_255;
end
end
always @(*) begin
/* main: %248*/
/*   %257 = sext i16 %256 to i32*/
begin
main_248_257 = $signed(main_248_256);
end
end
always @(*) begin
/* main: %248*/
/*   %258 = add nsw i32 %257, -2*/
begin
main_248_258 = main_248_257 + -32'd2;
end
end
always @(posedge clk) begin
/* main: %248*/
/*   %258 = add nsw i32 %257, -2*/
if (cur_state == LEGUP_F_main_BB64_204)
begin
main_248_258_reg <= main_248_258;
if (^reset !== 1'bX && ^(main_248_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_258_reg"); $finish; end
end
end
always @(*) begin
/* main: %248*/
/*   %260 = load i32* %4, align 4, !tbaa !0*/
begin
main_248_260 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %248*/
/*   %261 = icmp eq i32 %258, %260*/
begin
main_248_261 = main_248_258_reg == main_248_260;
end
end
always @(*) begin
/* main: %262*/
/*   %263 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_262_263 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %262*/
/*   %264 = add nsw i32 %263, 1*/
begin
main_262_264 = main_262_263 + 32'd1;
end
end
always @(*) begin
/* main: %.preheader.i7.i.i*/
/*   %265 = icmp sgt i32 %258, 16*/
begin
main__preheader_i7_i_i_265 = $signed(main_248_258_reg) > $signed(32'd16);
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_i_get_dht_2 = main__lr_ph5_i_i_i_i_get_dht_2_phi_temp;
end
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
else if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_i_get_dht_2 = main__lr_ph5_i_i_i_i_get_dht_2_phi_temp;
end
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB67_212) */
begin
main__lr_ph5_i_i_i_i_get_dht_2 = main__lr_ph5_i_i_i_i_get_dht_2_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_i_get_dht_2_reg <= main__lr_ph5_i_i_i_i_get_dht_2;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_i_get_dht_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_i_get_dht_2_reg"); $finish; end
end
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_i_get_dht_2_reg <= main__lr_ph5_i_i_i_i_get_dht_2;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_i_get_dht_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_i_get_dht_2_reg"); $finish; end
end
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_i_get_dht_2_reg <= main__lr_ph5_i_i_i_i_get_dht_2;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_i_get_dht_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_i_get_dht_2_reg"); $finish; end
end
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_i_get_dht_2_reg <= main__lr_ph5_i_i_i_i_get_dht_2;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_i_get_dht_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_i_get_dht_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %ReadBuf.6 = phi i8* [ %ReadBuf.7, %._crit_edge.i12.i.i ], [ %253, %.preheader.i7.i.i ]*/
begin
main__lr_ph5_i_i_i_ReadBuf_6 = main__lr_ph5_i_i_i_ReadBuf_6_phi_temp;
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %length.04.i.i.i = phi i32 [ %310, %._crit_edge.i12.i.i ], [ %258, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_length_04_i_i_i = main__lr_ph5_i_i_i_length_04_i_i_i_phi_temp;
end
/* main: %.lr.ph5.i.i.i*/
/*   %length.04.i.i.i = phi i32 [ %310, %._crit_edge.i12.i.i ], [ %258, %.preheader.i7.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB67_212) */
begin
main__lr_ph5_i_i_i_length_04_i_i_i = main__lr_ph5_i_i_i_length_04_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.lr.ph5.i.i.i*/
/*   %length.04.i.i.i = phi i32 [ %310, %._crit_edge.i12.i.i ], [ %258, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_length_04_i_i_i_reg <= main__lr_ph5_i_i_i_length_04_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_length_04_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_length_04_i_i_i_reg"); $finish; end
end
/* main: %.lr.ph5.i.i.i*/
/*   %length.04.i.i.i = phi i32 [ %310, %._crit_edge.i12.i.i ], [ %258, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_length_04_i_i_i_reg <= main__lr_ph5_i_i_i_length_04_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_length_04_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_length_04_i_i_i_reg"); $finish; end
end
/* main: %.lr.ph5.i.i.i*/
/*   %length.04.i.i.i = phi i32 [ %310, %._crit_edge.i12.i.i ], [ %258, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_length_04_i_i_i_reg <= main__lr_ph5_i_i_i_length_04_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_length_04_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_length_04_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %266 = getelementptr inbounds i8* %ReadBuf.6, i32 1*/
begin
main__lr_ph5_i_i_i_266 = main__lr_ph5_i_i_i_ReadBuf_6 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %.lr.ph5.i.i.i*/
/*   %266 = getelementptr inbounds i8* %ReadBuf.6, i32 1*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_266_reg <= main__lr_ph5_i_i_i_266;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_266_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %267 = load i8* %ReadBuf.6, align 1, !tbaa !1*/
begin
main__lr_ph5_i_i_i_267 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %268 = zext i8 %267 to i32*/
begin
main__lr_ph5_i_i_i_268 = main__lr_ph5_i_i_i_267;
end
end
always @(posedge clk) begin
/* main: %.lr.ph5.i.i.i*/
/*   %268 = zext i8 %267 to i32*/
if (cur_state == LEGUP_F_main_BB67_214)
begin
main__lr_ph5_i_i_i_268_reg <= main__lr_ph5_i_i_i_268;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_268_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %270 = getelementptr inbounds [4 x i32]* @out_index_get_dht, i32 0, i32 %i_get_dht.2*/
begin
main__lr_ph5_i_i_i_270 = `TAG_g_out_index_get_dht_a + 4 * main__lr_ph5_i_i_i_i_get_dht_2;
end
end
always @(posedge clk) begin
/* main: %.lr.ph5.i.i.i*/
/*   %270 = getelementptr inbounds [4 x i32]* @out_index_get_dht, i32 0, i32 %i_get_dht.2*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
main__lr_ph5_i_i_i_270_reg <= main__lr_ph5_i_i_i_270;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_270_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
begin
main__lr_ph5_i_i_i_271 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %.lr.ph5.i.i.i*/
/*   %272 = icmp eq i32 %268, %271*/
begin
main__lr_ph5_i_i_i_272 = main__lr_ph5_i_i_i_268_reg == main__lr_ph5_i_i_i_271;
end
end
always @(*) begin
/* main: %273*/
/*   %274 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_273_274 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %273*/
/*   %275 = add nsw i32 %274, 1*/
begin
main_273_275 = main_273_274 + 32'd1;
end
end
always @(*) begin
/* main: %276*/
/*   %277 = and i32 %268, 16*/
begin
main_276_277 = main__lr_ph5_i_i_i_268_reg & 32'd16;
end
end
always @(*) begin
/* main: %276*/
/*   %278 = icmp eq i32 %277, 0*/
begin
main_276_278 = main_276_277 == 32'd0;
end
end
always @(*) begin
/* main: %279*/
/*   %280 = add nsw i32 %268, -16*/
begin
main_279_280 = main__lr_ph5_i_i_i_268_reg + -32'd16;
end
end
always @(*) begin
/* main: %279*/
/*   %281 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 %280, i32 0*/
begin
main_279_281 = `TAG_g_p_jinfo_ac_xhuff_tbl_bits_a + 144 * main_279_280;
end
end
always @(*) begin
/* main: %279*/
/*   %282 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i32 0, i32 %280, i32 0*/
begin
main_279_282 = `TAG_g_p_jinfo_ac_xhuff_tbl_huffval_a + 1028 * main_279_280;
end
end
always @(*) begin
/* main: %283*/
/*   %284 = getelementptr inbounds [2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 %268, i32 0*/
begin
main_283_284 = `TAG_g_p_jinfo_dc_xhuff_tbl_bits_a + 144 * main__lr_ph5_i_i_i_268_reg;
end
end
always @(*) begin
/* main: %283*/
/*   %285 = getelementptr inbounds [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i32 0, i32 %268, i32 0*/
begin
main_283_285 = `TAG_g_p_jinfo_dc_xhuff_tbl_huffval_a + 1028 * main__lr_ph5_i_i_i_268_reg;
end
end
always @(*) begin
/* main: %286*/
/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
if (cur_state == LEGUP_F_main_BB72_224)
begin
main_286_p_xhtbl_huffval_0_i_i_i = main_286_p_xhtbl_huffval_0_i_i_i_phi_temp;
end
/* main: %286*/
/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
else /* if (cur_state == LEGUP_F_main_BB72_224) */
begin
main_286_p_xhtbl_huffval_0_i_i_i = main_286_p_xhtbl_huffval_0_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %286*/
/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
if (cur_state == LEGUP_F_main_BB72_224)
begin
main_286_p_xhtbl_huffval_0_i_i_i_reg <= main_286_p_xhtbl_huffval_0_i_i_i;
if (^reset !== 1'bX && ^(main_286_p_xhtbl_huffval_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_huffval_0_i_i_i_reg"); $finish; end
end
/* main: %286*/
/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
if (cur_state == LEGUP_F_main_BB72_224)
begin
main_286_p_xhtbl_huffval_0_i_i_i_reg <= main_286_p_xhtbl_huffval_0_i_i_i;
if (^reset !== 1'bX && ^(main_286_p_xhtbl_huffval_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_huffval_0_i_i_i_reg"); $finish; end
end
/* main: %286*/
/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
if (cur_state == LEGUP_F_main_BB72_224)
begin
main_286_p_xhtbl_huffval_0_i_i_i_reg <= main_286_p_xhtbl_huffval_0_i_i_i;
if (^reset !== 1'bX && ^(main_286_p_xhtbl_huffval_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_huffval_0_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %286*/
/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
if (cur_state == LEGUP_F_main_BB72_224)
begin
main_286_p_xhtbl_bits_0_i_i_i = main_286_p_xhtbl_bits_0_i_i_i_phi_temp;
end
/* main: %286*/
/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
else /* if (cur_state == LEGUP_F_main_BB72_224) */
begin
main_286_p_xhtbl_bits_0_i_i_i = main_286_p_xhtbl_bits_0_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %286*/
/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
if (cur_state == LEGUP_F_main_BB72_224)
begin
main_286_p_xhtbl_bits_0_i_i_i_reg <= main_286_p_xhtbl_bits_0_i_i_i;
if (^reset !== 1'bX && ^(main_286_p_xhtbl_bits_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_bits_0_i_i_i_reg"); $finish; end
end
/* main: %286*/
/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
if (cur_state == LEGUP_F_main_BB72_224)
begin
main_286_p_xhtbl_bits_0_i_i_i_reg <= main_286_p_xhtbl_bits_0_i_i_i;
if (^reset !== 1'bX && ^(main_286_p_xhtbl_bits_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_bits_0_i_i_i_reg"); $finish; end
end
/* main: %286*/
/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
if (cur_state == LEGUP_F_main_BB72_224)
begin
main_286_p_xhtbl_bits_0_i_i_i_reg <= main_286_p_xhtbl_bits_0_i_i_i;
if (^reset !== 1'bX && ^(main_286_p_xhtbl_bits_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_bits_0_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %288 = phi i8* [ %266, %286 ], [ %289, %287 ]*/
begin
main_287_288 = main_287_288_phi_temp;
end
end
always @(*) begin
/* main: %287*/
/*   %indvar.i.i.i = phi i32 [ 0, %286 ], [ %tmp.i8.i.i, %287 ]*/
begin
main_287_indvar_i_i_i = main_287_indvar_i_i_i_phi_temp;
end
end
always @(*) begin
/* main: %287*/
/*   %count.01.i.i.i = phi i32 [ 0, %286 ], [ %292, %287 ]*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
main_287_count_01_i_i_i = main_287_count_01_i_i_i_phi_temp;
end
/* main: %287*/
/*   %count.01.i.i.i = phi i32 [ 0, %286 ], [ %292, %287 ]*/
else /* if (cur_state == LEGUP_F_main_BB73_225) */
begin
main_287_count_01_i_i_i = main_287_count_01_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %count.01.i.i.i = phi i32 [ 0, %286 ], [ %292, %287 ]*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
main_287_count_01_i_i_i_reg <= main_287_count_01_i_i_i;
if (^reset !== 1'bX && ^(main_287_count_01_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_count_01_i_i_i_reg"); $finish; end
end
/* main: %287*/
/*   %count.01.i.i.i = phi i32 [ 0, %286 ], [ %292, %287 ]*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
main_287_count_01_i_i_i_reg <= main_287_count_01_i_i_i;
if (^reset !== 1'bX && ^(main_287_count_01_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_count_01_i_i_i_reg"); $finish; end
end
/* main: %287*/
/*   %count.01.i.i.i = phi i32 [ 0, %286 ], [ %292, %287 ]*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
main_287_count_01_i_i_i_reg <= main_287_count_01_i_i_i;
if (^reset !== 1'bX && ^(main_287_count_01_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_count_01_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %tmp.i8.i.i = add i32 %indvar.i.i.i, 1*/
begin
main_287_tmp_i8_i_i = main_287_indvar_i_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %tmp.i8.i.i = add i32 %indvar.i.i.i, 1*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
main_287_tmp_i8_i_i_reg <= main_287_tmp_i8_i_i;
if (^reset !== 1'bX && ^(main_287_tmp_i8_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_tmp_i8_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %scevgep.i9.i.i = getelementptr i32* %p_xhtbl_bits.0.i.i.i, i32 %tmp.i8.i.i*/
begin
main_287_scevgep_i9_i_i = main_286_p_xhtbl_bits_0_i_i_i_reg + 4 * main_287_tmp_i8_i_i;
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %scevgep.i9.i.i = getelementptr i32* %p_xhtbl_bits.0.i.i.i, i32 %tmp.i8.i.i*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
main_287_scevgep_i9_i_i_reg <= main_287_scevgep_i9_i_i;
if (^reset !== 1'bX && ^(main_287_scevgep_i9_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_scevgep_i9_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %289 = getelementptr inbounds i8* %288, i32 1*/
begin
main_287_289 = main_287_288 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %289 = getelementptr inbounds i8* %288, i32 1*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
main_287_289_reg <= main_287_289;
if (^reset !== 1'bX && ^(main_287_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_289_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %290 = load i8* %288, align 1, !tbaa !1*/
begin
main_287_290 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %287*/
/*   %291 = zext i8 %290 to i32*/
begin
main_287_291 = main_287_290;
end
end
always @(*) begin
/* main: %287*/
/*   %292 = add nsw i32 %291, %count.01.i.i.i*/
begin
main_287_292 = main_287_291 + main_287_count_01_i_i_i_reg;
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %292 = add nsw i32 %291, %count.01.i.i.i*/
if (cur_state == LEGUP_F_main_BB73_227)
begin
main_287_292_reg <= main_287_292;
if (^reset !== 1'bX && ^(main_287_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_292_reg"); $finish; end
end
end
always @(*) begin
/* main: %287*/
/*   %exitcond.i.i.i = icmp eq i32 %tmp.i8.i.i, 16*/
begin
main_287_exitcond_i_i_i = main_287_tmp_i8_i_i == 32'd16;
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %exitcond.i.i.i = icmp eq i32 %tmp.i8.i.i, 16*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
main_287_exitcond_i_i_i_reg <= main_287_exitcond_i_i_i;
if (^reset !== 1'bX && ^(main_287_exitcond_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_exitcond_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %295 = getelementptr inbounds [4 x i32]* @out_count_get_dht, i32 0, i32 %i_get_dht.2*/
begin
main_293_295 = `TAG_g_out_count_get_dht_a + 4 * main__lr_ph5_i_i_i_i_get_dht_2_reg;
end
end
always @(posedge clk) begin
/* main: %293*/
/*   %295 = getelementptr inbounds [4 x i32]* @out_count_get_dht, i32 0, i32 %i_get_dht.2*/
if (cur_state == LEGUP_F_main_BB74_228)
begin
main_293_295_reg <= main_293_295;
if (^reset !== 1'bX && ^(main_293_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_293_295_reg"); $finish; end
end
end
always @(*) begin
/* main: %293*/
/*   %296 = load i32* %295, align 4, !tbaa !0*/
begin
main_293_296 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %293*/
/*   %297 = icmp eq i32 %292, %296*/
begin
main_293_297 = main_287_292_reg == main_293_296;
end
end
always @(*) begin
/* main: %298*/
/*   %299 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_298_299 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %298*/
/*   %300 = add nsw i32 %299, 1*/
begin
main_298_300 = main_298_299 + 32'd1;
end
end
always @(*) begin
/* main: %301*/
/*   %302 = add nsw i32 %i_get_dht.2, 1*/
begin
main_301_302 = main__lr_ph5_i_i_i_i_get_dht_2_reg + 32'd1;
end
end
always @(posedge clk) begin
/* main: %301*/
/*   %302 = add nsw i32 %i_get_dht.2, 1*/
if (cur_state == LEGUP_F_main_BB76_235)
begin
main_301_302_reg <= main_301_302;
if (^reset !== 1'bX && ^(main_301_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_301_302_reg"); $finish; end
end
end
always @(*) begin
/* main: %301*/
/*   %303 = icmp sgt i32 %292, 0*/
begin
main_301_303 = $signed(main_287_292_reg) > $signed(32'd0);
end
end
always @(*) begin
/* main: %.lr.ph.i10.i.i*/
/*   %304 = phi i8* [ %305, %.lr.ph.i10.i.i ], [ %289, %301 ]*/
begin
main__lr_ph_i10_i_i_304 = main__lr_ph_i10_i_i_304_phi_temp;
end
end
always @(*) begin
/* main: %.lr.ph.i10.i.i*/
/*   %i.13.i.i.i = phi i32 [ %308, %.lr.ph.i10.i.i ], [ 0, %301 ]*/
begin
main__lr_ph_i10_i_i_i_13_i_i_i = main__lr_ph_i10_i_i_i_13_i_i_i_phi_temp;
end
end
always @(*) begin
/* main: %.lr.ph.i10.i.i*/
/*   %scevgep8.i11.i.i = getelementptr i32* %p_xhtbl_huffval.0.i.i.i, i32 %i.13.i.i.i*/
begin
main__lr_ph_i10_i_i_scevgep8_i11_i_i = main_286_p_xhtbl_huffval_0_i_i_i_reg + 4 * main__lr_ph_i10_i_i_i_13_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i10.i.i*/
/*   %scevgep8.i11.i.i = getelementptr i32* %p_xhtbl_huffval.0.i.i.i, i32 %i.13.i.i.i*/
if (cur_state == LEGUP_F_main_BB77_236)
begin
main__lr_ph_i10_i_i_scevgep8_i11_i_i_reg <= main__lr_ph_i10_i_i_scevgep8_i11_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i10_i_i_scevgep8_i11_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i10_i_i_scevgep8_i11_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i10.i.i*/
/*   %305 = getelementptr inbounds i8* %304, i32 1*/
begin
main__lr_ph_i10_i_i_305 = main__lr_ph_i10_i_i_304 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i10.i.i*/
/*   %305 = getelementptr inbounds i8* %304, i32 1*/
if (cur_state == LEGUP_F_main_BB77_236)
begin
main__lr_ph_i10_i_i_305_reg <= main__lr_ph_i10_i_i_305;
if (^reset !== 1'bX && ^(main__lr_ph_i10_i_i_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i10_i_i_305_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i10.i.i*/
/*   %306 = load i8* %304, align 1, !tbaa !1*/
begin
main__lr_ph_i10_i_i_306 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i10.i.i*/
/*   %307 = zext i8 %306 to i32*/
begin
main__lr_ph_i10_i_i_307 = main__lr_ph_i10_i_i_306;
end
end
always @(*) begin
/* main: %.lr.ph.i10.i.i*/
/*   %308 = add nsw i32 %i.13.i.i.i, 1*/
begin
main__lr_ph_i10_i_i_308 = main__lr_ph_i10_i_i_i_13_i_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i10.i.i*/
/*   %308 = add nsw i32 %i.13.i.i.i, 1*/
if (cur_state == LEGUP_F_main_BB77_236)
begin
main__lr_ph_i10_i_i_308_reg <= main__lr_ph_i10_i_i_308;
if (^reset !== 1'bX && ^(main__lr_ph_i10_i_i_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i10_i_i_308_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i10.i.i*/
/*   %exitcond7.i.i.i = icmp eq i32 %308, %292*/
begin
main__lr_ph_i10_i_i_exitcond7_i_i_i = main__lr_ph_i10_i_i_308 == main_287_292_reg;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i10.i.i*/
/*   %exitcond7.i.i.i = icmp eq i32 %308, %292*/
if (cur_state == LEGUP_F_main_BB77_236)
begin
main__lr_ph_i10_i_i_exitcond7_i_i_i_reg <= main__lr_ph_i10_i_i_exitcond7_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i10_i_i_exitcond7_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i10_i_i_exitcond7_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %._crit_edge.i12.i.i*/
/*   %ReadBuf.7 = phi i8* [ %289, %301 ], [ %305, %.lr.ph.i10.i.i ]*/
begin
main___crit_edge_i12_i_i_ReadBuf_7 = main___crit_edge_i12_i_i_ReadBuf_7_phi_temp;
end
end
always @(*) begin
/* main: %._crit_edge.i12.i.i*/
/*   %309 = add i32 %length.04.i.i.i, -17*/
begin
main___crit_edge_i12_i_i_309 = main__lr_ph5_i_i_i_length_04_i_i_i_reg + -32'd17;
end
end
always @(*) begin
/* main: %._crit_edge.i12.i.i*/
/*   %310 = sub i32 %309, %292*/
begin
main___crit_edge_i12_i_i_310 = main___crit_edge_i12_i_i_309 - main_287_292_reg;
end
end
always @(*) begin
/* main: %._crit_edge.i12.i.i*/
/*   %311 = icmp sgt i32 %310, 16*/
begin
main___crit_edge_i12_i_i_311 = $signed(main___crit_edge_i12_i_i_310) > $signed(32'd16);
end
end
always @(*) begin
/* main: %312*/
/*   %313 = getelementptr inbounds i8* %ReadBuf.2, i32 1*/
begin
main_312_313 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %312*/
/*   %313 = getelementptr inbounds i8* %ReadBuf.2, i32 1*/
if (cur_state == LEGUP_F_main_BB79_240)
begin
main_312_313_reg <= main_312_313;
if (^reset !== 1'bX && ^(main_312_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_312_313_reg"); $finish; end
end
end
always @(*) begin
/* main: %312*/
/*   %314 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
begin
main_312_314 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %312*/
/*   %315 = zext i8 %314 to i16*/
begin
main_312_315 = main_312_314;
end
end
always @(*) begin
/* main: %312*/
/*   %316 = shl nuw i16 %315, 8*/
begin
main_312_316 = main_312_315 <<< 16'd8 % 16'd16;
end
end
always @(posedge clk) begin
/* main: %312*/
/*   %316 = shl nuw i16 %315, 8*/
if (cur_state == LEGUP_F_main_BB79_242)
begin
main_312_316_reg <= main_312_316;
if (^reset !== 1'bX && ^(main_312_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_312_316_reg"); $finish; end
end
end
always @(*) begin
/* main: %312*/
/*   %317 = getelementptr inbounds i8* %ReadBuf.2, i32 2*/
begin
main_312_317 = main_next_marker_exit_i_i_ReadBuf_2_reg + 1 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %312*/
/*   %317 = getelementptr inbounds i8* %ReadBuf.2, i32 2*/
if (cur_state == LEGUP_F_main_BB79_240)
begin
main_312_317_reg <= main_312_317;
if (^reset !== 1'bX && ^(main_312_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_312_317_reg"); $finish; end
end
end
always @(*) begin
/* main: %312*/
/*   %318 = load i8* %313, align 1, !tbaa !1*/
begin
main_312_318 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %312*/
/*   %319 = zext i8 %318 to i16*/
begin
main_312_319 = main_312_318;
end
end
always @(*) begin
/* main: %312*/
/*   %320 = or i16 %316, %319*/
begin
main_312_320 = main_312_316_reg | main_312_319;
end
end
always @(*) begin
/* main: %312*/
/*   %321 = sext i16 %320 to i32*/
begin
main_312_321 = $signed(main_312_320);
end
end
always @(*) begin
/* main: %312*/
/*   %322 = add nsw i32 %321, -2*/
begin
main_312_322 = main_312_321 + -32'd2;
end
end
always @(posedge clk) begin
/* main: %312*/
/*   %322 = add nsw i32 %321, -2*/
if (cur_state == LEGUP_F_main_BB79_243)
begin
main_312_322_reg <= main_312_322;
if (^reset !== 1'bX && ^(main_312_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_312_322_reg"); $finish; end
end
end
always @(*) begin
/* main: %312*/
/*   %324 = load i32* %5, align 4, !tbaa !0*/
begin
main_312_324 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %312*/
/*   %325 = icmp eq i32 %322, %324*/
begin
main_312_325 = main_312_322_reg == main_312_324;
end
end
always @(*) begin
/* main: %326*/
/*   %327 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_326_327 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %326*/
/*   %328 = add nsw i32 %327, 1*/
begin
main_326_328 = main_326_327 + 32'd1;
end
end
always @(*) begin
/* main: %.preheader.i13.i.i*/
/*   %329 = icmp sgt i32 %322, 0*/
begin
main__preheader_i13_i_i_329 = $signed(main_312_322_reg) > $signed(32'd0);
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_i_get_dqt_2 = main__lr_ph_i15_i_i_i_get_dqt_2_phi_temp;
end
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
else if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_i_get_dqt_2 = main__lr_ph_i15_i_i_i_get_dqt_2_phi_temp;
end
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB82_251) */
begin
main__lr_ph_i15_i_i_i_get_dqt_2 = main__lr_ph_i15_i_i_i_get_dqt_2_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_i_get_dqt_2_reg <= main__lr_ph_i15_i_i_i_get_dqt_2;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_i_get_dqt_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_i_get_dqt_2_reg"); $finish; end
end
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_i_get_dqt_2_reg <= main__lr_ph_i15_i_i_i_get_dqt_2;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_i_get_dqt_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_i_get_dqt_2_reg"); $finish; end
end
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_i_get_dqt_2_reg <= main__lr_ph_i15_i_i_i_get_dqt_2;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_i_get_dqt_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_i_get_dqt_2_reg"); $finish; end
end
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_i_get_dqt_2_reg <= main__lr_ph_i15_i_i_i_get_dqt_2;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_i_get_dqt_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_i_get_dqt_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %330 = phi i8* [ %ReadBuf.8, %.us-lcssa.us.i.i.i ], [ %317, %.preheader.i13.i.i ]*/
begin
main__lr_ph_i15_i_i_330 = main__lr_ph_i15_i_i_330_phi_temp;
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %322, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_length_02_i_i_i = main__lr_ph_i15_i_i_length_02_i_i_i_phi_temp;
end
/* main: %.lr.ph.i15.i.i*/
/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %322, %.preheader.i13.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB82_251) */
begin
main__lr_ph_i15_i_i_length_02_i_i_i = main__lr_ph_i15_i_i_length_02_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %322, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_length_02_i_i_i_reg <= main__lr_ph_i15_i_i_length_02_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_length_02_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_length_02_i_i_i_reg"); $finish; end
end
/* main: %.lr.ph.i15.i.i*/
/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %322, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_length_02_i_i_i_reg <= main__lr_ph_i15_i_i_length_02_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_length_02_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_length_02_i_i_i_reg"); $finish; end
end
/* main: %.lr.ph.i15.i.i*/
/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %322, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_length_02_i_i_i_reg <= main__lr_ph_i15_i_i_length_02_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_length_02_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_length_02_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %331 = getelementptr inbounds i8* %330, i32 1*/
begin
main__lr_ph_i15_i_i_331 = main__lr_ph_i15_i_i_330 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %331 = getelementptr inbounds i8* %330, i32 1*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_331_reg <= main__lr_ph_i15_i_i_331;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_331_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %332 = load i8* %330, align 1, !tbaa !1*/
begin
main__lr_ph_i15_i_i_332 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %333 = zext i8 %332 to i32*/
begin
main__lr_ph_i15_i_i_333 = main__lr_ph_i15_i_i_332;
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %334 = lshr i32 %333, 4*/
begin
main__lr_ph_i15_i_i_334 = main__lr_ph_i15_i_i_333 >>> 32'd4 % 32;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %334 = lshr i32 %333, 4*/
if (cur_state == LEGUP_F_main_BB82_253)
begin
main__lr_ph_i15_i_i_334_reg <= main__lr_ph_i15_i_i_334;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_334_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %335 = and i32 %333, 15*/
begin
main__lr_ph_i15_i_i_335 = main__lr_ph_i15_i_i_333 & 32'd15;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %335 = and i32 %333, 15*/
if (cur_state == LEGUP_F_main_BB82_253)
begin
main__lr_ph_i15_i_i_335_reg <= main__lr_ph_i15_i_i_335;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_335_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %338 = getelementptr inbounds [2 x i32]* @out_prec_get_dht, i32 0, i32 %i_get_dqt.2*/
begin
main__lr_ph_i15_i_i_338 = `TAG_g_out_prec_get_dht_a + 4 * main__lr_ph_i15_i_i_i_get_dqt_2;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %338 = getelementptr inbounds [2 x i32]* @out_prec_get_dht, i32 0, i32 %i_get_dqt.2*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
main__lr_ph_i15_i_i_338_reg <= main__lr_ph_i15_i_i_338;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_338_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %339 = load i32* %338, align 4, !tbaa !0*/
begin
main__lr_ph_i15_i_i_339 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %.lr.ph.i15.i.i*/
/*   %340 = icmp eq i32 %334, %339*/
begin
main__lr_ph_i15_i_i_340 = main__lr_ph_i15_i_i_334_reg == main__lr_ph_i15_i_i_339;
end
end
always @(*) begin
/* main: %341*/
/*   %342 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_341_342 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %341*/
/*   %343 = add nsw i32 %342, 1*/
begin
main_341_343 = main_341_342 + 32'd1;
end
end
always @(*) begin
/* main: %344*/
/*   %345 = getelementptr inbounds [2 x i32]* @out_num_get_dht, i32 0, i32 %i_get_dqt.2*/
begin
main_344_345 = `TAG_g_out_num_get_dht_a + 4 * main__lr_ph_i15_i_i_i_get_dqt_2_reg;
end
end
always @(*) begin
/* main: %344*/
/*   %346 = load i32* %345, align 4, !tbaa !0*/
begin
main_344_346 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %344*/
/*   %347 = icmp eq i32 %335, %346*/
begin
main_344_347 = main__lr_ph_i15_i_i_335_reg == main_344_346;
end
end
always @(*) begin
/* main: %348*/
/*   %349 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_348_349 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %348*/
/*   %350 = add nsw i32 %349, 1*/
begin
main_348_350 = main_348_349 + 32'd1;
end
end
always @(*) begin
/* main: %351*/
/*   %352 = add nsw i32 %i_get_dqt.2, 1*/
begin
main_351_352 = main__lr_ph_i15_i_i_i_get_dqt_2_reg + 32'd1;
end
end
always @(posedge clk) begin
/* main: %351*/
/*   %352 = add nsw i32 %i_get_dqt.2, 1*/
if (cur_state == LEGUP_F_main_BB86_266)
begin
main_351_352_reg <= main_351_352;
if (^reset !== 1'bX && ^(main_351_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_351_352_reg"); $finish; end
end
end
always @(*) begin
/* main: %351*/
/*   %353 = icmp eq i32 %334, 0*/
begin
main_351_353 = main__lr_ph_i15_i_i_334_reg == 32'd0;
end
end
always @(posedge clk) begin
/* main: %351*/
/*   %353 = icmp eq i32 %334, 0*/
if (cur_state == LEGUP_F_main_BB86_266)
begin
main_351_353_reg <= main_351_353;
if (^reset !== 1'bX && ^(main_351_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_351_353_reg"); $finish; end
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %354 = phi i8* [ %355, %.split.us.i.i.i ], [ %331, %351 ]*/
begin
main__split_us_i_i_i_354 = main__split_us_i_i_i_354_phi_temp;
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %i.01.us.i.i.i = phi i32 [ %360, %.split.us.i.i.i ], [ 0, %351 ]*/
begin
main__split_us_i_i_i_i_01_us_i_i_i = main__split_us_i_i_i_i_01_us_i_i_i_phi_temp;
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %scevgep.i16.i.i = getelementptr [64 x i32]* @izigzag_index, i32 0, i32 %i.01.us.i.i.i*/
begin
main__split_us_i_i_i_scevgep_i16_i_i = `TAG_g_izigzag_index_a + 4 * main__split_us_i_i_i_i_01_us_i_i_i;
end
end
always @(posedge clk) begin
/* main: %.split.us.i.i.i*/
/*   %scevgep.i16.i.i = getelementptr [64 x i32]* @izigzag_index, i32 0, i32 %i.01.us.i.i.i*/
if (cur_state == LEGUP_F_main_BB87_267)
begin
main__split_us_i_i_i_scevgep_i16_i_i_reg <= main__split_us_i_i_i_scevgep_i16_i_i;
if (^reset !== 1'bX && ^(main__split_us_i_i_i_scevgep_i16_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_scevgep_i16_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %355 = getelementptr inbounds i8* %354, i32 1*/
begin
main__split_us_i_i_i_355 = main__split_us_i_i_i_354 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %.split.us.i.i.i*/
/*   %355 = getelementptr inbounds i8* %354, i32 1*/
if (cur_state == LEGUP_F_main_BB87_267)
begin
main__split_us_i_i_i_355_reg <= main__split_us_i_i_i_355;
if (^reset !== 1'bX && ^(main__split_us_i_i_i_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_355_reg"); $finish; end
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %356 = load i8* %354, align 1, !tbaa !1*/
begin
main__split_us_i_i_i_356 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %357 = zext i8 %356 to i32*/
begin
main__split_us_i_i_i_357 = main__split_us_i_i_i_356;
end
end
always @(posedge clk) begin
/* main: %.split.us.i.i.i*/
/*   %357 = zext i8 %356 to i32*/
if (cur_state == LEGUP_F_main_BB87_269)
begin
main__split_us_i_i_i_357_reg <= main__split_us_i_i_i_357;
if (^reset !== 1'bX && ^(main__split_us_i_i_i_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_357_reg"); $finish; end
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %358 = load i32* %scevgep.i16.i.i, align 4, !tbaa !0*/
begin
main__split_us_i_i_i_358 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %.sum.us.i.i.i = add i32 %358, 64*/
begin
main__split_us_i_i_i__sum_us_i_i_i = main__split_us_i_i_i_358 + 32'd64;
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %359 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %335, i32 %.sum.us.i.i.i*/
begin
main__split_us_i_i_i_359 = `TAG_g_p_jinfo_quant_tbl_quantval_a + 256 * main__lr_ph_i15_i_i_335_reg + 4 * main__split_us_i_i_i__sum_us_i_i_i;
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %360 = add nsw i32 %i.01.us.i.i.i, 1*/
begin
main__split_us_i_i_i_360 = main__split_us_i_i_i_i_01_us_i_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.split.us.i.i.i*/
/*   %360 = add nsw i32 %i.01.us.i.i.i, 1*/
if (cur_state == LEGUP_F_main_BB87_267)
begin
main__split_us_i_i_i_360_reg <= main__split_us_i_i_i_360;
if (^reset !== 1'bX && ^(main__split_us_i_i_i_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_360_reg"); $finish; end
end
end
always @(*) begin
/* main: %.split.us.i.i.i*/
/*   %exitcond.i17.i.i = icmp eq i32 %360, 64*/
begin
main__split_us_i_i_i_exitcond_i17_i_i = main__split_us_i_i_i_360 == 32'd64;
end
end
always @(posedge clk) begin
/* main: %.split.us.i.i.i*/
/*   %exitcond.i17.i.i = icmp eq i32 %360, 64*/
if (cur_state == LEGUP_F_main_BB87_267)
begin
main__split_us_i_i_i_exitcond_i17_i_i_reg <= main__split_us_i_i_i_exitcond_i17_i_i;
if (^reset !== 1'bX && ^(main__split_us_i_i_i_exitcond_i17_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_exitcond_i17_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %361 = phi i8* [ %366, %..split_crit_edge.i.i.i ], [ %331, %351 ]*/
begin
main___split_crit_edge_i_i_i_361 = main___split_crit_edge_i_i_i_361_phi_temp;
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %i.01.i.i.i = phi i32 [ %372, %..split_crit_edge.i.i.i ], [ 0, %351 ]*/
begin
main___split_crit_edge_i_i_i_i_01_i_i_i = main___split_crit_edge_i_i_i_i_01_i_i_i_phi_temp;
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %scevgep4.i18.i.i = getelementptr [64 x i32]* @izigzag_index, i32 0, i32 %i.01.i.i.i*/
begin
main___split_crit_edge_i_i_i_scevgep4_i18_i_i = `TAG_g_izigzag_index_a + 4 * main___split_crit_edge_i_i_i_i_01_i_i_i;
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %scevgep4.i18.i.i = getelementptr [64 x i32]* @izigzag_index, i32 0, i32 %i.01.i.i.i*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
main___split_crit_edge_i_i_i_scevgep4_i18_i_i_reg <= main___split_crit_edge_i_i_i_scevgep4_i18_i_i;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_scevgep4_i18_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_scevgep4_i18_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %362 = getelementptr inbounds i8* %361, i32 1*/
begin
main___split_crit_edge_i_i_i_362 = main___split_crit_edge_i_i_i_361 + 1 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %362 = getelementptr inbounds i8* %361, i32 1*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
main___split_crit_edge_i_i_i_362_reg <= main___split_crit_edge_i_i_i_362;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_362_reg"); $finish; end
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %363 = load i8* %361, align 1, !tbaa !1*/
begin
main___split_crit_edge_i_i_i_363 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %364 = zext i8 %363 to i32*/
begin
main___split_crit_edge_i_i_i_364 = main___split_crit_edge_i_i_i_363;
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %365 = shl nuw nsw i32 %364, 8*/
begin
main___split_crit_edge_i_i_i_365 = main___split_crit_edge_i_i_i_364 <<< 32'd8 % 32;
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %365 = shl nuw nsw i32 %364, 8*/
if (cur_state == LEGUP_F_main_BB88_273)
begin
main___split_crit_edge_i_i_i_365_reg <= main___split_crit_edge_i_i_i_365;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_365_reg"); $finish; end
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %366 = getelementptr inbounds i8* %361, i32 2*/
begin
main___split_crit_edge_i_i_i_366 = main___split_crit_edge_i_i_i_361 + 1 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %366 = getelementptr inbounds i8* %361, i32 2*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
main___split_crit_edge_i_i_i_366_reg <= main___split_crit_edge_i_i_i_366;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_366_reg"); $finish; end
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %367 = load i8* %362, align 1, !tbaa !1*/
begin
main___split_crit_edge_i_i_i_367 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %368 = zext i8 %367 to i32*/
begin
main___split_crit_edge_i_i_i_368 = main___split_crit_edge_i_i_i_367;
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %369 = or i32 %368, %365*/
begin
main___split_crit_edge_i_i_i_369 = main___split_crit_edge_i_i_i_368 | main___split_crit_edge_i_i_i_365_reg;
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %369 = or i32 %368, %365*/
if (cur_state == LEGUP_F_main_BB88_274)
begin
main___split_crit_edge_i_i_i_369_reg <= main___split_crit_edge_i_i_i_369;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_369_reg"); $finish; end
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %370 = load i32* %scevgep4.i18.i.i, align 4, !tbaa !0*/
begin
main___split_crit_edge_i_i_i_370 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %.sum.i.i.i = add i32 %370, 64*/
begin
main___split_crit_edge_i_i_i__sum_i_i_i = main___split_crit_edge_i_i_i_370 + 32'd64;
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %371 = getelementptr inbounds [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i32 0, i32 %335, i32 %.sum.i.i.i*/
begin
main___split_crit_edge_i_i_i_371 = `TAG_g_p_jinfo_quant_tbl_quantval_a + 256 * main__lr_ph_i15_i_i_335_reg + 4 * main___split_crit_edge_i_i_i__sum_i_i_i;
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %372 = add nsw i32 %i.01.i.i.i, 1*/
begin
main___split_crit_edge_i_i_i_372 = main___split_crit_edge_i_i_i_i_01_i_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %372 = add nsw i32 %i.01.i.i.i, 1*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
main___split_crit_edge_i_i_i_372_reg <= main___split_crit_edge_i_i_i_372;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_372_reg"); $finish; end
end
end
always @(*) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %exitcond3.i.i.i = icmp eq i32 %372, 64*/
begin
main___split_crit_edge_i_i_i_exitcond3_i_i_i = main___split_crit_edge_i_i_i_372 == 32'd64;
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %exitcond3.i.i.i = icmp eq i32 %372, 64*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
main___split_crit_edge_i_i_i_exitcond3_i_i_i_reg <= main___split_crit_edge_i_i_i_exitcond3_i_i_i;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_exitcond3_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_exitcond3_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.us-lcssa.us.i.i.i*/
/*   %ReadBuf.8 = phi i8* [ %366, %..split_crit_edge.i.i.i ], [ %355, %.split.us.i.i.i ]*/
begin
main__us_lcssa_us_i_i_i_ReadBuf_8 = main__us_lcssa_us_i_i_i_ReadBuf_8_phi_temp;
end
end
always @(*) begin
/* main: %.us-lcssa.us.i.i.i*/
/*   %..v.i.i.i = select i1 %353, i32 -65, i32 -129*/
begin
main__us_lcssa_us_i_i_i___v_i_i_i = (main_351_353_reg ? -32'd65 : -32'd129);
end
end
always @(*) begin
/* main: %.us-lcssa.us.i.i.i*/
/*   %..i.i.i = add i32 %..v.i.i.i, %length.02.i.i.i*/
begin
main__us_lcssa_us_i_i_i___i_i_i = main__us_lcssa_us_i_i_i___v_i_i_i + main__lr_ph_i15_i_i_length_02_i_i_i_reg;
end
end
always @(*) begin
/* main: %.us-lcssa.us.i.i.i*/
/*   %373 = icmp sgt i32 %..i.i.i, 0*/
begin
main__us_lcssa_us_i_i_i_373 = $signed(main__us_lcssa_us_i_i_i___i_i_i) > $signed(32'd0);
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i2.i.i, %get_sos.exit.i.i ], [ null, %31 ]*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
main_read_markers_exit_i_p_jinfo_jpeg_data_0 = main_read_markers_exit_i_p_jinfo_jpeg_data_0_phi_temp;
end
/* main: %read_markers.exit.i*/
/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i2.i.i, %get_sos.exit.i.i ], [ null, %31 ]*/
else /* if (cur_state == LEGUP_F_main_BB90_277) */
begin
main_read_markers_exit_i_p_jinfo_jpeg_data_0 = main_read_markers_exit_i_p_jinfo_jpeg_data_0_phi_temp;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i2.i.i, %get_sos.exit.i.i ], [ null, %31 ]*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
main_read_markers_exit_i_p_jinfo_jpeg_data_0_reg <= main_read_markers_exit_i_p_jinfo_jpeg_data_0;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_p_jinfo_jpeg_data_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_p_jinfo_jpeg_data_0_reg"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i2.i.i, %get_sos.exit.i.i ], [ null, %31 ]*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
main_read_markers_exit_i_p_jinfo_jpeg_data_0_reg <= main_read_markers_exit_i_p_jinfo_jpeg_data_0;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_p_jinfo_jpeg_data_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_p_jinfo_jpeg_data_0_reg"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i2.i.i, %get_sos.exit.i.i ], [ null, %31 ]*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
main_read_markers_exit_i_p_jinfo_jpeg_data_0_reg <= main_read_markers_exit_i_p_jinfo_jpeg_data_0;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_p_jinfo_jpeg_data_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_p_jinfo_jpeg_data_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %374 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
begin
main_read_markers_exit_i_374 = memory_controller_out[15:0];
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %374 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_279)
begin
main_read_markers_exit_i_374_reg <= main_read_markers_exit_i_374;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_374_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %375 = sext i16 %374 to i32*/
begin
main_read_markers_exit_i_375 = $signed(main_read_markers_exit_i_374);
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %376 = add nsw i32 %375, -1*/
begin
main_read_markers_exit_i_376 = main_read_markers_exit_i_375 + -32'd1;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %376 = add nsw i32 %375, -1*/
if (cur_state == LEGUP_F_main_BB90_279)
begin
main_read_markers_exit_i_376_reg <= main_read_markers_exit_i_376;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_376_reg"); $finish; end
end
end
always @(*) begin
main_read_markers_exit_i_377 = main_signed_divide_32_0;
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %377 = sdiv i32 %376, 8*/
if (cur_state == LEGUP_F_main_BB90_319)
begin
main_read_markers_exit_i_377_reg <= main_read_markers_exit_i_377;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_377_reg"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %377 = sdiv i32 %376, 8*/
if (cur_state == LEGUP_F_main_BB90_319)
begin
main_read_markers_exit_i_377_reg <= main_read_markers_exit_i_377;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_377_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %378 = add nsw i32 %377, 1*/
begin
main_read_markers_exit_i_378 = main_read_markers_exit_i_377_reg + 32'd1;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %378 = add nsw i32 %377, 1*/
if (cur_state == LEGUP_F_main_BB90_327)
begin
main_read_markers_exit_i_378_reg <= main_read_markers_exit_i_378;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_378_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %379 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
begin
main_read_markers_exit_i_379 = memory_controller_out[15:0];
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %379 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_280)
begin
main_read_markers_exit_i_379_reg <= main_read_markers_exit_i_379;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_379_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %380 = sext i16 %379 to i32*/
begin
main_read_markers_exit_i_380 = $signed(main_read_markers_exit_i_379);
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %381 = add nsw i32 %380, -1*/
begin
main_read_markers_exit_i_381 = main_read_markers_exit_i_380 + -32'd1;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %381 = add nsw i32 %380, -1*/
if (cur_state == LEGUP_F_main_BB90_280)
begin
main_read_markers_exit_i_381_reg <= main_read_markers_exit_i_381;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_381_reg"); $finish; end
end
end
always @(*) begin
main_read_markers_exit_i_382 = main_signed_divide_32_0;
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %382 = sdiv i32 %381, 8*/
if (cur_state == LEGUP_F_main_BB90_320)
begin
main_read_markers_exit_i_382_reg <= main_read_markers_exit_i_382;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_382_reg"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %382 = sdiv i32 %381, 8*/
if (cur_state == LEGUP_F_main_BB90_320)
begin
main_read_markers_exit_i_382_reg <= main_read_markers_exit_i_382;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_382_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %383 = add nsw i32 %382, 1*/
begin
main_read_markers_exit_i_383 = main_read_markers_exit_i_382_reg + 32'd1;
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %384 = mul nsw i32 %383, %378*/
begin
main_read_markers_exit_i_384 = main_signed_multiply_32_0;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %384 = mul nsw i32 %383, %378*/
if (cur_state == LEGUP_F_main_BB90_328)
begin
main_read_markers_exit_i_384_reg <= main_read_markers_exit_i_384;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_384_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
begin
main_read_markers_exit_i_385 = huff_make_dhuff_tb_return_val;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
main_read_markers_exit_i_385_reg <= main_read_markers_exit_i_385;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_385_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
begin
main_read_markers_exit_i_386 = huff_make_dhuff_tb_return_val;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
main_read_markers_exit_i_386_reg <= main_read_markers_exit_i_386;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_386_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
begin
main_read_markers_exit_i_387 = huff_make_dhuff_tb_return_val;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
main_read_markers_exit_i_387_reg <= main_read_markers_exit_i_387;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_387_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
begin
main_read_markers_exit_i_388 = huff_make_dhuff_tb_return_val;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
main_read_markers_exit_i_388_reg <= main_read_markers_exit_i_388;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_388_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %scevgep148.i.i = getelementptr [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 0, i32 0*/
if (reset) begin main_read_markers_exit_i_scevgep148_i_i = 0; end
begin
main_read_markers_exit_i_scevgep148_i_i = `TAG_main_0_HuffBuff_i_i_a;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %scevgep148.i.i = getelementptr [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 0, i32 0*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
main_read_markers_exit_i_scevgep148_i_i_reg <= main_read_markers_exit_i_scevgep148_i_i;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_scevgep148_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %scevgep148.1.i.i = getelementptr [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 1, i32 0*/
if (reset) begin main_read_markers_exit_i_scevgep148_1_i_i = 0; end
begin
main_read_markers_exit_i_scevgep148_1_i_i = `TAG_main_0_HuffBuff_i_i_a + 256 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %scevgep148.1.i.i = getelementptr [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 1, i32 0*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
main_read_markers_exit_i_scevgep148_1_i_i_reg <= main_read_markers_exit_i_scevgep148_1_i_i;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_1_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_scevgep148_1_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %scevgep148.2.i.i = getelementptr [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 2, i32 0*/
if (reset) begin main_read_markers_exit_i_scevgep148_2_i_i = 0; end
begin
main_read_markers_exit_i_scevgep148_2_i_i = `TAG_main_0_HuffBuff_i_i_a + 256 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %scevgep148.2.i.i = getelementptr [3 x [64 x i32]]* %HuffBuff.i.i, i32 0, i32 2, i32 0*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
main_read_markers_exit_i_scevgep148_2_i_i_reg <= main_read_markers_exit_i_scevgep148_2_i_i;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_2_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_scevgep148_2_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %389*/
/*   %391 = icmp sgt i32 %384, 0*/
begin
main_389_391 = $signed(main_read_markers_exit_i_384_reg) > $signed(32'd0);
end
end
always @(*) begin
/* main: %.preheader21.i.i.preheader*/
/*   %scevgep51.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 0*/
if (reset) begin main__preheader21_i_i_preheader_scevgep51_i_i = 0; end
begin
main__preheader21_i_i_preheader_scevgep51_i_i = `TAG_main_0_IDCTBuff_i_i_a;
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i.preheader*/
/*   %scevgep51.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 0*/
if (cur_state == LEGUP_F_main_BB92_356)
begin
main__preheader21_i_i_preheader_scevgep51_i_i_reg <= main__preheader21_i_i_preheader_scevgep51_i_i;
if (^reset !== 1'bX && ^(main__preheader21_i_i_preheader_scevgep51_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader21_i_i_preheader_scevgep51_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader21.i.i.preheader*/
/*   %scevgep51.1.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 0*/
if (reset) begin main__preheader21_i_i_preheader_scevgep51_1_i_i = 0; end
begin
main__preheader21_i_i_preheader_scevgep51_1_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i.preheader*/
/*   %scevgep51.1.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 0*/
if (cur_state == LEGUP_F_main_BB92_356)
begin
main__preheader21_i_i_preheader_scevgep51_1_i_i_reg <= main__preheader21_i_i_preheader_scevgep51_1_i_i;
if (^reset !== 1'bX && ^(main__preheader21_i_i_preheader_scevgep51_1_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader21_i_i_preheader_scevgep51_1_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader21.i.i.preheader*/
/*   %scevgep51.2.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 0*/
if (reset) begin main__preheader21_i_i_preheader_scevgep51_2_i_i = 0; end
begin
main__preheader21_i_i_preheader_scevgep51_2_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i.preheader*/
/*   %scevgep51.2.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 0*/
if (cur_state == LEGUP_F_main_BB92_356)
begin
main__preheader21_i_i_preheader_scevgep51_2_i_i_reg <= main__preheader21_i_i_preheader_scevgep51_2_i_i;
if (^reset !== 1'bX && ^(main__preheader21_i_i_preheader_scevgep51_2_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader21_i_i_preheader_scevgep51_2_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader21.i.i*/
/*   %CurrentMCU.026.i.i = phi i32 [ %tmp143.i.i, %447 ], [ 0, %.preheader21.i.i.preheader ]*/
begin
main__preheader21_i_i_CurrentMCU_026_i_i = main__preheader21_i_i_CurrentMCU_026_i_i_phi_temp;
end
end
always @(*) begin
/* main: %.preheader21.i.i*/
/*   %tmp143.i.i = add i32 %CurrentMCU.026.i.i, 1*/
begin
main__preheader21_i_i_tmp143_i_i = main__preheader21_i_i_CurrentMCU_026_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i*/
/*   %tmp143.i.i = add i32 %CurrentMCU.026.i.i, 1*/
if (cur_state == LEGUP_F_main_BB93_357)
begin
main__preheader21_i_i_tmp143_i_i_reg <= main__preheader21_i_i_tmp143_i_i;
if (^reset !== 1'bX && ^(main__preheader21_i_i_tmp143_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader21_i_i_tmp143_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %i.01.i.i1.i = phi i32 [ %426, %425 ], [ 0, %.preheader21.i.i ]*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_i_01_i_i1_i = main_392_i_01_i_i1_i_phi_temp;
end
/* main: %392*/
/*   %i.01.i.i1.i = phi i32 [ %426, %425 ], [ 0, %.preheader21.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB94_366) */
begin
main_392_i_01_i_i1_i = main_392_i_01_i_i1_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %i.01.i.i1.i = phi i32 [ %426, %425 ], [ 0, %.preheader21.i.i ]*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_i_01_i_i1_i_reg <= main_392_i_01_i_i1_i;
if (^reset !== 1'bX && ^(main_392_i_01_i_i1_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_i_01_i_i1_i_reg"); $finish; end
end
/* main: %392*/
/*   %i.01.i.i1.i = phi i32 [ %426, %425 ], [ 0, %.preheader21.i.i ]*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_i_01_i_i1_i_reg <= main_392_i_01_i_i1_i;
if (^reset !== 1'bX && ^(main_392_i_01_i_i1_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_i_01_i_i1_i_reg"); $finish; end
end
/* main: %392*/
/*   %i.01.i.i1.i = phi i32 [ %426, %425 ], [ 0, %.preheader21.i.i ]*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_i_01_i_i1_i_reg <= main_392_i_01_i_i1_i;
if (^reset !== 1'bX && ^(main_392_i_01_i_i1_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_i_01_i_i1_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %scevgep3.i.i2.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %i.01.i.i1.i*/
begin
main_392_scevgep3_i_i2_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd2 + 4 * main_392_i_01_i_i1_i;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %scevgep3.i.i2.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 %i.01.i.i1.i*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_scevgep3_i_i2_i_reg <= main_392_scevgep3_i_i2_i;
if (^reset !== 1'bX && ^(main_392_scevgep3_i_i2_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_scevgep3_i_i2_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %scevgep2.i.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %i.01.i.i1.i*/
begin
main_392_scevgep2_i_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd1 + 4 * main_392_i_01_i_i1_i;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %scevgep2.i.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 %i.01.i.i1.i*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_scevgep2_i_i_i_reg <= main_392_scevgep2_i_i_i;
if (^reset !== 1'bX && ^(main_392_scevgep2_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_scevgep2_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %scevgep.i.i3.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 %i.01.i.i1.i*/
begin
main_392_scevgep_i_i3_i = `TAG_main_0_IDCTBuff_i_i_a + 4 * main_392_i_01_i_i1_i;
end
end
always @(*) begin
/* main: %392*/
/*   %scevgep6.i.i4.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 %i.01.i.i1.i*/
begin
main_392_scevgep6_i_i4_i = `TAG_g_rgb_buf_a + 256 * 32'd2 + 4 * main_392_i_01_i_i1_i;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %scevgep6.i.i4.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 %i.01.i.i1.i*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_scevgep6_i_i4_i_reg <= main_392_scevgep6_i_i4_i;
if (^reset !== 1'bX && ^(main_392_scevgep6_i_i4_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_scevgep6_i_i4_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %scevgep5.i.i5.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 %i.01.i.i1.i*/
begin
main_392_scevgep5_i_i5_i = `TAG_g_rgb_buf_a + 256 * 32'd1 + 4 * main_392_i_01_i_i1_i;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %scevgep5.i.i5.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 %i.01.i.i1.i*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_scevgep5_i_i5_i_reg <= main_392_scevgep5_i_i5_i;
if (^reset !== 1'bX && ^(main_392_scevgep5_i_i5_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_scevgep5_i_i5_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %scevgep4.i.i6.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 %i.01.i.i1.i*/
begin
main_392_scevgep4_i_i6_i = `TAG_g_rgb_buf_a + 4 * main_392_i_01_i_i1_i;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %scevgep4.i.i6.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 %i.01.i.i1.i*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
main_392_scevgep4_i_i6_i_reg <= main_392_scevgep4_i_i6_i;
if (^reset !== 1'bX && ^(main_392_scevgep4_i_i6_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_scevgep4_i_i6_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %393 = load i32* %scevgep.i.i3.i, align 4, !tbaa !0*/
begin
main_392_393 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %392*/
/*   %394 = load i32* %scevgep2.i.i.i, align 4, !tbaa !0*/
begin
main_392_394 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %392*/
/*   %395 = add nsw i32 %394, -128*/
begin
main_392_395 = main_392_394 + -32'd128;
end
end
always @(*) begin
/* main: %392*/
/*   %396 = load i32* %scevgep3.i.i2.i, align 4, !tbaa !0*/
begin
main_392_396 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %392*/
/*   %397 = add nsw i32 %396, -128*/
begin
main_392_397 = main_392_396 + -32'd128;
end
end
always @(*) begin
/* main: %392*/
/*   %398 = shl nsw i32 %393, 8*/
begin
main_392_398 = main_392_393 <<< 32'd8 % 32;
end
end
always @(*) begin
/* main: %392*/
/*   %399 = mul nsw i32 %397, 359*/
begin
main_392_399 = main_signed_multiply_32_1;
end
end
always @(*) begin
/* main: %392*/
/*   %400 = or i32 %398, 128*/
begin
main_392_400 = main_392_398 | 32'd128;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %400 = or i32 %398, 128*/
if (cur_state == LEGUP_F_main_BB94_368)
begin
main_392_400_reg <= main_392_400;
if (^reset !== 1'bX && ^(main_392_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_400_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %401 = add i32 %399, %400*/
begin
main_392_401 = main_392_399 + main_392_400_reg;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %401 = add i32 %399, %400*/
if (cur_state == LEGUP_F_main_BB94_370)
begin
main_392_401_reg <= main_392_401;
if (^reset !== 1'bX && ^(main_392_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_401_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %402 = ashr i32 %401, 8*/
begin
main_392_402 = $signed(main_392_401_reg) >>> 32'd8;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %402 = ashr i32 %401, 8*/
if (cur_state == LEGUP_F_main_BB94_371)
begin
main_392_402_reg <= main_392_402;
if (^reset !== 1'bX && ^(main_392_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_402_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %403 = mul i32 %395, -88*/
begin
main_392_403 = main_signed_multiply_32_1;
end
end
always @(*) begin
/* main: %392*/
/*   %404 = mul i32 %397, -182*/
begin
main_392_404 = main_signed_multiply_32_2;
end
end
always @(*) begin
/* main: %392*/
/*   %405 = add i32 %403, %400*/
begin
main_392_405 = main_392_403 + main_392_400_reg;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %405 = add i32 %403, %400*/
if (cur_state == LEGUP_F_main_BB94_369)
begin
main_392_405_reg <= main_392_405;
if (^reset !== 1'bX && ^(main_392_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_405_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %406 = add i32 %405, %404*/
begin
main_392_406 = main_392_405_reg + main_392_404;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %406 = add i32 %405, %404*/
if (cur_state == LEGUP_F_main_BB94_370)
begin
main_392_406_reg <= main_392_406;
if (^reset !== 1'bX && ^(main_392_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_406_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %407 = ashr i32 %406, 8*/
begin
main_392_407 = $signed(main_392_406_reg) >>> 32'd8;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %407 = ashr i32 %406, 8*/
if (cur_state == LEGUP_F_main_BB94_371)
begin
main_392_407_reg <= main_392_407;
if (^reset !== 1'bX && ^(main_392_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_407_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %408 = mul nsw i32 %395, 454*/
begin
main_392_408 = main_signed_multiply_32_2;
end
end
always @(*) begin
/* main: %392*/
/*   %409 = add i32 %408, %400*/
begin
main_392_409 = main_392_408 + main_392_400_reg;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %409 = add i32 %408, %400*/
if (cur_state == LEGUP_F_main_BB94_369)
begin
main_392_409_reg <= main_392_409;
if (^reset !== 1'bX && ^(main_392_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_409_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %410 = ashr i32 %409, 8*/
begin
main_392_410 = $signed(main_392_409_reg) >>> 32'd8;
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %410 = ashr i32 %409, 8*/
if (cur_state == LEGUP_F_main_BB94_370)
begin
main_392_410_reg <= main_392_410;
if (^reset !== 1'bX && ^(main_392_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_410_reg"); $finish; end
end
end
always @(*) begin
/* main: %392*/
/*   %411 = icmp slt i32 %402, 0*/
begin
main_392_411 = $signed(main_392_402) < $signed(32'd0);
end
end
always @(*) begin
/* main: %412*/
/*   %413 = icmp sgt i32 %402, 255*/
begin
main_412_413 = $signed(main_392_402_reg) > $signed(32'd255);
end
end
always @(*) begin
/* main: %415*/
/*   %r.0.i.i.i = phi i32 [ 255, %414 ], [ %402, %412 ], [ 0, %392 ]*/
if (cur_state == LEGUP_F_main_BB97_374)
begin
main_415_r_0_i_i_i = main_415_r_0_i_i_i_phi_temp;
end
/* main: %415*/
/*   %r.0.i.i.i = phi i32 [ 255, %414 ], [ %402, %412 ], [ 0, %392 ]*/
else /* if (cur_state == LEGUP_F_main_BB97_374) */
begin
main_415_r_0_i_i_i = main_415_r_0_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %415*/
/*   %r.0.i.i.i = phi i32 [ 255, %414 ], [ %402, %412 ], [ 0, %392 ]*/
if (cur_state == LEGUP_F_main_BB97_374)
begin
main_415_r_0_i_i_i_reg <= main_415_r_0_i_i_i;
if (^reset !== 1'bX && ^(main_415_r_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_r_0_i_i_i_reg"); $finish; end
end
/* main: %415*/
/*   %r.0.i.i.i = phi i32 [ 255, %414 ], [ %402, %412 ], [ 0, %392 ]*/
if (cur_state == LEGUP_F_main_BB97_374)
begin
main_415_r_0_i_i_i_reg <= main_415_r_0_i_i_i;
if (^reset !== 1'bX && ^(main_415_r_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_r_0_i_i_i_reg"); $finish; end
end
/* main: %415*/
/*   %r.0.i.i.i = phi i32 [ 255, %414 ], [ %402, %412 ], [ 0, %392 ]*/
if (cur_state == LEGUP_F_main_BB97_374)
begin
main_415_r_0_i_i_i_reg <= main_415_r_0_i_i_i;
if (^reset !== 1'bX && ^(main_415_r_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_r_0_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %415*/
/*   %416 = icmp slt i32 %407, 0*/
begin
main_415_416 = $signed(main_392_407_reg) < $signed(32'd0);
end
end
always @(*) begin
/* main: %417*/
/*   %418 = icmp sgt i32 %407, 255*/
begin
main_417_418 = $signed(main_392_407_reg) > $signed(32'd255);
end
end
always @(*) begin
/* main: %420*/
/*   %g.0.i.i.i = phi i32 [ 255, %419 ], [ %407, %417 ], [ 0, %415 ]*/
if (cur_state == LEGUP_F_main_BB100_377)
begin
main_420_g_0_i_i_i = main_420_g_0_i_i_i_phi_temp;
end
/* main: %420*/
/*   %g.0.i.i.i = phi i32 [ 255, %419 ], [ %407, %417 ], [ 0, %415 ]*/
else /* if (cur_state == LEGUP_F_main_BB100_377) */
begin
main_420_g_0_i_i_i = main_420_g_0_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %420*/
/*   %g.0.i.i.i = phi i32 [ 255, %419 ], [ %407, %417 ], [ 0, %415 ]*/
if (cur_state == LEGUP_F_main_BB100_377)
begin
main_420_g_0_i_i_i_reg <= main_420_g_0_i_i_i;
if (^reset !== 1'bX && ^(main_420_g_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_420_g_0_i_i_i_reg"); $finish; end
end
/* main: %420*/
/*   %g.0.i.i.i = phi i32 [ 255, %419 ], [ %407, %417 ], [ 0, %415 ]*/
if (cur_state == LEGUP_F_main_BB100_377)
begin
main_420_g_0_i_i_i_reg <= main_420_g_0_i_i_i;
if (^reset !== 1'bX && ^(main_420_g_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_420_g_0_i_i_i_reg"); $finish; end
end
/* main: %420*/
/*   %g.0.i.i.i = phi i32 [ 255, %419 ], [ %407, %417 ], [ 0, %415 ]*/
if (cur_state == LEGUP_F_main_BB100_377)
begin
main_420_g_0_i_i_i_reg <= main_420_g_0_i_i_i;
if (^reset !== 1'bX && ^(main_420_g_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_420_g_0_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %420*/
/*   %421 = icmp slt i32 %410, 0*/
begin
main_420_421 = $signed(main_392_410_reg) < $signed(32'd0);
end
end
always @(*) begin
/* main: %422*/
/*   %423 = icmp sgt i32 %410, 255*/
begin
main_422_423 = $signed(main_392_410_reg) > $signed(32'd255);
end
end
always @(*) begin
/* main: %425*/
/*   %b.0.i.i.i = phi i32 [ 255, %424 ], [ %410, %422 ], [ 0, %420 ]*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
main_425_b_0_i_i_i = main_425_b_0_i_i_i_phi_temp;
end
/* main: %425*/
/*   %b.0.i.i.i = phi i32 [ 255, %424 ], [ %410, %422 ], [ 0, %420 ]*/
else /* if (cur_state == LEGUP_F_main_BB103_380) */
begin
main_425_b_0_i_i_i = main_425_b_0_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %425*/
/*   %b.0.i.i.i = phi i32 [ 255, %424 ], [ %410, %422 ], [ 0, %420 ]*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
main_425_b_0_i_i_i_reg <= main_425_b_0_i_i_i;
if (^reset !== 1'bX && ^(main_425_b_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_b_0_i_i_i_reg"); $finish; end
end
/* main: %425*/
/*   %b.0.i.i.i = phi i32 [ 255, %424 ], [ %410, %422 ], [ 0, %420 ]*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
main_425_b_0_i_i_i_reg <= main_425_b_0_i_i_i;
if (^reset !== 1'bX && ^(main_425_b_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_b_0_i_i_i_reg"); $finish; end
end
/* main: %425*/
/*   %b.0.i.i.i = phi i32 [ 255, %424 ], [ %410, %422 ], [ 0, %420 ]*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
main_425_b_0_i_i_i_reg <= main_425_b_0_i_i_i;
if (^reset !== 1'bX && ^(main_425_b_0_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_b_0_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %425*/
/*   %426 = add nsw i32 %i.01.i.i1.i, 1*/
begin
main_425_426 = main_392_i_01_i_i1_i_reg + 32'd1;
end
end
always @(posedge clk) begin
/* main: %425*/
/*   %426 = add nsw i32 %i.01.i.i1.i, 1*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
main_425_426_reg <= main_425_426;
if (^reset !== 1'bX && ^(main_425_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_426_reg"); $finish; end
end
end
always @(*) begin
/* main: %425*/
/*   %exitcond53.i.i = icmp eq i32 %426, 64*/
begin
main_425_exitcond53_i_i = main_425_426 == 32'd64;
end
end
always @(posedge clk) begin
/* main: %425*/
/*   %exitcond53.i.i = icmp eq i32 %426, 64*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
main_425_exitcond53_i_i_reg <= main_425_exitcond53_i_i;
if (^reset !== 1'bX && ^(main_425_exitcond53_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_exitcond53_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %427 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
begin
main_YuvToRgb_exit_loopexit_i_i_427 = memory_controller_out[15:0];
end
end
always @(*) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %428 = sext i16 %427 to i32*/
begin
main_YuvToRgb_exit_loopexit_i_i_428 = $signed(main_YuvToRgb_exit_loopexit_i_i_427);
end
end
always @(posedge clk) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %428 = sext i16 %427 to i32*/
if (cur_state == LEGUP_F_main_BB104_385)
begin
main_YuvToRgb_exit_loopexit_i_i_428_reg <= main_YuvToRgb_exit_loopexit_i_i_428;
if (^reset !== 1'bX && ^(main_YuvToRgb_exit_loopexit_i_i_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgb_exit_loopexit_i_i_428_reg"); $finish; end
end
end
always @(*) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %429 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
begin
main_YuvToRgb_exit_loopexit_i_i_429 = memory_controller_out[15:0];
end
end
always @(*) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %430 = sext i16 %429 to i32*/
begin
main_YuvToRgb_exit_loopexit_i_i_430 = $signed(main_YuvToRgb_exit_loopexit_i_i_429);
end
end
always @(posedge clk) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %430 = sext i16 %429 to i32*/
if (cur_state == LEGUP_F_main_BB104_386)
begin
main_YuvToRgb_exit_loopexit_i_i_430_reg <= main_YuvToRgb_exit_loopexit_i_i_430;
if (^reset !== 1'bX && ^(main_YuvToRgb_exit_loopexit_i_i_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgb_exit_loopexit_i_i_430_reg"); $finish; end
end
end
always @(*) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %tmp120.i.i = shl nsw i32 %428, 3*/
begin
main_YuvToRgb_exit_loopexit_i_i_tmp120_i_i = main_YuvToRgb_exit_loopexit_i_i_428 <<< 32'd3 % 32;
end
end
always @(posedge clk) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %tmp120.i.i = shl nsw i32 %428, 3*/
if (cur_state == LEGUP_F_main_BB104_385)
begin
main_YuvToRgb_exit_loopexit_i_i_tmp120_i_i_reg <= main_YuvToRgb_exit_loopexit_i_i_tmp120_i_i;
if (^reset !== 1'bX && ^(main_YuvToRgb_exit_loopexit_i_i_tmp120_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgb_exit_loopexit_i_i_tmp120_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
begin
main_YuvToRgb_exit_loopexit_i_i__pre_i_i = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_387)
begin
main_YuvToRgb_exit_loopexit_i_i__pre_i_i_reg <= main_YuvToRgb_exit_loopexit_i_i__pre_i_i;
if (^reset !== 1'bX && ^(main_YuvToRgb_exit_loopexit_i_i__pre_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgb_exit_loopexit_i_i__pre_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %431 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
begin
main_YuvToRgb_exit_loopexit_i_i_431 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %431 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_388)
begin
main_YuvToRgb_exit_loopexit_i_i_431_reg <= main_YuvToRgb_exit_loopexit_i_i_431;
if (^reset !== 1'bX && ^(main_YuvToRgb_exit_loopexit_i_i_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_YuvToRgb_exit_loopexit_i_i_431_reg"); $finish; end
end
end
always @(*) begin
/* main: %432*/
/*   %433 = phi i32 [ %.pre.i.i, %YuvToRgb.exit.loopexit.i.i ], [ %446, %WriteBlock.exit.i.i ]*/
begin
main_432_433 = main_432_433_phi_temp;
end
end
always @(*) begin
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_i_324_i_i = main_432_i_324_i_i_phi_temp;
end
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
else if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_i_324_i_i = main_432_i_324_i_i_phi_temp;
end
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB105_389) */
begin
main_432_i_324_i_i = main_432_i_324_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_i_324_i_i_reg <= main_432_i_324_i_i;
if (^reset !== 1'bX && ^(main_432_i_324_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_i_324_i_i_reg"); $finish; end
end
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_i_324_i_i_reg <= main_432_i_324_i_i;
if (^reset !== 1'bX && ^(main_432_i_324_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_i_324_i_i_reg"); $finish; end
end
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_i_324_i_i_reg <= main_432_i_324_i_i;
if (^reset !== 1'bX && ^(main_432_i_324_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_i_324_i_i_reg"); $finish; end
end
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_i_324_i_i_reg <= main_432_i_324_i_i;
if (^reset !== 1'bX && ^(main_432_i_324_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_i_324_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %432*/
/*   %scevgep139.i.i = getelementptr [3 x i32]* @OutData_comp_vpos, i32 0, i32 %i.324.i.i*/
begin
main_432_scevgep139_i_i = `TAG_g_OutData_comp_vpos_a + 4 * main_432_i_324_i_i;
end
end
always @(*) begin
/* main: %432*/
/*   %tmp141.i.i = add i32 %i.324.i.i, 1*/
begin
main_432_tmp141_i_i = main_432_i_324_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %tmp141.i.i = add i32 %i.324.i.i, 1*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_tmp141_i_i_reg <= main_432_tmp141_i_i;
if (^reset !== 1'bX && ^(main_432_tmp141_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_tmp141_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %432*/
/*   %scevgep142.i.i = getelementptr [3 x i32]* @OutData_comp_hpos, i32 0, i32 %tmp141.i.i*/
begin
main_432_scevgep142_i_i = `TAG_g_OutData_comp_hpos_a + 4 * main_432_tmp141_i_i;
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %scevgep142.i.i = getelementptr [3 x i32]* @OutData_comp_hpos, i32 0, i32 %tmp141.i.i*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_scevgep142_i_i_reg <= main_432_scevgep142_i_i;
if (^reset !== 1'bX && ^(main_432_scevgep142_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_scevgep142_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %432*/
/*   %434 = load i32* %scevgep139.i.i, align 4, !tbaa !0*/
begin
main_432_434 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %434 = load i32* %scevgep139.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB105_391)
begin
main_432_434_reg <= main_432_434;
if (^reset !== 1'bX && ^(main_432_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_434_reg"); $finish; end
end
end
always @(*) begin
/* main: %432*/
/*   %435 = shl nsw i32 %434, 3*/
begin
main_432_435 = main_432_434 <<< 32'd3 % 32;
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %435 = shl nsw i32 %434, 3*/
if (cur_state == LEGUP_F_main_BB105_391)
begin
main_432_435_reg <= main_432_435;
if (^reset !== 1'bX && ^(main_432_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_435_reg"); $finish; end
end
end
always @(*) begin
/* main: %432*/
/*   %436 = shl nsw i32 %433, 3*/
begin
main_432_436 = main_432_433 <<< 32'd3 % 32;
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %436 = shl nsw i32 %433, 3*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_436_reg <= main_432_436;
if (^reset !== 1'bX && ^(main_432_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_436_reg"); $finish; end
end
end
always @(*) begin
/* main: %432*/
/*   %437 = icmp slt i32 %435, %430*/
begin
main_432_437 = $signed(main_432_435) < $signed(main_YuvToRgb_exit_loopexit_i_i_430_reg);
end
end
always @(*) begin
/* main: %432*/
/*   %438 = icmp slt i32 %436, %428*/
begin
main_432_438 = $signed(main_432_436) < $signed(main_YuvToRgb_exit_loopexit_i_i_428_reg);
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %438 = icmp slt i32 %436, %428*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
main_432_438_reg <= main_432_438;
if (^reset !== 1'bX && ^(main_432_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_438_reg"); $finish; end
end
end
always @(*) begin
/* main: %432*/
/*   %or.cond.i.i.i.i = and i1 %437, %438*/
begin
main_432_or_cond_i_i_i_i = main_432_437 & main_432_438_reg;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp61.i.i = add i32 %436, 8*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp61_i_i = main_432_436_reg + 32'd8;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp62149.i.i = or i32 %436, 1*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp62149_i_i = main_432_436_reg | 32'd1;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp63.i.i = icmp sgt i32 %tmp61.i.i, %tmp62149.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp63_i_i = $signed(main__lr_ph8_split_us_i_i_i_i_tmp61_i_i) > $signed(main__lr_ph8_split_us_i_i_i_i_tmp62149_i_i);
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %smax.i.i = select i1 %tmp63.i.i, i32 %tmp61.i.i, i32 %tmp62149.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_smax_i_i = (main__lr_ph8_split_us_i_i_i_i_tmp63_i_i ? main__lr_ph8_split_us_i_i_i_i_tmp61_i_i : main__lr_ph8_split_us_i_i_i_i_tmp62149_i_i);
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %smax.i.i = select i1 %tmp63.i.i, i32 %tmp61.i.i, i32 %tmp62149.i.i*/
if (cur_state == LEGUP_F_main_BB106_392)
begin
main__lr_ph8_split_us_i_i_i_i_smax_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_smax_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_smax_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_smax_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp64.i.i = sub i32 %436, %smax.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp64_i_i = main_432_436_reg - main__lr_ph8_split_us_i_i_i_i_smax_i_i_reg;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp67.i.i = sub i32 %436, %428*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp67_i_i = main_432_436_reg - main_YuvToRgb_exit_loopexit_i_i_428_reg;
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp67.i.i = sub i32 %436, %428*/
if (cur_state == LEGUP_F_main_BB106_392)
begin
main__lr_ph8_split_us_i_i_i_i_tmp67_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_tmp67_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_tmp67_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_tmp67_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp68.i.i = icmp ugt i32 %tmp64.i.i, %tmp67.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp68_i_i = main__lr_ph8_split_us_i_i_i_i_tmp64_i_i > main__lr_ph8_split_us_i_i_i_i_tmp67_i_i_reg;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %umax.i.i = select i1 %tmp68.i.i, i32 %tmp64.i.i, i32 %tmp67.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_umax_i_i = (main__lr_ph8_split_us_i_i_i_i_tmp68_i_i ? main__lr_ph8_split_us_i_i_i_i_tmp64_i_i : main__lr_ph8_split_us_i_i_i_i_tmp67_i_i_reg);
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %umax.i.i = select i1 %tmp68.i.i, i32 %tmp64.i.i, i32 %tmp67.i.i*/
if (cur_state == LEGUP_F_main_BB106_393)
begin
main__lr_ph8_split_us_i_i_i_i_umax_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_umax_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_umax_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_umax_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp69.i.i = sub i32 0, %umax.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp69_i_i = 32'd0 - main__lr_ph8_split_us_i_i_i_i_umax_i_i_reg;
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp69.i.i = sub i32 0, %umax.i.i*/
if (cur_state == LEGUP_F_main_BB106_394)
begin
main__lr_ph8_split_us_i_i_i_i_tmp69_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_tmp69_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_tmp69_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_tmp69_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp82.i.i = add i32 %435, 8*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp82_i_i = main_432_435_reg + 32'd8;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp83150.i.i = or i32 %435, 1*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp83150_i_i = main_432_435_reg | 32'd1;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp84.i.i = icmp sgt i32 %tmp82.i.i, %tmp83150.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp84_i_i = $signed(main__lr_ph8_split_us_i_i_i_i_tmp82_i_i) > $signed(main__lr_ph8_split_us_i_i_i_i_tmp83150_i_i);
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %smax85.i.i = select i1 %tmp84.i.i, i32 %tmp82.i.i, i32 %tmp83150.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_smax85_i_i = (main__lr_ph8_split_us_i_i_i_i_tmp84_i_i ? main__lr_ph8_split_us_i_i_i_i_tmp82_i_i : main__lr_ph8_split_us_i_i_i_i_tmp83150_i_i);
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %smax85.i.i = select i1 %tmp84.i.i, i32 %tmp82.i.i, i32 %tmp83150.i.i*/
if (cur_state == LEGUP_F_main_BB106_392)
begin
main__lr_ph8_split_us_i_i_i_i_smax85_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_smax85_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_smax85_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_smax85_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp86.i.i = sub i32 %435, %smax85.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp86_i_i = main_432_435_reg - main__lr_ph8_split_us_i_i_i_i_smax85_i_i_reg;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp89.i.i = sub i32 %435, %430*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp89_i_i = main_432_435_reg - main_YuvToRgb_exit_loopexit_i_i_430_reg;
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp89.i.i = sub i32 %435, %430*/
if (cur_state == LEGUP_F_main_BB106_392)
begin
main__lr_ph8_split_us_i_i_i_i_tmp89_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_tmp89_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_tmp89_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_tmp89_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp90.i.i = icmp ugt i32 %tmp86.i.i, %tmp89.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp90_i_i = main__lr_ph8_split_us_i_i_i_i_tmp86_i_i > main__lr_ph8_split_us_i_i_i_i_tmp89_i_i_reg;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %umax91.i.i = select i1 %tmp90.i.i, i32 %tmp86.i.i, i32 %tmp89.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_umax91_i_i = (main__lr_ph8_split_us_i_i_i_i_tmp90_i_i ? main__lr_ph8_split_us_i_i_i_i_tmp86_i_i : main__lr_ph8_split_us_i_i_i_i_tmp89_i_i_reg);
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %umax91.i.i = select i1 %tmp90.i.i, i32 %tmp86.i.i, i32 %tmp89.i.i*/
if (cur_state == LEGUP_F_main_BB106_393)
begin
main__lr_ph8_split_us_i_i_i_i_umax91_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_umax91_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_umax91_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_umax91_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp92.i.i = sub i32 0, %umax91.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp92_i_i = 32'd0 - main__lr_ph8_split_us_i_i_i_i_umax91_i_i_reg;
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp92.i.i = sub i32 0, %umax91.i.i*/
if (cur_state == LEGUP_F_main_BB106_394)
begin
main__lr_ph8_split_us_i_i_i_i_tmp92_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_tmp92_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_tmp92_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_tmp92_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp121.i.i = mul i32 %tmp120.i.i, %434*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp121_i_i = main_signed_multiply_32_1;
end
end
always @(*) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp122.i.i = add i32 %436, %tmp121.i.i*/
begin
main__lr_ph8_split_us_i_i_i_i_tmp122_i_i = main_432_436_reg + main__lr_ph8_split_us_i_i_i_i_tmp121_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp122.i.i = add i32 %436, %tmp121.i.i*/
if (cur_state == LEGUP_F_main_BB106_392)
begin
main__lr_ph8_split_us_i_i_i_i_tmp122_i_i_reg <= main__lr_ph8_split_us_i_i_i_i_tmp122_i_i;
if (^reset !== 1'bX && ^(main__lr_ph8_split_us_i_i_i_i_tmp122_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph8_split_us_i_i_i_i_tmp122_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %439*/
/*   %indvar.next18.i.i.i.i = add i32 %indvar17.i.i.i.i, 1*/
begin
main_439_indvar_next18_i_i_i_i = main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_reg + 32'd1;
end
end
always @(*) begin
/* main: %439*/
/*   %exitcond93.i.i = icmp eq i32 %indvar.next18.i.i.i.i, %tmp92.i.i*/
begin
main_439_exitcond93_i_i = main_439_indvar_next18_i_i_i_i == main__lr_ph8_split_us_i_i_i_i_tmp92_i_i_reg;
end
end
always @(*) begin
/* main: %440*/
/*   %indvar.i.i.i.i = phi i32 [ 0, %.lr.ph.us.i.i.i.i ], [ %indvar.next.i.i.i.i, %440 ]*/
begin
main_440_indvar_i_i_i_i = main_440_indvar_i_i_i_i_phi_temp;
end
end
always @(*) begin
/* main: %440*/
/*   %tmp124.i.i = add i32 %tmp123.i.i, %indvar.i.i.i.i*/
begin
main_440_tmp124_i_i = main__lr_ph_us_i_i_i_i_tmp123_i_i_reg + main_440_indvar_i_i_i_i;
end
end
always @(*) begin
/* main: %440*/
/*   %scevgep24.i.i.i.i = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 %i.324.i.i, i32 %tmp124.i.i*/
begin
main_440_scevgep24_i_i_i_i = `TAG_g_OutData_comp_buf_a + 5310 * main_432_i_324_i_i_reg + 1 * main_440_tmp124_i_i;
end
end
always @(posedge clk) begin
/* main: %440*/
/*   %scevgep24.i.i.i.i = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 %i.324.i.i, i32 %tmp124.i.i*/
if (cur_state == LEGUP_F_main_BB108_396)
begin
main_440_scevgep24_i_i_i_i_reg <= main_440_scevgep24_i_i_i_i;
if (^reset !== 1'bX && ^(main_440_scevgep24_i_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_scevgep24_i_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %440*/
/*   %tmp137.i.i = add i32 %tmp136.i.i, %indvar.i.i.i.i*/
begin
main_440_tmp137_i_i = main__lr_ph_us_i_i_i_i_tmp136_i_i_reg + main_440_indvar_i_i_i_i;
end
end
always @(*) begin
/* main: %440*/
/*   %.14.us.i.i.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 %i.324.i.i, i32 %tmp137.i.i*/
begin
main_440__14_us_i_i_i_i = `TAG_g_rgb_buf_a + 256 * main_432_i_324_i_i_reg + 4 * main_440_tmp137_i_i;
end
end
always @(*) begin
/* main: %440*/
/*   %441 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !0*/
begin
main_440_441 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %440*/
/*   %442 = trunc i32 %441 to i8*/
begin
main_440_442 = main_440_441[7:0];
end
end
always @(*) begin
/* main: %440*/
/*   %indvar.next.i.i.i.i = add i32 %indvar.i.i.i.i, 1*/
begin
main_440_indvar_next_i_i_i_i = main_440_indvar_i_i_i_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %440*/
/*   %indvar.next.i.i.i.i = add i32 %indvar.i.i.i.i, 1*/
if (cur_state == LEGUP_F_main_BB108_396)
begin
main_440_indvar_next_i_i_i_i_reg <= main_440_indvar_next_i_i_i_i;
if (^reset !== 1'bX && ^(main_440_indvar_next_i_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_indvar_next_i_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %440*/
/*   %exitcond70.i.i = icmp eq i32 %indvar.next.i.i.i.i, %tmp69.i.i*/
begin
main_440_exitcond70_i_i = main_440_indvar_next_i_i_i_i == main__lr_ph8_split_us_i_i_i_i_tmp69_i_i_reg;
end
end
always @(posedge clk) begin
/* main: %440*/
/*   %exitcond70.i.i = icmp eq i32 %indvar.next.i.i.i.i, %tmp69.i.i*/
if (cur_state == LEGUP_F_main_BB108_396)
begin
main_440_exitcond70_i_i_reg <= main_440_exitcond70_i_i;
if (^reset !== 1'bX && ^(main_440_exitcond70_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_exitcond70_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.us.i.i.i.i*/
/*   %indvar17.i.i.i.i = phi i32 [ %indvar.next18.i.i.i.i, %439 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB109_399)
begin
main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i = main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_phi_temp;
end
/* main: %.lr.ph.us.i.i.i.i*/
/*   %indvar17.i.i.i.i = phi i32 [ %indvar.next18.i.i.i.i, %439 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB109_399) */
begin
main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i = main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.us.i.i.i.i*/
/*   %indvar17.i.i.i.i = phi i32 [ %indvar.next18.i.i.i.i, %439 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB109_399)
begin
main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_reg <= main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_reg"); $finish; end
end
/* main: %.lr.ph.us.i.i.i.i*/
/*   %indvar17.i.i.i.i = phi i32 [ %indvar.next18.i.i.i.i, %439 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB109_399)
begin
main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_reg <= main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_reg"); $finish; end
end
/* main: %.lr.ph.us.i.i.i.i*/
/*   %indvar17.i.i.i.i = phi i32 [ %indvar.next18.i.i.i.i, %439 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB109_399)
begin
main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_reg <= main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp118.i.i = mul i32 %428, %indvar17.i.i.i.i*/
begin
main__lr_ph_us_i_i_i_i_tmp118_i_i = main_signed_multiply_32_1;
end
end
always @(*) begin
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp123.i.i = add i32 %tmp122.i.i, %tmp118.i.i*/
begin
main__lr_ph_us_i_i_i_i_tmp123_i_i = main__lr_ph8_split_us_i_i_i_i_tmp122_i_i_reg + main__lr_ph_us_i_i_i_i_tmp118_i_i;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp123.i.i = add i32 %tmp122.i.i, %tmp118.i.i*/
if (cur_state == LEGUP_F_main_BB109_399)
begin
main__lr_ph_us_i_i_i_i_tmp123_i_i_reg <= main__lr_ph_us_i_i_i_i_tmp123_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_us_i_i_i_i_tmp123_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_us_i_i_i_i_tmp123_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp136.i.i = mul i32 %indvar17.i.i.i.i, %tmp69.i.i*/
begin
main__lr_ph_us_i_i_i_i_tmp136_i_i = main_signed_multiply_32_0;
end
end
always @(posedge clk) begin
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp136.i.i = mul i32 %indvar17.i.i.i.i, %tmp69.i.i*/
if (cur_state == LEGUP_F_main_BB109_399)
begin
main__lr_ph_us_i_i_i_i_tmp136_i_i_reg <= main__lr_ph_us_i_i_i_i_tmp136_i_i;
if (^reset !== 1'bX && ^(main__lr_ph_us_i_i_i_i_tmp136_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_us_i_i_i_i_tmp136_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %WriteOneBlock.exit.i.i.i*/
/*   %443 = load i32* %scevgep142.i.i, align 4, !tbaa !0*/
begin
main_WriteOneBlock_exit_i_i_i_443 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %WriteOneBlock.exit.i.i.i*/
/*   %444 = icmp slt i32 %443, %431*/
begin
main_WriteOneBlock_exit_i_i_i_444 = $signed(main_WriteOneBlock_exit_i_i_i_443) < $signed(main_YuvToRgb_exit_loopexit_i_i_431_reg);
end
end
always @(*) begin
/* main: %WriteBlock.exit.i.i*/
/*   %446 = phi i32 [ %443, %WriteOneBlock.exit.i.i.i ], [ 0, %445 ]*/
begin
main_WriteBlock_exit_i_i_446 = main_WriteBlock_exit_i_i_446_phi_temp;
end
end
always @(*) begin
/* main: %WriteBlock.exit.i.i*/
/*   %exitcond116.i.i = icmp eq i32 %tmp141.i.i, 3*/
begin
main_WriteBlock_exit_i_i_exitcond116_i_i = main_432_tmp141_i_i_reg == 32'd3;
end
end
always @(*) begin
/* main: %447*/
/*   %448 = icmp slt i32 %tmp143.i.i, %384*/
begin
main_447_448 = $signed(main__preheader21_i_i_tmp143_i_i_reg) < $signed(main_read_markers_exit_i_384_reg);
end
end
always @(*) begin
/* main: %449*/
/*   %451 = icmp sgt i32 %384, 0*/
begin
main_449_451 = $signed(main_read_markers_exit_i_384_reg) > $signed(32'd0);
end
end
always @(*) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %452 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 0*/
if (reset) begin main__preheader_lr_ph_i_i_452 = 0; end
begin
main__preheader_lr_ph_i_i_452 = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd4;
end
end
always @(posedge clk) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %452 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 0*/
if (cur_state == LEGUP_F_main_BB115_407)
begin
main__preheader_lr_ph_i_i_452_reg <= main__preheader_lr_ph_i_i_452;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_lr_ph_i_i_452_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %453 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 0*/
if (reset) begin main__preheader_lr_ph_i_i_453 = 0; end
begin
main__preheader_lr_ph_i_i_453 = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd5;
end
end
always @(posedge clk) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %453 = getelementptr inbounds [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 0*/
if (cur_state == LEGUP_F_main_BB115_407)
begin
main__preheader_lr_ph_i_i_453_reg <= main__preheader_lr_ph_i_i_453;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_lr_ph_i_i_453_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %scevgep.i8.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 0*/
if (reset) begin main__preheader_lr_ph_i_i_scevgep_i8_i = 0; end
begin
main__preheader_lr_ph_i_i_scevgep_i8_i = `TAG_main_0_IDCTBuff_i_i_a;
end
end
always @(posedge clk) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %scevgep.i8.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 0, i32 0*/
if (cur_state == LEGUP_F_main_BB115_407)
begin
main__preheader_lr_ph_i_i_scevgep_i8_i_reg <= main__preheader_lr_ph_i_i_scevgep_i8_i;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_scevgep_i8_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_lr_ph_i_i_scevgep_i8_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %scevgep.1.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 0*/
if (reset) begin main__preheader_lr_ph_i_i_scevgep_1_i_i = 0; end
begin
main__preheader_lr_ph_i_i_scevgep_1_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd1;
end
end
always @(posedge clk) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %scevgep.1.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 1, i32 0*/
if (cur_state == LEGUP_F_main_BB115_407)
begin
main__preheader_lr_ph_i_i_scevgep_1_i_i_reg <= main__preheader_lr_ph_i_i_scevgep_1_i_i;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_scevgep_1_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_lr_ph_i_i_scevgep_1_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %scevgep.2.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 0*/
if (reset) begin main__preheader_lr_ph_i_i_scevgep_2_i_i = 0; end
begin
main__preheader_lr_ph_i_i_scevgep_2_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd2;
end
end
always @(posedge clk) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %scevgep.2.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 2, i32 0*/
if (cur_state == LEGUP_F_main_BB115_407)
begin
main__preheader_lr_ph_i_i_scevgep_2_i_i_reg <= main__preheader_lr_ph_i_i_scevgep_2_i_i;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_scevgep_2_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_lr_ph_i_i_scevgep_2_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %scevgep.3.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 3, i32 0*/
if (reset) begin main__preheader_lr_ph_i_i_scevgep_3_i_i = 0; end
begin
main__preheader_lr_ph_i_i_scevgep_3_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd3;
end
end
always @(posedge clk) begin
/* main: %.preheader.lr.ph.i.i*/
/*   %scevgep.3.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 3, i32 0*/
if (cur_state == LEGUP_F_main_BB115_407)
begin
main__preheader_lr_ph_i_i_scevgep_3_i_i_reg <= main__preheader_lr_ph_i_i_scevgep_3_i_i;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_scevgep_3_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_lr_ph_i_i_scevgep_3_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %indvar.i7.i = phi i32 [ 0, %.preheader.lr.ph.i.i ], [ %indvar.next.i.i, %.loopexit.i.i ]*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
main__preheader_i_i_indvar_i7_i = main__preheader_i_i_indvar_i7_i_phi_temp;
end
/* main: %.preheader.i.i*/
/*   %indvar.i7.i = phi i32 [ 0, %.preheader.lr.ph.i.i ], [ %indvar.next.i.i, %.loopexit.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB116_408) */
begin
main__preheader_i_i_indvar_i7_i = main__preheader_i_i_indvar_i7_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader.i.i*/
/*   %indvar.i7.i = phi i32 [ 0, %.preheader.lr.ph.i.i ], [ %indvar.next.i.i, %.loopexit.i.i ]*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
main__preheader_i_i_indvar_i7_i_reg <= main__preheader_i_i_indvar_i7_i;
if (^reset !== 1'bX && ^(main__preheader_i_i_indvar_i7_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_i_indvar_i7_i_reg"); $finish; end
end
/* main: %.preheader.i.i*/
/*   %indvar.i7.i = phi i32 [ 0, %.preheader.lr.ph.i.i ], [ %indvar.next.i.i, %.loopexit.i.i ]*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
main__preheader_i_i_indvar_i7_i_reg <= main__preheader_i_i_indvar_i7_i;
if (^reset !== 1'bX && ^(main__preheader_i_i_indvar_i7_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_i_indvar_i7_i_reg"); $finish; end
end
/* main: %.preheader.i.i*/
/*   %indvar.i7.i = phi i32 [ 0, %.preheader.lr.ph.i.i ], [ %indvar.next.i.i, %.loopexit.i.i ]*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
main__preheader_i_i_indvar_i7_i_reg <= main__preheader_i_i_indvar_i7_i;
if (^reset !== 1'bX && ^(main__preheader_i_i_indvar_i7_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_i_indvar_i7_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %tmp48.i.i = shl i32 %indvar.i7.i, 2*/
begin
main__preheader_i_i_tmp48_i_i = main__preheader_i_i_indvar_i7_i <<< 32'd2 % 32;
end
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %tmp49.i.i = add i32 %tmp48.i.i, 4*/
begin
main__preheader_i_i_tmp49_i_i = main__preheader_i_i_tmp48_i_i + 32'd4;
end
end
always @(posedge clk) begin
/* main: %.preheader.i.i*/
/*   %tmp49.i.i = add i32 %tmp48.i.i, 4*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
main__preheader_i_i_tmp49_i_i_reg <= main__preheader_i_i_tmp49_i_i;
if (^reset !== 1'bX && ^(main__preheader_i_i_tmp49_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_i_tmp49_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i = main__preheader16_i_i_i_517_i_i_phi_temp;
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
else if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i = main__preheader16_i_i_i_517_i_i_phi_temp;
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
else if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i = main__preheader16_i_i_i_517_i_i_phi_temp;
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
else if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i = main__preheader16_i_i_i_517_i_i_phi_temp;
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
else if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i = main__preheader16_i_i_i_517_i_i_phi_temp;
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB117_426) */
begin
main__preheader16_i_i_i_517_i_i = main__preheader16_i_i_i_517_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i_reg <= main__preheader16_i_i_i_517_i_i;
if (^reset !== 1'bX && ^(main__preheader16_i_i_i_517_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_reg"); $finish; end
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i_reg <= main__preheader16_i_i_i_517_i_i;
if (^reset !== 1'bX && ^(main__preheader16_i_i_i_517_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_reg"); $finish; end
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i_reg <= main__preheader16_i_i_i_517_i_i;
if (^reset !== 1'bX && ^(main__preheader16_i_i_i_517_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_reg"); $finish; end
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i_reg <= main__preheader16_i_i_i_517_i_i;
if (^reset !== 1'bX && ^(main__preheader16_i_i_i_517_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_reg"); $finish; end
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i_reg <= main__preheader16_i_i_i_517_i_i;
if (^reset !== 1'bX && ^(main__preheader16_i_i_i_517_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_reg"); $finish; end
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i_reg <= main__preheader16_i_i_i_517_i_i;
if (^reset !== 1'bX && ^(main__preheader16_i_i_i_517_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_reg"); $finish; end
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426)
begin
main__preheader16_i_i_i_517_i_i_reg <= main__preheader16_i_i_i_517_i_i;
if (^reset !== 1'bX && ^(main__preheader16_i_i_i_517_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %i.01.i2.i.i = phi i32 [ %488, %487 ], [ 0, %.preheader16.i.i ]*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_i_01_i2_i_i = main_454_i_01_i2_i_i_phi_temp;
end
/* main: %454*/
/*   %i.01.i2.i.i = phi i32 [ %488, %487 ], [ 0, %.preheader16.i.i ]*/
else /* if (cur_state == LEGUP_F_main_BB118_427) */
begin
main_454_i_01_i2_i_i = main_454_i_01_i2_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %i.01.i2.i.i = phi i32 [ %488, %487 ], [ 0, %.preheader16.i.i ]*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_i_01_i2_i_i_reg <= main_454_i_01_i2_i_i;
if (^reset !== 1'bX && ^(main_454_i_01_i2_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_i_01_i2_i_i_reg"); $finish; end
end
/* main: %454*/
/*   %i.01.i2.i.i = phi i32 [ %488, %487 ], [ 0, %.preheader16.i.i ]*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_i_01_i2_i_i_reg <= main_454_i_01_i2_i_i;
if (^reset !== 1'bX && ^(main_454_i_01_i2_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_i_01_i2_i_i_reg"); $finish; end
end
/* main: %454*/
/*   %i.01.i2.i.i = phi i32 [ %488, %487 ], [ 0, %.preheader16.i.i ]*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_i_01_i2_i_i_reg <= main_454_i_01_i2_i_i;
if (^reset !== 1'bX && ^(main_454_i_01_i2_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_i_01_i2_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %scevgep4.i6.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.517.i.i, i32 0, i32 %i.01.i2.i.i*/
begin
main_454_scevgep4_i6_i_i = `TAG_g_rgb_buf_a + 768 * main__preheader16_i_i_i_517_i_i_reg + 4 * main_454_i_01_i2_i_i;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %scevgep4.i6.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.517.i.i, i32 0, i32 %i.01.i2.i.i*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_scevgep4_i6_i_i_reg <= main_454_scevgep4_i6_i_i;
if (^reset !== 1'bX && ^(main_454_scevgep4_i6_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_scevgep4_i6_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %scevgep5.i7.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.517.i.i, i32 1, i32 %i.01.i2.i.i*/
begin
main_454_scevgep5_i7_i_i = `TAG_g_rgb_buf_a + 768 * main__preheader16_i_i_i_517_i_i_reg + 256 * 32'd1 + 4 * main_454_i_01_i2_i_i;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %scevgep5.i7.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.517.i.i, i32 1, i32 %i.01.i2.i.i*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_scevgep5_i7_i_i_reg <= main_454_scevgep5_i7_i_i;
if (^reset !== 1'bX && ^(main_454_scevgep5_i7_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_scevgep5_i7_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %scevgep6.i8.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.517.i.i, i32 2, i32 %i.01.i2.i.i*/
begin
main_454_scevgep6_i8_i_i = `TAG_g_rgb_buf_a + 768 * main__preheader16_i_i_i_517_i_i_reg + 256 * 32'd2 + 4 * main_454_i_01_i2_i_i;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %scevgep6.i8.i.i = getelementptr [4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 %i.517.i.i, i32 2, i32 %i.01.i2.i.i*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_scevgep6_i8_i_i_reg <= main_454_scevgep6_i8_i_i;
if (^reset !== 1'bX && ^(main_454_scevgep6_i8_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_scevgep6_i8_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %scevgep.i3.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 %i.517.i.i, i32 %i.01.i2.i.i*/
begin
main_454_scevgep_i3_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * main__preheader16_i_i_i_517_i_i_reg + 4 * main_454_i_01_i2_i_i;
end
end
always @(*) begin
/* main: %454*/
/*   %scevgep3.i5.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %i.01.i2.i.i*/
begin
main_454_scevgep3_i5_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd5 + 4 * main_454_i_01_i2_i_i;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %scevgep3.i5.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 5, i32 %i.01.i2.i.i*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_scevgep3_i5_i_i_reg <= main_454_scevgep3_i5_i_i;
if (^reset !== 1'bX && ^(main_454_scevgep3_i5_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_scevgep3_i5_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %scevgep2.i4.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %i.01.i2.i.i*/
begin
main_454_scevgep2_i4_i_i = `TAG_main_0_IDCTBuff_i_i_a + 256 * 32'd4 + 4 * main_454_i_01_i2_i_i;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %scevgep2.i4.i.i = getelementptr [6 x [64 x i32]]* %IDCTBuff.i.i, i32 0, i32 4, i32 %i.01.i2.i.i*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
main_454_scevgep2_i4_i_i_reg <= main_454_scevgep2_i4_i_i;
if (^reset !== 1'bX && ^(main_454_scevgep2_i4_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_scevgep2_i4_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %455 = load i32* %scevgep.i3.i.i, align 4, !tbaa !0*/
begin
main_454_455 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %454*/
/*   %456 = load i32* %scevgep2.i4.i.i, align 4, !tbaa !0*/
begin
main_454_456 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %454*/
/*   %457 = add nsw i32 %456, -128*/
begin
main_454_457 = main_454_456 + -32'd128;
end
end
always @(*) begin
/* main: %454*/
/*   %458 = load i32* %scevgep3.i5.i.i, align 4, !tbaa !0*/
begin
main_454_458 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %454*/
/*   %459 = add nsw i32 %458, -128*/
begin
main_454_459 = main_454_458 + -32'd128;
end
end
always @(*) begin
/* main: %454*/
/*   %460 = shl nsw i32 %455, 8*/
begin
main_454_460 = main_454_455 <<< 32'd8 % 32;
end
end
always @(*) begin
/* main: %454*/
/*   %461 = mul nsw i32 %459, 359*/
begin
main_454_461 = main_signed_multiply_32_1;
end
end
always @(*) begin
/* main: %454*/
/*   %462 = or i32 %460, 128*/
begin
main_454_462 = main_454_460 | 32'd128;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %462 = or i32 %460, 128*/
if (cur_state == LEGUP_F_main_BB118_429)
begin
main_454_462_reg <= main_454_462;
if (^reset !== 1'bX && ^(main_454_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_462_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %463 = add i32 %461, %462*/
begin
main_454_463 = main_454_461 + main_454_462_reg;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %463 = add i32 %461, %462*/
if (cur_state == LEGUP_F_main_BB118_431)
begin
main_454_463_reg <= main_454_463;
if (^reset !== 1'bX && ^(main_454_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_463_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %464 = ashr i32 %463, 8*/
begin
main_454_464 = $signed(main_454_463_reg) >>> 32'd8;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %464 = ashr i32 %463, 8*/
if (cur_state == LEGUP_F_main_BB118_432)
begin
main_454_464_reg <= main_454_464;
if (^reset !== 1'bX && ^(main_454_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_464_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %465 = mul i32 %457, -88*/
begin
main_454_465 = main_signed_multiply_32_1;
end
end
always @(*) begin
/* main: %454*/
/*   %466 = mul i32 %459, -182*/
begin
main_454_466 = main_signed_multiply_32_2;
end
end
always @(*) begin
/* main: %454*/
/*   %467 = add i32 %465, %462*/
begin
main_454_467 = main_454_465 + main_454_462_reg;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %467 = add i32 %465, %462*/
if (cur_state == LEGUP_F_main_BB118_430)
begin
main_454_467_reg <= main_454_467;
if (^reset !== 1'bX && ^(main_454_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_467_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %468 = add i32 %467, %466*/
begin
main_454_468 = main_454_467_reg + main_454_466;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %468 = add i32 %467, %466*/
if (cur_state == LEGUP_F_main_BB118_431)
begin
main_454_468_reg <= main_454_468;
if (^reset !== 1'bX && ^(main_454_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_468_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %469 = ashr i32 %468, 8*/
begin
main_454_469 = $signed(main_454_468_reg) >>> 32'd8;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %469 = ashr i32 %468, 8*/
if (cur_state == LEGUP_F_main_BB118_432)
begin
main_454_469_reg <= main_454_469;
if (^reset !== 1'bX && ^(main_454_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_469_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %470 = mul nsw i32 %457, 454*/
begin
main_454_470 = main_signed_multiply_32_2;
end
end
always @(*) begin
/* main: %454*/
/*   %471 = add i32 %470, %462*/
begin
main_454_471 = main_454_470 + main_454_462_reg;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %471 = add i32 %470, %462*/
if (cur_state == LEGUP_F_main_BB118_430)
begin
main_454_471_reg <= main_454_471;
if (^reset !== 1'bX && ^(main_454_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_471_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %472 = ashr i32 %471, 8*/
begin
main_454_472 = $signed(main_454_471_reg) >>> 32'd8;
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %472 = ashr i32 %471, 8*/
if (cur_state == LEGUP_F_main_BB118_431)
begin
main_454_472_reg <= main_454_472;
if (^reset !== 1'bX && ^(main_454_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_472_reg"); $finish; end
end
end
always @(*) begin
/* main: %454*/
/*   %473 = icmp slt i32 %464, 0*/
begin
main_454_473 = $signed(main_454_464) < $signed(32'd0);
end
end
always @(*) begin
/* main: %474*/
/*   %475 = icmp sgt i32 %464, 255*/
begin
main_474_475 = $signed(main_454_464_reg) > $signed(32'd255);
end
end
always @(*) begin
/* main: %477*/
/*   %r.0.i9.i.i = phi i32 [ 255, %476 ], [ %464, %474 ], [ 0, %454 ]*/
if (cur_state == LEGUP_F_main_BB121_435)
begin
main_477_r_0_i9_i_i = main_477_r_0_i9_i_i_phi_temp;
end
/* main: %477*/
/*   %r.0.i9.i.i = phi i32 [ 255, %476 ], [ %464, %474 ], [ 0, %454 ]*/
else /* if (cur_state == LEGUP_F_main_BB121_435) */
begin
main_477_r_0_i9_i_i = main_477_r_0_i9_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %477*/
/*   %r.0.i9.i.i = phi i32 [ 255, %476 ], [ %464, %474 ], [ 0, %454 ]*/
if (cur_state == LEGUP_F_main_BB121_435)
begin
main_477_r_0_i9_i_i_reg <= main_477_r_0_i9_i_i;
if (^reset !== 1'bX && ^(main_477_r_0_i9_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_r_0_i9_i_i_reg"); $finish; end
end
/* main: %477*/
/*   %r.0.i9.i.i = phi i32 [ 255, %476 ], [ %464, %474 ], [ 0, %454 ]*/
if (cur_state == LEGUP_F_main_BB121_435)
begin
main_477_r_0_i9_i_i_reg <= main_477_r_0_i9_i_i;
if (^reset !== 1'bX && ^(main_477_r_0_i9_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_r_0_i9_i_i_reg"); $finish; end
end
/* main: %477*/
/*   %r.0.i9.i.i = phi i32 [ 255, %476 ], [ %464, %474 ], [ 0, %454 ]*/
if (cur_state == LEGUP_F_main_BB121_435)
begin
main_477_r_0_i9_i_i_reg <= main_477_r_0_i9_i_i;
if (^reset !== 1'bX && ^(main_477_r_0_i9_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_r_0_i9_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %477*/
/*   %478 = icmp slt i32 %469, 0*/
begin
main_477_478 = $signed(main_454_469_reg) < $signed(32'd0);
end
end
always @(*) begin
/* main: %479*/
/*   %480 = icmp sgt i32 %469, 255*/
begin
main_479_480 = $signed(main_454_469_reg) > $signed(32'd255);
end
end
always @(*) begin
/* main: %482*/
/*   %g.0.i10.i.i = phi i32 [ 255, %481 ], [ %469, %479 ], [ 0, %477 ]*/
if (cur_state == LEGUP_F_main_BB124_438)
begin
main_482_g_0_i10_i_i = main_482_g_0_i10_i_i_phi_temp;
end
/* main: %482*/
/*   %g.0.i10.i.i = phi i32 [ 255, %481 ], [ %469, %479 ], [ 0, %477 ]*/
else /* if (cur_state == LEGUP_F_main_BB124_438) */
begin
main_482_g_0_i10_i_i = main_482_g_0_i10_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %482*/
/*   %g.0.i10.i.i = phi i32 [ 255, %481 ], [ %469, %479 ], [ 0, %477 ]*/
if (cur_state == LEGUP_F_main_BB124_438)
begin
main_482_g_0_i10_i_i_reg <= main_482_g_0_i10_i_i;
if (^reset !== 1'bX && ^(main_482_g_0_i10_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_482_g_0_i10_i_i_reg"); $finish; end
end
/* main: %482*/
/*   %g.0.i10.i.i = phi i32 [ 255, %481 ], [ %469, %479 ], [ 0, %477 ]*/
if (cur_state == LEGUP_F_main_BB124_438)
begin
main_482_g_0_i10_i_i_reg <= main_482_g_0_i10_i_i;
if (^reset !== 1'bX && ^(main_482_g_0_i10_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_482_g_0_i10_i_i_reg"); $finish; end
end
/* main: %482*/
/*   %g.0.i10.i.i = phi i32 [ 255, %481 ], [ %469, %479 ], [ 0, %477 ]*/
if (cur_state == LEGUP_F_main_BB124_438)
begin
main_482_g_0_i10_i_i_reg <= main_482_g_0_i10_i_i;
if (^reset !== 1'bX && ^(main_482_g_0_i10_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_482_g_0_i10_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %482*/
/*   %483 = icmp slt i32 %472, 0*/
begin
main_482_483 = $signed(main_454_472_reg) < $signed(32'd0);
end
end
always @(*) begin
/* main: %484*/
/*   %485 = icmp sgt i32 %472, 255*/
begin
main_484_485 = $signed(main_454_472_reg) > $signed(32'd255);
end
end
always @(*) begin
/* main: %487*/
/*   %b.0.i11.i.i = phi i32 [ 255, %486 ], [ %472, %484 ], [ 0, %482 ]*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
main_487_b_0_i11_i_i = main_487_b_0_i11_i_i_phi_temp;
end
/* main: %487*/
/*   %b.0.i11.i.i = phi i32 [ 255, %486 ], [ %472, %484 ], [ 0, %482 ]*/
else /* if (cur_state == LEGUP_F_main_BB127_441) */
begin
main_487_b_0_i11_i_i = main_487_b_0_i11_i_i_phi_temp;
end
end
always @(posedge clk) begin
/* main: %487*/
/*   %b.0.i11.i.i = phi i32 [ 255, %486 ], [ %472, %484 ], [ 0, %482 ]*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
main_487_b_0_i11_i_i_reg <= main_487_b_0_i11_i_i;
if (^reset !== 1'bX && ^(main_487_b_0_i11_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_b_0_i11_i_i_reg"); $finish; end
end
/* main: %487*/
/*   %b.0.i11.i.i = phi i32 [ 255, %486 ], [ %472, %484 ], [ 0, %482 ]*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
main_487_b_0_i11_i_i_reg <= main_487_b_0_i11_i_i;
if (^reset !== 1'bX && ^(main_487_b_0_i11_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_b_0_i11_i_i_reg"); $finish; end
end
/* main: %487*/
/*   %b.0.i11.i.i = phi i32 [ 255, %486 ], [ %472, %484 ], [ 0, %482 ]*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
main_487_b_0_i11_i_i_reg <= main_487_b_0_i11_i_i;
if (^reset !== 1'bX && ^(main_487_b_0_i11_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_b_0_i11_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %487*/
/*   %488 = add nsw i32 %i.01.i2.i.i, 1*/
begin
main_487_488 = main_454_i_01_i2_i_i_reg + 32'd1;
end
end
always @(posedge clk) begin
/* main: %487*/
/*   %488 = add nsw i32 %i.01.i2.i.i, 1*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
main_487_488_reg <= main_487_488;
if (^reset !== 1'bX && ^(main_487_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_488_reg"); $finish; end
end
end
always @(*) begin
/* main: %487*/
/*   %exitcond.i.i = icmp eq i32 %488, 64*/
begin
main_487_exitcond_i_i = main_487_488 == 32'd64;
end
end
always @(posedge clk) begin
/* main: %487*/
/*   %exitcond.i.i = icmp eq i32 %488, 64*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
main_487_exitcond_i_i_reg <= main_487_exitcond_i_i;
if (^reset !== 1'bX && ^(main_487_exitcond_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_exitcond_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %YuvToRgb.exit13.i.i*/
/*   %489 = add nsw i32 %i.517.i.i, 1*/
begin
main_YuvToRgb_exit13_i_i_489 = main__preheader16_i_i_i_517_i_i_reg + 32'd1;
end
end
always @(*) begin
/* main: %YuvToRgb.exit13.i.i*/
/*   %exitcond35.i.i = icmp eq i32 %489, 4*/
begin
main_YuvToRgb_exit13_i_i_exitcond35_i_i = main_YuvToRgb_exit13_i_i_489 == 32'd4;
end
end
always @(*) begin
/* main: %.loopexit.i.i*/
/*   %490 = icmp slt i32 %tmp49.i.i, %384*/
begin
main__loopexit_i_i_490 = $signed(main__preheader_i_i_tmp49_i_i_reg) < $signed(main_read_markers_exit_i_384_reg);
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   %490 = icmp slt i32 %tmp49.i.i, %384*/
if (cur_state == LEGUP_function_call_447)
begin
main__loopexit_i_i_490_reg <= main__loopexit_i_i_490;
if (^reset !== 1'bX && ^(main__loopexit_i_i_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_i_490_reg"); $finish; end
end
end
always @(*) begin
/* main: %.loopexit.i.i*/
/*   %indvar.next.i.i = add i32 %indvar.i7.i, 1*/
begin
main__loopexit_i_i_indvar_next_i_i = main__preheader_i_i_indvar_i7_i_reg + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   %indvar.next.i.i = add i32 %indvar.i7.i, 1*/
if (cur_state == LEGUP_function_call_447)
begin
main__loopexit_i_i_indvar_next_i_i_reg <= main__loopexit_i_i_indvar_next_i_i;
if (^reset !== 1'bX && ^(main__loopexit_i_i_indvar_next_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_i_indvar_next_i_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %decode_start.exit.i*/
/*   %main_result.promoted3.i = load i32* @main_result, align 4*/
begin
main_decode_start_exit_i_main_result_promoted3_i = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %491*/
/*   %492 = phi i32 [ %main_result.promoted3.i, %decode_start.exit.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
main_491_492 = main_491_492_phi_temp;
end
/* main: %491*/
/*   %492 = phi i32 [ %main_result.promoted3.i, %decode_start.exit.i ], [ %497, %491 ]*/
else /* if (cur_state == LEGUP_F_main_BB131_457) */
begin
main_491_492 = main_491_492_phi_temp;
end
end
always @(posedge clk) begin
/* main: %491*/
/*   %492 = phi i32 [ %main_result.promoted3.i, %decode_start.exit.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
main_491_492_reg <= main_491_492;
if (^reset !== 1'bX && ^(main_491_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_reg"); $finish; end
end
/* main: %491*/
/*   %492 = phi i32 [ %main_result.promoted3.i, %decode_start.exit.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
main_491_492_reg <= main_491_492;
if (^reset !== 1'bX && ^(main_491_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_reg"); $finish; end
end
/* main: %491*/
/*   %492 = phi i32 [ %main_result.promoted3.i, %decode_start.exit.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
main_491_492_reg <= main_491_492;
if (^reset !== 1'bX && ^(main_491_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_reg"); $finish; end
end
end
always @(*) begin
/* main: %491*/
/*   %j.01.i = phi i32 [ 0, %decode_start.exit.i ], [ %498, %491 ]*/
begin
main_491_j_01_i = main_491_j_01_i_phi_temp;
end
end
always @(*) begin
/* main: %491*/
/*   %scevgep7.i = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 0, i32 %j.01.i*/
begin
main_491_scevgep7_i = `TAG_g_hana_bmp_a + 1 * main_491_j_01_i;
end
end
always @(posedge clk) begin
/* main: %491*/
/*   %scevgep7.i = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 0, i32 %j.01.i*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
main_491_scevgep7_i_reg <= main_491_scevgep7_i;
if (^reset !== 1'bX && ^(main_491_scevgep7_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_scevgep7_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %491*/
/*   %scevgep.i = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 %j.01.i*/
begin
main_491_scevgep_i = `TAG_g_OutData_comp_buf_a + 1 * main_491_j_01_i;
end
end
always @(*) begin
/* main: %491*/
/*   %493 = load i8* %scevgep.i, align 1, !tbaa !1*/
begin
main_491_493 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* main: %491*/
/*   %493 = load i8* %scevgep.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_459)
begin
main_491_493_reg <= main_491_493;
if (^reset !== 1'bX && ^(main_491_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_493_reg"); $finish; end
end
end
always @(*) begin
/* main: %491*/
/*   %494 = load i8* %scevgep7.i, align 1, !tbaa !1*/
begin
main_491_494 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %491*/
/*   %495 = icmp eq i8 %493, %494*/
begin
main_491_495 = main_491_493_reg == main_491_494;
end
end
always @(*) begin
/* main: %491*/
/*   %496 = zext i1 %495 to i32*/
begin
main_491_496 = main_491_495;
end
end
always @(*) begin
/* main: %491*/
/*   %497 = add nsw i32 %492, %496*/
begin
main_491_497 = main_491_492_reg + main_491_496;
end
end
always @(*) begin
/* main: %491*/
/*   %498 = add nsw i32 %j.01.i, 1*/
begin
main_491_498 = main_491_j_01_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %491*/
/*   %498 = add nsw i32 %j.01.i, 1*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
main_491_498_reg <= main_491_498;
if (^reset !== 1'bX && ^(main_491_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_498_reg"); $finish; end
end
end
always @(*) begin
/* main: %491*/
/*   %exitcond.i = icmp eq i32 %498, 5310*/
begin
main_491_exitcond_i = main_491_498 == 32'd5310;
end
end
always @(posedge clk) begin
/* main: %491*/
/*   %exitcond.i = icmp eq i32 %498, 5310*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
main_491_exitcond_i_reg <= main_491_exitcond_i;
if (^reset !== 1'bX && ^(main_491_exitcond_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_exitcond_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %499 = phi i32 [ %504, %.preheader.1.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
main__preheader_1_i_499 = main__preheader_1_i_499_phi_temp;
end
/* main: %.preheader.1.i*/
/*   %499 = phi i32 [ %504, %.preheader.1.i ], [ %497, %491 ]*/
else /* if (cur_state == LEGUP_F_main_BB132_461) */
begin
main__preheader_1_i_499 = main__preheader_1_i_499_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader.1.i*/
/*   %499 = phi i32 [ %504, %.preheader.1.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
main__preheader_1_i_499_reg <= main__preheader_1_i_499;
if (^reset !== 1'bX && ^(main__preheader_1_i_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_499_reg"); $finish; end
end
/* main: %.preheader.1.i*/
/*   %499 = phi i32 [ %504, %.preheader.1.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
main__preheader_1_i_499_reg <= main__preheader_1_i_499;
if (^reset !== 1'bX && ^(main__preheader_1_i_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_499_reg"); $finish; end
end
/* main: %.preheader.1.i*/
/*   %499 = phi i32 [ %504, %.preheader.1.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
main__preheader_1_i_499_reg <= main__preheader_1_i_499;
if (^reset !== 1'bX && ^(main__preheader_1_i_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_499_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %j.01.1.i = phi i32 [ %505, %.preheader.1.i ], [ 0, %491 ]*/
begin
main__preheader_1_i_j_01_1_i = main__preheader_1_i_j_01_1_i_phi_temp;
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %scevgep7.1.i = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 1, i32 %j.01.1.i*/
begin
main__preheader_1_i_scevgep7_1_i = `TAG_g_hana_bmp_a + 5310 * 32'd1 + 1 * main__preheader_1_i_j_01_1_i;
end
end
always @(posedge clk) begin
/* main: %.preheader.1.i*/
/*   %scevgep7.1.i = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 1, i32 %j.01.1.i*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
main__preheader_1_i_scevgep7_1_i_reg <= main__preheader_1_i_scevgep7_1_i;
if (^reset !== 1'bX && ^(main__preheader_1_i_scevgep7_1_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_scevgep7_1_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %scevgep.1.i = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 %j.01.1.i*/
begin
main__preheader_1_i_scevgep_1_i = `TAG_g_OutData_comp_buf_a + 5310 * 32'd1 + 1 * main__preheader_1_i_j_01_1_i;
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %500 = load i8* %scevgep.1.i, align 1, !tbaa !1*/
begin
main__preheader_1_i_500 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* main: %.preheader.1.i*/
/*   %500 = load i8* %scevgep.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_463)
begin
main__preheader_1_i_500_reg <= main__preheader_1_i_500;
if (^reset !== 1'bX && ^(main__preheader_1_i_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_500_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %501 = load i8* %scevgep7.1.i, align 1, !tbaa !1*/
begin
main__preheader_1_i_501 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %502 = icmp eq i8 %500, %501*/
begin
main__preheader_1_i_502 = main__preheader_1_i_500_reg == main__preheader_1_i_501;
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %503 = zext i1 %502 to i32*/
begin
main__preheader_1_i_503 = main__preheader_1_i_502;
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %504 = add nsw i32 %499, %503*/
begin
main__preheader_1_i_504 = main__preheader_1_i_499_reg + main__preheader_1_i_503;
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %505 = add nsw i32 %j.01.1.i, 1*/
begin
main__preheader_1_i_505 = main__preheader_1_i_j_01_1_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.preheader.1.i*/
/*   %505 = add nsw i32 %j.01.1.i, 1*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
main__preheader_1_i_505_reg <= main__preheader_1_i_505;
if (^reset !== 1'bX && ^(main__preheader_1_i_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_505_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.1.i*/
/*   %exitcond.1.i = icmp eq i32 %505, 5310*/
begin
main__preheader_1_i_exitcond_1_i = main__preheader_1_i_505 == 32'd5310;
end
end
always @(posedge clk) begin
/* main: %.preheader.1.i*/
/*   %exitcond.1.i = icmp eq i32 %505, 5310*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
main__preheader_1_i_exitcond_1_i_reg <= main__preheader_1_i_exitcond_1_i;
if (^reset !== 1'bX && ^(main__preheader_1_i_exitcond_1_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_exitcond_1_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %jpeg2bmp_main.exit*/
/*   %506 = icmp eq i16 %379, 90*/
begin
main_jpeg2bmp_main_exit_506 = main_read_markers_exit_i_379_reg == 16'd90;
end
end
always @(*) begin
/* main: %jpeg2bmp_main.exit*/
/*   %507 = zext i1 %506 to i32*/
begin
main_jpeg2bmp_main_exit_507 = main_jpeg2bmp_main_exit_506;
end
end
always @(*) begin
/* main: %jpeg2bmp_main.exit*/
/*   %storemerge = add nsw i32 %518, %507*/
begin
main_jpeg2bmp_main_exit_storemerge = main__preheader_2_i_518_reg + main_jpeg2bmp_main_exit_507;
end
end
always @(*) begin
/* main: %jpeg2bmp_main.exit*/
/*   %508 = icmp eq i16 %374, 59*/
begin
main_jpeg2bmp_main_exit_508 = main_read_markers_exit_i_374_reg == 16'd59;
end
end
always @(*) begin
/* main: %jpeg2bmp_main.exit*/
/*   %509 = zext i1 %508 to i32*/
begin
main_jpeg2bmp_main_exit_509 = main_jpeg2bmp_main_exit_508;
end
end
always @(*) begin
/* main: %jpeg2bmp_main.exit*/
/*   %.storemerge = add nsw i32 %storemerge, %509*/
begin
main_jpeg2bmp_main_exit__storemerge = main_jpeg2bmp_main_exit_storemerge + main_jpeg2bmp_main_exit_509;
end
end
always @(*) begin
/* main: %jpeg2bmp_main.exit*/
/*   %511 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_jpeg2bmp_main_exit_511 = memory_controller_out[31:0];
end
end
always @(*) begin
/* main: %jpeg2bmp_main.exit*/
/*   %512 = icmp eq i32 %511, 21745*/
begin
main_jpeg2bmp_main_exit_512 = main_jpeg2bmp_main_exit_511 == 32'd21745;
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %513 = phi i32 [ %518, %.preheader.2.i ], [ %504, %.preheader.1.i ]*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
main__preheader_2_i_513 = main__preheader_2_i_513_phi_temp;
end
/* main: %.preheader.2.i*/
/*   %513 = phi i32 [ %518, %.preheader.2.i ], [ %504, %.preheader.1.i ]*/
else /* if (cur_state == LEGUP_F_main_BB134_469) */
begin
main__preheader_2_i_513 = main__preheader_2_i_513_phi_temp;
end
end
always @(posedge clk) begin
/* main: %.preheader.2.i*/
/*   %513 = phi i32 [ %518, %.preheader.2.i ], [ %504, %.preheader.1.i ]*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
main__preheader_2_i_513_reg <= main__preheader_2_i_513;
if (^reset !== 1'bX && ^(main__preheader_2_i_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_513_reg"); $finish; end
end
/* main: %.preheader.2.i*/
/*   %513 = phi i32 [ %518, %.preheader.2.i ], [ %504, %.preheader.1.i ]*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
main__preheader_2_i_513_reg <= main__preheader_2_i_513;
if (^reset !== 1'bX && ^(main__preheader_2_i_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_513_reg"); $finish; end
end
/* main: %.preheader.2.i*/
/*   %513 = phi i32 [ %518, %.preheader.2.i ], [ %504, %.preheader.1.i ]*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
main__preheader_2_i_513_reg <= main__preheader_2_i_513;
if (^reset !== 1'bX && ^(main__preheader_2_i_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_513_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %j.01.2.i = phi i32 [ %519, %.preheader.2.i ], [ 0, %.preheader.1.i ]*/
begin
main__preheader_2_i_j_01_2_i = main__preheader_2_i_j_01_2_i_phi_temp;
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %scevgep7.2.i = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 2, i32 %j.01.2.i*/
begin
main__preheader_2_i_scevgep7_2_i = `TAG_g_hana_bmp_a + 5310 * 32'd2 + 1 * main__preheader_2_i_j_01_2_i;
end
end
always @(posedge clk) begin
/* main: %.preheader.2.i*/
/*   %scevgep7.2.i = getelementptr [3 x [5310 x i8]]* @hana_bmp, i32 0, i32 2, i32 %j.01.2.i*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
main__preheader_2_i_scevgep7_2_i_reg <= main__preheader_2_i_scevgep7_2_i;
if (^reset !== 1'bX && ^(main__preheader_2_i_scevgep7_2_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_scevgep7_2_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %scevgep.2.i = getelementptr [3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 %j.01.2.i*/
begin
main__preheader_2_i_scevgep_2_i = `TAG_g_OutData_comp_buf_a + 5310 * 32'd2 + 1 * main__preheader_2_i_j_01_2_i;
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %514 = load i8* %scevgep.2.i, align 1, !tbaa !1*/
begin
main__preheader_2_i_514 = memory_controller_out[7:0];
end
end
always @(posedge clk) begin
/* main: %.preheader.2.i*/
/*   %514 = load i8* %scevgep.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_471)
begin
main__preheader_2_i_514_reg <= main__preheader_2_i_514;
if (^reset !== 1'bX && ^(main__preheader_2_i_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_514_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %515 = load i8* %scevgep7.2.i, align 1, !tbaa !1*/
begin
main__preheader_2_i_515 = memory_controller_out[7:0];
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %516 = icmp eq i8 %514, %515*/
begin
main__preheader_2_i_516 = main__preheader_2_i_514_reg == main__preheader_2_i_515;
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %517 = zext i1 %516 to i32*/
begin
main__preheader_2_i_517 = main__preheader_2_i_516;
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %518 = add nsw i32 %513, %517*/
begin
main__preheader_2_i_518 = main__preheader_2_i_513_reg + main__preheader_2_i_517;
end
end
always @(posedge clk) begin
/* main: %.preheader.2.i*/
/*   %518 = add nsw i32 %513, %517*/
if (cur_state == LEGUP_F_main_BB134_472)
begin
main__preheader_2_i_518_reg <= main__preheader_2_i_518;
if (^reset !== 1'bX && ^(main__preheader_2_i_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_518_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %519 = add nsw i32 %j.01.2.i, 1*/
begin
main__preheader_2_i_519 = main__preheader_2_i_j_01_2_i + 32'd1;
end
end
always @(posedge clk) begin
/* main: %.preheader.2.i*/
/*   %519 = add nsw i32 %j.01.2.i, 1*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
main__preheader_2_i_519_reg <= main__preheader_2_i_519;
if (^reset !== 1'bX && ^(main__preheader_2_i_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_519_reg"); $finish; end
end
end
always @(*) begin
/* main: %.preheader.2.i*/
/*   %exitcond.2.i = icmp eq i32 %519, 5310*/
begin
main__preheader_2_i_exitcond_2_i = main__preheader_2_i_519 == 32'd5310;
end
end
always @(posedge clk) begin
/* main: %.preheader.2.i*/
/*   %exitcond.2.i = icmp eq i32 %519, 5310*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
main__preheader_2_i_exitcond_2_i_reg <= main__preheader_2_i_exitcond_2_i;
if (^reset !== 1'bX && ^(main__preheader_2_i_exitcond_2_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_exitcond_2_i_reg"); $finish; end
end
end
always @(*) begin
/* main: %524*/
/*   %525 = load i32* @main_result, align 4, !tbaa !0*/
begin
main_524_525 = memory_controller_out[31:0];
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_329)
begin
huff_make_dhuff_tb_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
huff_make_dhuff_tb_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_333)
begin
huff_make_dhuff_tb_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
huff_make_dhuff_tb_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_337)
begin
huff_make_dhuff_tb_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
huff_make_dhuff_tb_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_341)
begin
huff_make_dhuff_tb_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
huff_make_dhuff_tb_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_329)
begin
huff_make_dhuff_tb_arg_p_xhtbl_bits <= `TAG_g_p_jinfo_dc_xhuff_tbl_bits_a;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_dc_xhuff_tbl_bits_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_xhtbl_bits"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_333)
begin
huff_make_dhuff_tb_arg_p_xhtbl_bits <= `TAG_g_p_jinfo_dc_xhuff_tbl_bits_a + 144 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_dc_xhuff_tbl_bits_a + 144 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_xhtbl_bits"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_337)
begin
huff_make_dhuff_tb_arg_p_xhtbl_bits <= `TAG_g_p_jinfo_ac_xhuff_tbl_bits_a;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_ac_xhuff_tbl_bits_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_xhtbl_bits"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_341)
begin
huff_make_dhuff_tb_arg_p_xhtbl_bits <= `TAG_g_p_jinfo_ac_xhuff_tbl_bits_a + 144 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_ac_xhuff_tbl_bits_a + 144 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_xhtbl_bits"); $finish; end
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_329)
begin
huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= `TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_maxcode"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_333)
begin
huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= `TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a + 144 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_maxcode_a + 144 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_maxcode"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_337)
begin
huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= `TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_maxcode"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_341)
begin
huff_make_dhuff_tb_arg_p_dhtbl_maxcode <= `TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a + 144 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_maxcode_a + 144 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_maxcode"); $finish; end
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_329)
begin
huff_make_dhuff_tb_arg_p_dhtbl_mincode <= `TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_mincode"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_333)
begin
huff_make_dhuff_tb_arg_p_dhtbl_mincode <= `TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a + 144 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_mincode_a + 144 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_mincode"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_337)
begin
huff_make_dhuff_tb_arg_p_dhtbl_mincode <= `TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_mincode"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_341)
begin
huff_make_dhuff_tb_arg_p_dhtbl_mincode <= `TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a + 144 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_mincode_a + 144 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_mincode"); $finish; end
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_329)
begin
huff_make_dhuff_tb_arg_p_dhtbl_valptr <= `TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_valptr"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_333)
begin
huff_make_dhuff_tb_arg_p_dhtbl_valptr <= `TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a + 144 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_dc_dhuff_tbl_valptr_a + 144 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_valptr"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_337)
begin
huff_make_dhuff_tb_arg_p_dhtbl_valptr <= `TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_valptr"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_341)
begin
huff_make_dhuff_tb_arg_p_dhtbl_valptr <= `TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a + 144 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_p_jinfo_ac_dhuff_tbl_valptr_a + 144 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to huff_make_dhuff_tb_arg_p_dhtbl_valptr"); $finish; end
end
end
always @(*) begin
huff_make_dhuff_tb_memory_controller_waitrequest = 1'd0;
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
huff_make_dhuff_tb_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
huff_make_dhuff_tb_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
huff_make_dhuff_tb_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
huff_make_dhuff_tb_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
huff_make_dhuff_tb_memory_controller_out = 1'd0;
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
huff_make_dhuff_tb_memory_controller_out = memory_controller_out;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
huff_make_dhuff_tb_memory_controller_out = memory_controller_out;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
huff_make_dhuff_tb_memory_controller_out = memory_controller_out;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
huff_make_dhuff_tb_memory_controller_out = memory_controller_out;
end
end
always @(*) begin
legup_function_call = 1'd0;
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_329)
begin
legup_function_call = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
legup_function_call = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_333)
begin
legup_function_call = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
legup_function_call = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_337)
begin
legup_function_call = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
legup_function_call = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB90_341)
begin
legup_function_call = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_357)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_360)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_363)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_411)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_414)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_417)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_420)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_423)
begin
legup_function_call = 1'd1;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
legup_function_call = 1'd1;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
legup_function_call = 1'd1;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
legup_function_call = 1'd1;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
legup_function_call = 1'd1;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
legup_function_call = 1'd1;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
legup_function_call = 1'd1;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
legup_function_call = 1'd1;
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_357)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_360)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_363)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_411)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_414)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_417)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_420)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_423)
begin
decode_block_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
decode_block_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_357)
begin
decode_block_arg_comp_no <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_360)
begin
decode_block_arg_comp_no <= 32'd1;
if (^reset !== 1'bX && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_363)
begin
decode_block_arg_comp_no <= 32'd2;
if (^reset !== 1'bX && ^(32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
decode_block_arg_comp_no <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_411)
begin
decode_block_arg_comp_no <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_414)
begin
decode_block_arg_comp_no <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_417)
begin
decode_block_arg_comp_no <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_420)
begin
decode_block_arg_comp_no <= 32'd1;
if (^reset !== 1'bX && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_423)
begin
decode_block_arg_comp_no <= 32'd2;
if (^reset !== 1'bX && ^(32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_comp_no"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_357)
begin
decode_block_arg_out_buf <= main__preheader21_i_i_preheader_scevgep51_i_i_reg;
if (^reset !== 1'bX && ^(main__preheader21_i_i_preheader_scevgep51_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_360)
begin
decode_block_arg_out_buf <= main__preheader21_i_i_preheader_scevgep51_1_i_i_reg;
if (^reset !== 1'bX && ^(main__preheader21_i_i_preheader_scevgep51_1_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_363)
begin
decode_block_arg_out_buf <= main__preheader21_i_i_preheader_scevgep51_2_i_i_reg;
if (^reset !== 1'bX && ^(main__preheader21_i_i_preheader_scevgep51_2_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
decode_block_arg_out_buf <= main__preheader_lr_ph_i_i_scevgep_i8_i_reg;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_scevgep_i8_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_411)
begin
decode_block_arg_out_buf <= main__preheader_lr_ph_i_i_scevgep_1_i_i_reg;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_scevgep_1_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_414)
begin
decode_block_arg_out_buf <= main__preheader_lr_ph_i_i_scevgep_2_i_i_reg;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_scevgep_2_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_417)
begin
decode_block_arg_out_buf <= main__preheader_lr_ph_i_i_scevgep_3_i_i_reg;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_scevgep_3_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_420)
begin
decode_block_arg_out_buf <= main__preheader_lr_ph_i_i_452_reg;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_452_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_423)
begin
decode_block_arg_out_buf <= main__preheader_lr_ph_i_i_453_reg;
if (^reset !== 1'bX && ^(main__preheader_lr_ph_i_i_453_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_out_buf"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_357)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_360)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_1_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_1_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB93_363)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_2_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_2_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_408)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_411)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_414)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_417)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_420)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_1_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_1_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_F_main_BB116_423)
begin
decode_block_arg_HuffBuff <= main_read_markers_exit_i_scevgep148_2_i_i_reg;
if (^reset !== 1'bX && ^(main_read_markers_exit_i_scevgep148_2_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to decode_block_arg_HuffBuff"); $finish; end
end
end
always @(*) begin
decode_block_memory_controller_waitrequest = 1'd0;
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
decode_block_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
decode_block_memory_controller_out = 1'd0;
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
decode_block_memory_controller_out = memory_controller_out;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
decode_block_memory_controller_out = memory_controller_out;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
decode_block_memory_controller_out = memory_controller_out;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
decode_block_memory_controller_out = memory_controller_out;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
decode_block_memory_controller_out = memory_controller_out;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
decode_block_memory_controller_out = memory_controller_out;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
decode_block_memory_controller_out = memory_controller_out;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
decode_block_memory_controller_out = memory_controller_out;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
decode_block_memory_controller_out = memory_controller_out;
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
Write4Blocks_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
Write4Blocks_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
Write4Blocks_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
Write4Blocks_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
Write4Blocks_start <= 1'd1;
if (^reset !== 1'bX && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
Write4Blocks_start <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_start"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
Write4Blocks_arg_store1 <= `TAG_g_rgb_buf_a;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store1"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
Write4Blocks_arg_store1 <= `TAG_g_rgb_buf_a + 256 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 256 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store1"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
Write4Blocks_arg_store1 <= `TAG_g_rgb_buf_a + 256 * 32'd2;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 256 * 32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store1"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
Write4Blocks_arg_store2 <= `TAG_g_rgb_buf_a + 768 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store2"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
Write4Blocks_arg_store2 <= `TAG_g_rgb_buf_a + 768 * 32'd1 + 256 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd1 + 256 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store2"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
Write4Blocks_arg_store2 <= `TAG_g_rgb_buf_a + 768 * 32'd1 + 256 * 32'd2;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd1 + 256 * 32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store2"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
Write4Blocks_arg_store3 <= `TAG_g_rgb_buf_a + 768 * 32'd2;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store3"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
Write4Blocks_arg_store3 <= `TAG_g_rgb_buf_a + 768 * 32'd2 + 256 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd2 + 256 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store3"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
Write4Blocks_arg_store3 <= `TAG_g_rgb_buf_a + 768 * 32'd2 + 256 * 32'd2;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd2 + 256 * 32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store3"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
Write4Blocks_arg_store4 <= `TAG_g_rgb_buf_a + 768 * 32'd3;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store4"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
Write4Blocks_arg_store4 <= `TAG_g_rgb_buf_a + 768 * 32'd3 + 256 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd3 + 256 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store4"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
Write4Blocks_arg_store4 <= `TAG_g_rgb_buf_a + 768 * 32'd3 + 256 * 32'd2;
if (^reset !== 1'bX && ^(`TAG_g_rgb_buf_a + 768 * 32'd3 + 256 * 32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_store4"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
Write4Blocks_arg_p_out_vpos <= `TAG_g_OutData_comp_vpos_a;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_vpos_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_vpos"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
Write4Blocks_arg_p_out_vpos <= `TAG_g_OutData_comp_vpos_a + 4 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_vpos_a + 4 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_vpos"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
Write4Blocks_arg_p_out_vpos <= `TAG_g_OutData_comp_vpos_a + 4 * 32'd2;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_vpos_a + 4 * 32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_vpos"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
Write4Blocks_arg_p_out_hpos <= `TAG_g_OutData_comp_hpos_a;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_hpos_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_hpos"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
Write4Blocks_arg_p_out_hpos <= `TAG_g_OutData_comp_hpos_a + 4 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_hpos_a + 4 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_hpos"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
Write4Blocks_arg_p_out_hpos <= `TAG_g_OutData_comp_hpos_a + 4 * 32'd2;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_hpos_a + 4 * 32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_hpos"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_445)
begin
Write4Blocks_arg_p_out_buf <= `TAG_g_OutData_comp_buf_a;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_buf_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_buf"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_448)
begin
Write4Blocks_arg_p_out_buf <= `TAG_g_OutData_comp_buf_a + 5310 * 32'd1;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_buf_a + 5310 * 32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_buf"); $finish; end
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_F_main_BB129_451)
begin
Write4Blocks_arg_p_out_buf <= `TAG_g_OutData_comp_buf_a + 5310 * 32'd2;
if (^reset !== 1'bX && ^(`TAG_g_OutData_comp_buf_a + 5310 * 32'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Write4Blocks_arg_p_out_buf"); $finish; end
end
end
always @(*) begin
Write4Blocks_memory_controller_waitrequest = 1'd0;
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
Write4Blocks_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
Write4Blocks_memory_controller_waitrequest = memory_controller_waitrequest;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
Write4Blocks_memory_controller_waitrequest = memory_controller_waitrequest;
end
end
always @(*) begin
Write4Blocks_memory_controller_out = 1'd0;
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
Write4Blocks_memory_controller_out = memory_controller_out;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
Write4Blocks_memory_controller_out = memory_controller_out;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
Write4Blocks_memory_controller_out = memory_controller_out;
end
end
always @(*) begin
/* main: %392*/
/*   %403 = mul i32 %395, -88*/
if (cur_state == LEGUP_F_main_BB94_369)
begin
main_signed_multiply_32_1_op0 = main_392_395;
end
/* main: %392*/
/*   %399 = mul nsw i32 %397, 359*/
else if (cur_state == LEGUP_F_main_BB94_370)
begin
main_signed_multiply_32_1_op0 = main_392_397;
end
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp121.i.i = mul i32 %tmp120.i.i, %434*/
else if (cur_state == LEGUP_F_main_BB106_392)
begin
main_signed_multiply_32_1_op0 = main_YuvToRgb_exit_loopexit_i_i_tmp120_i_i_reg;
end
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp118.i.i = mul i32 %428, %indvar17.i.i.i.i*/
else if (cur_state == LEGUP_F_main_BB109_399)
begin
main_signed_multiply_32_1_op0 = main_YuvToRgb_exit_loopexit_i_i_428_reg;
end
/* main: %454*/
/*   %465 = mul i32 %457, -88*/
else if (cur_state == LEGUP_F_main_BB118_430)
begin
main_signed_multiply_32_1_op0 = main_454_457;
end
/* main: %454*/
/*   %461 = mul nsw i32 %459, 359*/
else /* if (cur_state == LEGUP_F_main_BB118_431) */
begin
main_signed_multiply_32_1_op0 = main_454_459;
end
end
always @(*) begin
/* main: %392*/
/*   %403 = mul i32 %395, -88*/
if (cur_state == LEGUP_F_main_BB94_369)
begin
main_signed_multiply_32_1_op1 = -32'd88;
end
/* main: %392*/
/*   %399 = mul nsw i32 %397, 359*/
else if (cur_state == LEGUP_F_main_BB94_370)
begin
main_signed_multiply_32_1_op1 = 32'd359;
end
/* main: %.lr.ph8.split.us.i.i.i.i*/
/*   %tmp121.i.i = mul i32 %tmp120.i.i, %434*/
else if (cur_state == LEGUP_F_main_BB106_392)
begin
main_signed_multiply_32_1_op1 = main_432_434_reg;
end
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp118.i.i = mul i32 %428, %indvar17.i.i.i.i*/
else if (cur_state == LEGUP_F_main_BB109_399)
begin
main_signed_multiply_32_1_op1 = main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i;
end
/* main: %454*/
/*   %465 = mul i32 %457, -88*/
else if (cur_state == LEGUP_F_main_BB118_430)
begin
main_signed_multiply_32_1_op1 = -32'd88;
end
/* main: %454*/
/*   %461 = mul nsw i32 %459, 359*/
else /* if (cur_state == LEGUP_F_main_BB118_431) */
begin
main_signed_multiply_32_1_op1 = 32'd359;
end
end
always @(*) begin
main_signed_multiply_32_1 = main_signed_multiply_32_1_op0 * main_signed_multiply_32_1_op1;
end
always @(*) begin
/* main: %392*/
/*   %408 = mul nsw i32 %395, 454*/
if (cur_state == LEGUP_F_main_BB94_369)
begin
main_signed_multiply_32_2_op0 = main_392_395;
end
/* main: %392*/
/*   %404 = mul i32 %397, -182*/
else if (cur_state == LEGUP_F_main_BB94_370)
begin
main_signed_multiply_32_2_op0 = main_392_397;
end
/* main: %454*/
/*   %470 = mul nsw i32 %457, 454*/
else if (cur_state == LEGUP_F_main_BB118_430)
begin
main_signed_multiply_32_2_op0 = main_454_457;
end
/* main: %454*/
/*   %466 = mul i32 %459, -182*/
else /* if (cur_state == LEGUP_F_main_BB118_431) */
begin
main_signed_multiply_32_2_op0 = main_454_459;
end
end
always @(*) begin
/* main: %392*/
/*   %408 = mul nsw i32 %395, 454*/
if (cur_state == LEGUP_F_main_BB94_369)
begin
main_signed_multiply_32_2_op1 = 32'd454;
end
/* main: %392*/
/*   %404 = mul i32 %397, -182*/
else if (cur_state == LEGUP_F_main_BB94_370)
begin
main_signed_multiply_32_2_op1 = -32'd182;
end
/* main: %454*/
/*   %470 = mul nsw i32 %457, 454*/
else if (cur_state == LEGUP_F_main_BB118_430)
begin
main_signed_multiply_32_2_op1 = 32'd454;
end
/* main: %454*/
/*   %466 = mul i32 %459, -182*/
else /* if (cur_state == LEGUP_F_main_BB118_431) */
begin
main_signed_multiply_32_2_op1 = -32'd182;
end
end
always @(*) begin
main_signed_multiply_32_2 = main_signed_multiply_32_2_op0 * main_signed_multiply_32_2_op1;
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %384 = mul nsw i32 %383, %378*/
if (cur_state == LEGUP_F_main_BB90_328)
begin
main_signed_multiply_32_0_op0 = main_read_markers_exit_i_383;
end
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp136.i.i = mul i32 %indvar17.i.i.i.i, %tmp69.i.i*/
else /* if (cur_state == LEGUP_F_main_BB109_399) */
begin
main_signed_multiply_32_0_op0 = main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i;
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %384 = mul nsw i32 %383, %378*/
if (cur_state == LEGUP_F_main_BB90_328)
begin
main_signed_multiply_32_0_op1 = main_read_markers_exit_i_378_reg;
end
/* main: %.lr.ph.us.i.i.i.i*/
/*   %tmp136.i.i = mul i32 %indvar17.i.i.i.i, %tmp69.i.i*/
else /* if (cur_state == LEGUP_F_main_BB109_399) */
begin
main_signed_multiply_32_0_op1 = main__lr_ph8_split_us_i_i_i_i_tmp69_i_i_reg;
end
end
always @(*) begin
main_signed_multiply_32_0 = main_signed_multiply_32_0_op0 * main_signed_multiply_32_0_op1;
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %377 = sdiv i32 %376, 8*/
if (cur_state == LEGUP_F_main_BB90_287)
begin
main_signed_divide_32_0_op0 = main_read_markers_exit_i_376_reg;
end
/* main: %read_markers.exit.i*/
/*   %382 = sdiv i32 %381, 8*/
else /* if (cur_state == LEGUP_F_main_BB90_288) */
begin
main_signed_divide_32_0_op0 = main_read_markers_exit_i_381_reg;
end
end
always @(*) begin
/* main: %read_markers.exit.i*/
/*   %377 = sdiv i32 %376, 8*/
if (cur_state == LEGUP_F_main_BB90_287)
begin
main_signed_divide_32_0_op1 = 32'd8;
end
/* main: %read_markers.exit.i*/
/*   %382 = sdiv i32 %381, 8*/
else /* if (cur_state == LEGUP_F_main_BB90_288) */
begin
main_signed_divide_32_0_op1 = 32'd8;
end
end
always @(*) begin
main_signed_divide_32_0 = lpm_divide_main_read_markers_exit_i_377_out;
end
always @(*) begin
lpm_divide_main_read_markers_exit_i_377_en = memory_controller_waitrequest == 1'd0 & legup_function_call == 1'd0;
end
always @(posedge clk) begin
/* main: %1*/
/*   %i.05.i = phi i32 [ 0, %0 ], [ %3, %1 ]*/
if (cur_state == LEGUP_F_main_BB0_1 & memory_controller_waitrequest == 1'd0)
begin
main_1_i_05_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i_05_i_phi_temp"); $finish; end
end
/* main: %1*/
/*   %i.05.i = phi i32 [ 0, %0 ], [ %3, %1 ]*/
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd0)
begin
main_1_i_05_i_phi_temp <= main_1_3_reg;
if (^reset !== 1'bX && ^(main_1_3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i_05_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.outer.i.i*/
/*   %i_marker.0 = phi i32 [ 0, %1 ], [ %24, %31 ]*/
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd1)
begin
main__outer_i_i_i_marker_0_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_i_marker_0_phi_temp"); $finish; end
end
/* main: %.outer.i.i*/
/*   %i_marker.0 = phi i32 [ 0, %1 ], [ %24, %31 ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd216)
begin
main__outer_i_i_i_marker_0_phi_temp <= main_next_marker_exit_i_i_24_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_i_marker_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.outer.i.i*/
/*   %i_get_dht.0 = phi i32 [ 0, %1 ], [ %i_get_dht.1.ph, %31 ]*/
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd1)
begin
main__outer_i_i_i_get_dht_0_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_i_get_dht_0_phi_temp"); $finish; end
end
/* main: %.outer.i.i*/
/*   %i_get_dht.0 = phi i32 [ 0, %1 ], [ %i_get_dht.1.ph, %31 ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd216)
begin
main__outer_i_i_i_get_dht_0_phi_temp <= main__backedge_i_i_outer_i_get_dht_1_ph_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_i_get_dht_1_ph_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_i_get_dht_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.outer.i.i*/
/*   %i_get_dqt.0 = phi i32 [ 0, %1 ], [ %i_get_dqt.1.ph6, %31 ]*/
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd1)
begin
main__outer_i_i_i_get_dqt_0_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_i_get_dqt_0_phi_temp"); $finish; end
end
/* main: %.outer.i.i*/
/*   %i_get_dqt.0 = phi i32 [ 0, %1 ], [ %i_get_dqt.1.ph6, %31 ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd216)
begin
main__outer_i_i_i_get_dqt_0_phi_temp <= main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_i_get_dqt_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.outer.i.i*/
/*   %ReadBuf.0 = phi i8* [ getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), %1 ], [ %ReadBuf.2, %31 ]*/
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd1)
begin
main__outer_i_i_ReadBuf_0_phi_temp <= `TAG_g_JpegFileBuf_a;
if (^reset !== 1'bX && ^(`TAG_g_JpegFileBuf_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_ReadBuf_0_phi_temp"); $finish; end
end
/* main: %.outer.i.i*/
/*   %ReadBuf.0 = phi i8* [ getelementptr inbounds ([5310 x i8]* @JpegFileBuf, i32 0, i32 0), %1 ], [ %ReadBuf.2, %31 ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd216)
begin
main__outer_i_i_ReadBuf_0_phi_temp <= main_next_marker_exit_i_i_ReadBuf_2_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_ReadBuf_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.outer.i.i*/
/*   %p_jinfo_num_components.0 = phi i8 [ 0, %1 ], [ %p_jinfo_num_components.1.ph13, %31 ]*/
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd1)
begin
main__outer_i_i_p_jinfo_num_components_0_phi_temp <= 8'd0;
if (^reset !== 1'bX && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_p_jinfo_num_components_0_phi_temp"); $finish; end
end
/* main: %.outer.i.i*/
/*   %p_jinfo_num_components.0 = phi i8 [ 0, %1 ], [ %p_jinfo_num_components.1.ph13, %31 ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd216)
begin
main__outer_i_i_p_jinfo_num_components_0_phi_temp <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_p_jinfo_num_components_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.outer.i.i*/
/*   %p_jinfo_smp_fact.b.0 = phi i1 [ false, %1 ], [ %p_jinfo_smp_fact.b.1.ph14, %31 ]*/
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd1)
begin
main__outer_i_i_p_jinfo_smp_fact_b_0_phi_temp <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_p_jinfo_smp_fact_b_0_phi_temp"); $finish; end
end
/* main: %.outer.i.i*/
/*   %p_jinfo_smp_fact.b.0 = phi i1 [ false, %1 ], [ %p_jinfo_smp_fact.b.1.ph14, %31 ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd216)
begin
main__outer_i_i_p_jinfo_smp_fact_b_0_phi_temp <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_p_jinfo_smp_fact_b_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
if (cur_state == LEGUP_F_main_BB1_4 & memory_controller_waitrequest == 1'd0 & main_1_exitcond11_i_reg == 1'd1)
begin
main__outer_i_i_sow_SOI_0_ph_i_i_phi_temp <= -1'd1;
if (^reset !== 1'bX && ^(-1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_sow_SOI_0_ph_i_i_phi_temp"); $finish; end
end
/* main: %.outer.i.i*/
/*   %sow_SOI.0.ph.i.i = phi i1 [ true, %1 ], [ false, %31 ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd216)
begin
main__outer_i_i_sow_SOI_0_ph_i_i_phi_temp <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__outer_i_i_sow_SOI_0_ph_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer*/
/*   %i_marker.1.ph = phi i32 [ %i_marker.0, %.outer.i.i ], [ %24, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer_i_marker_1_ph_phi_temp <= main__outer_i_i_i_marker_0;
if (^reset !== 1'bX && ^(main__outer_i_i_i_marker_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_marker_1_ph_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %i_marker.1.ph = phi i32 [ %i_marker.0, %.outer.i.i ], [ %24, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd0)
begin
main__backedge_i_i_outer_i_marker_1_ph_phi_temp <= main_next_marker_exit_i_i_24_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_marker_1_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer_i_get_dht_1_ph_phi_temp <= main__outer_i_i_i_get_dht_0;
if (^reset !== 1'bX && ^(main__outer_i_i_i_get_dht_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_get_dht_1_ph_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %i_get_dht.1.ph = phi i32 [ %i_get_dht.0, %.outer.i.i ], [ %302, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd0)
begin
main__backedge_i_i_outer_i_get_dht_1_ph_phi_temp <= main_301_302_reg;
if (^reset !== 1'bX && ^(main_301_302_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_get_dht_1_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer*/
/*   %i_get_dqt.1.ph = phi i32 [ %i_get_dqt.0, %.outer.i.i ], [ %i_get_dqt.1.ph6, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer_i_get_dqt_1_ph_phi_temp <= main__outer_i_i_i_get_dqt_0;
if (^reset !== 1'bX && ^(main__outer_i_i_i_get_dqt_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_get_dqt_1_ph_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %i_get_dqt.1.ph = phi i32 [ %i_get_dqt.0, %.outer.i.i ], [ %i_get_dqt.1.ph6, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd0)
begin
main__backedge_i_i_outer_i_get_dqt_1_ph_phi_temp <= main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_i_get_dqt_1_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer*/
/*   %ReadBuf.1.ph = phi i8* [ %ReadBuf.0, %.outer.i.i ], [ %ReadBuf.7, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer_ReadBuf_1_ph_phi_temp <= main__outer_i_i_ReadBuf_0;
if (^reset !== 1'bX && ^(main__outer_i_i_ReadBuf_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_ReadBuf_1_ph_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %ReadBuf.1.ph = phi i8* [ %ReadBuf.0, %.outer.i.i ], [ %ReadBuf.7, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd0)
begin
main__backedge_i_i_outer_ReadBuf_1_ph_phi_temp <= main___crit_edge_i12_i_i_ReadBuf_7;
if (^reset !== 1'bX && ^(main___crit_edge_i12_i_i_ReadBuf_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_ReadBuf_1_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer*/
/*   %p_jinfo_num_components.1.ph = phi i8 [ %p_jinfo_num_components.0, %.outer.i.i ], [ %p_jinfo_num_components.1.ph13, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer_p_jinfo_num_components_1_ph_phi_temp <= main__outer_i_i_p_jinfo_num_components_0;
if (^reset !== 1'bX && ^(main__outer_i_i_p_jinfo_num_components_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_p_jinfo_num_components_1_ph_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %p_jinfo_num_components.1.ph = phi i8 [ %p_jinfo_num_components.0, %.outer.i.i ], [ %p_jinfo_num_components.1.ph13, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd0)
begin
main__backedge_i_i_outer_p_jinfo_num_components_1_ph_phi_temp <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_p_jinfo_num_components_1_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer*/
/*   %p_jinfo_smp_fact.b.1.ph = phi i1 [ %p_jinfo_smp_fact.b.0, %.outer.i.i ], [ %p_jinfo_smp_fact.b.1.ph14, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB2_5 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph_phi_temp <= main__outer_i_i_p_jinfo_smp_fact_b_0;
if (^reset !== 1'bX && ^(main__outer_i_i_p_jinfo_smp_fact_b_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer*/
/*   %p_jinfo_smp_fact.b.1.ph = phi i1 [ %p_jinfo_smp_fact.b.0, %.outer.i.i ], [ %p_jinfo_smp_fact.b.1.ph14, %._crit_edge.i12.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd0)
begin
main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph_phi_temp <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer4*/
/*   %i_marker.1.ph5 = phi i32 [ %i_marker.1.ph, %.backedge.i.i.outer ], [ %24, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer4_i_marker_1_ph5_phi_temp <= main__backedge_i_i_outer_i_marker_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_i_marker_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_marker_1_ph5_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %i_marker.1.ph5 = phi i32 [ %i_marker.1.ph, %.backedge.i.i.outer ], [ %24, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd0)
begin
main__backedge_i_i_outer4_i_marker_1_ph5_phi_temp <= main_next_marker_exit_i_i_24_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_marker_1_ph5_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp <= main__backedge_i_i_outer_i_get_dqt_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_i_get_dqt_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %i_get_dqt.1.ph6 = phi i32 [ %i_get_dqt.1.ph, %.backedge.i.i.outer ], [ %352, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd0)
begin
main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp <= main_351_352_reg;
if (^reset !== 1'bX && ^(main_351_352_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_i_get_dqt_1_ph6_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer4*/
/*   %ReadBuf.1.ph7 = phi i8* [ %ReadBuf.1.ph, %.backedge.i.i.outer ], [ %ReadBuf.8, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer4_ReadBuf_1_ph7_phi_temp <= main__backedge_i_i_outer_ReadBuf_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_ReadBuf_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_ReadBuf_1_ph7_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %ReadBuf.1.ph7 = phi i8* [ %ReadBuf.1.ph, %.backedge.i.i.outer ], [ %ReadBuf.8, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd0)
begin
main__backedge_i_i_outer4_ReadBuf_1_ph7_phi_temp <= main__us_lcssa_us_i_i_i_ReadBuf_8;
if (^reset !== 1'bX && ^(main__us_lcssa_us_i_i_i_ReadBuf_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_ReadBuf_1_ph7_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer4*/
/*   %p_jinfo_num_components.1.ph8 = phi i8 [ %p_jinfo_num_components.1.ph, %.backedge.i.i.outer ], [ %p_jinfo_num_components.1.ph13, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8_phi_temp <= main__backedge_i_i_outer_p_jinfo_num_components_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_p_jinfo_num_components_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %p_jinfo_num_components.1.ph8 = phi i8 [ %p_jinfo_num_components.1.ph, %.backedge.i.i.outer ], [ %p_jinfo_num_components.1.ph13, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd0)
begin
main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8_phi_temp <= main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer4*/
/*   %p_jinfo_smp_fact.b.1.ph9 = phi i1 [ %p_jinfo_smp_fact.b.1.ph, %.backedge.i.i.outer ], [ %p_jinfo_smp_fact.b.1.ph14, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB3_6 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9_phi_temp <= main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_p_jinfo_smp_fact_b_1_ph) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer4*/
/*   %p_jinfo_smp_fact.b.1.ph9 = phi i1 [ %p_jinfo_smp_fact.b.1.ph, %.backedge.i.i.outer ], [ %p_jinfo_smp_fact.b.1.ph14, %.us-lcssa.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd0)
begin
main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9_phi_temp <= main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer10*/
/*   %i_marker.1.ph11 = phi i32 [ %i_marker.1.ph5, %.backedge.i.i.outer4 ], [ %24, %163 ], [ %24, %165 ]*/
if (cur_state == LEGUP_F_main_BB4_7 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_i_marker_1_ph11_phi_temp <= main__backedge_i_i_outer4_i_marker_1_ph5;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_marker_1_ph5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_i_marker_1_ph11_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %i_marker.1.ph11 = phi i32 [ %i_marker.1.ph5, %.backedge.i.i.outer4 ], [ %24, %163 ], [ %24, %165 ]*/
if (cur_state == LEGUP_F_main_BB43_143 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_i_marker_1_ph11_phi_temp <= main_next_marker_exit_i_i_24_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_i_marker_1_ph11_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %i_marker.1.ph11 = phi i32 [ %i_marker.1.ph5, %.backedge.i.i.outer4 ], [ %24, %163 ], [ %24, %165 ]*/
if (cur_state == LEGUP_F_main_BB44_144 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_i_marker_1_ph11_phi_temp <= main_next_marker_exit_i_i_24_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_i_marker_1_ph11_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer10*/
/*   %ReadBuf.1.ph12 = phi i8* [ %ReadBuf.1.ph7, %.backedge.i.i.outer4 ], [ %ReadBuf.4, %163 ], [ %ReadBuf.4, %165 ]*/
if (cur_state == LEGUP_F_main_BB4_7 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_ReadBuf_1_ph12_phi_temp <= main__backedge_i_i_outer4_ReadBuf_1_ph7;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_ReadBuf_1_ph7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_ReadBuf_1_ph12_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %ReadBuf.1.ph12 = phi i8* [ %ReadBuf.1.ph7, %.backedge.i.i.outer4 ], [ %ReadBuf.4, %163 ], [ %ReadBuf.4, %165 ]*/
if (cur_state == LEGUP_F_main_BB43_143 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_ReadBuf_1_ph12_phi_temp <= main___crit_edge_i_i_i_ReadBuf_4_reg;
if (^reset !== 1'bX && ^(main___crit_edge_i_i_i_ReadBuf_4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_ReadBuf_1_ph12_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %ReadBuf.1.ph12 = phi i8* [ %ReadBuf.1.ph7, %.backedge.i.i.outer4 ], [ %ReadBuf.4, %163 ], [ %ReadBuf.4, %165 ]*/
if (cur_state == LEGUP_F_main_BB44_144 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_ReadBuf_1_ph12_phi_temp <= main___crit_edge_i_i_i_ReadBuf_4_reg;
if (^reset !== 1'bX && ^(main___crit_edge_i_i_i_ReadBuf_4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_ReadBuf_1_ph12_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB4_7 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp <= main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_p_jinfo_num_components_1_ph8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB43_143 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp <= main_32_61_reg;
if (^reset !== 1'bX && ^(main_32_61_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_num_components.1.ph13 = phi i8 [ %p_jinfo_num_components.1.ph8, %.backedge.i.i.outer4 ], [ %61, %163 ], [ %61, %165 ]*/
if (cur_state == LEGUP_F_main_BB44_144 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp <= main_32_61_reg;
if (^reset !== 1'bX && ^(main_32_61_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_num_components_1_ph13_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB4_7 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp <= main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_p_jinfo_smp_fact_b_1_ph9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB43_143 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp <= -1'd1;
if (^reset !== 1'bX && ^(-1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp"); $finish; end
end
/* main: %.backedge.i.i.outer10*/
/*   %p_jinfo_smp_fact.b.1.ph14 = phi i1 [ %p_jinfo_smp_fact.b.1.ph9, %.backedge.i.i.outer4 ], [ true, %163 ], [ false, %165 ]*/
if (cur_state == LEGUP_F_main_BB44_144 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_outer10_p_jinfo_smp_fact_b_1_ph14_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB5_8 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_i_marker_1_phi_temp <= main__backedge_i_i_outer10_i_marker_1_ph11;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_i_marker_1_ph11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_i_marker_1_phi_temp"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd216 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd192 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd218 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd196 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd219 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd217)
begin
main__backedge_i_i_i_marker_1_phi_temp <= main_next_marker_exit_i_i_24_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_i_marker_1_phi_temp"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB66_211 & memory_controller_waitrequest == 1'd0 & main__preheader_i7_i_i_265 == 1'd0)
begin
main__backedge_i_i_i_marker_1_phi_temp <= main_next_marker_exit_i_i_24_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_i_marker_1_phi_temp"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %i_marker.1 = phi i32 [ %i_marker.1.ph11, %.backedge.i.i.outer10 ], [ %24, %31 ], [ %24, %.preheader.i7.i.i ], [ %24, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB81_250 & memory_controller_waitrequest == 1'd0 & main__preheader_i13_i_i_329 == 1'd0)
begin
main__backedge_i_i_i_marker_1_phi_temp <= main_next_marker_exit_i_i_24_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_24_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_i_marker_1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB5_8 & memory_controller_waitrequest == 1'd0)
begin
main__backedge_i_i_ReadBuf_1_phi_temp <= main__backedge_i_i_outer10_ReadBuf_1_ph12;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer10_ReadBuf_1_ph12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_phi_temp"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd216 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd192 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd218 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd196 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd219 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg != 32'd217)
begin
main__backedge_i_i_ReadBuf_1_phi_temp <= main_next_marker_exit_i_i_ReadBuf_2_reg;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_ReadBuf_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_phi_temp"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB66_211 & memory_controller_waitrequest == 1'd0 & main__preheader_i7_i_i_265 == 1'd0)
begin
main__backedge_i_i_ReadBuf_1_phi_temp <= main_248_253_reg;
if (^reset !== 1'bX && ^(main_248_253_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_phi_temp"); $finish; end
end
/* main: %.backedge.i.i*/
/*   %ReadBuf.1 = phi i8* [ %ReadBuf.1.ph12, %.backedge.i.i.outer10 ], [ %ReadBuf.2, %31 ], [ %253, %.preheader.i7.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB81_250 & memory_controller_waitrequest == 1'd0 & main__preheader_i13_i_i_329 == 1'd0)
begin
main__backedge_i_i_ReadBuf_1_phi_temp <= main_312_317_reg;
if (^reset !== 1'bX && ^(main_312_317_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__backedge_i_i_ReadBuf_1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
if (cur_state == LEGUP_F_main_BB6_9 & memory_controller_waitrequest == 1'd0 & main__outer_i_i_sow_SOI_0_ph_i_i_reg == 1'd0)
begin
main__loopexit3_i_i_i_18_phi_temp <= main__backedge_i_i_ReadBuf_1;
if (^reset !== 1'bX && ^(main__backedge_i_i_ReadBuf_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit3_i_i_i_18_phi_temp"); $finish; end
end
/* main: %.loopexit3.i.i.i*/
/*   %18 = phi i8* [ %scevgep13.i.i.le, %.loopexit3.i.i.i.loopexit ], [ %ReadBuf.1, %.backedge.i.i ]*/
if (cur_state == LEGUP_F_main_BB10_18 & memory_controller_waitrequest == 1'd0)
begin
main__loopexit3_i_i_i_18_phi_temp <= main__loopexit3_i_i_i_loopexit_scevgep13_i_i_le;
if (^reset !== 1'bX && ^(main__loopexit3_i_i_i_loopexit_scevgep13_i_i_le) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit3_i_i_i_18_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB9_17 & memory_controller_waitrequest == 1'd0)
begin
main_next_marker_exit_i_i_ReadBuf_2_phi_temp <= main_first_marker_exit_i_i_14_reg;
if (^reset !== 1'bX && ^(main_first_marker_exit_i_i_14_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_phi_temp"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %ReadBuf.2 = phi i8* [ %14, %first_marker.exit.i.i ], [ %scevgep13.i.i, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB16_30 & memory_controller_waitrequest == 1'd0)
begin
main_next_marker_exit_i_i_ReadBuf_2_phi_temp <= main_next_marker_exit_i_i_loopexit_scevgep13_i_i;
if (^reset !== 1'bX && ^(main_next_marker_exit_i_i_loopexit_scevgep13_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_ReadBuf_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB9_17 & memory_controller_waitrequest == 1'd0)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp <= main_first_marker_exit_i_i_15_reg;
if (^reset !== 1'bX && ^(main_first_marker_exit_i_i_15_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp"); $finish; end
end
/* main: %next_marker.exit.i.i*/
/*   %unread_marker.0.i.i = phi i32 [ %15, %first_marker.exit.i.i ], [ %22, %next_marker.exit.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB16_30 & memory_controller_waitrequest == 1'd0)
begin
main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp <= main__loopexit_i_i_i_22_reg;
if (^reset !== 1'bX && ^(main__loopexit_i_i_i_22_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_next_marker_exit_i_i_unread_marker_0_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB11_21 & memory_controller_waitrequest == 1'd0 & main__loopexit3_i_i_i_19 == 1'd1)
begin
main__loopexit_i_preheader_i_i__ph_i_i_phi_temp <= main__loopexit3_i_i_i_storemerge1_i_i_i_reg;
if (^reset !== 1'bX && ^(main__loopexit3_i_i_i_storemerge1_i_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_preheader_i_i__ph_i_i_phi_temp"); $finish; end
end
/* main: %.loopexit.i.preheader.i.i*/
/*   %.ph.i.i = phi i8* [ %storemerge1.i.i.i, %.loopexit3.i.i.i ], [ %storemerge.i.i.i, %.loopexit.i.preheader.i.i.loopexit ]*/
if (cur_state == LEGUP_F_main_BB13_25 & memory_controller_waitrequest == 1'd0)
begin
main__loopexit_i_preheader_i_i__ph_i_i_phi_temp <= main__loopexit_i_preheader_i_i_loopexit_storemerge_i_i_i;
if (^reset !== 1'bX && ^(main__loopexit_i_preheader_i_i_loopexit_storemerge_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_preheader_i_i__ph_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i.i.i*/
/*   %indvar.i.i = phi i32 [ %tmp.i.i, %.lr.ph.i.i.i ], [ 0, %.loopexit3.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB11_21 & memory_controller_waitrequest == 1'd0 & main__loopexit3_i_i_i_19 == 1'd0)
begin
main__lr_ph_i_i_i_indvar_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_i_i_indvar_i_i_phi_temp"); $finish; end
end
/* main: %.lr.ph.i.i.i*/
/*   %indvar.i.i = phi i32 [ %tmp.i.i, %.lr.ph.i.i.i ], [ 0, %.loopexit3.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB12_24 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i_i_i_20 == 1'd0)
begin
main__lr_ph_i_i_i_indvar_i_i_phi_temp <= main__lr_ph_i_i_i_tmp_i_i_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i_i_i_tmp_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i_i_i_indvar_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.loopexit.i.i.i*/
/*   %indvar9.i.i = phi i32 [ 0, %.loopexit.i.preheader.i.i ], [ %tmp12.i.i, %.loopexit.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB14_26 & memory_controller_waitrequest == 1'd0)
begin
main__loopexit_i_i_i_indvar9_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_i_i_indvar9_i_i_phi_temp"); $finish; end
end
/* main: %.loopexit.i.i.i*/
/*   %indvar9.i.i = phi i32 [ 0, %.loopexit.i.preheader.i.i ], [ %tmp12.i.i, %.loopexit.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB15_29 & memory_controller_waitrequest == 1'd0 & main__loopexit_i_i_i_22 == 32'd255)
begin
main__loopexit_i_i_i_indvar9_i_i_phi_temp <= main__loopexit_i_i_i_tmp12_i_i_reg;
if (^reset !== 1'bX && ^(main__loopexit_i_i_i_tmp12_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__loopexit_i_i_i_indvar9_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %read_markers.exit.i*/
/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i2.i.i, %get_sos.exit.i.i ], [ null, %31 ]*/
if (cur_state == LEGUP_F_main_BB19_38 & memory_controller_waitrequest == 1'd0 & main_next_marker_exit_i_i_unread_marker_0_i_i_reg == 32'd217)
begin
main_read_markers_exit_i_p_jinfo_jpeg_data_0_phi_temp <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_p_jinfo_jpeg_data_0_phi_temp"); $finish; end
end
/* main: %read_markers.exit.i*/
/*   %p_jinfo_jpeg_data.0 = phi i8* [ %scevgep.i2.i.i, %get_sos.exit.i.i ], [ null, %31 ]*/
if (cur_state == LEGUP_F_main_BB63_200 & memory_controller_waitrequest == 1'd0)
begin
main_read_markers_exit_i_p_jinfo_jpeg_data_0_phi_temp <= main_get_sos_exit_i_i_scevgep_i2_i_i;
if (^reset !== 1'bX && ^(main_get_sos_exit_i_i_scevgep_i2_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_read_markers_exit_i_p_jinfo_jpeg_data_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %ReadBuf.3 = phi i8* [ %105, %159 ], [ %60, %.preheader.i.i.i.thread ], [ %60, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB29_80 & memory_controller_waitrequest == 1'd0)
begin
main__lr_ph_i1_i_i_ReadBuf_3_phi_temp <= main_32_60_reg;
if (^reset !== 1'bX && ^(main_32_60_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ReadBuf_3_phi_temp"); $finish; end
end
/* main: %.lr.ph.i1.i.i*/
/*   %ReadBuf.3 = phi i8* [ %105, %159 ], [ %60, %.preheader.i.i.i.thread ], [ %60, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB30_81 & memory_controller_waitrequest == 1'd0 & main__preheader_i_i_i_98 == 1'd1)
begin
main__lr_ph_i1_i_i_ReadBuf_3_phi_temp <= main_32_60_reg;
if (^reset !== 1'bX && ^(main_32_60_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ReadBuf_3_phi_temp"); $finish; end
end
/* main: %.lr.ph.i1.i.i*/
/*   %ReadBuf.3 = phi i8* [ %105, %159 ], [ %60, %.preheader.i.i.i.thread ], [ %60, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB41_139 & memory_controller_waitrequest == 1'd0 & main_159_160 == 1'd1)
begin
main__lr_ph_i1_i_i_ReadBuf_3_phi_temp <= main__lr_ph_i1_i_i_105_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_105_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ReadBuf_3_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i1.i.i*/
/*   %ci.02.i.i.i = phi i32 [ %tmp12.i.i.i, %159 ], [ 0, %.preheader.i.i.i.thread ], [ 0, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB29_80 & memory_controller_waitrequest == 1'd0)
begin
main__lr_ph_i1_i_i_ci_02_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ci_02_i_i_i_phi_temp"); $finish; end
end
/* main: %.lr.ph.i1.i.i*/
/*   %ci.02.i.i.i = phi i32 [ %tmp12.i.i.i, %159 ], [ 0, %.preheader.i.i.i.thread ], [ 0, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB30_81 & memory_controller_waitrequest == 1'd0 & main__preheader_i_i_i_98 == 1'd1)
begin
main__lr_ph_i1_i_i_ci_02_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ci_02_i_i_i_phi_temp"); $finish; end
end
/* main: %.lr.ph.i1.i.i*/
/*   %ci.02.i.i.i = phi i32 [ %tmp12.i.i.i, %159 ], [ 0, %.preheader.i.i.i.thread ], [ 0, %.preheader.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB41_139 & memory_controller_waitrequest == 1'd0 & main_159_160 == 1'd1)
begin
main__lr_ph_i1_i_i_ci_02_i_i_i_phi_temp <= main__lr_ph_i1_i_i_tmp12_i_i_i_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_tmp12_i_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i1_i_i_ci_02_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
if (cur_state == LEGUP_F_main_BB30_81 & memory_controller_waitrequest == 1'd0 & main__preheader_i_i_i_98 == 1'd0)
begin
main___crit_edge_i_i_i_ReadBuf_4_phi_temp <= main_32_60_reg;
if (^reset !== 1'bX && ^(main_32_60_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___crit_edge_i_i_i_ReadBuf_4_phi_temp"); $finish; end
end
/* main: %._crit_edge.i.i.i*/
/*   %ReadBuf.4 = phi i8* [ %60, %.preheader.i.i.i ], [ %105, %159 ]*/
if (cur_state == LEGUP_F_main_BB41_139 & memory_controller_waitrequest == 1'd0 & main_159_160 == 1'd0)
begin
main___crit_edge_i_i_i_ReadBuf_4_phi_temp <= main__lr_ph_i1_i_i_105_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i1_i_i_105_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___crit_edge_i_i_i_ReadBuf_4_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB49_157 & memory_controller_waitrequest == 1'd0)
begin
main__preheader5_i_i_i_i_get_sos_0_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_i_get_sos_0_phi_temp"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %i_get_sos.0 = phi i32 [ %246, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB62_199 & memory_controller_waitrequest == 1'd0)
begin
main__preheader5_i_i_i_i_get_sos_0_phi_temp <= main_245_246;
if (^reset !== 1'bX && ^(main_245_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_i_get_sos_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB49_157 & memory_controller_waitrequest == 1'd0)
begin
main__preheader5_i_i_i_ReadBuf_5_phi_temp <= main_167_177_reg;
if (^reset !== 1'bX && ^(main_167_177_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_ReadBuf_5_phi_temp"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %ReadBuf.5 = phi i8* [ %198, %245 ], [ %177, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB62_199 & memory_controller_waitrequest == 1'd0)
begin
main__preheader5_i_i_i_ReadBuf_5_phi_temp <= main_194_198_reg;
if (^reset !== 1'bX && ^(main_194_198_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_ReadBuf_5_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader5.i.i.i*/
/*   %192 = phi i32 [ %247, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB49_157 & memory_controller_waitrequest == 1'd0)
begin
main__preheader5_i_i_i_192_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_192_phi_temp"); $finish; end
end
/* main: %.preheader5.i.i.i*/
/*   %192 = phi i32 [ %247, %245 ], [ 0, %.preheader5.i.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB62_199 & memory_controller_waitrequest == 1'd0)
begin
main__preheader5_i_i_i_192_phi_temp <= main_245_247;
if (^reset !== 1'bX && ^(main_245_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader5_i_i_i_192_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB51_162 & memory_controller_waitrequest == 1'd0)
begin
main_200_201_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_phi_temp"); $finish; end
end
/* main: %200*/
/*   %201 = phi i32 [ 0, %194 ], [ %208, %207 ]*/
if (cur_state == LEGUP_F_main_BB54_167 & memory_controller_waitrequest == 1'd0)
begin
main_200_201_phi_temp <= main_207_208;
if (^reset !== 1'bX && ^(main_207_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_200_201_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB66_211 & memory_controller_waitrequest == 1'd0 & main__preheader_i7_i_i_265 == 1'd1)
begin
main__lr_ph5_i_i_i_i_get_dht_2_phi_temp <= main__backedge_i_i_outer_i_get_dht_1_ph_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer_i_get_dht_1_ph_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_i_get_dht_2_phi_temp"); $finish; end
end
/* main: %.lr.ph5.i.i.i*/
/*   %i_get_dht.2 = phi i32 [ %302, %._crit_edge.i12.i.i ], [ %i_get_dht.1.ph, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd1)
begin
main__lr_ph5_i_i_i_i_get_dht_2_phi_temp <= main_301_302_reg;
if (^reset !== 1'bX && ^(main_301_302_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_i_get_dht_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph5.i.i.i*/
/*   %ReadBuf.6 = phi i8* [ %ReadBuf.7, %._crit_edge.i12.i.i ], [ %253, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB66_211 & memory_controller_waitrequest == 1'd0 & main__preheader_i7_i_i_265 == 1'd1)
begin
main__lr_ph5_i_i_i_ReadBuf_6_phi_temp <= main_248_253_reg;
if (^reset !== 1'bX && ^(main_248_253_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_ReadBuf_6_phi_temp"); $finish; end
end
/* main: %.lr.ph5.i.i.i*/
/*   %ReadBuf.6 = phi i8* [ %ReadBuf.7, %._crit_edge.i12.i.i ], [ %253, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd1)
begin
main__lr_ph5_i_i_i_ReadBuf_6_phi_temp <= main___crit_edge_i12_i_i_ReadBuf_7;
if (^reset !== 1'bX && ^(main___crit_edge_i12_i_i_ReadBuf_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_ReadBuf_6_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph5.i.i.i*/
/*   %length.04.i.i.i = phi i32 [ %310, %._crit_edge.i12.i.i ], [ %258, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB66_211 & memory_controller_waitrequest == 1'd0 & main__preheader_i7_i_i_265 == 1'd1)
begin
main__lr_ph5_i_i_i_length_04_i_i_i_phi_temp <= main_248_258_reg;
if (^reset !== 1'bX && ^(main_248_258_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_length_04_i_i_i_phi_temp"); $finish; end
end
/* main: %.lr.ph5.i.i.i*/
/*   %length.04.i.i.i = phi i32 [ %310, %._crit_edge.i12.i.i ], [ %258, %.preheader.i7.i.i ]*/
if (cur_state == LEGUP_F_main_BB78_239 & memory_controller_waitrequest == 1'd0 & main___crit_edge_i12_i_i_311 == 1'd1)
begin
main__lr_ph5_i_i_i_length_04_i_i_i_phi_temp <= main___crit_edge_i12_i_i_310;
if (^reset !== 1'bX && ^(main___crit_edge_i12_i_i_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph5_i_i_i_length_04_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %286*/
/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
if (cur_state == LEGUP_F_main_BB70_222 & memory_controller_waitrequest == 1'd0)
begin
main_286_p_xhtbl_huffval_0_i_i_i_phi_temp <= main_279_282;
if (^reset !== 1'bX && ^(main_279_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_huffval_0_i_i_i_phi_temp"); $finish; end
end
/* main: %286*/
/*   %p_xhtbl_huffval.0.i.i.i = phi i32* [ %282, %279 ], [ %285, %283 ]*/
if (cur_state == LEGUP_F_main_BB71_223 & memory_controller_waitrequest == 1'd0)
begin
main_286_p_xhtbl_huffval_0_i_i_i_phi_temp <= main_283_285;
if (^reset !== 1'bX && ^(main_283_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_huffval_0_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %286*/
/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
if (cur_state == LEGUP_F_main_BB70_222 & memory_controller_waitrequest == 1'd0)
begin
main_286_p_xhtbl_bits_0_i_i_i_phi_temp <= main_279_281;
if (^reset !== 1'bX && ^(main_279_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_bits_0_i_i_i_phi_temp"); $finish; end
end
/* main: %286*/
/*   %p_xhtbl_bits.0.i.i.i = phi i32* [ %281, %279 ], [ %284, %283 ]*/
if (cur_state == LEGUP_F_main_BB71_223 & memory_controller_waitrequest == 1'd0)
begin
main_286_p_xhtbl_bits_0_i_i_i_phi_temp <= main_283_284;
if (^reset !== 1'bX && ^(main_283_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_286_p_xhtbl_bits_0_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %288 = phi i8* [ %266, %286 ], [ %289, %287 ]*/
if (cur_state == LEGUP_F_main_BB72_224 & memory_controller_waitrequest == 1'd0)
begin
main_287_288_phi_temp <= main__lr_ph5_i_i_i_266_reg;
if (^reset !== 1'bX && ^(main__lr_ph5_i_i_i_266_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_288_phi_temp"); $finish; end
end
/* main: %287*/
/*   %288 = phi i8* [ %266, %286 ], [ %289, %287 ]*/
if (cur_state == LEGUP_F_main_BB73_227 & memory_controller_waitrequest == 1'd0 & main_287_exitcond_i_i_i_reg == 1'd0)
begin
main_287_288_phi_temp <= main_287_289_reg;
if (^reset !== 1'bX && ^(main_287_289_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_288_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %indvar.i.i.i = phi i32 [ 0, %286 ], [ %tmp.i8.i.i, %287 ]*/
if (cur_state == LEGUP_F_main_BB72_224 & memory_controller_waitrequest == 1'd0)
begin
main_287_indvar_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_indvar_i_i_i_phi_temp"); $finish; end
end
/* main: %287*/
/*   %indvar.i.i.i = phi i32 [ 0, %286 ], [ %tmp.i8.i.i, %287 ]*/
if (cur_state == LEGUP_F_main_BB73_227 & memory_controller_waitrequest == 1'd0 & main_287_exitcond_i_i_i_reg == 1'd0)
begin
main_287_indvar_i_i_i_phi_temp <= main_287_tmp_i8_i_i_reg;
if (^reset !== 1'bX && ^(main_287_tmp_i8_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_indvar_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %287*/
/*   %count.01.i.i.i = phi i32 [ 0, %286 ], [ %292, %287 ]*/
if (cur_state == LEGUP_F_main_BB72_224 & memory_controller_waitrequest == 1'd0)
begin
main_287_count_01_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_count_01_i_i_i_phi_temp"); $finish; end
end
/* main: %287*/
/*   %count.01.i.i.i = phi i32 [ 0, %286 ], [ %292, %287 ]*/
if (cur_state == LEGUP_F_main_BB73_227 & memory_controller_waitrequest == 1'd0 & main_287_exitcond_i_i_i_reg == 1'd0)
begin
main_287_count_01_i_i_i_phi_temp <= main_287_292;
if (^reset !== 1'bX && ^(main_287_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_287_count_01_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i10.i.i*/
/*   %304 = phi i8* [ %305, %.lr.ph.i10.i.i ], [ %289, %301 ]*/
if (cur_state == LEGUP_F_main_BB76_235 & memory_controller_waitrequest == 1'd0 & main_301_303 == 1'd1)
begin
main__lr_ph_i10_i_i_304_phi_temp <= main_287_289_reg;
if (^reset !== 1'bX && ^(main_287_289_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i10_i_i_304_phi_temp"); $finish; end
end
/* main: %.lr.ph.i10.i.i*/
/*   %304 = phi i8* [ %305, %.lr.ph.i10.i.i ], [ %289, %301 ]*/
if (cur_state == LEGUP_F_main_BB77_238 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i10_i_i_exitcond7_i_i_i_reg == 1'd0)
begin
main__lr_ph_i10_i_i_304_phi_temp <= main__lr_ph_i10_i_i_305_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i10_i_i_305_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i10_i_i_304_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i10.i.i*/
/*   %i.13.i.i.i = phi i32 [ %308, %.lr.ph.i10.i.i ], [ 0, %301 ]*/
if (cur_state == LEGUP_F_main_BB76_235 & memory_controller_waitrequest == 1'd0 & main_301_303 == 1'd1)
begin
main__lr_ph_i10_i_i_i_13_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i10_i_i_i_13_i_i_i_phi_temp"); $finish; end
end
/* main: %.lr.ph.i10.i.i*/
/*   %i.13.i.i.i = phi i32 [ %308, %.lr.ph.i10.i.i ], [ 0, %301 ]*/
if (cur_state == LEGUP_F_main_BB77_238 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i10_i_i_exitcond7_i_i_i_reg == 1'd0)
begin
main__lr_ph_i10_i_i_i_13_i_i_i_phi_temp <= main__lr_ph_i10_i_i_308_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i10_i_i_308_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i10_i_i_i_13_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %._crit_edge.i12.i.i*/
/*   %ReadBuf.7 = phi i8* [ %289, %301 ], [ %305, %.lr.ph.i10.i.i ]*/
if (cur_state == LEGUP_F_main_BB76_235 & memory_controller_waitrequest == 1'd0 & main_301_303 == 1'd0)
begin
main___crit_edge_i12_i_i_ReadBuf_7_phi_temp <= main_287_289_reg;
if (^reset !== 1'bX && ^(main_287_289_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___crit_edge_i12_i_i_ReadBuf_7_phi_temp"); $finish; end
end
/* main: %._crit_edge.i12.i.i*/
/*   %ReadBuf.7 = phi i8* [ %289, %301 ], [ %305, %.lr.ph.i10.i.i ]*/
if (cur_state == LEGUP_F_main_BB77_238 & memory_controller_waitrequest == 1'd0 & main__lr_ph_i10_i_i_exitcond7_i_i_i_reg == 1'd1)
begin
main___crit_edge_i12_i_i_ReadBuf_7_phi_temp <= main__lr_ph_i10_i_i_305_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i10_i_i_305_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___crit_edge_i12_i_i_ReadBuf_7_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB81_250 & memory_controller_waitrequest == 1'd0 & main__preheader_i13_i_i_329 == 1'd1)
begin
main__lr_ph_i15_i_i_i_get_dqt_2_phi_temp <= main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg;
if (^reset !== 1'bX && ^(main__backedge_i_i_outer4_i_get_dqt_1_ph6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_i_get_dqt_2_phi_temp"); $finish; end
end
/* main: %.lr.ph.i15.i.i*/
/*   %i_get_dqt.2 = phi i32 [ %352, %.us-lcssa.us.i.i.i ], [ %i_get_dqt.1.ph6, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd1)
begin
main__lr_ph_i15_i_i_i_get_dqt_2_phi_temp <= main_351_352_reg;
if (^reset !== 1'bX && ^(main_351_352_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_i_get_dqt_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %330 = phi i8* [ %ReadBuf.8, %.us-lcssa.us.i.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB81_250 & memory_controller_waitrequest == 1'd0 & main__preheader_i13_i_i_329 == 1'd1)
begin
main__lr_ph_i15_i_i_330_phi_temp <= main_312_317_reg;
if (^reset !== 1'bX && ^(main_312_317_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_330_phi_temp"); $finish; end
end
/* main: %.lr.ph.i15.i.i*/
/*   %330 = phi i8* [ %ReadBuf.8, %.us-lcssa.us.i.i.i ], [ %317, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd1)
begin
main__lr_ph_i15_i_i_330_phi_temp <= main__us_lcssa_us_i_i_i_ReadBuf_8;
if (^reset !== 1'bX && ^(main__us_lcssa_us_i_i_i_ReadBuf_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_330_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.i15.i.i*/
/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %322, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB81_250 & memory_controller_waitrequest == 1'd0 & main__preheader_i13_i_i_329 == 1'd1)
begin
main__lr_ph_i15_i_i_length_02_i_i_i_phi_temp <= main_312_322_reg;
if (^reset !== 1'bX && ^(main_312_322_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_length_02_i_i_i_phi_temp"); $finish; end
end
/* main: %.lr.ph.i15.i.i*/
/*   %length.02.i.i.i = phi i32 [ %..i.i.i, %.us-lcssa.us.i.i.i ], [ %322, %.preheader.i13.i.i ]*/
if (cur_state == LEGUP_F_main_BB89_276 & memory_controller_waitrequest == 1'd0 & main__us_lcssa_us_i_i_i_373 == 1'd1)
begin
main__lr_ph_i15_i_i_length_02_i_i_i_phi_temp <= main__us_lcssa_us_i_i_i___i_i_i;
if (^reset !== 1'bX && ^(main__us_lcssa_us_i_i_i___i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_i15_i_i_length_02_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.split.us.i.i.i*/
/*   %354 = phi i8* [ %355, %.split.us.i.i.i ], [ %331, %351 ]*/
if (cur_state == LEGUP_F_main_BB86_266 & memory_controller_waitrequest == 1'd0 & main_351_353 == 1'd1)
begin
main__split_us_i_i_i_354_phi_temp <= main__lr_ph_i15_i_i_331_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_331_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_354_phi_temp"); $finish; end
end
/* main: %.split.us.i.i.i*/
/*   %354 = phi i8* [ %355, %.split.us.i.i.i ], [ %331, %351 ]*/
if (cur_state == LEGUP_F_main_BB87_270 & memory_controller_waitrequest == 1'd0 & main__split_us_i_i_i_exitcond_i17_i_i_reg == 1'd0)
begin
main__split_us_i_i_i_354_phi_temp <= main__split_us_i_i_i_355_reg;
if (^reset !== 1'bX && ^(main__split_us_i_i_i_355_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_354_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.split.us.i.i.i*/
/*   %i.01.us.i.i.i = phi i32 [ %360, %.split.us.i.i.i ], [ 0, %351 ]*/
if (cur_state == LEGUP_F_main_BB86_266 & memory_controller_waitrequest == 1'd0 & main_351_353 == 1'd1)
begin
main__split_us_i_i_i_i_01_us_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_i_01_us_i_i_i_phi_temp"); $finish; end
end
/* main: %.split.us.i.i.i*/
/*   %i.01.us.i.i.i = phi i32 [ %360, %.split.us.i.i.i ], [ 0, %351 ]*/
if (cur_state == LEGUP_F_main_BB87_270 & memory_controller_waitrequest == 1'd0 & main__split_us_i_i_i_exitcond_i17_i_i_reg == 1'd0)
begin
main__split_us_i_i_i_i_01_us_i_i_i_phi_temp <= main__split_us_i_i_i_360_reg;
if (^reset !== 1'bX && ^(main__split_us_i_i_i_360_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__split_us_i_i_i_i_01_us_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %361 = phi i8* [ %366, %..split_crit_edge.i.i.i ], [ %331, %351 ]*/
if (cur_state == LEGUP_F_main_BB86_266 & memory_controller_waitrequest == 1'd0 & main_351_353 == 1'd0)
begin
main___split_crit_edge_i_i_i_361_phi_temp <= main__lr_ph_i15_i_i_331_reg;
if (^reset !== 1'bX && ^(main__lr_ph_i15_i_i_331_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_361_phi_temp"); $finish; end
end
/* main: %..split_crit_edge.i.i.i*/
/*   %361 = phi i8* [ %366, %..split_crit_edge.i.i.i ], [ %331, %351 ]*/
if (cur_state == LEGUP_F_main_BB88_275 & memory_controller_waitrequest == 1'd0 & main___split_crit_edge_i_i_i_exitcond3_i_i_i_reg == 1'd0)
begin
main___split_crit_edge_i_i_i_361_phi_temp <= main___split_crit_edge_i_i_i_366_reg;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_366_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_361_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %..split_crit_edge.i.i.i*/
/*   %i.01.i.i.i = phi i32 [ %372, %..split_crit_edge.i.i.i ], [ 0, %351 ]*/
if (cur_state == LEGUP_F_main_BB86_266 & memory_controller_waitrequest == 1'd0 & main_351_353 == 1'd0)
begin
main___split_crit_edge_i_i_i_i_01_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_i_01_i_i_i_phi_temp"); $finish; end
end
/* main: %..split_crit_edge.i.i.i*/
/*   %i.01.i.i.i = phi i32 [ %372, %..split_crit_edge.i.i.i ], [ 0, %351 ]*/
if (cur_state == LEGUP_F_main_BB88_275 & memory_controller_waitrequest == 1'd0 & main___split_crit_edge_i_i_i_exitcond3_i_i_i_reg == 1'd0)
begin
main___split_crit_edge_i_i_i_i_01_i_i_i_phi_temp <= main___split_crit_edge_i_i_i_372_reg;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_372_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main___split_crit_edge_i_i_i_i_01_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.us-lcssa.us.i.i.i*/
/*   %ReadBuf.8 = phi i8* [ %366, %..split_crit_edge.i.i.i ], [ %355, %.split.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB87_270 & memory_controller_waitrequest == 1'd0 & main__split_us_i_i_i_exitcond_i17_i_i_reg == 1'd1)
begin
main__us_lcssa_us_i_i_i_ReadBuf_8_phi_temp <= main__split_us_i_i_i_355_reg;
if (^reset !== 1'bX && ^(main__split_us_i_i_i_355_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__us_lcssa_us_i_i_i_ReadBuf_8_phi_temp"); $finish; end
end
/* main: %.us-lcssa.us.i.i.i*/
/*   %ReadBuf.8 = phi i8* [ %366, %..split_crit_edge.i.i.i ], [ %355, %.split.us.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB88_275 & memory_controller_waitrequest == 1'd0 & main___split_crit_edge_i_i_i_exitcond3_i_i_i_reg == 1'd1)
begin
main__us_lcssa_us_i_i_i_ReadBuf_8_phi_temp <= main___split_crit_edge_i_i_i_366_reg;
if (^reset !== 1'bX && ^(main___split_crit_edge_i_i_i_366_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__us_lcssa_us_i_i_i_ReadBuf_8_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader21.i.i*/
/*   %CurrentMCU.026.i.i = phi i32 [ %tmp143.i.i, %447 ], [ 0, %.preheader21.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB92_356 & memory_controller_waitrequest == 1'd0)
begin
main__preheader21_i_i_CurrentMCU_026_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader21_i_i_CurrentMCU_026_i_i_phi_temp"); $finish; end
end
/* main: %.preheader21.i.i*/
/*   %CurrentMCU.026.i.i = phi i32 [ %tmp143.i.i, %447 ], [ 0, %.preheader21.i.i.preheader ]*/
if (cur_state == LEGUP_F_main_BB113_405 & memory_controller_waitrequest == 1'd0 & main_447_448 == 1'd1)
begin
main__preheader21_i_i_CurrentMCU_026_i_i_phi_temp <= main__preheader21_i_i_tmp143_i_i_reg;
if (^reset !== 1'bX && ^(main__preheader21_i_i_tmp143_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader21_i_i_CurrentMCU_026_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %392*/
/*   %i.01.i.i1.i = phi i32 [ %426, %425 ], [ 0, %.preheader21.i.i ]*/
if (cur_state == LEGUP_function_call_365 & memory_controller_waitrequest == 1'd0)
begin
main_392_i_01_i_i1_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_i_01_i_i1_i_phi_temp"); $finish; end
end
/* main: %392*/
/*   %i.01.i.i1.i = phi i32 [ %426, %425 ], [ 0, %.preheader21.i.i ]*/
if (cur_state == LEGUP_F_main_BB103_382 & memory_controller_waitrequest == 1'd0 & main_425_exitcond53_i_i_reg == 1'd0)
begin
main_392_i_01_i_i1_i_phi_temp <= main_425_426_reg;
if (^reset !== 1'bX && ^(main_425_426_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_392_i_01_i_i1_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %415*/
/*   %r.0.i.i.i = phi i32 [ 255, %414 ], [ %402, %412 ], [ 0, %392 ]*/
if (cur_state == LEGUP_F_main_BB94_371 & memory_controller_waitrequest == 1'd0 & main_392_411 == 1'd1)
begin
main_415_r_0_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_r_0_i_i_i_phi_temp"); $finish; end
end
/* main: %415*/
/*   %r.0.i.i.i = phi i32 [ 255, %414 ], [ %402, %412 ], [ 0, %392 ]*/
if (cur_state == LEGUP_F_main_BB95_372 & memory_controller_waitrequest == 1'd0 & main_412_413 == 1'd0)
begin
main_415_r_0_i_i_i_phi_temp <= main_392_402_reg;
if (^reset !== 1'bX && ^(main_392_402_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_r_0_i_i_i_phi_temp"); $finish; end
end
/* main: %415*/
/*   %r.0.i.i.i = phi i32 [ 255, %414 ], [ %402, %412 ], [ 0, %392 ]*/
if (cur_state == LEGUP_F_main_BB96_373 & memory_controller_waitrequest == 1'd0)
begin
main_415_r_0_i_i_i_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_r_0_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %420*/
/*   %g.0.i.i.i = phi i32 [ 255, %419 ], [ %407, %417 ], [ 0, %415 ]*/
if (cur_state == LEGUP_F_main_BB97_374 & memory_controller_waitrequest == 1'd0 & main_415_416 == 1'd1)
begin
main_420_g_0_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_420_g_0_i_i_i_phi_temp"); $finish; end
end
/* main: %420*/
/*   %g.0.i.i.i = phi i32 [ 255, %419 ], [ %407, %417 ], [ 0, %415 ]*/
if (cur_state == LEGUP_F_main_BB98_375 & memory_controller_waitrequest == 1'd0 & main_417_418 == 1'd0)
begin
main_420_g_0_i_i_i_phi_temp <= main_392_407_reg;
if (^reset !== 1'bX && ^(main_392_407_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_420_g_0_i_i_i_phi_temp"); $finish; end
end
/* main: %420*/
/*   %g.0.i.i.i = phi i32 [ 255, %419 ], [ %407, %417 ], [ 0, %415 ]*/
if (cur_state == LEGUP_F_main_BB99_376 & memory_controller_waitrequest == 1'd0)
begin
main_420_g_0_i_i_i_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_420_g_0_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %425*/
/*   %b.0.i.i.i = phi i32 [ 255, %424 ], [ %410, %422 ], [ 0, %420 ]*/
if (cur_state == LEGUP_F_main_BB100_377 & memory_controller_waitrequest == 1'd0 & main_420_421 == 1'd1)
begin
main_425_b_0_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_b_0_i_i_i_phi_temp"); $finish; end
end
/* main: %425*/
/*   %b.0.i.i.i = phi i32 [ 255, %424 ], [ %410, %422 ], [ 0, %420 ]*/
if (cur_state == LEGUP_F_main_BB101_378 & memory_controller_waitrequest == 1'd0 & main_422_423 == 1'd0)
begin
main_425_b_0_i_i_i_phi_temp <= main_392_410_reg;
if (^reset !== 1'bX && ^(main_392_410_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_b_0_i_i_i_phi_temp"); $finish; end
end
/* main: %425*/
/*   %b.0.i.i.i = phi i32 [ 255, %424 ], [ %410, %422 ], [ 0, %420 ]*/
if (cur_state == LEGUP_F_main_BB102_379 & memory_controller_waitrequest == 1'd0)
begin
main_425_b_0_i_i_i_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_425_b_0_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %433 = phi i32 [ %.pre.i.i, %YuvToRgb.exit.loopexit.i.i ], [ %446, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB104_388 & memory_controller_waitrequest == 1'd0)
begin
main_432_433_phi_temp <= main_YuvToRgb_exit_loopexit_i_i__pre_i_i_reg;
if (^reset !== 1'bX && ^(main_YuvToRgb_exit_loopexit_i_i__pre_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_433_phi_temp"); $finish; end
end
/* main: %432*/
/*   %433 = phi i32 [ %.pre.i.i, %YuvToRgb.exit.loopexit.i.i ], [ %446, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB112_404 & memory_controller_waitrequest == 1'd0 & main_WriteBlock_exit_i_i_exitcond116_i_i == 1'd0)
begin
main_432_433_phi_temp <= main_WriteBlock_exit_i_i_446;
if (^reset !== 1'bX && ^(main_WriteBlock_exit_i_i_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_433_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB104_388 & memory_controller_waitrequest == 1'd0)
begin
main_432_i_324_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_i_324_i_i_phi_temp"); $finish; end
end
/* main: %432*/
/*   %i.324.i.i = phi i32 [ 0, %YuvToRgb.exit.loopexit.i.i ], [ %tmp141.i.i, %WriteBlock.exit.i.i ]*/
if (cur_state == LEGUP_F_main_BB112_404 & memory_controller_waitrequest == 1'd0 & main_WriteBlock_exit_i_i_exitcond116_i_i == 1'd0)
begin
main_432_i_324_i_i_phi_temp <= main_432_tmp141_i_i_reg;
if (^reset !== 1'bX && ^(main_432_tmp141_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_i_324_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.lr.ph.us.i.i.i.i*/
/*   %indvar17.i.i.i.i = phi i32 [ %indvar.next18.i.i.i.i, %439 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB106_394 & memory_controller_waitrequest == 1'd0)
begin
main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_phi_temp"); $finish; end
end
/* main: %.lr.ph.us.i.i.i.i*/
/*   %indvar17.i.i.i.i = phi i32 [ %indvar.next18.i.i.i.i, %439 ], [ 0, %.lr.ph8.split.us.i.i.i.i ]*/
if (cur_state == LEGUP_F_main_BB107_395 & memory_controller_waitrequest == 1'd0 & main_439_exitcond93_i_i == 1'd0)
begin
main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_phi_temp <= main_439_indvar_next18_i_i_i_i;
if (^reset !== 1'bX && ^(main_439_indvar_next18_i_i_i_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__lr_ph_us_i_i_i_i_indvar17_i_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %440*/
/*   %indvar.i.i.i.i = phi i32 [ 0, %.lr.ph.us.i.i.i.i ], [ %indvar.next.i.i.i.i, %440 ]*/
if (cur_state == LEGUP_F_main_BB108_398 & memory_controller_waitrequest == 1'd0 & main_440_exitcond70_i_i_reg == 1'd0)
begin
main_440_indvar_i_i_i_i_phi_temp <= main_440_indvar_next_i_i_i_i_reg;
if (^reset !== 1'bX && ^(main_440_indvar_next_i_i_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_indvar_i_i_i_i_phi_temp"); $finish; end
end
/* main: %440*/
/*   %indvar.i.i.i.i = phi i32 [ 0, %.lr.ph.us.i.i.i.i ], [ %indvar.next.i.i.i.i, %440 ]*/
if (cur_state == LEGUP_F_main_BB109_399 & memory_controller_waitrequest == 1'd0)
begin
main_440_indvar_i_i_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_440_indvar_i_i_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %WriteBlock.exit.i.i*/
/*   %446 = phi i32 [ %443, %WriteOneBlock.exit.i.i.i ], [ 0, %445 ]*/
if (cur_state == LEGUP_F_main_BB110_402 & memory_controller_waitrequest == 1'd0 & main_WriteOneBlock_exit_i_i_i_444 == 1'd1)
begin
main_WriteBlock_exit_i_i_446_phi_temp <= main_WriteOneBlock_exit_i_i_i_443;
if (^reset !== 1'bX && ^(main_WriteOneBlock_exit_i_i_i_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_WriteBlock_exit_i_i_446_phi_temp"); $finish; end
end
/* main: %WriteBlock.exit.i.i*/
/*   %446 = phi i32 [ %443, %WriteOneBlock.exit.i.i.i ], [ 0, %445 ]*/
if (cur_state == LEGUP_F_main_BB111_403 & memory_controller_waitrequest == 1'd0)
begin
main_WriteBlock_exit_i_i_446_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_WriteBlock_exit_i_i_446_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader.i.i*/
/*   %indvar.i7.i = phi i32 [ 0, %.preheader.lr.ph.i.i ], [ %indvar.next.i.i, %.loopexit.i.i ]*/
if (cur_state == LEGUP_F_main_BB115_407 & memory_controller_waitrequest == 1'd0)
begin
main__preheader_i_i_indvar_i7_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_i_indvar_i7_i_phi_temp"); $finish; end
end
/* main: %.preheader.i.i*/
/*   %indvar.i7.i = phi i32 [ 0, %.preheader.lr.ph.i.i ], [ %indvar.next.i.i, %.loopexit.i.i ]*/
if (cur_state == LEGUP_function_call_453 & memory_controller_waitrequest == 1'd0 & main__loopexit_i_i_490_reg == 1'd1)
begin
main__preheader_i_i_indvar_i7_i_phi_temp <= main__loopexit_i_i_indvar_next_i_i_reg;
if (^reset !== 1'bX && ^(main__loopexit_i_i_indvar_next_i_i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_i_i_indvar_i7_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_function_call_425 & memory_controller_waitrequest == 1'd0)
begin
main__preheader16_i_i_i_517_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_phi_temp"); $finish; end
end
/* main: %.preheader16.i.i*/
/*   %i.517.i.i = phi i32 [ 0, %.preheader.i.i ], [ %489, %YuvToRgb.exit13.i.i ]*/
if (cur_state == LEGUP_F_main_BB128_444 & memory_controller_waitrequest == 1'd0 & main_YuvToRgb_exit13_i_i_exitcond35_i_i == 1'd0)
begin
main__preheader16_i_i_i_517_i_i_phi_temp <= main_YuvToRgb_exit13_i_i_489;
if (^reset !== 1'bX && ^(main_YuvToRgb_exit13_i_i_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader16_i_i_i_517_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %454*/
/*   %i.01.i2.i.i = phi i32 [ %488, %487 ], [ 0, %.preheader16.i.i ]*/
if (cur_state == LEGUP_F_main_BB117_426 & memory_controller_waitrequest == 1'd0)
begin
main_454_i_01_i2_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_i_01_i2_i_i_phi_temp"); $finish; end
end
/* main: %454*/
/*   %i.01.i2.i.i = phi i32 [ %488, %487 ], [ 0, %.preheader16.i.i ]*/
if (cur_state == LEGUP_F_main_BB127_443 & memory_controller_waitrequest == 1'd0 & main_487_exitcond_i_i_reg == 1'd0)
begin
main_454_i_01_i2_i_i_phi_temp <= main_487_488_reg;
if (^reset !== 1'bX && ^(main_487_488_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_454_i_01_i2_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %477*/
/*   %r.0.i9.i.i = phi i32 [ 255, %476 ], [ %464, %474 ], [ 0, %454 ]*/
if (cur_state == LEGUP_F_main_BB118_432 & memory_controller_waitrequest == 1'd0 & main_454_473 == 1'd1)
begin
main_477_r_0_i9_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_r_0_i9_i_i_phi_temp"); $finish; end
end
/* main: %477*/
/*   %r.0.i9.i.i = phi i32 [ 255, %476 ], [ %464, %474 ], [ 0, %454 ]*/
if (cur_state == LEGUP_F_main_BB119_433 & memory_controller_waitrequest == 1'd0 & main_474_475 == 1'd0)
begin
main_477_r_0_i9_i_i_phi_temp <= main_454_464_reg;
if (^reset !== 1'bX && ^(main_454_464_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_r_0_i9_i_i_phi_temp"); $finish; end
end
/* main: %477*/
/*   %r.0.i9.i.i = phi i32 [ 255, %476 ], [ %464, %474 ], [ 0, %454 ]*/
if (cur_state == LEGUP_F_main_BB120_434 & memory_controller_waitrequest == 1'd0)
begin
main_477_r_0_i9_i_i_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_r_0_i9_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %482*/
/*   %g.0.i10.i.i = phi i32 [ 255, %481 ], [ %469, %479 ], [ 0, %477 ]*/
if (cur_state == LEGUP_F_main_BB121_435 & memory_controller_waitrequest == 1'd0 & main_477_478 == 1'd1)
begin
main_482_g_0_i10_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_482_g_0_i10_i_i_phi_temp"); $finish; end
end
/* main: %482*/
/*   %g.0.i10.i.i = phi i32 [ 255, %481 ], [ %469, %479 ], [ 0, %477 ]*/
if (cur_state == LEGUP_F_main_BB122_436 & memory_controller_waitrequest == 1'd0 & main_479_480 == 1'd0)
begin
main_482_g_0_i10_i_i_phi_temp <= main_454_469_reg;
if (^reset !== 1'bX && ^(main_454_469_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_482_g_0_i10_i_i_phi_temp"); $finish; end
end
/* main: %482*/
/*   %g.0.i10.i.i = phi i32 [ 255, %481 ], [ %469, %479 ], [ 0, %477 ]*/
if (cur_state == LEGUP_F_main_BB123_437 & memory_controller_waitrequest == 1'd0)
begin
main_482_g_0_i10_i_i_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_482_g_0_i10_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %487*/
/*   %b.0.i11.i.i = phi i32 [ 255, %486 ], [ %472, %484 ], [ 0, %482 ]*/
if (cur_state == LEGUP_F_main_BB124_438 & memory_controller_waitrequest == 1'd0 & main_482_483 == 1'd1)
begin
main_487_b_0_i11_i_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_b_0_i11_i_i_phi_temp"); $finish; end
end
/* main: %487*/
/*   %b.0.i11.i.i = phi i32 [ 255, %486 ], [ %472, %484 ], [ 0, %482 ]*/
if (cur_state == LEGUP_F_main_BB125_439 & memory_controller_waitrequest == 1'd0 & main_484_485 == 1'd0)
begin
main_487_b_0_i11_i_i_phi_temp <= main_454_472_reg;
if (^reset !== 1'bX && ^(main_454_472_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_b_0_i11_i_i_phi_temp"); $finish; end
end
/* main: %487*/
/*   %b.0.i11.i.i = phi i32 [ 255, %486 ], [ %472, %484 ], [ 0, %482 ]*/
if (cur_state == LEGUP_F_main_BB126_440 & memory_controller_waitrequest == 1'd0)
begin
main_487_b_0_i11_i_i_phi_temp <= 32'd255;
if (^reset !== 1'bX && ^(32'd255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_487_b_0_i11_i_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %491*/
/*   %492 = phi i32 [ %main_result.promoted3.i, %decode_start.exit.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB130_456 & memory_controller_waitrequest == 1'd0)
begin
main_491_492_phi_temp <= main_decode_start_exit_i_main_result_promoted3_i;
if (^reset !== 1'bX && ^(main_decode_start_exit_i_main_result_promoted3_i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_phi_temp"); $finish; end
end
/* main: %491*/
/*   %492 = phi i32 [ %main_result.promoted3.i, %decode_start.exit.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB131_460 & memory_controller_waitrequest == 1'd0 & main_491_exitcond_i_reg == 1'd0)
begin
main_491_492_phi_temp <= main_491_497;
if (^reset !== 1'bX && ^(main_491_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_492_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %491*/
/*   %j.01.i = phi i32 [ 0, %decode_start.exit.i ], [ %498, %491 ]*/
if (cur_state == LEGUP_F_main_BB130_456 & memory_controller_waitrequest == 1'd0)
begin
main_491_j_01_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_j_01_i_phi_temp"); $finish; end
end
/* main: %491*/
/*   %j.01.i = phi i32 [ 0, %decode_start.exit.i ], [ %498, %491 ]*/
if (cur_state == LEGUP_F_main_BB131_460 & memory_controller_waitrequest == 1'd0 & main_491_exitcond_i_reg == 1'd0)
begin
main_491_j_01_i_phi_temp <= main_491_498_reg;
if (^reset !== 1'bX && ^(main_491_498_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_491_j_01_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader.1.i*/
/*   %499 = phi i32 [ %504, %.preheader.1.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB131_460 & memory_controller_waitrequest == 1'd0 & main_491_exitcond_i_reg == 1'd1)
begin
main__preheader_1_i_499_phi_temp <= main_491_497;
if (^reset !== 1'bX && ^(main_491_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_499_phi_temp"); $finish; end
end
/* main: %.preheader.1.i*/
/*   %499 = phi i32 [ %504, %.preheader.1.i ], [ %497, %491 ]*/
if (cur_state == LEGUP_F_main_BB132_464 & memory_controller_waitrequest == 1'd0 & main__preheader_1_i_exitcond_1_i_reg == 1'd0)
begin
main__preheader_1_i_499_phi_temp <= main__preheader_1_i_504;
if (^reset !== 1'bX && ^(main__preheader_1_i_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_499_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader.1.i*/
/*   %j.01.1.i = phi i32 [ %505, %.preheader.1.i ], [ 0, %491 ]*/
if (cur_state == LEGUP_F_main_BB131_460 & memory_controller_waitrequest == 1'd0 & main_491_exitcond_i_reg == 1'd1)
begin
main__preheader_1_i_j_01_1_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_j_01_1_i_phi_temp"); $finish; end
end
/* main: %.preheader.1.i*/
/*   %j.01.1.i = phi i32 [ %505, %.preheader.1.i ], [ 0, %491 ]*/
if (cur_state == LEGUP_F_main_BB132_464 & memory_controller_waitrequest == 1'd0 & main__preheader_1_i_exitcond_1_i_reg == 1'd0)
begin
main__preheader_1_i_j_01_1_i_phi_temp <= main__preheader_1_i_505_reg;
if (^reset !== 1'bX && ^(main__preheader_1_i_505_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_1_i_j_01_1_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader.2.i*/
/*   %513 = phi i32 [ %518, %.preheader.2.i ], [ %504, %.preheader.1.i ]*/
if (cur_state == LEGUP_F_main_BB132_464 & memory_controller_waitrequest == 1'd0 & main__preheader_1_i_exitcond_1_i_reg == 1'd1)
begin
main__preheader_2_i_513_phi_temp <= main__preheader_1_i_504;
if (^reset !== 1'bX && ^(main__preheader_1_i_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_513_phi_temp"); $finish; end
end
/* main: %.preheader.2.i*/
/*   %513 = phi i32 [ %518, %.preheader.2.i ], [ %504, %.preheader.1.i ]*/
if (cur_state == LEGUP_F_main_BB134_472 & memory_controller_waitrequest == 1'd0 & main__preheader_2_i_exitcond_2_i_reg == 1'd0)
begin
main__preheader_2_i_513_phi_temp <= main__preheader_2_i_518;
if (^reset !== 1'bX && ^(main__preheader_2_i_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_513_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %.preheader.2.i*/
/*   %j.01.2.i = phi i32 [ %519, %.preheader.2.i ], [ 0, %.preheader.1.i ]*/
if (cur_state == LEGUP_F_main_BB132_464 & memory_controller_waitrequest == 1'd0 & main__preheader_1_i_exitcond_1_i_reg == 1'd1)
begin
main__preheader_2_i_j_01_2_i_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_j_01_2_i_phi_temp"); $finish; end
end
/* main: %.preheader.2.i*/
/*   %j.01.2.i = phi i32 [ %519, %.preheader.2.i ], [ 0, %.preheader.1.i ]*/
if (cur_state == LEGUP_F_main_BB134_472 & memory_controller_waitrequest == 1'd0 & main__preheader_2_i_exitcond_2_i_reg == 1'd0)
begin
main__preheader_2_i_j_01_2_i_phi_temp <= main__preheader_2_i_519_reg;
if (^reset !== 1'bX && ^(main__preheader_2_i_519_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__preheader_2_i_j_01_2_i_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %524*/
/*   ret i32 %525*/
if (cur_state == LEGUP_F_main_BB137_477)
begin
finish <= memory_controller_waitrequest == 1'd0;
if (^reset !== 1'bX && ^(memory_controller_waitrequest == 1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if (cur_state == LEGUP_0)
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %524*/
/*   ret i32 %525*/
if (cur_state == LEGUP_F_main_BB137_477)
begin
return_val <= main_524_525;
if (^reset !== 1'bX && ^(main_524_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_address = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_address = 0;
end
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
memory_controller_address = huff_make_dhuff_tb_memory_controller_address;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
memory_controller_address = huff_make_dhuff_tb_memory_controller_address;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
memory_controller_address = huff_make_dhuff_tb_memory_controller_address;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
memory_controller_address = huff_make_dhuff_tb_memory_controller_address;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
memory_controller_address = decode_block_memory_controller_address;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
memory_controller_address = Write4Blocks_memory_controller_address;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
memory_controller_address = Write4Blocks_memory_controller_address;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
memory_controller_address = Write4Blocks_memory_controller_address;
end
/* main: %0*/
/*   store i32 0, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB0_1)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %1*/
/*   %2 = load i8* %scevgep13.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_2)
begin
memory_controller_address = main_1_scevgep13_i;
end
/* main: %1*/
/*   store i8 %2, i8* %c.06.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_4)
begin
memory_controller_address = main_1_c_06_i_reg;
end
/* main: %6*/
/*   %8 = load i8* %ReadBuf.1, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_10)
begin
memory_controller_address = main__backedge_i_i_ReadBuf_1_reg;
end
/* main: %6*/
/*   %9 = load i8* %7, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_11)
begin
memory_controller_address = main_6_7_reg;
end
/* main: %first_marker.exit.i.i*/
/*   %16 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_15)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %first_marker.exit.i.i*/
/*   store i32 %17, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_17)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.loopexit3.i.i.i*/
/*   %c.0.in2.i.i.i = load i8* %18, align 1*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
memory_controller_address = main__loopexit3_i_i_i_18;
end
/* main: %.lr.ph.i.i.i*/
/*   %c.0.in.i.i.i = load i8* %scevgep.i.i, align 1*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
memory_controller_address = main__lr_ph_i_i_i_scevgep_i_i;
end
/* main: %.loopexit.i.i.i*/
/*   %21 = load i8* %scevgep11.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB15_27)
begin
memory_controller_address = main__loopexit_i_i_i_scevgep11_i_i;
end
/* main: %next_marker.exit.i.i*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB17_32)
begin
memory_controller_address = main_next_marker_exit_i_i_25_reg;
end
/* main: %28*/
/*   %29 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_35)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %28*/
/*   store i32 %30, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_37)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %32*/
/*   %34 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
memory_controller_address = main_next_marker_exit_i_i_ReadBuf_2_reg;
end
/* main: %32*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_40)
begin
memory_controller_address = main_32_33_reg;
end
/* main: %32*/
/*   %43 = load i8* %37, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_41)
begin
memory_controller_address = main_32_37_reg;
end
/* main: %32*/
/*   %45 = load i8* %42, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_42)
begin
memory_controller_address = main_32_42_reg;
end
/* main: %32*/
/*   %49 = load i8* %44, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_43)
begin
memory_controller_address = main_32_44_reg;
end
/* main: %32*/
/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_45)
begin
memory_controller_address = `TAG_g_p_jinfo_image_height_a;
end
/* main: %32*/
/*   %53 = load i8* %48, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_46)
begin
memory_controller_address = main_32_48_reg;
end
/* main: %32*/
/*   %57 = load i8* %52, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_47)
begin
memory_controller_address = main_32_52_reg;
end
/* main: %32*/
/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_49)
begin
memory_controller_address = `TAG_g_p_jinfo_image_width_a;
end
/* main: %32*/
/*   %61 = load i8* %56, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_50)
begin
memory_controller_address = main_32_56_reg;
end
/* main: %32*/
/*   %65 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_52)
begin
memory_controller_address = `TAG_g_p_jinfo_image_height_a;
end
/* main: %32*/
/*   %68 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_55)
begin
memory_controller_address = `TAG_g_p_jinfo_image_width_a;
end
/* main: %74*/
/*   %75 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_58)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %74*/
/*   store i32 %76, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_60)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %79*/
/*   %80 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_62)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %79*/
/*   store i32 %81, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_64)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %82*/
/*   %83 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB24_65)
begin
memory_controller_address = `TAG_g_p_jinfo_image_height_a;
end
/* main: %85*/
/*   %86 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_68)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %85*/
/*   store i32 %87, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_70)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %88*/
/*   %89 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB26_71)
begin
memory_controller_address = `TAG_g_p_jinfo_image_width_a;
end
/* main: %91*/
/*   %92 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_74)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %91*/
/*   store i32 %93, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_76)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.preheader.i.i.i.thread*/
/*   %96 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_78)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.preheader.i.i.i.thread*/
/*   store i32 %97, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_80)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %tmp.i.i.i, i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep_i_i_i;
end
/* main: %.lr.ph.i1.i.i*/
/*   %100 = load i8* %ReadBuf.3, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_83)
begin
memory_controller_address = main__lr_ph_i1_i_i_ReadBuf_3_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %100, i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_85)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep3_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   %102 = load i8* %99, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_86)
begin
memory_controller_address = main__lr_ph_i1_i_i_99_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %103, i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_88)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep4_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %104, i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_89)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep5_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   %106 = load i8* %101, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_90)
begin
memory_controller_address = main__lr_ph_i1_i_i_101_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %106, i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_92)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep6_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   %109 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_93)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep3_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   %112 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_96)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep4_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   %115 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_99)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep5_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   %118 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_102)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep6_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   %121 = load i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_105)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep_i_i_i_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   %123 = load i32* %scevgep7.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB31_106)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep7_i_i_i_reg;
end
/* main: %125*/
/*   %126 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_109)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %125*/
/*   store i32 %127, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_111)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %128*/
/*   %129 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB33_112)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep3_i_i_i_reg;
end
/* main: %128*/
/*   %131 = load i32* %scevgep8.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB33_113)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep8_i_i_i_reg;
end
/* main: %133*/
/*   %134 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_116)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %133*/
/*   store i32 %135, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_118)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %136*/
/*   %137 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB35_119)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep4_i_i_i_reg;
end
/* main: %136*/
/*   %139 = load i32* %scevgep9.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB35_120)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep9_i_i_i_reg;
end
/* main: %141*/
/*   %142 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_123)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %141*/
/*   store i32 %143, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_125)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %144*/
/*   %145 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB37_126)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep5_i_i_i_reg;
end
/* main: %148*/
/*   %149 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_129)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %148*/
/*   store i32 %150, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_131)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %151*/
/*   %152 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB39_132)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep6_i_i_i_reg;
end
/* main: %151*/
/*   %154 = load i32* %scevgep11.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB39_133)
begin
memory_controller_address = main__lr_ph_i1_i_i_scevgep11_i_i_i_reg;
end
/* main: %156*/
/*   %157 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_136)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %156*/
/*   store i32 %158, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_138)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %._crit_edge.i.i.i*/
/*   %161 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
memory_controller_address = `TAG_g_p_jinfo_comps_info_h_samp_factor_a;
end
/* main: %167*/
/*   %169 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_145)
begin
memory_controller_address = main_next_marker_exit_i_i_ReadBuf_2_reg;
end
/* main: %167*/
/*   %173 = load i8* %168, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_146)
begin
memory_controller_address = main_167_168_reg;
end
/* main: %167*/
/*   %178 = load i8* %172, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_147)
begin
memory_controller_address = main_167_172_reg;
end
/* main: %183*/
/*   %184 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_150)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %183*/
/*   store i32 %185, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_152)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %188*/
/*   %189 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_154)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %188*/
/*   store i32 %190, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_156)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %194*/
/*   %196 = load i8* %ReadBuf.5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_159)
begin
memory_controller_address = main__preheader5_i_i_i_ReadBuf_5_reg;
end
/* main: %194*/
/*   %199 = load i8* %195, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_160)
begin
memory_controller_address = main_194_195_reg;
end
/* main: %203*/
/*   %204 = load i8* %scevgep9.i4.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB53_164)
begin
memory_controller_address = main_203_scevgep9_i4_i_i;
end
/* main: %211*/
/*   %212 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %211*/
/*   store i32 %213, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_171)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %211*/
/*   store i8 %214, i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_172)
begin
memory_controller_address = main_211_scevgep8_i5_i_i_reg;
end
/* main: %211*/
/*   store i8 %215, i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_173)
begin
memory_controller_address = main_211_scevgep7_i6_i_i_reg;
end
/* main: %211*/
/*   %217 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_174)
begin
memory_controller_address = main_211_scevgep8_i5_i_i_reg;
end
/* main: %211*/
/*   %220 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_177)
begin
memory_controller_address = main_211_scevgep7_i6_i_i_reg;
end
/* main: %211*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_180)
begin
memory_controller_address = main_211_223_reg;
end
/* main: %226*/
/*   %227 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_183)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %226*/
/*   store i32 %228, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_185)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %229*/
/*   %230 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB58_186)
begin
memory_controller_address = main_211_scevgep8_i5_i_i_reg;
end
/* main: %229*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB58_187)
begin
memory_controller_address = main_229_232_reg;
end
/* main: %235*/
/*   %236 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_190)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %235*/
/*   store i32 %237, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_192)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %238*/
/*   %239 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB60_193)
begin
memory_controller_address = main_211_scevgep7_i6_i_i_reg;
end
/* main: %242*/
/*   %243 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_196)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %242*/
/*   store i32 %244, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_198)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %248*/
/*   %250 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB64_201)
begin
memory_controller_address = main_next_marker_exit_i_i_ReadBuf_2_reg;
end
/* main: %248*/
/*   %254 = load i8* %249, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB64_202)
begin
memory_controller_address = main_248_249_reg;
end
/* main: %248*/
/*   %260 = load i32* %4, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB64_205)
begin
memory_controller_address = main__backedge_i_i_outer_4_reg;
end
/* main: %262*/
/*   %263 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_208)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %262*/
/*   store i32 %264, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_210)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.lr.ph5.i.i.i*/
/*   %267 = load i8* %ReadBuf.6, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
memory_controller_address = main__lr_ph5_i_i_i_ReadBuf_6;
end
/* main: %.lr.ph5.i.i.i*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB67_215)
begin
memory_controller_address = main__lr_ph5_i_i_i_270_reg;
end
/* main: %273*/
/*   %274 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_218)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %273*/
/*   store i32 %275, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_220)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %287*/
/*   %290 = load i8* %288, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
memory_controller_address = main_287_288;
end
/* main: %287*/
/*   store i32 %291, i32* %scevgep.i9.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB73_227)
begin
memory_controller_address = main_287_scevgep_i9_i_i_reg;
end
/* main: %293*/
/*   %296 = load i32* %295, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB74_229)
begin
memory_controller_address = main_293_295_reg;
end
/* main: %298*/
/*   %299 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_232)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %298*/
/*   store i32 %300, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_234)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.lr.ph.i10.i.i*/
/*   %306 = load i8* %304, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB77_236)
begin
memory_controller_address = main__lr_ph_i10_i_i_304;
end
/* main: %.lr.ph.i10.i.i*/
/*   store i32 %307, i32* %scevgep8.i11.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB77_238)
begin
memory_controller_address = main__lr_ph_i10_i_i_scevgep8_i11_i_i_reg;
end
/* main: %312*/
/*   %314 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB79_240)
begin
memory_controller_address = main_next_marker_exit_i_i_ReadBuf_2_reg;
end
/* main: %312*/
/*   %318 = load i8* %313, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB79_241)
begin
memory_controller_address = main_312_313_reg;
end
/* main: %312*/
/*   %324 = load i32* %5, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB79_244)
begin
memory_controller_address = main__backedge_i_i_outer4_5_reg;
end
/* main: %326*/
/*   %327 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_247)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %326*/
/*   store i32 %328, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_249)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.lr.ph.i15.i.i*/
/*   %332 = load i8* %330, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
memory_controller_address = main__lr_ph_i15_i_i_330;
end
/* main: %.lr.ph.i15.i.i*/
/*   %339 = load i32* %338, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB82_254)
begin
memory_controller_address = main__lr_ph_i15_i_i_338_reg;
end
/* main: %341*/
/*   %342 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_257)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %341*/
/*   store i32 %343, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_259)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %344*/
/*   %346 = load i32* %345, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB84_260)
begin
memory_controller_address = main_344_345;
end
/* main: %348*/
/*   %349 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_263)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %348*/
/*   store i32 %350, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_265)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.split.us.i.i.i*/
/*   %356 = load i8* %354, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB87_267)
begin
memory_controller_address = main__split_us_i_i_i_354;
end
/* main: %.split.us.i.i.i*/
/*   %358 = load i32* %scevgep.i16.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_268)
begin
memory_controller_address = main__split_us_i_i_i_scevgep_i16_i_i_reg;
end
/* main: %.split.us.i.i.i*/
/*   store i32 %357, i32* %359, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_270)
begin
memory_controller_address = main__split_us_i_i_i_359;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %363 = load i8* %361, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
memory_controller_address = main___split_crit_edge_i_i_i_361;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %367 = load i8* %362, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB88_272)
begin
memory_controller_address = main___split_crit_edge_i_i_i_362_reg;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %370 = load i32* %scevgep4.i18.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_273)
begin
memory_controller_address = main___split_crit_edge_i_i_i_scevgep4_i18_i_i_reg;
end
/* main: %..split_crit_edge.i.i.i*/
/*   store i32 %369, i32* %371, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_275)
begin
memory_controller_address = main___split_crit_edge_i_i_i_371;
end
/* main: %read_markers.exit.i*/
/*   %374 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
memory_controller_address = `TAG_g_p_jinfo_image_height_a;
end
/* main: %read_markers.exit.i*/
/*   %379 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_278)
begin
memory_controller_address = `TAG_g_p_jinfo_image_width_a;
end
/* main: %read_markers.exit.i*/
/*   store i32 %383, i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_328)
begin
memory_controller_address = `TAG_g_p_jinfo_MCUWidth_a;
end
/* main: %read_markers.exit.i*/
/*   store i32 %385, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_332)
begin
memory_controller_address = `TAG_g_p_jinfo_dc_dhuff_tbl_ml_a;
end
/* main: %read_markers.exit.i*/
/*   store i32 %386, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_336)
begin
memory_controller_address = `TAG_g_p_jinfo_dc_dhuff_tbl_ml_a + 4 * 32'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %387, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_340)
begin
memory_controller_address = `TAG_g_p_jinfo_ac_dhuff_tbl_ml_a;
end
/* main: %read_markers.exit.i*/
/*   store i32 %388, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_344)
begin
memory_controller_address = `TAG_g_p_jinfo_ac_dhuff_tbl_ml_a + 4 * 32'd1;
end
/* main: %read_markers.exit.i*/
/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !4*/
if (cur_state == LEGUP_F_main_BB90_345)
begin
memory_controller_address = `TAG_g_CurHuffReadBuf_a;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_346)
begin
memory_controller_address = main_read_markers_exit_i_scevgep148_i_i_reg;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.1.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_347)
begin
memory_controller_address = main_read_markers_exit_i_scevgep148_1_i_i_reg;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.2.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_348)
begin
memory_controller_address = main_read_markers_exit_i_scevgep148_2_i_i_reg;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_349)
begin
memory_controller_address = `TAG_g_OutData_comp_vpos_a;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_350)
begin
memory_controller_address = `TAG_g_OutData_comp_hpos_a;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_351)
begin
memory_controller_address = `TAG_g_OutData_comp_vpos_a + 4 * 32'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_352)
begin
memory_controller_address = `TAG_g_OutData_comp_hpos_a + 4 * 32'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_353)
begin
memory_controller_address = `TAG_g_OutData_comp_vpos_a + 4 * 32'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_354)
begin
memory_controller_address = `TAG_g_OutData_comp_hpos_a + 4 * 32'd2;
end
/* main: %392*/
/*   %393 = load i32* %scevgep.i.i3.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
memory_controller_address = main_392_scevgep_i_i3_i;
end
/* main: %392*/
/*   %394 = load i32* %scevgep2.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_367)
begin
memory_controller_address = main_392_scevgep2_i_i_i_reg;
end
/* main: %392*/
/*   %396 = load i32* %scevgep3.i.i2.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_368)
begin
memory_controller_address = main_392_scevgep3_i_i2_i_reg;
end
/* main: %425*/
/*   store i32 %r.0.i.i.i, i32* %scevgep4.i.i6.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
memory_controller_address = main_392_scevgep4_i_i6_i_reg;
end
/* main: %425*/
/*   store i32 %g.0.i.i.i, i32* %scevgep5.i.i5.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_381)
begin
memory_controller_address = main_392_scevgep5_i_i5_i_reg;
end
/* main: %425*/
/*   store i32 %b.0.i.i.i, i32* %scevgep6.i.i4.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_382)
begin
memory_controller_address = main_392_scevgep6_i_i4_i_reg;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %427 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB104_383)
begin
memory_controller_address = `TAG_g_p_jinfo_image_width_a;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %429 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB104_384)
begin
memory_controller_address = `TAG_g_p_jinfo_image_height_a;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_385)
begin
memory_controller_address = `TAG_g_OutData_comp_hpos_a;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %431 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_386)
begin
memory_controller_address = `TAG_g_p_jinfo_MCUWidth_a;
end
/* main: %432*/
/*   %434 = load i32* %scevgep139.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
memory_controller_address = main_432_scevgep139_i_i;
end
/* main: %440*/
/*   %441 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB108_396)
begin
memory_controller_address = main_440__14_us_i_i_i_i;
end
/* main: %440*/
/*   store i8 %442, i8* %scevgep24.i.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB108_398)
begin
memory_controller_address = main_440_scevgep24_i_i_i_i_reg;
end
/* main: %WriteOneBlock.exit.i.i.i*/
/*   %443 = load i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB110_400)
begin
memory_controller_address = main_432_scevgep142_i_i_reg;
end
/* main: %445*/
/*   store i32 0, i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB111_403)
begin
memory_controller_address = main_432_scevgep142_i_i_reg;
end
/* main: %454*/
/*   %455 = load i32* %scevgep.i3.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
memory_controller_address = main_454_scevgep_i3_i_i;
end
/* main: %454*/
/*   %456 = load i32* %scevgep2.i4.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_428)
begin
memory_controller_address = main_454_scevgep2_i4_i_i_reg;
end
/* main: %454*/
/*   %458 = load i32* %scevgep3.i5.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_429)
begin
memory_controller_address = main_454_scevgep3_i5_i_i_reg;
end
/* main: %487*/
/*   store i32 %r.0.i9.i.i, i32* %scevgep4.i6.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
memory_controller_address = main_454_scevgep4_i6_i_i_reg;
end
/* main: %487*/
/*   store i32 %g.0.i10.i.i, i32* %scevgep5.i7.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_442)
begin
memory_controller_address = main_454_scevgep5_i7_i_i_reg;
end
/* main: %487*/
/*   store i32 %b.0.i11.i.i, i32* %scevgep6.i8.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_443)
begin
memory_controller_address = main_454_scevgep6_i8_i_i_reg;
end
/* main: %decode_start.exit.i*/
/*   %main_result.promoted3.i = load i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB130_454)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %491*/
/*   %493 = load i8* %scevgep.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
memory_controller_address = main_491_scevgep_i;
end
/* main: %491*/
/*   %494 = load i8* %scevgep7.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_458)
begin
memory_controller_address = main_491_scevgep7_i_reg;
end
/* main: %.preheader.1.i*/
/*   %500 = load i8* %scevgep.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
memory_controller_address = main__preheader_1_i_scevgep_1_i;
end
/* main: %.preheader.1.i*/
/*   %501 = load i8* %scevgep7.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_462)
begin
memory_controller_address = main__preheader_1_i_scevgep7_1_i_reg;
end
/* main: %jpeg2bmp_main.exit*/
/*   store i32 %.storemerge, i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB133_465)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %jpeg2bmp_main.exit*/
/*   %511 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB133_466)
begin
memory_controller_address = `TAG_g_main_result_a;
end
/* main: %.preheader.2.i*/
/*   %514 = load i8* %scevgep.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
memory_controller_address = main__preheader_2_i_scevgep_2_i;
end
/* main: %.preheader.2.i*/
/*   %515 = load i8* %scevgep7.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_470)
begin
memory_controller_address = main__preheader_2_i_scevgep7_2_i_reg;
end
/* main: %524*/
/*   %525 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB137_475)
begin
memory_controller_address = `TAG_g_main_result_a;
end
end
always @(*) begin
memory_controller_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_enable = 1'd0;
end
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
memory_controller_enable = huff_make_dhuff_tb_memory_controller_enable;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
memory_controller_enable = huff_make_dhuff_tb_memory_controller_enable;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
memory_controller_enable = huff_make_dhuff_tb_memory_controller_enable;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
memory_controller_enable = huff_make_dhuff_tb_memory_controller_enable;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
memory_controller_enable = decode_block_memory_controller_enable;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
memory_controller_enable = Write4Blocks_memory_controller_enable;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
memory_controller_enable = Write4Blocks_memory_controller_enable;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
memory_controller_enable = Write4Blocks_memory_controller_enable;
end
/* main: %0*/
/*   store i32 0, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB0_1)
begin
memory_controller_enable = 1'd1;
end
/* main: %1*/
/*   %2 = load i8* %scevgep13.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_2)
begin
memory_controller_enable = 1'd1;
end
/* main: %1*/
/*   store i8 %2, i8* %c.06.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_4)
begin
memory_controller_enable = 1'd1;
end
/* main: %6*/
/*   %8 = load i8* %ReadBuf.1, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_10)
begin
memory_controller_enable = 1'd1;
end
/* main: %6*/
/*   %9 = load i8* %7, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_11)
begin
memory_controller_enable = 1'd1;
end
/* main: %first_marker.exit.i.i*/
/*   %16 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_15)
begin
memory_controller_enable = 1'd1;
end
/* main: %first_marker.exit.i.i*/
/*   store i32 %17, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_17)
begin
memory_controller_enable = 1'd1;
end
/* main: %.loopexit3.i.i.i*/
/*   %c.0.in2.i.i.i = load i8* %18, align 1*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i.i.i*/
/*   %c.0.in.i.i.i = load i8* %scevgep.i.i, align 1*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
memory_controller_enable = 1'd1;
end
/* main: %.loopexit.i.i.i*/
/*   %21 = load i8* %scevgep11.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB15_27)
begin
memory_controller_enable = 1'd1;
end
/* main: %next_marker.exit.i.i*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB17_32)
begin
memory_controller_enable = 1'd1;
end
/* main: %28*/
/*   %29 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_35)
begin
memory_controller_enable = 1'd1;
end
/* main: %28*/
/*   store i32 %30, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_37)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %34 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_40)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %43 = load i8* %37, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_41)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %45 = load i8* %42, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_42)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %49 = load i8* %44, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_43)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_45)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %53 = load i8* %48, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_46)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %57 = load i8* %52, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_47)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_49)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %61 = load i8* %56, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_50)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %65 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_52)
begin
memory_controller_enable = 1'd1;
end
/* main: %32*/
/*   %68 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_55)
begin
memory_controller_enable = 1'd1;
end
/* main: %74*/
/*   %75 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_58)
begin
memory_controller_enable = 1'd1;
end
/* main: %74*/
/*   store i32 %76, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_60)
begin
memory_controller_enable = 1'd1;
end
/* main: %79*/
/*   %80 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_62)
begin
memory_controller_enable = 1'd1;
end
/* main: %79*/
/*   store i32 %81, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_64)
begin
memory_controller_enable = 1'd1;
end
/* main: %82*/
/*   %83 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB24_65)
begin
memory_controller_enable = 1'd1;
end
/* main: %85*/
/*   %86 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_68)
begin
memory_controller_enable = 1'd1;
end
/* main: %85*/
/*   store i32 %87, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_70)
begin
memory_controller_enable = 1'd1;
end
/* main: %88*/
/*   %89 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB26_71)
begin
memory_controller_enable = 1'd1;
end
/* main: %91*/
/*   %92 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_74)
begin
memory_controller_enable = 1'd1;
end
/* main: %91*/
/*   store i32 %93, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_76)
begin
memory_controller_enable = 1'd1;
end
/* main: %.preheader.i.i.i.thread*/
/*   %96 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_78)
begin
memory_controller_enable = 1'd1;
end
/* main: %.preheader.i.i.i.thread*/
/*   store i32 %97, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_80)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %tmp.i.i.i, i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %100 = load i8* %ReadBuf.3, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_83)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %100, i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_85)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %102 = load i8* %99, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_86)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %103, i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_88)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %104, i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_89)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %106 = load i8* %101, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_90)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %106, i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_92)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %109 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_93)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %112 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_96)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %115 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_99)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %118 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_102)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %121 = load i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_105)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %123 = load i32* %scevgep7.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB31_106)
begin
memory_controller_enable = 1'd1;
end
/* main: %125*/
/*   %126 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_109)
begin
memory_controller_enable = 1'd1;
end
/* main: %125*/
/*   store i32 %127, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_111)
begin
memory_controller_enable = 1'd1;
end
/* main: %128*/
/*   %129 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB33_112)
begin
memory_controller_enable = 1'd1;
end
/* main: %128*/
/*   %131 = load i32* %scevgep8.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB33_113)
begin
memory_controller_enable = 1'd1;
end
/* main: %133*/
/*   %134 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_116)
begin
memory_controller_enable = 1'd1;
end
/* main: %133*/
/*   store i32 %135, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_118)
begin
memory_controller_enable = 1'd1;
end
/* main: %136*/
/*   %137 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB35_119)
begin
memory_controller_enable = 1'd1;
end
/* main: %136*/
/*   %139 = load i32* %scevgep9.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB35_120)
begin
memory_controller_enable = 1'd1;
end
/* main: %141*/
/*   %142 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_123)
begin
memory_controller_enable = 1'd1;
end
/* main: %141*/
/*   store i32 %143, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_125)
begin
memory_controller_enable = 1'd1;
end
/* main: %144*/
/*   %145 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB37_126)
begin
memory_controller_enable = 1'd1;
end
/* main: %148*/
/*   %149 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_129)
begin
memory_controller_enable = 1'd1;
end
/* main: %148*/
/*   store i32 %150, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_131)
begin
memory_controller_enable = 1'd1;
end
/* main: %151*/
/*   %152 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB39_132)
begin
memory_controller_enable = 1'd1;
end
/* main: %151*/
/*   %154 = load i32* %scevgep11.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB39_133)
begin
memory_controller_enable = 1'd1;
end
/* main: %156*/
/*   %157 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_136)
begin
memory_controller_enable = 1'd1;
end
/* main: %156*/
/*   store i32 %158, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_138)
begin
memory_controller_enable = 1'd1;
end
/* main: %._crit_edge.i.i.i*/
/*   %161 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
memory_controller_enable = 1'd1;
end
/* main: %167*/
/*   %169 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_145)
begin
memory_controller_enable = 1'd1;
end
/* main: %167*/
/*   %173 = load i8* %168, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_146)
begin
memory_controller_enable = 1'd1;
end
/* main: %167*/
/*   %178 = load i8* %172, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_147)
begin
memory_controller_enable = 1'd1;
end
/* main: %183*/
/*   %184 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_150)
begin
memory_controller_enable = 1'd1;
end
/* main: %183*/
/*   store i32 %185, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_152)
begin
memory_controller_enable = 1'd1;
end
/* main: %188*/
/*   %189 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_154)
begin
memory_controller_enable = 1'd1;
end
/* main: %188*/
/*   store i32 %190, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_156)
begin
memory_controller_enable = 1'd1;
end
/* main: %194*/
/*   %196 = load i8* %ReadBuf.5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_159)
begin
memory_controller_enable = 1'd1;
end
/* main: %194*/
/*   %199 = load i8* %195, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_160)
begin
memory_controller_enable = 1'd1;
end
/* main: %203*/
/*   %204 = load i8* %scevgep9.i4.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB53_164)
begin
memory_controller_enable = 1'd1;
end
/* main: %211*/
/*   %212 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
memory_controller_enable = 1'd1;
end
/* main: %211*/
/*   store i32 %213, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_171)
begin
memory_controller_enable = 1'd1;
end
/* main: %211*/
/*   store i8 %214, i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_172)
begin
memory_controller_enable = 1'd1;
end
/* main: %211*/
/*   store i8 %215, i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_173)
begin
memory_controller_enable = 1'd1;
end
/* main: %211*/
/*   %217 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_174)
begin
memory_controller_enable = 1'd1;
end
/* main: %211*/
/*   %220 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_177)
begin
memory_controller_enable = 1'd1;
end
/* main: %211*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_180)
begin
memory_controller_enable = 1'd1;
end
/* main: %226*/
/*   %227 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_183)
begin
memory_controller_enable = 1'd1;
end
/* main: %226*/
/*   store i32 %228, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_185)
begin
memory_controller_enable = 1'd1;
end
/* main: %229*/
/*   %230 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB58_186)
begin
memory_controller_enable = 1'd1;
end
/* main: %229*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB58_187)
begin
memory_controller_enable = 1'd1;
end
/* main: %235*/
/*   %236 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_190)
begin
memory_controller_enable = 1'd1;
end
/* main: %235*/
/*   store i32 %237, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_192)
begin
memory_controller_enable = 1'd1;
end
/* main: %238*/
/*   %239 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB60_193)
begin
memory_controller_enable = 1'd1;
end
/* main: %242*/
/*   %243 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_196)
begin
memory_controller_enable = 1'd1;
end
/* main: %242*/
/*   store i32 %244, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_198)
begin
memory_controller_enable = 1'd1;
end
/* main: %248*/
/*   %250 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB64_201)
begin
memory_controller_enable = 1'd1;
end
/* main: %248*/
/*   %254 = load i8* %249, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB64_202)
begin
memory_controller_enable = 1'd1;
end
/* main: %248*/
/*   %260 = load i32* %4, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB64_205)
begin
memory_controller_enable = 1'd1;
end
/* main: %262*/
/*   %263 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_208)
begin
memory_controller_enable = 1'd1;
end
/* main: %262*/
/*   store i32 %264, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_210)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph5.i.i.i*/
/*   %267 = load i8* %ReadBuf.6, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph5.i.i.i*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB67_215)
begin
memory_controller_enable = 1'd1;
end
/* main: %273*/
/*   %274 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_218)
begin
memory_controller_enable = 1'd1;
end
/* main: %273*/
/*   store i32 %275, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_220)
begin
memory_controller_enable = 1'd1;
end
/* main: %287*/
/*   %290 = load i8* %288, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
memory_controller_enable = 1'd1;
end
/* main: %287*/
/*   store i32 %291, i32* %scevgep.i9.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB73_227)
begin
memory_controller_enable = 1'd1;
end
/* main: %293*/
/*   %296 = load i32* %295, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB74_229)
begin
memory_controller_enable = 1'd1;
end
/* main: %298*/
/*   %299 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_232)
begin
memory_controller_enable = 1'd1;
end
/* main: %298*/
/*   store i32 %300, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_234)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i10.i.i*/
/*   %306 = load i8* %304, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB77_236)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i10.i.i*/
/*   store i32 %307, i32* %scevgep8.i11.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB77_238)
begin
memory_controller_enable = 1'd1;
end
/* main: %312*/
/*   %314 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB79_240)
begin
memory_controller_enable = 1'd1;
end
/* main: %312*/
/*   %318 = load i8* %313, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB79_241)
begin
memory_controller_enable = 1'd1;
end
/* main: %312*/
/*   %324 = load i32* %5, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB79_244)
begin
memory_controller_enable = 1'd1;
end
/* main: %326*/
/*   %327 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_247)
begin
memory_controller_enable = 1'd1;
end
/* main: %326*/
/*   store i32 %328, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_249)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i15.i.i*/
/*   %332 = load i8* %330, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
memory_controller_enable = 1'd1;
end
/* main: %.lr.ph.i15.i.i*/
/*   %339 = load i32* %338, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB82_254)
begin
memory_controller_enable = 1'd1;
end
/* main: %341*/
/*   %342 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_257)
begin
memory_controller_enable = 1'd1;
end
/* main: %341*/
/*   store i32 %343, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_259)
begin
memory_controller_enable = 1'd1;
end
/* main: %344*/
/*   %346 = load i32* %345, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB84_260)
begin
memory_controller_enable = 1'd1;
end
/* main: %348*/
/*   %349 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_263)
begin
memory_controller_enable = 1'd1;
end
/* main: %348*/
/*   store i32 %350, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_265)
begin
memory_controller_enable = 1'd1;
end
/* main: %.split.us.i.i.i*/
/*   %356 = load i8* %354, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB87_267)
begin
memory_controller_enable = 1'd1;
end
/* main: %.split.us.i.i.i*/
/*   %358 = load i32* %scevgep.i16.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_268)
begin
memory_controller_enable = 1'd1;
end
/* main: %.split.us.i.i.i*/
/*   store i32 %357, i32* %359, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_270)
begin
memory_controller_enable = 1'd1;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %363 = load i8* %361, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
memory_controller_enable = 1'd1;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %367 = load i8* %362, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB88_272)
begin
memory_controller_enable = 1'd1;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %370 = load i32* %scevgep4.i18.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_273)
begin
memory_controller_enable = 1'd1;
end
/* main: %..split_crit_edge.i.i.i*/
/*   store i32 %369, i32* %371, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_275)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %374 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %379 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_278)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %383, i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_328)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %385, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_332)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %386, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_336)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %387, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_340)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %388, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_344)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !4*/
if (cur_state == LEGUP_F_main_BB90_345)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_346)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.1.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_347)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.2.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_348)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_349)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_350)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_351)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_352)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_353)
begin
memory_controller_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_354)
begin
memory_controller_enable = 1'd1;
end
/* main: %392*/
/*   %393 = load i32* %scevgep.i.i3.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
memory_controller_enable = 1'd1;
end
/* main: %392*/
/*   %394 = load i32* %scevgep2.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_367)
begin
memory_controller_enable = 1'd1;
end
/* main: %392*/
/*   %396 = load i32* %scevgep3.i.i2.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_368)
begin
memory_controller_enable = 1'd1;
end
/* main: %425*/
/*   store i32 %r.0.i.i.i, i32* %scevgep4.i.i6.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
memory_controller_enable = 1'd1;
end
/* main: %425*/
/*   store i32 %g.0.i.i.i, i32* %scevgep5.i.i5.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_381)
begin
memory_controller_enable = 1'd1;
end
/* main: %425*/
/*   store i32 %b.0.i.i.i, i32* %scevgep6.i.i4.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_382)
begin
memory_controller_enable = 1'd1;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %427 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB104_383)
begin
memory_controller_enable = 1'd1;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %429 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB104_384)
begin
memory_controller_enable = 1'd1;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_385)
begin
memory_controller_enable = 1'd1;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %431 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_386)
begin
memory_controller_enable = 1'd1;
end
/* main: %432*/
/*   %434 = load i32* %scevgep139.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
memory_controller_enable = 1'd1;
end
/* main: %440*/
/*   %441 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB108_396)
begin
memory_controller_enable = 1'd1;
end
/* main: %440*/
/*   store i8 %442, i8* %scevgep24.i.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB108_398)
begin
memory_controller_enable = 1'd1;
end
/* main: %WriteOneBlock.exit.i.i.i*/
/*   %443 = load i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB110_400)
begin
memory_controller_enable = 1'd1;
end
/* main: %445*/
/*   store i32 0, i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB111_403)
begin
memory_controller_enable = 1'd1;
end
/* main: %454*/
/*   %455 = load i32* %scevgep.i3.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
memory_controller_enable = 1'd1;
end
/* main: %454*/
/*   %456 = load i32* %scevgep2.i4.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_428)
begin
memory_controller_enable = 1'd1;
end
/* main: %454*/
/*   %458 = load i32* %scevgep3.i5.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_429)
begin
memory_controller_enable = 1'd1;
end
/* main: %487*/
/*   store i32 %r.0.i9.i.i, i32* %scevgep4.i6.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
memory_controller_enable = 1'd1;
end
/* main: %487*/
/*   store i32 %g.0.i10.i.i, i32* %scevgep5.i7.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_442)
begin
memory_controller_enable = 1'd1;
end
/* main: %487*/
/*   store i32 %b.0.i11.i.i, i32* %scevgep6.i8.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_443)
begin
memory_controller_enable = 1'd1;
end
/* main: %decode_start.exit.i*/
/*   %main_result.promoted3.i = load i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB130_454)
begin
memory_controller_enable = 1'd1;
end
/* main: %491*/
/*   %493 = load i8* %scevgep.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
memory_controller_enable = 1'd1;
end
/* main: %491*/
/*   %494 = load i8* %scevgep7.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_458)
begin
memory_controller_enable = 1'd1;
end
/* main: %.preheader.1.i*/
/*   %500 = load i8* %scevgep.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
memory_controller_enable = 1'd1;
end
/* main: %.preheader.1.i*/
/*   %501 = load i8* %scevgep7.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_462)
begin
memory_controller_enable = 1'd1;
end
/* main: %jpeg2bmp_main.exit*/
/*   store i32 %.storemerge, i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB133_465)
begin
memory_controller_enable = 1'd1;
end
/* main: %jpeg2bmp_main.exit*/
/*   %511 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB133_466)
begin
memory_controller_enable = 1'd1;
end
/* main: %.preheader.2.i*/
/*   %514 = load i8* %scevgep.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
memory_controller_enable = 1'd1;
end
/* main: %.preheader.2.i*/
/*   %515 = load i8* %scevgep7.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_470)
begin
memory_controller_enable = 1'd1;
end
/* main: %524*/
/*   %525 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB137_475)
begin
memory_controller_enable = 1'd1;
end
end
always @(*) begin
memory_controller_write_enable = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
memory_controller_write_enable = huff_make_dhuff_tb_memory_controller_write_enable;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
memory_controller_write_enable = huff_make_dhuff_tb_memory_controller_write_enable;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
memory_controller_write_enable = huff_make_dhuff_tb_memory_controller_write_enable;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
memory_controller_write_enable = huff_make_dhuff_tb_memory_controller_write_enable;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
memory_controller_write_enable = decode_block_memory_controller_write_enable;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
memory_controller_write_enable = Write4Blocks_memory_controller_write_enable;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
memory_controller_write_enable = Write4Blocks_memory_controller_write_enable;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
memory_controller_write_enable = Write4Blocks_memory_controller_write_enable;
end
/* main: %0*/
/*   store i32 0, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB0_1)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %1*/
/*   %2 = load i8* %scevgep13.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_2)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %1*/
/*   store i8 %2, i8* %c.06.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_4)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %6*/
/*   %8 = load i8* %ReadBuf.1, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_10)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %6*/
/*   %9 = load i8* %7, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_11)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %first_marker.exit.i.i*/
/*   %16 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_15)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %first_marker.exit.i.i*/
/*   store i32 %17, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_17)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.loopexit3.i.i.i*/
/*   %c.0.in2.i.i.i = load i8* %18, align 1*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i.i.i*/
/*   %c.0.in.i.i.i = load i8* %scevgep.i.i, align 1*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.loopexit.i.i.i*/
/*   %21 = load i8* %scevgep11.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB15_27)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %next_marker.exit.i.i*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB17_32)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %28*/
/*   %29 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_35)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %28*/
/*   store i32 %30, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_37)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %32*/
/*   %34 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_40)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   %43 = load i8* %37, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_41)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   %45 = load i8* %42, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_42)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   %49 = load i8* %44, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_43)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_45)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %32*/
/*   %53 = load i8* %48, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_46)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   %57 = load i8* %52, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_47)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_49)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %32*/
/*   %61 = load i8* %56, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_50)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   %65 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_52)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %32*/
/*   %68 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_55)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %74*/
/*   %75 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_58)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %74*/
/*   store i32 %76, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_60)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %79*/
/*   %80 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_62)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %79*/
/*   store i32 %81, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_64)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %82*/
/*   %83 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB24_65)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %85*/
/*   %86 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_68)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %85*/
/*   store i32 %87, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_70)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %88*/
/*   %89 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB26_71)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %91*/
/*   %92 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_74)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %91*/
/*   store i32 %93, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_76)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.preheader.i.i.i.thread*/
/*   %96 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_78)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.preheader.i.i.i.thread*/
/*   store i32 %97, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_80)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %tmp.i.i.i, i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %100 = load i8* %ReadBuf.3, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_83)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %100, i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_85)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %102 = load i8* %99, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_86)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %103, i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_88)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %104, i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_89)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %106 = load i8* %101, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_90)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %106, i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_92)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph.i1.i.i*/
/*   %109 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_93)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %112 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_96)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %115 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_99)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %118 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_102)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %121 = load i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_105)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %123 = load i32* %scevgep7.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB31_106)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %125*/
/*   %126 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_109)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %125*/
/*   store i32 %127, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_111)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %128*/
/*   %129 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB33_112)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %128*/
/*   %131 = load i32* %scevgep8.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB33_113)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %133*/
/*   %134 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_116)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %133*/
/*   store i32 %135, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_118)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %136*/
/*   %137 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB35_119)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %136*/
/*   %139 = load i32* %scevgep9.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB35_120)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %141*/
/*   %142 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_123)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %141*/
/*   store i32 %143, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_125)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %144*/
/*   %145 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB37_126)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %148*/
/*   %149 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_129)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %148*/
/*   store i32 %150, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_131)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %151*/
/*   %152 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB39_132)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %151*/
/*   %154 = load i32* %scevgep11.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB39_133)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %156*/
/*   %157 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_136)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %156*/
/*   store i32 %158, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_138)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %._crit_edge.i.i.i*/
/*   %161 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %167*/
/*   %169 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_145)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %167*/
/*   %173 = load i8* %168, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_146)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %167*/
/*   %178 = load i8* %172, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_147)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %183*/
/*   %184 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_150)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %183*/
/*   store i32 %185, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_152)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %188*/
/*   %189 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_154)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %188*/
/*   store i32 %190, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_156)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %194*/
/*   %196 = load i8* %ReadBuf.5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_159)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %194*/
/*   %199 = load i8* %195, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_160)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %203*/
/*   %204 = load i8* %scevgep9.i4.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB53_164)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %211*/
/*   %212 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %211*/
/*   store i32 %213, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_171)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %211*/
/*   store i8 %214, i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_172)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %211*/
/*   store i8 %215, i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_173)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %211*/
/*   %217 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_174)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %211*/
/*   %220 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_177)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %211*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_180)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %226*/
/*   %227 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_183)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %226*/
/*   store i32 %228, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_185)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %229*/
/*   %230 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB58_186)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %229*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB58_187)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %235*/
/*   %236 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_190)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %235*/
/*   store i32 %237, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_192)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %238*/
/*   %239 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB60_193)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %242*/
/*   %243 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_196)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %242*/
/*   store i32 %244, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_198)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %248*/
/*   %250 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB64_201)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %248*/
/*   %254 = load i8* %249, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB64_202)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %248*/
/*   %260 = load i32* %4, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB64_205)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %262*/
/*   %263 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_208)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %262*/
/*   store i32 %264, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_210)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph5.i.i.i*/
/*   %267 = load i8* %ReadBuf.6, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph5.i.i.i*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB67_215)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %273*/
/*   %274 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_218)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %273*/
/*   store i32 %275, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_220)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %287*/
/*   %290 = load i8* %288, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %287*/
/*   store i32 %291, i32* %scevgep.i9.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB73_227)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %293*/
/*   %296 = load i32* %295, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB74_229)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %298*/
/*   %299 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_232)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %298*/
/*   store i32 %300, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_234)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph.i10.i.i*/
/*   %306 = load i8* %304, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB77_236)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i10.i.i*/
/*   store i32 %307, i32* %scevgep8.i11.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB77_238)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %312*/
/*   %314 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB79_240)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %312*/
/*   %318 = load i8* %313, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB79_241)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %312*/
/*   %324 = load i32* %5, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB79_244)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %326*/
/*   %327 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_247)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %326*/
/*   store i32 %328, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_249)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.lr.ph.i15.i.i*/
/*   %332 = load i8* %330, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.lr.ph.i15.i.i*/
/*   %339 = load i32* %338, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB82_254)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %341*/
/*   %342 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_257)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %341*/
/*   store i32 %343, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_259)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %344*/
/*   %346 = load i32* %345, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB84_260)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %348*/
/*   %349 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_263)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %348*/
/*   store i32 %350, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_265)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %.split.us.i.i.i*/
/*   %356 = load i8* %354, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB87_267)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.split.us.i.i.i*/
/*   %358 = load i32* %scevgep.i16.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_268)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.split.us.i.i.i*/
/*   store i32 %357, i32* %359, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_270)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %363 = load i8* %361, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %367 = load i8* %362, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB88_272)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %370 = load i32* %scevgep4.i18.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_273)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %..split_crit_edge.i.i.i*/
/*   store i32 %369, i32* %371, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_275)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   %374 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %read_markers.exit.i*/
/*   %379 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_278)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 %383, i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_328)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %385, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_332)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %386, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_336)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %387, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_340)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %388, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_344)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !4*/
if (cur_state == LEGUP_F_main_BB90_345)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_346)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.1.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_347)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.2.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_348)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_349)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_350)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_351)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_352)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_353)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_354)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %392*/
/*   %393 = load i32* %scevgep.i.i3.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %392*/
/*   %394 = load i32* %scevgep2.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_367)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %392*/
/*   %396 = load i32* %scevgep3.i.i2.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_368)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %425*/
/*   store i32 %r.0.i.i.i, i32* %scevgep4.i.i6.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %425*/
/*   store i32 %g.0.i.i.i, i32* %scevgep5.i.i5.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_381)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %425*/
/*   store i32 %b.0.i.i.i, i32* %scevgep6.i.i4.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_382)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %427 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB104_383)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %429 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB104_384)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_385)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %431 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_386)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %432*/
/*   %434 = load i32* %scevgep139.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %440*/
/*   %441 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB108_396)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %440*/
/*   store i8 %442, i8* %scevgep24.i.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB108_398)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %WriteOneBlock.exit.i.i.i*/
/*   %443 = load i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB110_400)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %445*/
/*   store i32 0, i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB111_403)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %454*/
/*   %455 = load i32* %scevgep.i3.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %454*/
/*   %456 = load i32* %scevgep2.i4.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_428)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %454*/
/*   %458 = load i32* %scevgep3.i5.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_429)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %487*/
/*   store i32 %r.0.i9.i.i, i32* %scevgep4.i6.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %487*/
/*   store i32 %g.0.i10.i.i, i32* %scevgep5.i7.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_442)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %487*/
/*   store i32 %b.0.i11.i.i, i32* %scevgep6.i8.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_443)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %decode_start.exit.i*/
/*   %main_result.promoted3.i = load i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB130_454)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %491*/
/*   %493 = load i8* %scevgep.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %491*/
/*   %494 = load i8* %scevgep7.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_458)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.preheader.1.i*/
/*   %500 = load i8* %scevgep.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.preheader.1.i*/
/*   %501 = load i8* %scevgep7.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_462)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %jpeg2bmp_main.exit*/
/*   store i32 %.storemerge, i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB133_465)
begin
memory_controller_write_enable = 1'd1;
end
/* main: %jpeg2bmp_main.exit*/
/*   %511 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB133_466)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.preheader.2.i*/
/*   %514 = load i8* %scevgep.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %.preheader.2.i*/
/*   %515 = load i8* %scevgep7.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_470)
begin
memory_controller_write_enable = 1'd0;
end
/* main: %524*/
/*   %525 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB137_475)
begin
memory_controller_write_enable = 1'd0;
end
end
always @(*) begin
memory_controller_in = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_in = 64'd0;
end
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
memory_controller_in = huff_make_dhuff_tb_memory_controller_in;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
memory_controller_in = huff_make_dhuff_tb_memory_controller_in;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
memory_controller_in = huff_make_dhuff_tb_memory_controller_in;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
memory_controller_in = huff_make_dhuff_tb_memory_controller_in;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
memory_controller_in = decode_block_memory_controller_in;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
memory_controller_in = Write4Blocks_memory_controller_in;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
memory_controller_in = Write4Blocks_memory_controller_in;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
memory_controller_in = Write4Blocks_memory_controller_in;
end
/* main: %0*/
/*   store i32 0, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB0_1)
begin
memory_controller_in = 32'd0;
end
/* main: %1*/
/*   store i8 %2, i8* %c.06.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_4)
begin
memory_controller_in = main_1_2;
end
/* main: %first_marker.exit.i.i*/
/*   store i32 %17, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_17)
begin
memory_controller_in = main_first_marker_exit_i_i_17;
end
/* main: %28*/
/*   store i32 %30, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_37)
begin
memory_controller_in = main_28_30;
end
/* main: %32*/
/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_45)
begin
memory_controller_in = main_32_51;
end
/* main: %32*/
/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_49)
begin
memory_controller_in = main_32_59;
end
/* main: %74*/
/*   store i32 %76, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_60)
begin
memory_controller_in = main_74_76;
end
/* main: %79*/
/*   store i32 %81, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_64)
begin
memory_controller_in = main_79_81;
end
/* main: %85*/
/*   store i32 %87, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_70)
begin
memory_controller_in = main_85_87;
end
/* main: %91*/
/*   store i32 %93, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_76)
begin
memory_controller_in = main_91_93;
end
/* main: %.preheader.i.i.i.thread*/
/*   store i32 %97, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_80)
begin
memory_controller_in = main__preheader_i_i_i_thread_97;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %tmp.i.i.i, i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
memory_controller_in = main__lr_ph_i1_i_i_tmp_i_i_i;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %100, i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_85)
begin
memory_controller_in = main__lr_ph_i1_i_i_100;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %103, i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_88)
begin
memory_controller_in = main__lr_ph_i1_i_i_103;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %104, i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_89)
begin
memory_controller_in = main__lr_ph_i1_i_i_104_reg;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %106, i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_92)
begin
memory_controller_in = main__lr_ph_i1_i_i_106;
end
/* main: %125*/
/*   store i32 %127, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_111)
begin
memory_controller_in = main_125_127;
end
/* main: %133*/
/*   store i32 %135, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_118)
begin
memory_controller_in = main_133_135;
end
/* main: %141*/
/*   store i32 %143, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_125)
begin
memory_controller_in = main_141_143;
end
/* main: %148*/
/*   store i32 %150, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_131)
begin
memory_controller_in = main_148_150;
end
/* main: %156*/
/*   store i32 %158, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_138)
begin
memory_controller_in = main_156_158;
end
/* main: %183*/
/*   store i32 %185, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_152)
begin
memory_controller_in = main_183_185;
end
/* main: %188*/
/*   store i32 %190, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_156)
begin
memory_controller_in = main_188_190;
end
/* main: %211*/
/*   store i32 %213, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_171)
begin
memory_controller_in = main_211_213;
end
/* main: %211*/
/*   store i8 %214, i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_172)
begin
memory_controller_in = main_211_214_reg;
end
/* main: %211*/
/*   store i8 %215, i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_173)
begin
memory_controller_in = main_211_215_reg;
end
/* main: %226*/
/*   store i32 %228, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_185)
begin
memory_controller_in = main_226_228;
end
/* main: %235*/
/*   store i32 %237, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_192)
begin
memory_controller_in = main_235_237;
end
/* main: %242*/
/*   store i32 %244, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_198)
begin
memory_controller_in = main_242_244;
end
/* main: %262*/
/*   store i32 %264, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_210)
begin
memory_controller_in = main_262_264;
end
/* main: %273*/
/*   store i32 %275, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_220)
begin
memory_controller_in = main_273_275;
end
/* main: %287*/
/*   store i32 %291, i32* %scevgep.i9.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB73_227)
begin
memory_controller_in = main_287_291;
end
/* main: %298*/
/*   store i32 %300, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_234)
begin
memory_controller_in = main_298_300;
end
/* main: %.lr.ph.i10.i.i*/
/*   store i32 %307, i32* %scevgep8.i11.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB77_238)
begin
memory_controller_in = main__lr_ph_i10_i_i_307;
end
/* main: %326*/
/*   store i32 %328, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_249)
begin
memory_controller_in = main_326_328;
end
/* main: %341*/
/*   store i32 %343, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_259)
begin
memory_controller_in = main_341_343;
end
/* main: %348*/
/*   store i32 %350, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_265)
begin
memory_controller_in = main_348_350;
end
/* main: %.split.us.i.i.i*/
/*   store i32 %357, i32* %359, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_270)
begin
memory_controller_in = main__split_us_i_i_i_357_reg;
end
/* main: %..split_crit_edge.i.i.i*/
/*   store i32 %369, i32* %371, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_275)
begin
memory_controller_in = main___split_crit_edge_i_i_i_369_reg;
end
/* main: %read_markers.exit.i*/
/*   store i32 %383, i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_328)
begin
memory_controller_in = main_read_markers_exit_i_383;
end
/* main: %read_markers.exit.i*/
/*   store i32 %385, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_332)
begin
memory_controller_in = main_read_markers_exit_i_385_reg;
end
/* main: %read_markers.exit.i*/
/*   store i32 %386, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_336)
begin
memory_controller_in = main_read_markers_exit_i_386_reg;
end
/* main: %read_markers.exit.i*/
/*   store i32 %387, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_340)
begin
memory_controller_in = main_read_markers_exit_i_387_reg;
end
/* main: %read_markers.exit.i*/
/*   store i32 %388, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_344)
begin
memory_controller_in = main_read_markers_exit_i_388_reg;
end
/* main: %read_markers.exit.i*/
/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !4*/
if (cur_state == LEGUP_F_main_BB90_345)
begin
memory_controller_in = main_read_markers_exit_i_p_jinfo_jpeg_data_0_reg;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_346)
begin
memory_controller_in = 32'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.1.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_347)
begin
memory_controller_in = 32'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.2.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_348)
begin
memory_controller_in = 32'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_349)
begin
memory_controller_in = 32'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_350)
begin
memory_controller_in = 32'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_351)
begin
memory_controller_in = 32'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_352)
begin
memory_controller_in = 32'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_353)
begin
memory_controller_in = 32'd0;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_354)
begin
memory_controller_in = 32'd0;
end
/* main: %425*/
/*   store i32 %r.0.i.i.i, i32* %scevgep4.i.i6.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
memory_controller_in = main_415_r_0_i_i_i_reg;
end
/* main: %425*/
/*   store i32 %g.0.i.i.i, i32* %scevgep5.i.i5.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_381)
begin
memory_controller_in = main_420_g_0_i_i_i_reg;
end
/* main: %425*/
/*   store i32 %b.0.i.i.i, i32* %scevgep6.i.i4.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_382)
begin
memory_controller_in = main_425_b_0_i_i_i_reg;
end
/* main: %440*/
/*   store i8 %442, i8* %scevgep24.i.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB108_398)
begin
memory_controller_in = main_440_442;
end
/* main: %445*/
/*   store i32 0, i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB111_403)
begin
memory_controller_in = 32'd0;
end
/* main: %487*/
/*   store i32 %r.0.i9.i.i, i32* %scevgep4.i6.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
memory_controller_in = main_477_r_0_i9_i_i_reg;
end
/* main: %487*/
/*   store i32 %g.0.i10.i.i, i32* %scevgep5.i7.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_442)
begin
memory_controller_in = main_482_g_0_i10_i_i_reg;
end
/* main: %487*/
/*   store i32 %b.0.i11.i.i, i32* %scevgep6.i8.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_443)
begin
memory_controller_in = main_487_b_0_i11_i_i_reg;
end
/* main: %jpeg2bmp_main.exit*/
/*   store i32 %.storemerge, i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB133_465)
begin
memory_controller_in = main_jpeg2bmp_main_exit__storemerge;
end
end
always @(*) begin
memory_controller_size = 1'd0;
if (cur_state == LEGUP_0)
begin
memory_controller_size = 2'd0;
end
/* main: %read_markers.exit.i*/
/*   %385 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_330)
begin
memory_controller_size = huff_make_dhuff_tb_memory_controller_size;
end
/* main: %read_markers.exit.i*/
/*   %386 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_334)
begin
memory_controller_size = huff_make_dhuff_tb_memory_controller_size;
end
/* main: %read_markers.exit.i*/
/*   %387 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_338)
begin
memory_controller_size = huff_make_dhuff_tb_memory_controller_size;
end
/* main: %read_markers.exit.i*/
/*   %388 = tail call fastcc i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_342)
begin
memory_controller_size = huff_make_dhuff_tb_memory_controller_size;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep51.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_358)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %scevgep51.1.i.i, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_361)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.preheader21.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %scevgep51.2.i.i, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_364)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.i8.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_409)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.1.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_412)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.2.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_415)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 0, i32* %scevgep.3.i.i, i32* %scevgep148.i.i) nounwind*/
if (cur_state == LEGUP_function_call_418)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 1, i32* %452, i32* %scevgep148.1.i.i) nounwind*/
if (cur_state == LEGUP_function_call_421)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.preheader.i.i*/
/*   call fastcc void @decode_block(i32 2, i32* %453, i32* %scevgep148.2.i.i) nounwind*/
if (cur_state == LEGUP_function_call_424)
begin
memory_controller_size = decode_block_memory_controller_size;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 0, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 0, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_446)
begin
memory_controller_size = Write4Blocks_memory_controller_size;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 1, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 1, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 1, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_449)
begin
memory_controller_size = Write4Blocks_memory_controller_size;
end
/* main: %.loopexit.i.i*/
/*   call fastcc void @Write4Blocks(i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 0, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 1, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 2, i32 2, i32 0), i32* getelementptr inbounds ([4 x [3 x [64 x i32]]]* @rgb_buf, i32 0, i32 3, i32 2, i32 0), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), i8* getelementptr inbounds ([3 x [5310 x i8]]* @OutData_comp_buf, i32 0, i32 2, i32 0)) nounwind*/
if (cur_state == LEGUP_function_call_452)
begin
memory_controller_size = Write4Blocks_memory_controller_size;
end
/* main: %0*/
/*   store i32 0, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB0_1)
begin
memory_controller_size = 2'd2;
end
/* main: %1*/
/*   %2 = load i8* %scevgep13.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_2)
begin
memory_controller_size = 2'd0;
end
/* main: %1*/
/*   store i8 %2, i8* %c.06.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB1_4)
begin
memory_controller_size = 2'd0;
end
/* main: %6*/
/*   %8 = load i8* %ReadBuf.1, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_10)
begin
memory_controller_size = 2'd0;
end
/* main: %6*/
/*   %9 = load i8* %7, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB7_11)
begin
memory_controller_size = 2'd0;
end
/* main: %first_marker.exit.i.i*/
/*   %16 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_15)
begin
memory_controller_size = 2'd2;
end
/* main: %first_marker.exit.i.i*/
/*   store i32 %17, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB9_17)
begin
memory_controller_size = 2'd2;
end
/* main: %.loopexit3.i.i.i*/
/*   %c.0.in2.i.i.i = load i8* %18, align 1*/
if (cur_state == LEGUP_F_main_BB11_19)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i.i.i*/
/*   %c.0.in.i.i.i = load i8* %scevgep.i.i, align 1*/
if (cur_state == LEGUP_F_main_BB12_22)
begin
memory_controller_size = 2'd0;
end
/* main: %.loopexit.i.i.i*/
/*   %21 = load i8* %scevgep11.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB15_27)
begin
memory_controller_size = 2'd0;
end
/* main: %next_marker.exit.i.i*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB17_32)
begin
memory_controller_size = 2'd2;
end
/* main: %28*/
/*   %29 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_35)
begin
memory_controller_size = 2'd2;
end
/* main: %28*/
/*   store i32 %30, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB18_37)
begin
memory_controller_size = 2'd2;
end
/* main: %32*/
/*   %34 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_39)
begin
memory_controller_size = 2'd0;
end
/* main: %32*/
/*   %38 = load i8* %33, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_40)
begin
memory_controller_size = 2'd0;
end
/* main: %32*/
/*   %43 = load i8* %37, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_41)
begin
memory_controller_size = 2'd0;
end
/* main: %32*/
/*   %45 = load i8* %42, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_42)
begin
memory_controller_size = 2'd0;
end
/* main: %32*/
/*   %49 = load i8* %44, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_43)
begin
memory_controller_size = 2'd0;
end
/* main: %32*/
/*   store i16 %51, i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_45)
begin
memory_controller_size = 2'd1;
end
/* main: %32*/
/*   %53 = load i8* %48, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_46)
begin
memory_controller_size = 2'd0;
end
/* main: %32*/
/*   %57 = load i8* %52, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_47)
begin
memory_controller_size = 2'd0;
end
/* main: %32*/
/*   store i16 %59, i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_49)
begin
memory_controller_size = 2'd1;
end
/* main: %32*/
/*   %61 = load i8* %56, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB20_50)
begin
memory_controller_size = 2'd0;
end
/* main: %32*/
/*   %65 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_52)
begin
memory_controller_size = 2'd1;
end
/* main: %32*/
/*   %68 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB20_55)
begin
memory_controller_size = 2'd1;
end
/* main: %74*/
/*   %75 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_58)
begin
memory_controller_size = 2'd2;
end
/* main: %74*/
/*   store i32 %76, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB21_60)
begin
memory_controller_size = 2'd2;
end
/* main: %79*/
/*   %80 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_62)
begin
memory_controller_size = 2'd2;
end
/* main: %79*/
/*   store i32 %81, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB23_64)
begin
memory_controller_size = 2'd2;
end
/* main: %82*/
/*   %83 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB24_65)
begin
memory_controller_size = 2'd1;
end
/* main: %85*/
/*   %86 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_68)
begin
memory_controller_size = 2'd2;
end
/* main: %85*/
/*   store i32 %87, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB25_70)
begin
memory_controller_size = 2'd2;
end
/* main: %88*/
/*   %89 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB26_71)
begin
memory_controller_size = 2'd1;
end
/* main: %91*/
/*   %92 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_74)
begin
memory_controller_size = 2'd2;
end
/* main: %91*/
/*   store i32 %93, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB27_76)
begin
memory_controller_size = 2'd2;
end
/* main: %.preheader.i.i.i.thread*/
/*   %96 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_78)
begin
memory_controller_size = 2'd2;
end
/* main: %.preheader.i.i.i.thread*/
/*   store i32 %97, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB29_80)
begin
memory_controller_size = 2'd2;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %tmp.i.i.i, i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_82)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %100 = load i8* %ReadBuf.3, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_83)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %100, i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_85)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %102 = load i8* %99, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_86)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %103, i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_88)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %104, i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_89)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %106 = load i8* %101, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_90)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   store i8 %106, i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_92)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %109 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_93)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %112 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_96)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %115 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_99)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %118 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_102)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %121 = load i8* %scevgep.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB31_105)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i1.i.i*/
/*   %123 = load i32* %scevgep7.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB31_106)
begin
memory_controller_size = 2'd2;
end
/* main: %125*/
/*   %126 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_109)
begin
memory_controller_size = 2'd2;
end
/* main: %125*/
/*   store i32 %127, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB32_111)
begin
memory_controller_size = 2'd2;
end
/* main: %128*/
/*   %129 = load i8* %scevgep3.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB33_112)
begin
memory_controller_size = 2'd0;
end
/* main: %128*/
/*   %131 = load i32* %scevgep8.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB33_113)
begin
memory_controller_size = 2'd2;
end
/* main: %133*/
/*   %134 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_116)
begin
memory_controller_size = 2'd2;
end
/* main: %133*/
/*   store i32 %135, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB34_118)
begin
memory_controller_size = 2'd2;
end
/* main: %136*/
/*   %137 = load i8* %scevgep4.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB35_119)
begin
memory_controller_size = 2'd0;
end
/* main: %136*/
/*   %139 = load i32* %scevgep9.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB35_120)
begin
memory_controller_size = 2'd2;
end
/* main: %141*/
/*   %142 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_123)
begin
memory_controller_size = 2'd2;
end
/* main: %141*/
/*   store i32 %143, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB36_125)
begin
memory_controller_size = 2'd2;
end
/* main: %144*/
/*   %145 = load i8* %scevgep5.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB37_126)
begin
memory_controller_size = 2'd0;
end
/* main: %148*/
/*   %149 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_129)
begin
memory_controller_size = 2'd2;
end
/* main: %148*/
/*   store i32 %150, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB38_131)
begin
memory_controller_size = 2'd2;
end
/* main: %151*/
/*   %152 = load i8* %scevgep6.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB39_132)
begin
memory_controller_size = 2'd0;
end
/* main: %151*/
/*   %154 = load i32* %scevgep11.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB39_133)
begin
memory_controller_size = 2'd2;
end
/* main: %156*/
/*   %157 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_136)
begin
memory_controller_size = 2'd2;
end
/* main: %156*/
/*   store i32 %158, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB40_138)
begin
memory_controller_size = 2'd2;
end
/* main: %._crit_edge.i.i.i*/
/*   %161 = load i8* getelementptr inbounds ([3 x i8]* @p_jinfo_comps_info_h_samp_factor, i32 0, i32 0), align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB42_140)
begin
memory_controller_size = 2'd0;
end
/* main: %167*/
/*   %169 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_145)
begin
memory_controller_size = 2'd0;
end
/* main: %167*/
/*   %173 = load i8* %168, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_146)
begin
memory_controller_size = 2'd0;
end
/* main: %167*/
/*   %178 = load i8* %172, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB45_147)
begin
memory_controller_size = 2'd0;
end
/* main: %183*/
/*   %184 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_150)
begin
memory_controller_size = 2'd2;
end
/* main: %183*/
/*   store i32 %185, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB46_152)
begin
memory_controller_size = 2'd2;
end
/* main: %188*/
/*   %189 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_154)
begin
memory_controller_size = 2'd2;
end
/* main: %188*/
/*   store i32 %190, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB48_156)
begin
memory_controller_size = 2'd2;
end
/* main: %194*/
/*   %196 = load i8* %ReadBuf.5, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_159)
begin
memory_controller_size = 2'd0;
end
/* main: %194*/
/*   %199 = load i8* %195, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB51_160)
begin
memory_controller_size = 2'd0;
end
/* main: %203*/
/*   %204 = load i8* %scevgep9.i4.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB53_164)
begin
memory_controller_size = 2'd0;
end
/* main: %211*/
/*   %212 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_169)
begin
memory_controller_size = 2'd2;
end
/* main: %211*/
/*   store i32 %213, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_171)
begin
memory_controller_size = 2'd2;
end
/* main: %211*/
/*   store i8 %214, i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_172)
begin
memory_controller_size = 2'd0;
end
/* main: %211*/
/*   store i8 %215, i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_173)
begin
memory_controller_size = 2'd0;
end
/* main: %211*/
/*   %217 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_174)
begin
memory_controller_size = 2'd0;
end
/* main: %211*/
/*   %220 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB56_177)
begin
memory_controller_size = 2'd0;
end
/* main: %211*/
/*   %224 = load i32* %223, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB56_180)
begin
memory_controller_size = 2'd2;
end
/* main: %226*/
/*   %227 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_183)
begin
memory_controller_size = 2'd2;
end
/* main: %226*/
/*   store i32 %228, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB57_185)
begin
memory_controller_size = 2'd2;
end
/* main: %229*/
/*   %230 = load i8* %scevgep8.i5.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB58_186)
begin
memory_controller_size = 2'd0;
end
/* main: %229*/
/*   %233 = load i32* %232, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB58_187)
begin
memory_controller_size = 2'd2;
end
/* main: %235*/
/*   %236 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_190)
begin
memory_controller_size = 2'd2;
end
/* main: %235*/
/*   store i32 %237, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB59_192)
begin
memory_controller_size = 2'd2;
end
/* main: %238*/
/*   %239 = load i8* %scevgep7.i6.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB60_193)
begin
memory_controller_size = 2'd0;
end
/* main: %242*/
/*   %243 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_196)
begin
memory_controller_size = 2'd2;
end
/* main: %242*/
/*   store i32 %244, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB61_198)
begin
memory_controller_size = 2'd2;
end
/* main: %248*/
/*   %250 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB64_201)
begin
memory_controller_size = 2'd0;
end
/* main: %248*/
/*   %254 = load i8* %249, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB64_202)
begin
memory_controller_size = 2'd0;
end
/* main: %248*/
/*   %260 = load i32* %4, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB64_205)
begin
memory_controller_size = 2'd2;
end
/* main: %262*/
/*   %263 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_208)
begin
memory_controller_size = 2'd2;
end
/* main: %262*/
/*   store i32 %264, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB65_210)
begin
memory_controller_size = 2'd2;
end
/* main: %.lr.ph5.i.i.i*/
/*   %267 = load i8* %ReadBuf.6, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB67_212)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph5.i.i.i*/
/*   %271 = load i32* %270, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB67_215)
begin
memory_controller_size = 2'd2;
end
/* main: %273*/
/*   %274 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_218)
begin
memory_controller_size = 2'd2;
end
/* main: %273*/
/*   store i32 %275, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB68_220)
begin
memory_controller_size = 2'd2;
end
/* main: %287*/
/*   %290 = load i8* %288, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB73_225)
begin
memory_controller_size = 2'd0;
end
/* main: %287*/
/*   store i32 %291, i32* %scevgep.i9.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB73_227)
begin
memory_controller_size = 2'd2;
end
/* main: %293*/
/*   %296 = load i32* %295, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB74_229)
begin
memory_controller_size = 2'd2;
end
/* main: %298*/
/*   %299 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_232)
begin
memory_controller_size = 2'd2;
end
/* main: %298*/
/*   store i32 %300, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB75_234)
begin
memory_controller_size = 2'd2;
end
/* main: %.lr.ph.i10.i.i*/
/*   %306 = load i8* %304, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB77_236)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i10.i.i*/
/*   store i32 %307, i32* %scevgep8.i11.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB77_238)
begin
memory_controller_size = 2'd2;
end
/* main: %312*/
/*   %314 = load i8* %ReadBuf.2, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB79_240)
begin
memory_controller_size = 2'd0;
end
/* main: %312*/
/*   %318 = load i8* %313, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB79_241)
begin
memory_controller_size = 2'd0;
end
/* main: %312*/
/*   %324 = load i32* %5, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB79_244)
begin
memory_controller_size = 2'd2;
end
/* main: %326*/
/*   %327 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_247)
begin
memory_controller_size = 2'd2;
end
/* main: %326*/
/*   store i32 %328, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB80_249)
begin
memory_controller_size = 2'd2;
end
/* main: %.lr.ph.i15.i.i*/
/*   %332 = load i8* %330, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB82_251)
begin
memory_controller_size = 2'd0;
end
/* main: %.lr.ph.i15.i.i*/
/*   %339 = load i32* %338, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB82_254)
begin
memory_controller_size = 2'd2;
end
/* main: %341*/
/*   %342 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_257)
begin
memory_controller_size = 2'd2;
end
/* main: %341*/
/*   store i32 %343, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB83_259)
begin
memory_controller_size = 2'd2;
end
/* main: %344*/
/*   %346 = load i32* %345, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB84_260)
begin
memory_controller_size = 2'd2;
end
/* main: %348*/
/*   %349 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_263)
begin
memory_controller_size = 2'd2;
end
/* main: %348*/
/*   store i32 %350, i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB85_265)
begin
memory_controller_size = 2'd2;
end
/* main: %.split.us.i.i.i*/
/*   %356 = load i8* %354, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB87_267)
begin
memory_controller_size = 2'd0;
end
/* main: %.split.us.i.i.i*/
/*   %358 = load i32* %scevgep.i16.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_268)
begin
memory_controller_size = 2'd2;
end
/* main: %.split.us.i.i.i*/
/*   store i32 %357, i32* %359, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB87_270)
begin
memory_controller_size = 2'd2;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %363 = load i8* %361, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB88_271)
begin
memory_controller_size = 2'd0;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %367 = load i8* %362, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB88_272)
begin
memory_controller_size = 2'd0;
end
/* main: %..split_crit_edge.i.i.i*/
/*   %370 = load i32* %scevgep4.i18.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_273)
begin
memory_controller_size = 2'd2;
end
/* main: %..split_crit_edge.i.i.i*/
/*   store i32 %369, i32* %371, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB88_275)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   %374 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_277)
begin
memory_controller_size = 2'd1;
end
/* main: %read_markers.exit.i*/
/*   %379 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB90_278)
begin
memory_controller_size = 2'd1;
end
/* main: %read_markers.exit.i*/
/*   store i32 %383, i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_328)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 %385, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_332)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 %386, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_336)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 %387, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_340)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 %388, i32* getelementptr inbounds ([2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_344)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i8* %p_jinfo_jpeg_data.0, i8** @CurHuffReadBuf, align 4, !tbaa !4*/
if (cur_state == LEGUP_F_main_BB90_345)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_346)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.1.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_347)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* %scevgep148.2.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_348)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_349)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_350)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_351)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 1), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_352)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_vpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_353)
begin
memory_controller_size = 2'd2;
end
/* main: %read_markers.exit.i*/
/*   store i32 0, i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 2), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB90_354)
begin
memory_controller_size = 2'd2;
end
/* main: %392*/
/*   %393 = load i32* %scevgep.i.i3.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_366)
begin
memory_controller_size = 2'd2;
end
/* main: %392*/
/*   %394 = load i32* %scevgep2.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_367)
begin
memory_controller_size = 2'd2;
end
/* main: %392*/
/*   %396 = load i32* %scevgep3.i.i2.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB94_368)
begin
memory_controller_size = 2'd2;
end
/* main: %425*/
/*   store i32 %r.0.i.i.i, i32* %scevgep4.i.i6.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_380)
begin
memory_controller_size = 2'd2;
end
/* main: %425*/
/*   store i32 %g.0.i.i.i, i32* %scevgep5.i.i5.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_381)
begin
memory_controller_size = 2'd2;
end
/* main: %425*/
/*   store i32 %b.0.i.i.i, i32* %scevgep6.i.i4.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB103_382)
begin
memory_controller_size = 2'd2;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %427 = load i16* @p_jinfo_image_width, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB104_383)
begin
memory_controller_size = 2'd1;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %429 = load i16* @p_jinfo_image_height, align 2, !tbaa !3*/
if (cur_state == LEGUP_F_main_BB104_384)
begin
memory_controller_size = 2'd1;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %.pre.i.i = load i32* getelementptr inbounds ([3 x i32]* @OutData_comp_hpos, i32 0, i32 0), align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_385)
begin
memory_controller_size = 2'd2;
end
/* main: %YuvToRgb.exit.loopexit.i.i*/
/*   %431 = load i32* @p_jinfo_MCUWidth, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB104_386)
begin
memory_controller_size = 2'd2;
end
/* main: %432*/
/*   %434 = load i32* %scevgep139.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB105_389)
begin
memory_controller_size = 2'd2;
end
/* main: %440*/
/*   %441 = load i32* %.14.us.i.i.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB108_396)
begin
memory_controller_size = 2'd2;
end
/* main: %440*/
/*   store i8 %442, i8* %scevgep24.i.i.i.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB108_398)
begin
memory_controller_size = 2'd0;
end
/* main: %WriteOneBlock.exit.i.i.i*/
/*   %443 = load i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB110_400)
begin
memory_controller_size = 2'd2;
end
/* main: %445*/
/*   store i32 0, i32* %scevgep142.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB111_403)
begin
memory_controller_size = 2'd2;
end
/* main: %454*/
/*   %455 = load i32* %scevgep.i3.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_427)
begin
memory_controller_size = 2'd2;
end
/* main: %454*/
/*   %456 = load i32* %scevgep2.i4.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_428)
begin
memory_controller_size = 2'd2;
end
/* main: %454*/
/*   %458 = load i32* %scevgep3.i5.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB118_429)
begin
memory_controller_size = 2'd2;
end
/* main: %487*/
/*   store i32 %r.0.i9.i.i, i32* %scevgep4.i6.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_441)
begin
memory_controller_size = 2'd2;
end
/* main: %487*/
/*   store i32 %g.0.i10.i.i, i32* %scevgep5.i7.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_442)
begin
memory_controller_size = 2'd2;
end
/* main: %487*/
/*   store i32 %b.0.i11.i.i, i32* %scevgep6.i8.i.i, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB127_443)
begin
memory_controller_size = 2'd2;
end
/* main: %decode_start.exit.i*/
/*   %main_result.promoted3.i = load i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB130_454)
begin
memory_controller_size = 2'd2;
end
/* main: %491*/
/*   %493 = load i8* %scevgep.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_457)
begin
memory_controller_size = 2'd0;
end
/* main: %491*/
/*   %494 = load i8* %scevgep7.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB131_458)
begin
memory_controller_size = 2'd0;
end
/* main: %.preheader.1.i*/
/*   %500 = load i8* %scevgep.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_461)
begin
memory_controller_size = 2'd0;
end
/* main: %.preheader.1.i*/
/*   %501 = load i8* %scevgep7.1.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB132_462)
begin
memory_controller_size = 2'd0;
end
/* main: %jpeg2bmp_main.exit*/
/*   store i32 %.storemerge, i32* @main_result, align 4*/
if (cur_state == LEGUP_F_main_BB133_465)
begin
memory_controller_size = 2'd2;
end
/* main: %jpeg2bmp_main.exit*/
/*   %511 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB133_466)
begin
memory_controller_size = 2'd2;
end
/* main: %.preheader.2.i*/
/*   %514 = load i8* %scevgep.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_469)
begin
memory_controller_size = 2'd0;
end
/* main: %.preheader.2.i*/
/*   %515 = load i8* %scevgep7.2.i, align 1, !tbaa !1*/
if (cur_state == LEGUP_F_main_BB134_470)
begin
memory_controller_size = 2'd0;
end
/* main: %524*/
/*   %525 = load i32* @main_result, align 4, !tbaa !0*/
if (cur_state == LEGUP_F_main_BB137_475)
begin
memory_controller_size = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_two_ports
(
	clk,
	address_a,
	wren_a,
	data_a,
	q_a,
	address_b,
	wren_b,
	data_b,
	q_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  widthad_a = 1'd0;
parameter  numwords_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input  wren_a;
input [(width_a-1):0] data_a;
output [(width_a-1):0] q_a;
input [(widthad_b-1):0] address_b;
input  wren_b;
input [(width_b-1):0] data_b;
output [(width_b-1):0] q_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
reg  clk_wire;


altsyncram altsyncram_component (
	.byteena_a (byteena_a),
	.byteena_b (byteena_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.clock0 (clk_wire),
	.address_a (address_a),
	.address_b (address_b),
	.data_a (data_a),
	.data_b (data_b),
	.q_a (q_a),
	.q_b (q_b),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.eccstatus (),
	.rden_a (1'd1),
	.rden_b (1'd1)
);

defparam
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.init_file = init_file,
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b;


always @(*) begin
clk_wire = clk;
end

endmodule 
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk <= #0 0;
always @(clk)
    clk <= #1 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $finish;
    end
end

endmodule 
