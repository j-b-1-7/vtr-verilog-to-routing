//
// Generated by Bluespec Compiler, version 2012.07.beta1 (build 29243, 2012-07-26)
//
// On Thu Aug 16 15:00:30 BST 2012
//
// Method conflict info:
// Method: avs_s0
// Conflict-free: avs_s0_readdata,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced before (restricted): avs_s0_waitrequest
// Conflicts: avs_s0
//
// Method: avs_s0_readdata
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
//
// Method: avs_s0_waitrequest
// Conflict-free: avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): avs_s0
//
// Method: aso_stream_out_data
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): aso_stream_out
//
// Method: aso_stream_out_valid
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): aso_stream_out
//
// Method: aso_stream_out
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced before (restricted): aso_stream_out_data,
// 			       aso_stream_out_valid,
// 			       aso_stream_out_startofpacket,
// 			       aso_stream_out_endofpacket
// Conflicts: aso_stream_out
//
// Method: aso_stream_out_startofpacket
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): aso_stream_out
//
// Method: aso_stream_out_endofpacket
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): aso_stream_out
//
// Method: coe_ssram_adv
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
//
// Method: coe_ssram_bwa_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_ssram_bwb_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_ssram_ce_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_ssram_cke_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
//
// Method: coe_ssram_oe_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_ssram_we_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_fsm_a
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_fsm_d_out
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_fsm_d
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_cke_n,
// 	       coe_flash_clk,
// 	       coe_touch
// Sequenced before (restricted): coe_ssram_bwa_n,
// 			       coe_ssram_bwb_n,
// 			       coe_ssram_ce_n,
// 			       coe_ssram_oe_n,
// 			       coe_ssram_we_n,
// 			       coe_fsm_a,
// 			       coe_fsm_d_out,
// 			       coe_fsm_dout_req,
// 			       coe_flash_adv_n,
// 			       coe_flash_ce_n,
// 			       coe_flash_oe_n,
// 			       coe_flash_we_n
// Conflicts: coe_fsm_d
//
// Method: coe_fsm_dout_req
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_flash_adv_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_flash_ce_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_flash_clk
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
//
// Method: coe_flash_oe_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_flash_we_n
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n,
// 	       coe_touch
// Sequenced after (restricted): coe_fsm_d
//
// Method: coe_touch
// Conflict-free: avs_s0,
// 	       avs_s0_readdata,
// 	       avs_s0_waitrequest,
// 	       aso_stream_out_data,
// 	       aso_stream_out_valid,
// 	       aso_stream_out,
// 	       aso_stream_out_startofpacket,
// 	       aso_stream_out_endofpacket,
// 	       coe_ssram_adv,
// 	       coe_ssram_bwa_n,
// 	       coe_ssram_bwb_n,
// 	       coe_ssram_ce_n,
// 	       coe_ssram_cke_n,
// 	       coe_ssram_oe_n,
// 	       coe_ssram_we_n,
// 	       coe_fsm_a,
// 	       coe_fsm_d_out,
// 	       coe_fsm_d,
// 	       coe_fsm_dout_req,
// 	       coe_flash_adv_n,
// 	       coe_flash_ce_n,
// 	       coe_flash_clk,
// 	       coe_flash_oe_n,
// 	       coe_flash_we_n
// Conflicts: coe_touch
//
//
// Ports:
// Name                         I/O  size props
// avs_s0_readdata                O    32
// avs_s0_waitrequest             O     1
// aso_stream_out_data            O    24
// aso_stream_out_valid           O     1
// aso_stream_out_startofpacket   O     1
// aso_stream_out_endofpacket     O     1
// coe_ssram_adv                  O     1 const
// coe_ssram_bwa_n                O     1
// coe_ssram_bwb_n                O     1
// coe_ssram_ce_n                 O     1
// coe_ssram_cke_n                O     1 const
// coe_ssram_oe_n                 O     1
// coe_ssram_we_n                 O     1
// coe_fsm_a                      O    25
// coe_fsm_d_out                  O    16
// coe_fsm_dout_req               O     1
// coe_flash_adv_n                O     1
// coe_flash_ce_n                 O     1
// coe_flash_clk                  O     1 const
// coe_flash_oe_n                 O     1
// coe_flash_we_n                 O     1
// csi_clockreset_clk             I     1 clock
// csi_clockreset_reset_n         I     1 reset
// avs_s0_address                 I    25 reg
// avs_s0_writedata               I    32 reg
// avs_s0_write                   I     1
// avs_s0_read                    I     1
// avs_s0_byteenable              I     4 reg
// aso_stream_out_ready           I     1
// coe_fsm_d_in                   I    16
// coe_touch_x1                   I    10
// coe_touch_y1                   I     9
// coe_touch_x2                   I    10
// coe_touch_y2                   I     9
// coe_touch_count_gesture        I    10
// coe_touch_touch_valid          I     1
//
// Combinational paths from inputs to outputs:
//   (avs_s0_write, avs_s0_read) -> avs_s0_waitrequest
//   aso_stream_out_ready -> aso_stream_out_data
//   aso_stream_out_ready -> aso_stream_out_valid
//   aso_stream_out_ready -> aso_stream_out_startofpacket
//   aso_stream_out_ready -> aso_stream_out_endofpacket
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkMTL_Framebuffer_Flash(csi_clockreset_clk,
			       csi_clockreset_reset_n,

			       avs_s0_address,
			       avs_s0_writedata,
			       avs_s0_write,
			       avs_s0_read,
			       avs_s0_byteenable,

			       avs_s0_readdata,

			       avs_s0_waitrequest,

			       aso_stream_out_data,

			       aso_stream_out_valid,

			       aso_stream_out_ready,

			       aso_stream_out_startofpacket,

			       aso_stream_out_endofpacket,

			       coe_ssram_adv,

			       coe_ssram_bwa_n,

			       coe_ssram_bwb_n,

			       coe_ssram_ce_n,

			       coe_ssram_cke_n,

			       coe_ssram_oe_n,

			       coe_ssram_we_n,

			       coe_fsm_a,

			       coe_fsm_d_out,

			       coe_fsm_d_in,

			       coe_fsm_dout_req,

			       coe_flash_adv_n,

			       coe_flash_ce_n,

			       coe_flash_clk,

			       coe_flash_oe_n,

			       coe_flash_we_n,

			       coe_touch_x1,
			       coe_touch_y1,
			       coe_touch_x2,
			       coe_touch_y2,
			       coe_touch_count_gesture,
			       coe_touch_touch_valid);
  input  csi_clockreset_clk;
  input  csi_clockreset_reset_n;

  // action method avs_s0
  input  [24 : 0] avs_s0_address;
  input  [31 : 0] avs_s0_writedata;
  input  avs_s0_write;
  input  avs_s0_read;
  input  [3 : 0] avs_s0_byteenable;

  // value method avs_s0_readdata
  output [31 : 0] avs_s0_readdata;

  // value method avs_s0_waitrequest
  output avs_s0_waitrequest;

  // value method aso_stream_out_data
  output [23 : 0] aso_stream_out_data;

  // value method aso_stream_out_valid
  output aso_stream_out_valid;

  // action method aso_stream_out
  input  aso_stream_out_ready;

  // value method aso_stream_out_startofpacket
  output aso_stream_out_startofpacket;

  // value method aso_stream_out_endofpacket
  output aso_stream_out_endofpacket;

  // value method coe_ssram_adv
  output coe_ssram_adv;

  // value method coe_ssram_bwa_n
  output coe_ssram_bwa_n;

  // value method coe_ssram_bwb_n
  output coe_ssram_bwb_n;

  // value method coe_ssram_ce_n
  output coe_ssram_ce_n;

  // value method coe_ssram_cke_n
  output coe_ssram_cke_n;

  // value method coe_ssram_oe_n
  output coe_ssram_oe_n;

  // value method coe_ssram_we_n
  output coe_ssram_we_n;

  // value method coe_fsm_a
  output [24 : 0] coe_fsm_a;

  // value method coe_fsm_d_out
  output [15 : 0] coe_fsm_d_out;

  // action method coe_fsm_d
  input  [15 : 0] coe_fsm_d_in;

  // value method coe_fsm_dout_req
  output coe_fsm_dout_req;

  // value method coe_flash_adv_n
  output coe_flash_adv_n;

  // value method coe_flash_ce_n
  output coe_flash_ce_n;

  // value method coe_flash_clk
  output coe_flash_clk;

  // value method coe_flash_oe_n
  output coe_flash_oe_n;

  // value method coe_flash_we_n
  output coe_flash_we_n;

  // action method coe_touch
  input  [9 : 0] coe_touch_x1;
  input  [8 : 0] coe_touch_y1;
  input  [9 : 0] coe_touch_x2;
  input  [8 : 0] coe_touch_y2;
  input  [9 : 0] coe_touch_count_gesture;
  input  coe_touch_touch_valid;

  // signals for module outputs
  wire [31 : 0] avs_s0_readdata;
  wire [24 : 0] coe_fsm_a;
  wire [23 : 0] aso_stream_out_data;
  wire [15 : 0] coe_fsm_d_out;
  wire aso_stream_out_endofpacket,
       aso_stream_out_startofpacket,
       aso_stream_out_valid,
       avs_s0_waitrequest,
       coe_flash_adv_n,
       coe_flash_ce_n,
       coe_flash_clk,
       coe_flash_oe_n,
       coe_flash_we_n,
       coe_fsm_dout_req,
       coe_ssram_adv,
       coe_ssram_bwa_n,
       coe_ssram_bwb_n,
       coe_ssram_ce_n,
       coe_ssram_cke_n,
       coe_ssram_oe_n,
       coe_ssram_we_n;

  // inlined wires
  wire [24 : 0] pixel_engine_lcd_stream_data_dw$wget;
  wire [15 : 0] mem_fsm_dout_dw$wget;
  wire avalon_slave_avalonwait$wget,
       avalon_slave_avalonwait_end_read$whas,
       avalon_slave_avalonwait_end_write$whas,
       mem_flash_ce_n_dw$wget,
       mem_flash_we_n_dw$wget,
       mem_fsm_a_w$whas,
       mem_fsm_dout_dw$whas,
       mem_fsm_dout_req_dw$wget,
       mem_ssram_ce_pw$whas;

  // register avalon_slave_ignore_further_requests
  reg avalon_slave_ignore_further_requests;
  wire avalon_slave_ignore_further_requests$D_IN,
       avalon_slave_ignore_further_requests$EN;

  // register mem_flash_timer
  reg [3 : 0] mem_flash_timer;
  wire [3 : 0] mem_flash_timer$D_IN;
  wire mem_flash_timer$EN;

  // register pixel_engine_addr
  reg [24 : 0] pixel_engine_addr;
  wire [24 : 0] pixel_engine_addr$D_IN;
  wire pixel_engine_addr$EN;

  // register pixel_engine_char_addr
  reg [24 : 0] pixel_engine_char_addr;
  wire [24 : 0] pixel_engine_char_addr$D_IN;
  wire pixel_engine_char_addr$EN;

  // register pixel_engine_char_base
  reg [24 : 0] pixel_engine_char_base;
  wire [24 : 0] pixel_engine_char_base$D_IN;
  wire pixel_engine_char_base$EN;

  // register pixel_engine_char_ctr
  reg pixel_engine_char_ctr;
  wire pixel_engine_char_ctr$D_IN, pixel_engine_char_ctr$EN;

  // register pixel_engine_char_end
  reg [24 : 0] pixel_engine_char_end;
  wire [24 : 0] pixel_engine_char_end$D_IN;
  wire pixel_engine_char_end$EN;

  // register pixel_engine_char_x_pos
  reg [2 : 0] pixel_engine_char_x_pos;
  wire [2 : 0] pixel_engine_char_x_pos$D_IN;
  wire pixel_engine_char_x_pos$EN;

  // register pixel_engine_char_x_two_char
  reg [5 : 0] pixel_engine_char_x_two_char;
  wire [5 : 0] pixel_engine_char_x_two_char$D_IN;
  wire pixel_engine_char_x_two_char$EN;

  // register pixel_engine_char_y
  reg [24 : 0] pixel_engine_char_y;
  wire [24 : 0] pixel_engine_char_y$D_IN;
  wire pixel_engine_char_y$EN;

  // register pixel_engine_cursor_pos
  reg [15 : 0] pixel_engine_cursor_pos;
  wire [15 : 0] pixel_engine_cursor_pos$D_IN;
  wire pixel_engine_cursor_pos$EN;

  // register pixel_engine_fb_blend
  reg [31 : 0] pixel_engine_fb_blend;
  wire [31 : 0] pixel_engine_fb_blend$D_IN;
  wire pixel_engine_fb_blend$EN;

  // register pixel_engine_flash_col
  reg [5 : 0] pixel_engine_flash_col;
  wire [5 : 0] pixel_engine_flash_col$D_IN;
  wire pixel_engine_flash_col$EN;

  // register pixel_engine_font_y
  reg [3 : 0] pixel_engine_font_y;
  wire [3 : 0] pixel_engine_font_y$D_IN;
  wire pixel_engine_font_y$EN;

  // register prev_touch_info
  reg [47 : 0] prev_touch_info;
  wire [47 : 0] prev_touch_info$D_IN;
  wire prev_touch_info$EN;

  // ports of submodule avalon_control_reg_resp
  wire [32 : 0] avalon_control_reg_resp$D_IN, avalon_control_reg_resp$D_OUT;
  wire avalon_control_reg_resp$CLR,
       avalon_control_reg_resp$DEQ,
       avalon_control_reg_resp$EMPTY_N,
       avalon_control_reg_resp$ENQ,
       avalon_control_reg_resp$FULL_N;

  // ports of submodule avalon_mem_resp
  wire [32 : 0] avalon_mem_resp$D_IN, avalon_mem_resp$D_OUT;
  wire avalon_mem_resp$CLR,
       avalon_mem_resp$DEQ,
       avalon_mem_resp$EMPTY_N,
       avalon_mem_resp$ENQ,
       avalon_mem_resp$FULL_N;

  // ports of submodule avalon_req
  wire [61 : 0] avalon_req$D_IN, avalon_req$D_OUT;
  wire avalon_req$CLR,
       avalon_req$DEQ,
       avalon_req$EMPTY_N,
       avalon_req$ENQ,
       avalon_req$FULL_N;

  // ports of submodule avalon_slave_outbuf
  wire [62 : 0] avalon_slave_outbuf$D_IN, avalon_slave_outbuf$D_OUT;
  wire avalon_slave_outbuf$CLR,
       avalon_slave_outbuf$DEQ,
       avalon_slave_outbuf$EMPTY_N,
       avalon_slave_outbuf$ENQ,
       avalon_slave_outbuf$FULL_N;

  // ports of submodule lower_16b_returned
  wire [16 : 0] lower_16b_returned$D_IN, lower_16b_returned$D_OUT;
  wire lower_16b_returned$CLR,
       lower_16b_returned$DEQ,
       lower_16b_returned$EMPTY_N,
       lower_16b_returned$ENQ;

  // ports of submodule mem_pipe0
  wire [16 : 0] mem_pipe0$D_IN, mem_pipe0$D_OUT;
  wire mem_pipe0$CLR,
       mem_pipe0$DEQ,
       mem_pipe0$EMPTY_N,
       mem_pipe0$ENQ,
       mem_pipe0$FULL_N;

  // ports of submodule mem_pipe1
  wire [16 : 0] mem_pipe1$D_IN, mem_pipe1$D_OUT;
  wire mem_pipe1$CLR,
       mem_pipe1$DEQ,
       mem_pipe1$EMPTY_N,
       mem_pipe1$ENQ,
       mem_pipe1$FULL_N;

  // ports of submodule mem_pipe2
  wire [16 : 0] mem_pipe2$D_IN, mem_pipe2$D_OUT;
  wire mem_pipe2$CLR,
       mem_pipe2$DEQ,
       mem_pipe2$EMPTY_N,
       mem_pipe2$ENQ,
       mem_pipe2$FULL_N;

  // ports of submodule mem_req
  wire [44 : 0] mem_req$D_IN, mem_req$D_OUT;
  wire mem_req$CLR, mem_req$DEQ, mem_req$EMPTY_N, mem_req$ENQ, mem_req$FULL_N;

  // ports of submodule mem_resp
  wire [16 : 0] mem_resp$D_IN, mem_resp$D_OUT;
  wire mem_resp$CLR,
       mem_resp$DEQ,
       mem_resp$EMPTY_N,
       mem_resp$ENQ,
       mem_resp$FULL_N;

  // ports of submodule mem_upper_16b_request
  wire [44 : 0] mem_upper_16b_request$D_IN, mem_upper_16b_request$D_OUT;
  wire mem_upper_16b_request$CLR,
       mem_upper_16b_request$DEQ,
       mem_upper_16b_request$EMPTY_N,
       mem_upper_16b_request$ENQ;

  // ports of submodule pixel_engine_char_colour
  wire [9 : 0] pixel_engine_char_colour$D_IN, pixel_engine_char_colour$D_OUT;
  wire pixel_engine_char_colour$CLR,
       pixel_engine_char_colour$DEQ,
       pixel_engine_char_colour$EMPTY_N,
       pixel_engine_char_colour$ENQ,
       pixel_engine_char_colour$FULL_N;

  // ports of submodule pixel_engine_char_pixel
  wire [9 : 0] pixel_engine_char_pixel$D_IN, pixel_engine_char_pixel$D_OUT;
  wire pixel_engine_char_pixel$CLR,
       pixel_engine_char_pixel$DEQ,
       pixel_engine_char_pixel$EMPTY_N,
       pixel_engine_char_pixel$ENQ,
       pixel_engine_char_pixel$FULL_N;

  // ports of submodule pixel_engine_char_pos
  wire [15 : 0] pixel_engine_char_pos$D_IN, pixel_engine_char_pos$D_OUT;
  wire pixel_engine_char_pos$CLR,
       pixel_engine_char_pos$DEQ,
       pixel_engine_char_pos$EMPTY_N,
       pixel_engine_char_pos$ENQ,
       pixel_engine_char_pos$FULL_N;

  // ports of submodule pixel_engine_chars_read
  wire pixel_engine_chars_read$CLR,
       pixel_engine_chars_read$DEQ,
       pixel_engine_chars_read$D_IN,
       pixel_engine_chars_read$D_OUT,
       pixel_engine_chars_read$EMPTY_N,
       pixel_engine_chars_read$ENQ,
       pixel_engine_chars_read$FULL_N;

  // ports of submodule pixel_engine_font_y_pos
  wire [3 : 0] pixel_engine_font_y_pos$D_IN, pixel_engine_font_y_pos$D_OUT;
  wire pixel_engine_font_y_pos$CLR,
       pixel_engine_font_y_pos$DEQ,
       pixel_engine_font_y_pos$EMPTY_N,
       pixel_engine_font_y_pos$ENQ,
       pixel_engine_font_y_pos$FULL_N;

  // ports of submodule pixel_engine_fontbits
  wire [7 : 0] pixel_engine_fontbits$D_IN, pixel_engine_fontbits$D_OUT;
  wire pixel_engine_fontbits$CLR,
       pixel_engine_fontbits$DEQ,
       pixel_engine_fontbits$EMPTY_N,
       pixel_engine_fontbits$ENQ,
       pixel_engine_fontbits$FULL_N;

  // ports of submodule pixel_engine_fontrom_rom
  wire [11 : 0] pixel_engine_fontrom_rom$v_addr;
  wire [7 : 0] pixel_engine_fontrom_rom$v_data;
  wire pixel_engine_fontrom_rom$v_en;

  // ports of submodule pixel_engine_fontrom_seq_fifo
  wire pixel_engine_fontrom_seq_fifo$CLR,
       pixel_engine_fontrom_seq_fifo$DEQ,
       pixel_engine_fontrom_seq_fifo$D_IN,
       pixel_engine_fontrom_seq_fifo$EMPTY_N,
       pixel_engine_fontrom_seq_fifo$ENQ,
       pixel_engine_fontrom_seq_fifo$FULL_N;

  // ports of submodule pixel_engine_pixpos
  wire [1 : 0] pixel_engine_pixpos$D_IN, pixel_engine_pixpos$D_OUT;
  wire pixel_engine_pixpos$CLR,
       pixel_engine_pixpos$DEQ,
       pixel_engine_pixpos$EMPTY_N,
       pixel_engine_pixpos$ENQ,
       pixel_engine_pixpos$FULL_N;

  // ports of submodule pixel_engine_req
  wire [61 : 0] pixel_engine_req$D_IN, pixel_engine_req$D_OUT;
  wire pixel_engine_req$CLR,
       pixel_engine_req$DEQ,
       pixel_engine_req$EMPTY_N,
       pixel_engine_req$ENQ,
       pixel_engine_req$FULL_N;

  // ports of submodule pixel_engine_ssram_req
  wire [61 : 0] pixel_engine_ssram_req$D_IN, pixel_engine_ssram_req$D_OUT;
  wire pixel_engine_ssram_req$CLR,
       pixel_engine_ssram_req$DEQ,
       pixel_engine_ssram_req$EMPTY_N,
       pixel_engine_ssram_req$ENQ,
       pixel_engine_ssram_req$FULL_N;

  // ports of submodule pixel_engine_ssram_resp
  wire [31 : 0] pixel_engine_ssram_resp$D_IN, pixel_engine_ssram_resp$D_OUT;
  wire pixel_engine_ssram_resp$CLR,
       pixel_engine_ssram_resp$DEQ,
       pixel_engine_ssram_resp$EMPTY_N,
       pixel_engine_ssram_resp$ENQ,
       pixel_engine_ssram_resp$FULL_N;

  // ports of submodule pixel_engine_two_chars
  wire [31 : 0] pixel_engine_two_chars$D_IN, pixel_engine_two_chars$D_OUT;
  wire pixel_engine_two_chars$CLR,
       pixel_engine_two_chars$DEQ,
       pixel_engine_two_chars$EMPTY_N,
       pixel_engine_two_chars$ENQ,
       pixel_engine_two_chars$FULL_N;

  // ports of submodule response_for_avalon
  wire response_for_avalon$CLR,
       response_for_avalon$DEQ,
       response_for_avalon$D_IN,
       response_for_avalon$D_OUT,
       response_for_avalon$EMPTY_N,
       response_for_avalon$ENQ,
       response_for_avalon$FULL_N;

  // ports of submodule touch
  wire [47 : 0] touch$D_IN, touch$D_OUT;
  wire touch$CLR, touch$DEQ, touch$EMPTY_N, touch$ENQ, touch$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_arbitrate_requests,
       CAN_FIRE_RL_avalon_request_splitter,
       CAN_FIRE_RL_avalon_slave_cancel_ingore_further_requests,
       CAN_FIRE_RL_avalon_slave_hanlde_bus_requests,
       CAN_FIRE_RL_avalon_slave_wire_up_avalonwait,
       CAN_FIRE_RL_forward_upper_bytes,
       CAN_FIRE_RL_mem_forward_requests_flash,
       CAN_FIRE_RL_mem_forward_requests_ssram,
       CAN_FIRE_RL_mem_pipe_stage_0,
       CAN_FIRE_RL_mem_pipe_stage_1,
       CAN_FIRE_RL_mem_pipe_stage_2,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_pixel_engine_buffer_characters_read,
       CAN_FIRE_RL_pixel_engine_char_pixels,
       CAN_FIRE_RL_pixel_engine_demux_two_chars,
       CAN_FIRE_RL_pixel_engine_forward_pixel_values,
       CAN_FIRE_RL_pixel_engine_mkConnectionGetPut,
       CAN_FIRE_RL_pixel_engine_request_char_values,
       CAN_FIRE_RL_pixel_engine_request_pixel_values,
       CAN_FIRE_RL_receive_mem_responses,
       CAN_FIRE_RL_return_control_register_response,
       CAN_FIRE_RL_return_mem_response,
       CAN_FIRE_aso_stream_out,
       CAN_FIRE_avs_s0,
       CAN_FIRE_coe_fsm_d,
       CAN_FIRE_coe_touch,
       WILL_FIRE_RL_arbitrate_requests,
       WILL_FIRE_RL_avalon_request_splitter,
       WILL_FIRE_RL_avalon_slave_cancel_ingore_further_requests,
       WILL_FIRE_RL_avalon_slave_hanlde_bus_requests,
       WILL_FIRE_RL_avalon_slave_wire_up_avalonwait,
       WILL_FIRE_RL_forward_upper_bytes,
       WILL_FIRE_RL_mem_forward_requests_flash,
       WILL_FIRE_RL_mem_forward_requests_ssram,
       WILL_FIRE_RL_mem_pipe_stage_0,
       WILL_FIRE_RL_mem_pipe_stage_1,
       WILL_FIRE_RL_mem_pipe_stage_2,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_pixel_engine_buffer_characters_read,
       WILL_FIRE_RL_pixel_engine_char_pixels,
       WILL_FIRE_RL_pixel_engine_demux_two_chars,
       WILL_FIRE_RL_pixel_engine_forward_pixel_values,
       WILL_FIRE_RL_pixel_engine_mkConnectionGetPut,
       WILL_FIRE_RL_pixel_engine_request_char_values,
       WILL_FIRE_RL_pixel_engine_request_pixel_values,
       WILL_FIRE_RL_receive_mem_responses,
       WILL_FIRE_RL_return_control_register_response,
       WILL_FIRE_RL_return_mem_response,
       WILL_FIRE_aso_stream_out,
       WILL_FIRE_avs_s0,
       WILL_FIRE_coe_fsm_d,
       WILL_FIRE_coe_touch;

  // inputs to muxes for submodule ports
  wire [61 : 0] MUX_pixel_engine_ssram_req$enq_1__VAL_1,
		MUX_pixel_engine_ssram_req$enq_1__VAL_2;
  wire [44 : 0] MUX_mem_req$enq_1__VAL_1;
  wire [16 : 0] MUX_mem_resp$enq_1__VAL_1, MUX_mem_resp$enq_1__VAL_2;
  wire [15 : 0] MUX_mem_fsm_dout_dw$wset_1__VAL_2;
  wire MUX_avalon_slave_datareturned$wset_1__SEL_1,
       MUX_mem_fsm_a_w$wset_1__SEL_1,
       MUX_mem_resp$enq_1__SEL_1;

  // remaining internal signals
  reg [23 : 0] IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654,
	       IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655,
	       IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652;
  wire [49 : 0] IF_pixel_engine_char_x_two_char_5_EQ_49_0_THEN_ETC___d55;
  wire [31 : 0] IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d452,
		IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d453,
		IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d454,
		IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d455,
		IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d456,
		IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d458,
		IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d669,
		b__h14135;
  wire [25 : 0] x__h13071, x_addr__h13123;
  wire [24 : 0] IF_pixel_engine_font_y_4_EQ_11_3_THEN_IF_pixel_ETC___d645,
		next_addr__h3065,
		next_char_y___2__h3016,
		next_char_y__h2903,
		x1_avValue_addr__h12990,
		x__h3050,
		y__h3053;
  wire [8 : 0] minus__h3867,
	       minus__h4723,
	       minus__h5121,
	       minus__h5335,
	       minus__h5712,
	       minus__h5926,
	       sum__h3311,
	       sum__h3767,
	       sum__h4866,
	       sum__h5021,
	       sum__h5457,
	       sum__h5612;
  wire [7 : 0] a__h3765,
	       a__h3866,
	       a__h5019,
	       a__h5120,
	       a__h5610,
	       a__h5711,
	       b__h3310,
	       b__h3766,
	       b__h4865,
	       b__h5020,
	       b__h5456,
	       b__h5611,
	       bitmap_col_chan_b__h3300,
	       bitmap_col_chan_g__h3299,
	       bitmap_col_chan_r__h3298,
	       char__h6798,
	       char_alpha__h3227,
	       x__h2840,
	       x__h7183;
  wire [5 : 0] next_x_two_char_addr__h2897, next_x_two_char_addr__h2901;
  wire [3 : 0] IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d668,
	       next_font_y___2__h2969;
  wire [2 : 0] x__h7767;
  wire [1 : 0] IF_mem_ssram_byteenable_w_whas__65_THEN_mem_ss_ETC___d710;
  wire IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d621,
       NOT_coe_touch_x1_EQ_prev_touch_info_92_BITS_47_ETC___d611,
       mem_req_i_notEmpty__24_AND_IF_mem_req_first__2_ETC___d345,
       pixel_engine_char_pixel_first__16_BIT_9_17_AND_ETC___d706,
       response_for_avalon_i_notEmpty__24_AND_IF_resp_ETC___d529,
       x__h7731;

  // action method avs_s0
  assign CAN_FIRE_avs_s0 = 1'd1 ;
  assign WILL_FIRE_avs_s0 = 1'd1 ;

  // value method avs_s0_readdata
  assign avs_s0_readdata =
	     avalon_slave_avalonwait_end_read$whas ?
	       b__h14135 :
	       32'hDEADDEAD ;

  // value method avs_s0_waitrequest
  assign avs_s0_waitrequest =
	     avs_s0_read && !avalon_slave_avalonwait_end_read$whas ||
	     avs_s0_write && !avalon_slave_avalonwait_end_write$whas ;

  // value method aso_stream_out_data
  assign aso_stream_out_data =
	     (!CAN_FIRE_RL_pixel_engine_forward_pixel_values ||
	      !pixel_engine_lcd_stream_data_dw$wget[24]) ?
	       24'd0 :
	       pixel_engine_lcd_stream_data_dw$wget[23:0] ;

  // value method aso_stream_out_valid
  assign aso_stream_out_valid =
	     CAN_FIRE_RL_pixel_engine_forward_pixel_values &&
	     pixel_engine_lcd_stream_data_dw$wget[24] ;

  // action method aso_stream_out
  assign CAN_FIRE_aso_stream_out = 1'd1 ;
  assign WILL_FIRE_aso_stream_out = 1'd1 ;

  // value method aso_stream_out_startofpacket
  assign aso_stream_out_startofpacket =
	     CAN_FIRE_RL_pixel_engine_forward_pixel_values &&
	     pixel_engine_pixpos$D_OUT[1] ;

  // value method aso_stream_out_endofpacket
  assign aso_stream_out_endofpacket =
	     CAN_FIRE_RL_pixel_engine_forward_pixel_values &&
	     pixel_engine_pixpos$D_OUT[0] ;

  // value method coe_ssram_adv
  assign coe_ssram_adv = 1'd0 ;

  // value method coe_ssram_bwa_n
  assign coe_ssram_bwa_n =
	     !IF_mem_ssram_byteenable_w_whas__65_THEN_mem_ss_ETC___d710[0] ;

  // value method coe_ssram_bwb_n
  assign coe_ssram_bwb_n =
	     !IF_mem_ssram_byteenable_w_whas__65_THEN_mem_ss_ETC___d710[1] ;

  // value method coe_ssram_ce_n
  assign coe_ssram_ce_n = !mem_ssram_ce_pw$whas ;

  // value method coe_ssram_cke_n
  assign coe_ssram_cke_n = 1'd0 ;

  // value method coe_ssram_oe_n
  assign coe_ssram_oe_n = mem_fsm_dout_dw$whas && mem_fsm_dout_req_dw$wget ;

  // value method coe_ssram_we_n
  assign coe_ssram_we_n =
	     !CAN_FIRE_RL_mem_forward_requests_ssram || !mem_req$D_OUT[44] ;

  // value method coe_fsm_a
  assign coe_fsm_a = mem_fsm_a_w$whas ? mem_req$D_OUT[40:16] : 25'd0 ;

  // value method coe_fsm_d_out
  assign coe_fsm_d_out =
	     mem_fsm_dout_dw$whas ? mem_fsm_dout_dw$wget : 16'hDEAD ;

  // action method coe_fsm_d
  assign CAN_FIRE_coe_fsm_d = 1'd1 ;
  assign WILL_FIRE_coe_fsm_d = 1'd1 ;

  // value method coe_fsm_dout_req
  assign coe_fsm_dout_req = mem_fsm_dout_dw$whas && mem_fsm_dout_req_dw$wget ;

  // value method coe_flash_adv_n
  assign coe_flash_adv_n = !MUX_mem_fsm_a_w$wset_1__SEL_1 ;

  // value method coe_flash_ce_n
  assign coe_flash_ce_n =
	     !MUX_mem_fsm_a_w$wset_1__SEL_1 || mem_flash_ce_n_dw$wget ;

  // value method coe_flash_clk
  assign coe_flash_clk = 1'd0 ;

  // value method coe_flash_oe_n
  assign coe_flash_oe_n =
	     !MUX_mem_fsm_a_w$wset_1__SEL_1 || mem_req$D_OUT[44] ;

  // value method coe_flash_we_n
  assign coe_flash_we_n =
	     !MUX_mem_fsm_a_w$wset_1__SEL_1 || mem_flash_we_n_dw$wget ;

  // action method coe_touch
  assign CAN_FIRE_coe_touch = 1'd1 ;
  assign WILL_FIRE_coe_touch = 1'd1 ;

  // submodule avalon_control_reg_resp
  FIFO1 #(.width(32'd33),
	  .guarded(32'd1)) avalon_control_reg_resp(.RST_N(csi_clockreset_reset_n),
						   .CLK(csi_clockreset_clk),
						   .D_IN(avalon_control_reg_resp$D_IN),
						   .ENQ(avalon_control_reg_resp$ENQ),
						   .DEQ(avalon_control_reg_resp$DEQ),
						   .CLR(avalon_control_reg_resp$CLR),
						   .D_OUT(avalon_control_reg_resp$D_OUT),
						   .FULL_N(avalon_control_reg_resp$FULL_N),
						   .EMPTY_N(avalon_control_reg_resp$EMPTY_N));

  // submodule avalon_mem_resp
  FIFO1 #(.width(32'd33),
	  .guarded(32'd1)) avalon_mem_resp(.RST_N(csi_clockreset_reset_n),
					   .CLK(csi_clockreset_clk),
					   .D_IN(avalon_mem_resp$D_IN),
					   .ENQ(avalon_mem_resp$ENQ),
					   .DEQ(avalon_mem_resp$DEQ),
					   .CLR(avalon_mem_resp$CLR),
					   .D_OUT(avalon_mem_resp$D_OUT),
					   .FULL_N(avalon_mem_resp$FULL_N),
					   .EMPTY_N(avalon_mem_resp$EMPTY_N));

  // submodule avalon_req
  FIFO2 #(.width(32'd62),
	  .guarded(32'd1)) avalon_req(.RST_N(csi_clockreset_reset_n),
				      .CLK(csi_clockreset_clk),
				      .D_IN(avalon_req$D_IN),
				      .ENQ(avalon_req$ENQ),
				      .DEQ(avalon_req$DEQ),
				      .CLR(avalon_req$CLR),
				      .D_OUT(avalon_req$D_OUT),
				      .FULL_N(avalon_req$FULL_N),
				      .EMPTY_N(avalon_req$EMPTY_N));

  // submodule avalon_slave_outbuf
  FIFO2 #(.width(32'd63),
	  .guarded(32'd1)) avalon_slave_outbuf(.RST_N(csi_clockreset_reset_n),
					       .CLK(csi_clockreset_clk),
					       .D_IN(avalon_slave_outbuf$D_IN),
					       .ENQ(avalon_slave_outbuf$ENQ),
					       .DEQ(avalon_slave_outbuf$DEQ),
					       .CLR(avalon_slave_outbuf$CLR),
					       .D_OUT(avalon_slave_outbuf$D_OUT),
					       .FULL_N(avalon_slave_outbuf$FULL_N),
					       .EMPTY_N(avalon_slave_outbuf$EMPTY_N));

  // submodule lower_16b_returned
  FIFO2 #(.width(32'd17),
	  .guarded(32'd0)) lower_16b_returned(.RST_N(csi_clockreset_reset_n),
					      .CLK(csi_clockreset_clk),
					      .D_IN(lower_16b_returned$D_IN),
					      .ENQ(lower_16b_returned$ENQ),
					      .DEQ(lower_16b_returned$DEQ),
					      .CLR(lower_16b_returned$CLR),
					      .D_OUT(lower_16b_returned$D_OUT),
					      .FULL_N(),
					      .EMPTY_N(lower_16b_returned$EMPTY_N));

  // submodule mem_pipe0
  FIFOL1 #(.width(32'd17)) mem_pipe0(.RST_N(csi_clockreset_reset_n),
				     .CLK(csi_clockreset_clk),
				     .D_IN(mem_pipe0$D_IN),
				     .ENQ(mem_pipe0$ENQ),
				     .DEQ(mem_pipe0$DEQ),
				     .CLR(mem_pipe0$CLR),
				     .D_OUT(mem_pipe0$D_OUT),
				     .FULL_N(mem_pipe0$FULL_N),
				     .EMPTY_N(mem_pipe0$EMPTY_N));

  // submodule mem_pipe1
  FIFOL1 #(.width(32'd17)) mem_pipe1(.RST_N(csi_clockreset_reset_n),
				     .CLK(csi_clockreset_clk),
				     .D_IN(mem_pipe1$D_IN),
				     .ENQ(mem_pipe1$ENQ),
				     .DEQ(mem_pipe1$DEQ),
				     .CLR(mem_pipe1$CLR),
				     .D_OUT(mem_pipe1$D_OUT),
				     .FULL_N(mem_pipe1$FULL_N),
				     .EMPTY_N(mem_pipe1$EMPTY_N));

  // submodule mem_pipe2
  FIFOL1 #(.width(32'd17)) mem_pipe2(.RST_N(csi_clockreset_reset_n),
				     .CLK(csi_clockreset_clk),
				     .D_IN(mem_pipe2$D_IN),
				     .ENQ(mem_pipe2$ENQ),
				     .DEQ(mem_pipe2$DEQ),
				     .CLR(mem_pipe2$CLR),
				     .D_OUT(mem_pipe2$D_OUT),
				     .FULL_N(mem_pipe2$FULL_N),
				     .EMPTY_N(mem_pipe2$EMPTY_N));

  // submodule mem_req
  FIFOL1 #(.width(32'd45)) mem_req(.RST_N(csi_clockreset_reset_n),
				   .CLK(csi_clockreset_clk),
				   .D_IN(mem_req$D_IN),
				   .ENQ(mem_req$ENQ),
				   .DEQ(mem_req$DEQ),
				   .CLR(mem_req$CLR),
				   .D_OUT(mem_req$D_OUT),
				   .FULL_N(mem_req$FULL_N),
				   .EMPTY_N(mem_req$EMPTY_N));

  // submodule mem_resp
  FIFOL1 #(.width(32'd17)) mem_resp(.RST_N(csi_clockreset_reset_n),
				    .CLK(csi_clockreset_clk),
				    .D_IN(mem_resp$D_IN),
				    .ENQ(mem_resp$ENQ),
				    .DEQ(mem_resp$DEQ),
				    .CLR(mem_resp$CLR),
				    .D_OUT(mem_resp$D_OUT),
				    .FULL_N(mem_resp$FULL_N),
				    .EMPTY_N(mem_resp$EMPTY_N));

  // submodule mem_upper_16b_request
  FIFO2 #(.width(32'd45),
	  .guarded(32'd0)) mem_upper_16b_request(.RST_N(csi_clockreset_reset_n),
						 .CLK(csi_clockreset_clk),
						 .D_IN(mem_upper_16b_request$D_IN),
						 .ENQ(mem_upper_16b_request$ENQ),
						 .DEQ(mem_upper_16b_request$DEQ),
						 .CLR(mem_upper_16b_request$CLR),
						 .D_OUT(mem_upper_16b_request$D_OUT),
						 .FULL_N(),
						 .EMPTY_N(mem_upper_16b_request$EMPTY_N));

  // submodule pixel_engine_char_colour
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) pixel_engine_char_colour(.RST_N(csi_clockreset_reset_n),
						    .CLK(csi_clockreset_clk),
						    .D_IN(pixel_engine_char_colour$D_IN),
						    .ENQ(pixel_engine_char_colour$ENQ),
						    .DEQ(pixel_engine_char_colour$DEQ),
						    .CLR(pixel_engine_char_colour$CLR),
						    .D_OUT(pixel_engine_char_colour$D_OUT),
						    .FULL_N(pixel_engine_char_colour$FULL_N),
						    .EMPTY_N(pixel_engine_char_colour$EMPTY_N));

  // submodule pixel_engine_char_pixel
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) pixel_engine_char_pixel(.RST_N(csi_clockreset_reset_n),
						   .CLK(csi_clockreset_clk),
						   .D_IN(pixel_engine_char_pixel$D_IN),
						   .ENQ(pixel_engine_char_pixel$ENQ),
						   .DEQ(pixel_engine_char_pixel$DEQ),
						   .CLR(pixel_engine_char_pixel$CLR),
						   .D_OUT(pixel_engine_char_pixel$D_OUT),
						   .FULL_N(pixel_engine_char_pixel$FULL_N),
						   .EMPTY_N(pixel_engine_char_pixel$EMPTY_N));

  // submodule pixel_engine_char_pos
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) pixel_engine_char_pos(.RST_N(csi_clockreset_reset_n),
						     .CLK(csi_clockreset_clk),
						     .D_IN(pixel_engine_char_pos$D_IN),
						     .ENQ(pixel_engine_char_pos$ENQ),
						     .DEQ(pixel_engine_char_pos$DEQ),
						     .CLR(pixel_engine_char_pos$CLR),
						     .D_OUT(pixel_engine_char_pos$D_OUT),
						     .FULL_N(pixel_engine_char_pos$FULL_N),
						     .EMPTY_N(pixel_engine_char_pos$EMPTY_N));

  // submodule pixel_engine_chars_read
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) pixel_engine_chars_read(.RST_N(csi_clockreset_reset_n),
						       .CLK(csi_clockreset_clk),
						       .D_IN(pixel_engine_chars_read$D_IN),
						       .ENQ(pixel_engine_chars_read$ENQ),
						       .DEQ(pixel_engine_chars_read$DEQ),
						       .CLR(pixel_engine_chars_read$CLR),
						       .D_OUT(pixel_engine_chars_read$D_OUT),
						       .FULL_N(pixel_engine_chars_read$FULL_N),
						       .EMPTY_N(pixel_engine_chars_read$EMPTY_N));

  // submodule pixel_engine_font_y_pos
  FIFO2 #(.width(32'd4),
	  .guarded(32'd1)) pixel_engine_font_y_pos(.RST_N(csi_clockreset_reset_n),
						   .CLK(csi_clockreset_clk),
						   .D_IN(pixel_engine_font_y_pos$D_IN),
						   .ENQ(pixel_engine_font_y_pos$ENQ),
						   .DEQ(pixel_engine_font_y_pos$DEQ),
						   .CLR(pixel_engine_font_y_pos$CLR),
						   .D_OUT(pixel_engine_font_y_pos$D_OUT),
						   .FULL_N(pixel_engine_font_y_pos$FULL_N),
						   .EMPTY_N(pixel_engine_font_y_pos$EMPTY_N));

  // submodule pixel_engine_fontbits
  FIFO2 #(.width(32'd8),
	  .guarded(32'd1)) pixel_engine_fontbits(.RST_N(csi_clockreset_reset_n),
						 .CLK(csi_clockreset_clk),
						 .D_IN(pixel_engine_fontbits$D_IN),
						 .ENQ(pixel_engine_fontbits$ENQ),
						 .DEQ(pixel_engine_fontbits$DEQ),
						 .CLR(pixel_engine_fontbits$CLR),
						 .D_OUT(pixel_engine_fontbits$D_OUT),
						 .FULL_N(pixel_engine_fontbits$FULL_N),
						 .EMPTY_N(pixel_engine_fontbits$EMPTY_N));

  // submodule pixel_engine_fontrom_rom
  VerilogAlteraROM #(.FILENAME("vgafontrom.mif"),
		     .ADDRESS_WIDTH(32'd12),
		     .DATA_WIDTH(32'd8)) pixel_engine_fontrom_rom(.clk(csi_clockreset_clk),
								  .v_addr(pixel_engine_fontrom_rom$v_addr),
								  .v_en(pixel_engine_fontrom_rom$v_en),
								  .v_data(pixel_engine_fontrom_rom$v_data));

  // submodule pixel_engine_fontrom_seq_fifo
  FIFO1 #(.width(32'd1),
	  .guarded(32'd1)) pixel_engine_fontrom_seq_fifo(.RST_N(csi_clockreset_reset_n),
							 .CLK(csi_clockreset_clk),
							 .D_IN(pixel_engine_fontrom_seq_fifo$D_IN),
							 .ENQ(pixel_engine_fontrom_seq_fifo$ENQ),
							 .DEQ(pixel_engine_fontrom_seq_fifo$DEQ),
							 .CLR(pixel_engine_fontrom_seq_fifo$CLR),
							 .D_OUT(),
							 .FULL_N(pixel_engine_fontrom_seq_fifo$FULL_N),
							 .EMPTY_N(pixel_engine_fontrom_seq_fifo$EMPTY_N));

  // submodule pixel_engine_pixpos
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) pixel_engine_pixpos(.RST_N(csi_clockreset_reset_n),
						   .CLK(csi_clockreset_clk),
						   .D_IN(pixel_engine_pixpos$D_IN),
						   .ENQ(pixel_engine_pixpos$ENQ),
						   .DEQ(pixel_engine_pixpos$DEQ),
						   .CLR(pixel_engine_pixpos$CLR),
						   .D_OUT(pixel_engine_pixpos$D_OUT),
						   .FULL_N(pixel_engine_pixpos$FULL_N),
						   .EMPTY_N(pixel_engine_pixpos$EMPTY_N));

  // submodule pixel_engine_req
  FIFO2 #(.width(32'd62),
	  .guarded(32'd1)) pixel_engine_req(.RST_N(csi_clockreset_reset_n),
					    .CLK(csi_clockreset_clk),
					    .D_IN(pixel_engine_req$D_IN),
					    .ENQ(pixel_engine_req$ENQ),
					    .DEQ(pixel_engine_req$DEQ),
					    .CLR(pixel_engine_req$CLR),
					    .D_OUT(pixel_engine_req$D_OUT),
					    .FULL_N(pixel_engine_req$FULL_N),
					    .EMPTY_N(pixel_engine_req$EMPTY_N));

  // submodule pixel_engine_ssram_req
  FIFOL1 #(.width(32'd62)) pixel_engine_ssram_req(.RST_N(csi_clockreset_reset_n),
						  .CLK(csi_clockreset_clk),
						  .D_IN(pixel_engine_ssram_req$D_IN),
						  .ENQ(pixel_engine_ssram_req$ENQ),
						  .DEQ(pixel_engine_ssram_req$DEQ),
						  .CLR(pixel_engine_ssram_req$CLR),
						  .D_OUT(pixel_engine_ssram_req$D_OUT),
						  .FULL_N(pixel_engine_ssram_req$FULL_N),
						  .EMPTY_N(pixel_engine_ssram_req$EMPTY_N));

  // submodule pixel_engine_ssram_resp
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) pixel_engine_ssram_resp(.RST_N(csi_clockreset_reset_n),
						       .CLK(csi_clockreset_clk),
						       .D_IN(pixel_engine_ssram_resp$D_IN),
						       .ENQ(pixel_engine_ssram_resp$ENQ),
						       .DEQ(pixel_engine_ssram_resp$DEQ),
						       .CLR(pixel_engine_ssram_resp$CLR),
						       .D_OUT(pixel_engine_ssram_resp$D_OUT),
						       .FULL_N(pixel_engine_ssram_resp$FULL_N),
						       .EMPTY_N(pixel_engine_ssram_resp$EMPTY_N));

  // submodule pixel_engine_two_chars
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) pixel_engine_two_chars(.RST_N(csi_clockreset_reset_n),
						  .CLK(csi_clockreset_clk),
						  .D_IN(pixel_engine_two_chars$D_IN),
						  .ENQ(pixel_engine_two_chars$ENQ),
						  .DEQ(pixel_engine_two_chars$DEQ),
						  .CLR(pixel_engine_two_chars$CLR),
						  .D_OUT(pixel_engine_two_chars$D_OUT),
						  .FULL_N(pixel_engine_two_chars$FULL_N),
						  .EMPTY_N(pixel_engine_two_chars$EMPTY_N));

  // submodule response_for_avalon
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) response_for_avalon(.RST_N(csi_clockreset_reset_n),
						   .CLK(csi_clockreset_clk),
						   .D_IN(response_for_avalon$D_IN),
						   .ENQ(response_for_avalon$ENQ),
						   .DEQ(response_for_avalon$DEQ),
						   .CLR(response_for_avalon$CLR),
						   .D_OUT(response_for_avalon$D_OUT),
						   .FULL_N(response_for_avalon$FULL_N),
						   .EMPTY_N(response_for_avalon$EMPTY_N));

  // submodule touch
  FIFO2 #(.width(32'd48),
	  .guarded(32'd0)) touch(.RST_N(csi_clockreset_reset_n),
				 .CLK(csi_clockreset_clk),
				 .D_IN(touch$D_IN),
				 .ENQ(touch$ENQ),
				 .DEQ(touch$DEQ),
				 .CLR(touch$CLR),
				 .D_OUT(touch$D_OUT),
				 .FULL_N(touch$FULL_N),
				 .EMPTY_N(touch$EMPTY_N));

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     pixel_engine_ssram_req$EMPTY_N && pixel_engine_req$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_return_control_register_response
  assign CAN_FIRE_RL_return_control_register_response =
	     avalon_control_reg_resp$EMPTY_N && !avalon_mem_resp$EMPTY_N ;
  assign WILL_FIRE_RL_return_control_register_response =
	     CAN_FIRE_RL_return_control_register_response ;

  // rule RL_return_mem_response
  assign CAN_FIRE_RL_return_mem_response = avalon_mem_resp$EMPTY_N ;
  assign WILL_FIRE_RL_return_mem_response = avalon_mem_resp$EMPTY_N ;

  // rule RL_receive_mem_responses
  assign CAN_FIRE_RL_receive_mem_responses =
	     mem_resp$EMPTY_N &&
	     (!lower_16b_returned$EMPTY_N ||
	      response_for_avalon_i_notEmpty__24_AND_IF_resp_ETC___d529) ;
  assign WILL_FIRE_RL_receive_mem_responses =
	     CAN_FIRE_RL_receive_mem_responses ;

  // rule RL_avalon_slave_hanlde_bus_requests
  assign CAN_FIRE_RL_avalon_slave_hanlde_bus_requests =
	     avalon_slave_outbuf$FULL_N && (avs_s0_read || avs_s0_write) &&
	     !avalon_slave_ignore_further_requests ;
  assign WILL_FIRE_RL_avalon_slave_hanlde_bus_requests =
	     CAN_FIRE_RL_avalon_slave_hanlde_bus_requests ;

  // rule RL_avalon_slave_wire_up_avalonwait
  assign CAN_FIRE_RL_avalon_slave_wire_up_avalonwait = 1'd1 ;
  assign WILL_FIRE_RL_avalon_slave_wire_up_avalonwait = 1'd1 ;

  // rule RL_avalon_slave_cancel_ingore_further_requests
  assign CAN_FIRE_RL_avalon_slave_cancel_ingore_further_requests =
	     !avalon_slave_avalonwait$wget &&
	     avalon_slave_ignore_further_requests ;
  assign WILL_FIRE_RL_avalon_slave_cancel_ingore_further_requests =
	     CAN_FIRE_RL_avalon_slave_cancel_ingore_further_requests ;

  // rule RL_pixel_engine_request_char_values
  assign CAN_FIRE_RL_pixel_engine_request_char_values =
	     pixel_engine_ssram_req$FULL_N &&
	     pixel_engine_font_y_pos$FULL_N &&
	     pixel_engine_char_pos$FULL_N &&
	     pixel_engine_chars_read$FULL_N ;
  assign WILL_FIRE_RL_pixel_engine_request_char_values =
	     CAN_FIRE_RL_pixel_engine_request_char_values ;

  // rule RL_pixel_engine_request_pixel_values
  assign CAN_FIRE_RL_pixel_engine_request_pixel_values =
	     pixel_engine_ssram_req$FULL_N &&
	     pixel_engine_chars_read$FULL_N &&
	     pixel_engine_pixpos$FULL_N ;
  assign WILL_FIRE_RL_pixel_engine_request_pixel_values =
	     CAN_FIRE_RL_pixel_engine_request_pixel_values &&
	     !WILL_FIRE_RL_pixel_engine_request_char_values ;

  // rule RL_pixel_engine_forward_pixel_values
  assign CAN_FIRE_RL_pixel_engine_forward_pixel_values =
	     pixel_engine_chars_read$EMPTY_N && aso_stream_out_ready &&
	     pixel_engine_char_pixel$EMPTY_N &&
	     pixel_engine_ssram_resp$EMPTY_N &&
	     pixel_engine_pixpos$EMPTY_N &&
	     !pixel_engine_chars_read$D_OUT ;
  assign WILL_FIRE_RL_pixel_engine_forward_pixel_values =
	     CAN_FIRE_RL_pixel_engine_forward_pixel_values ;

  // rule RL_pixel_engine_buffer_characters_read
  assign CAN_FIRE_RL_pixel_engine_buffer_characters_read =
	     pixel_engine_chars_read$EMPTY_N &&
	     pixel_engine_ssram_resp$EMPTY_N &&
	     pixel_engine_two_chars$FULL_N &&
	     pixel_engine_chars_read$D_OUT ;
  assign WILL_FIRE_RL_pixel_engine_buffer_characters_read =
	     CAN_FIRE_RL_pixel_engine_buffer_characters_read ;

  // rule RL_pixel_engine_mkConnectionGetPut
  assign CAN_FIRE_RL_pixel_engine_mkConnectionGetPut =
	     pixel_engine_fontrom_seq_fifo$EMPTY_N &&
	     pixel_engine_fontbits$FULL_N ;
  assign WILL_FIRE_RL_pixel_engine_mkConnectionGetPut =
	     CAN_FIRE_RL_pixel_engine_mkConnectionGetPut ;

  // rule RL_pixel_engine_demux_two_chars
  assign CAN_FIRE_RL_pixel_engine_demux_two_chars =
	     pixel_engine_two_chars$EMPTY_N &&
	     pixel_engine_font_y_pos$EMPTY_N &&
	     pixel_engine_fontrom_seq_fifo$FULL_N &&
	     pixel_engine_char_colour$FULL_N &&
	     pixel_engine_char_pos$EMPTY_N ;
  assign WILL_FIRE_RL_pixel_engine_demux_two_chars =
	     CAN_FIRE_RL_pixel_engine_demux_two_chars ;

  // rule RL_avalon_request_splitter
  assign CAN_FIRE_RL_avalon_request_splitter =
	     avalon_slave_outbuf$EMPTY_N &&
	     ((avalon_slave_outbuf$D_OUT[60:54] == 7'd4) ?
		avalon_control_reg_resp$FULL_N :
		avalon_req$FULL_N) ;
  assign WILL_FIRE_RL_avalon_request_splitter =
	     CAN_FIRE_RL_avalon_request_splitter ;

  // rule RL_pixel_engine_char_pixels
  assign CAN_FIRE_RL_pixel_engine_char_pixels =
	     pixel_engine_char_pixel$FULL_N &&
	     pixel_engine_char_colour$EMPTY_N &&
	     pixel_engine_fontbits$EMPTY_N ;
  assign WILL_FIRE_RL_pixel_engine_char_pixels =
	     CAN_FIRE_RL_pixel_engine_char_pixels ;

  // rule RL_mem_pipe_stage_2
  assign CAN_FIRE_RL_mem_pipe_stage_2 = mem_resp$FULL_N && mem_pipe2$EMPTY_N ;
  assign WILL_FIRE_RL_mem_pipe_stage_2 = CAN_FIRE_RL_mem_pipe_stage_2 ;

  // rule RL_mem_pipe_stage_1
  assign CAN_FIRE_RL_mem_pipe_stage_1 =
	     mem_pipe1$EMPTY_N && mem_pipe2$FULL_N ;
  assign WILL_FIRE_RL_mem_pipe_stage_1 = CAN_FIRE_RL_mem_pipe_stage_1 ;

  // rule RL_mem_pipe_stage_0
  assign CAN_FIRE_RL_mem_pipe_stage_0 =
	     mem_pipe1$FULL_N && mem_pipe0$EMPTY_N ;
  assign WILL_FIRE_RL_mem_pipe_stage_0 = CAN_FIRE_RL_mem_pipe_stage_0 ;

  // rule RL_mem_forward_requests_ssram
  assign CAN_FIRE_RL_mem_forward_requests_ssram =
	     mem_req$EMPTY_N && mem_pipe0$FULL_N && !mem_req$D_OUT[41] ;
  assign WILL_FIRE_RL_mem_forward_requests_ssram =
	     CAN_FIRE_RL_mem_forward_requests_ssram ;

  // rule RL_mem_forward_requests_flash
  assign CAN_FIRE_RL_mem_forward_requests_flash =
	     mem_req_i_notEmpty__24_AND_IF_mem_req_first__2_ETC___d345 &&
	     mem_req$D_OUT[41] &&
	     !mem_ssram_ce_pw$whas ;
  assign WILL_FIRE_RL_mem_forward_requests_flash =
	     CAN_FIRE_RL_mem_forward_requests_flash &&
	     !WILL_FIRE_RL_mem_pipe_stage_1 &&
	     !WILL_FIRE_RL_mem_pipe_stage_2 ;

  // rule RL_arbitrate_requests
  assign CAN_FIRE_RL_arbitrate_requests =
	     response_for_avalon$FULL_N && mem_req$FULL_N &&
	     !mem_upper_16b_request$EMPTY_N &&
	     (pixel_engine_req$EMPTY_N || avalon_req$EMPTY_N) ;
  assign WILL_FIRE_RL_arbitrate_requests = CAN_FIRE_RL_arbitrate_requests ;

  // rule RL_forward_upper_bytes
  assign CAN_FIRE_RL_forward_upper_bytes =
	     mem_req$FULL_N && mem_upper_16b_request$EMPTY_N ;
  assign WILL_FIRE_RL_forward_upper_bytes = CAN_FIRE_RL_forward_upper_bytes ;

  // inputs to muxes for submodule ports
  assign MUX_avalon_slave_datareturned$wset_1__SEL_1 =
	     avalon_mem_resp$EMPTY_N && avalon_mem_resp$D_OUT[32] ;
  assign MUX_mem_fsm_a_w$wset_1__SEL_1 =
	     WILL_FIRE_RL_mem_forward_requests_flash &&
	     mem_req$D_OUT[43:42] != 2'b0 ;
  assign MUX_mem_resp$enq_1__SEL_1 =
	     WILL_FIRE_RL_mem_forward_requests_flash &&
	     (mem_req$D_OUT[43:42] == 2'b0 || mem_flash_timer == 4'd10) ;
  assign MUX_mem_fsm_dout_dw$wset_1__VAL_2 =
	     mem_pipe1$D_OUT[16] ? mem_pipe1$D_OUT[15:0] : 16'hEEEE ;
  assign MUX_mem_req$enq_1__VAL_1 =
	     { IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d621,
	       IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d668[1:0],
	       x__h13071,
	       IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d669[15:0] } ;
  assign MUX_mem_resp$enq_1__VAL_1 =
	     (mem_req$D_OUT[43:42] == 2'b0) ?
	       (mem_req$D_OUT[44] ? 17'd43690 : 17'd65536) :
	       { !mem_req$D_OUT[44], coe_fsm_d_in } ;
  assign MUX_mem_resp$enq_1__VAL_2 = { !mem_pipe2$D_OUT[16], coe_fsm_d_in } ;
  assign MUX_pixel_engine_ssram_req$enq_1__VAL_1 =
	     { 5'd15, pixel_engine_char_addr, 32'd0 } ;
  assign MUX_pixel_engine_ssram_req$enq_1__VAL_2 =
	     { 5'd15, pixel_engine_addr, 32'd0 } ;

  // inlined wires
  assign pixel_engine_lcd_stream_data_dw$wget =
	     { 1'd1,
	       bitmap_col_chan_r__h3298,
	       bitmap_col_chan_g__h3299,
	       bitmap_col_chan_b__h3300 } ;
  assign mem_fsm_a_w$whas =
	     WILL_FIRE_RL_mem_forward_requests_flash &&
	     mem_req$D_OUT[43:42] != 2'b0 ||
	     WILL_FIRE_RL_mem_forward_requests_ssram ;
  assign mem_fsm_dout_dw$wget =
	     MUX_mem_fsm_a_w$wset_1__SEL_1 ?
	       mem_req$D_OUT[15:0] :
	       MUX_mem_fsm_dout_dw$wset_1__VAL_2 ;
  assign mem_fsm_dout_dw$whas =
	     WILL_FIRE_RL_mem_forward_requests_flash &&
	     mem_req$D_OUT[43:42] != 2'b0 ||
	     WILL_FIRE_RL_mem_pipe_stage_1 ;
  assign mem_fsm_dout_req_dw$wget =
	     MUX_mem_fsm_a_w$wset_1__SEL_1 ?
	       mem_req$D_OUT[44] :
	       mem_pipe1$D_OUT[16] ;
  assign mem_flash_ce_n_dw$wget =
	     mem_req$D_OUT[44] && mem_flash_timer == 4'd10 ;
  assign mem_flash_we_n_dw$wget =
	     !mem_req$D_OUT[44] || mem_flash_timer == 4'd10 ||
	     mem_flash_timer == 4'd9 ;
  assign avalon_slave_avalonwait_end_read$whas =
	     avalon_mem_resp$EMPTY_N && avalon_mem_resp$D_OUT[32] ||
	     WILL_FIRE_RL_return_control_register_response &&
	     avalon_control_reg_resp$D_OUT[32] ;
  assign avalon_slave_avalonwait_end_write$whas =
	     WILL_FIRE_RL_avalon_slave_hanlde_bus_requests && avs_s0_write ;
  assign mem_ssram_ce_pw$whas =
	     WILL_FIRE_RL_mem_pipe_stage_2 || WILL_FIRE_RL_mem_pipe_stage_1 ||
	     WILL_FIRE_RL_mem_pipe_stage_0 ||
	     WILL_FIRE_RL_mem_forward_requests_ssram ;
  assign avalon_slave_avalonwait$wget =
	     avs_s0_read && !avalon_slave_avalonwait_end_read$whas ||
	     avs_s0_write && !avalon_slave_avalonwait_end_write$whas ;

  // register avalon_slave_ignore_further_requests
  assign avalon_slave_ignore_further_requests$D_IN =
	     WILL_FIRE_RL_avalon_slave_hanlde_bus_requests && avs_s0_read ;
  assign avalon_slave_ignore_further_requests$EN =
	     WILL_FIRE_RL_avalon_slave_hanlde_bus_requests ||
	     WILL_FIRE_RL_avalon_slave_cancel_ingore_further_requests ;

  // register mem_flash_timer
  assign mem_flash_timer$D_IN =
	     (mem_flash_timer == 4'd10) ? 4'd0 : mem_flash_timer + 4'd1 ;
  assign mem_flash_timer$EN = MUX_mem_fsm_a_w$wset_1__SEL_1 ;

  // register pixel_engine_addr
  assign pixel_engine_addr$D_IN =
	     (pixel_engine_addr == 25'd383999) ? 25'd0 : next_addr__h3065 ;
  assign pixel_engine_addr$EN =
	     WILL_FIRE_RL_pixel_engine_request_pixel_values ;

  // register pixel_engine_char_addr
  assign pixel_engine_char_addr$D_IN =
	     x__h3050 +
	     IF_pixel_engine_char_x_two_char_5_EQ_49_0_THEN_ETC___d55[24:0] ;
  assign pixel_engine_char_addr$EN =
	     CAN_FIRE_RL_pixel_engine_request_char_values ;

  // register pixel_engine_char_base
  assign pixel_engine_char_base$D_IN = avalon_slave_outbuf$D_OUT[30:6] ;
  assign pixel_engine_char_base$EN =
	     WILL_FIRE_RL_avalon_request_splitter &&
	     avalon_slave_outbuf$D_OUT[60:54] == 7'd4 &&
	     avalon_slave_outbuf$D_OUT[53:36] == 18'd2 &&
	     avalon_slave_outbuf$D_OUT[62:61] == 2'd1 ;

  // register pixel_engine_char_ctr
  assign pixel_engine_char_ctr$D_IN = pixel_engine_char_ctr + 1'd1 ;
  assign pixel_engine_char_ctr$EN = CAN_FIRE_RL_pixel_engine_demux_two_chars ;

  // register pixel_engine_char_end
  assign pixel_engine_char_end$D_IN =
	     avalon_slave_outbuf$D_OUT[30:6] + 25'd6000 ;
  assign pixel_engine_char_end$EN =
	     WILL_FIRE_RL_avalon_request_splitter &&
	     avalon_slave_outbuf$D_OUT[60:54] == 7'd4 &&
	     avalon_slave_outbuf$D_OUT[53:36] == 18'd2 &&
	     avalon_slave_outbuf$D_OUT[62:61] == 2'd1 ;

  // register pixel_engine_char_x_pos
  assign pixel_engine_char_x_pos$D_IN = pixel_engine_char_x_pos + 3'd1 ;
  assign pixel_engine_char_x_pos$EN = CAN_FIRE_RL_pixel_engine_char_pixels ;

  // register pixel_engine_char_x_two_char
  assign pixel_engine_char_x_two_char$D_IN = next_x_two_char_addr__h2901 ;
  assign pixel_engine_char_x_two_char$EN =
	     CAN_FIRE_RL_pixel_engine_request_char_values ;

  // register pixel_engine_char_y
  assign pixel_engine_char_y$D_IN = next_char_y__h2903 ;
  assign pixel_engine_char_y$EN =
	     CAN_FIRE_RL_pixel_engine_request_char_values ;

  // register pixel_engine_cursor_pos
  assign pixel_engine_cursor_pos$D_IN = avalon_slave_outbuf$D_OUT[19:4] ;
  assign pixel_engine_cursor_pos$EN =
	     WILL_FIRE_RL_avalon_request_splitter &&
	     avalon_slave_outbuf$D_OUT[60:54] == 7'd4 &&
	     avalon_slave_outbuf$D_OUT[53:36] == 18'd1 &&
	     avalon_slave_outbuf$D_OUT[62:61] == 2'd1 ;

  // register pixel_engine_fb_blend
  assign pixel_engine_fb_blend$D_IN = avalon_slave_outbuf$D_OUT[35:4] ;
  assign pixel_engine_fb_blend$EN =
	     WILL_FIRE_RL_avalon_request_splitter &&
	     avalon_slave_outbuf$D_OUT[60:54] == 7'd4 &&
	     avalon_slave_outbuf$D_OUT[53:36] == 18'd0 &&
	     avalon_slave_outbuf$D_OUT[62:61] == 2'd1 ;

  // register pixel_engine_flash_col
  assign pixel_engine_flash_col$D_IN = pixel_engine_flash_col + 6'd1 ;
  assign pixel_engine_flash_col$EN =
	     WILL_FIRE_RL_pixel_engine_forward_pixel_values &&
	     pixel_engine_pixpos$D_OUT[0] ;

  // register pixel_engine_font_y
  assign pixel_engine_font_y$D_IN =
	     (pixel_engine_char_x_two_char == 6'd49) ?
	       ((pixel_engine_font_y == 4'd11) ?
		  4'd0 :
		  next_font_y___2__h2969) :
	       pixel_engine_font_y ;
  assign pixel_engine_font_y$EN =
	     CAN_FIRE_RL_pixel_engine_request_char_values ;

  // register prev_touch_info
  assign prev_touch_info$D_IN =
	     { coe_touch_x1,
	       coe_touch_y1,
	       coe_touch_x2,
	       coe_touch_y2,
	       coe_touch_count_gesture } ;
  assign prev_touch_info$EN =
	     coe_touch_touch_valid &&
	     NOT_coe_touch_x1_EQ_prev_touch_info_92_BITS_47_ETC___d611 &&
	     touch$FULL_N ;

  // submodule avalon_control_reg_resp
  assign avalon_control_reg_resp$D_IN =
	     { avalon_slave_outbuf$D_OUT[62:61] == 2'd0,
	       (avalon_slave_outbuf$D_OUT[53:36] == 18'd0 &&
		avalon_slave_outbuf$D_OUT[62:61] == 2'd0) ?
		 pixel_engine_fb_blend :
		 IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d458 } ;
  assign avalon_control_reg_resp$ENQ =
	     WILL_FIRE_RL_avalon_request_splitter &&
	     avalon_slave_outbuf$D_OUT[60:54] == 7'd4 ;
  assign avalon_control_reg_resp$DEQ =
	     CAN_FIRE_RL_return_control_register_response ;
  assign avalon_control_reg_resp$CLR = 1'b0 ;

  // submodule avalon_mem_resp
  assign avalon_mem_resp$D_IN =
	     { mem_resp$D_OUT[16] && lower_16b_returned$D_OUT[16],
	       mem_resp$D_OUT[15:0],
	       lower_16b_returned$D_OUT[15:0] } ;
  assign avalon_mem_resp$ENQ =
	     WILL_FIRE_RL_receive_mem_responses &&
	     lower_16b_returned$EMPTY_N &&
	     response_for_avalon$D_OUT ;
  assign avalon_mem_resp$DEQ = avalon_mem_resp$EMPTY_N ;
  assign avalon_mem_resp$CLR = 1'b0 ;

  // submodule avalon_req
  assign avalon_req$D_IN =
	     { avalon_slave_outbuf$D_OUT[62:61] == 2'd1,
	       avalon_slave_outbuf$D_OUT[3:0],
	       avalon_slave_outbuf$D_OUT[60:4] } ;
  assign avalon_req$ENQ =
	     WILL_FIRE_RL_avalon_request_splitter &&
	     avalon_slave_outbuf$D_OUT[60:54] != 7'd4 ;
  assign avalon_req$DEQ =
	     WILL_FIRE_RL_arbitrate_requests && !pixel_engine_req$EMPTY_N ;
  assign avalon_req$CLR = 1'b0 ;

  // submodule avalon_slave_outbuf
  assign avalon_slave_outbuf$D_IN =
	     { avs_s0_read ? 2'd0 : 2'd1,
	       avs_s0_address,
	       avs_s0_writedata,
	       avs_s0_byteenable } ;
  assign avalon_slave_outbuf$ENQ =
	     CAN_FIRE_RL_avalon_slave_hanlde_bus_requests ;
  assign avalon_slave_outbuf$DEQ = CAN_FIRE_RL_avalon_request_splitter ;
  assign avalon_slave_outbuf$CLR = 1'b0 ;

  // submodule lower_16b_returned
  assign lower_16b_returned$D_IN = mem_resp$D_OUT ;
  assign lower_16b_returned$ENQ =
	     WILL_FIRE_RL_receive_mem_responses &&
	     !lower_16b_returned$EMPTY_N ;
  assign lower_16b_returned$DEQ =
	     WILL_FIRE_RL_receive_mem_responses &&
	     lower_16b_returned$EMPTY_N ;
  assign lower_16b_returned$CLR = 1'b0 ;

  // submodule mem_pipe0
  assign mem_pipe0$D_IN = { mem_req$D_OUT[44], mem_req$D_OUT[15:0] } ;
  assign mem_pipe0$ENQ = CAN_FIRE_RL_mem_forward_requests_ssram ;
  assign mem_pipe0$DEQ = CAN_FIRE_RL_mem_pipe_stage_0 ;
  assign mem_pipe0$CLR = 1'b0 ;

  // submodule mem_pipe1
  assign mem_pipe1$D_IN = mem_pipe0$D_OUT ;
  assign mem_pipe1$ENQ = CAN_FIRE_RL_mem_pipe_stage_0 ;
  assign mem_pipe1$DEQ = CAN_FIRE_RL_mem_pipe_stage_1 ;
  assign mem_pipe1$CLR = 1'b0 ;

  // submodule mem_pipe2
  assign mem_pipe2$D_IN = mem_pipe1$D_OUT ;
  assign mem_pipe2$ENQ = CAN_FIRE_RL_mem_pipe_stage_1 ;
  assign mem_pipe2$DEQ = CAN_FIRE_RL_mem_pipe_stage_2 ;
  assign mem_pipe2$CLR = 1'b0 ;

  // submodule mem_req
  assign mem_req$D_IN =
	     WILL_FIRE_RL_arbitrate_requests ?
	       MUX_mem_req$enq_1__VAL_1 :
	       mem_upper_16b_request$D_OUT ;
  assign mem_req$ENQ =
	     WILL_FIRE_RL_arbitrate_requests ||
	     WILL_FIRE_RL_forward_upper_bytes ;
  assign mem_req$DEQ =
	     WILL_FIRE_RL_mem_forward_requests_flash &&
	     (mem_req$D_OUT[43:42] == 2'b0 || mem_flash_timer == 4'd10) ||
	     WILL_FIRE_RL_mem_forward_requests_ssram ;
  assign mem_req$CLR = 1'b0 ;

  // submodule mem_resp
  assign mem_resp$D_IN =
	     MUX_mem_resp$enq_1__SEL_1 ?
	       MUX_mem_resp$enq_1__VAL_1 :
	       MUX_mem_resp$enq_1__VAL_2 ;
  assign mem_resp$ENQ =
	     WILL_FIRE_RL_mem_forward_requests_flash &&
	     (mem_req$D_OUT[43:42] == 2'b0 || mem_flash_timer == 4'd10) ||
	     WILL_FIRE_RL_mem_pipe_stage_2 ;
  assign mem_resp$DEQ = CAN_FIRE_RL_receive_mem_responses ;
  assign mem_resp$CLR = 1'b0 ;

  // submodule mem_upper_16b_request
  assign mem_upper_16b_request$D_IN =
	     { IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d621,
	       IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d668[3:2],
	       x_addr__h13123,
	       IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d669[31:16] } ;
  assign mem_upper_16b_request$ENQ = CAN_FIRE_RL_arbitrate_requests ;
  assign mem_upper_16b_request$DEQ = CAN_FIRE_RL_forward_upper_bytes ;
  assign mem_upper_16b_request$CLR = 1'b0 ;

  // submodule pixel_engine_char_colour
  assign pixel_engine_char_colour$D_IN =
	     { x__h7183 == pixel_engine_cursor_pos[15:8] &&
	       pixel_engine_char_pos$D_OUT[7:0] ==
	       pixel_engine_cursor_pos[7:0],
	       pixel_engine_char_ctr ?
		 pixel_engine_two_chars$D_OUT[31:24] :
		 pixel_engine_two_chars$D_OUT[15:8],
	       1'd0 } ;
  assign pixel_engine_char_colour$ENQ =
	     CAN_FIRE_RL_pixel_engine_demux_two_chars ;
  assign pixel_engine_char_colour$DEQ =
	     WILL_FIRE_RL_pixel_engine_char_pixels &&
	     pixel_engine_char_x_pos == 3'd7 ;
  assign pixel_engine_char_colour$CLR = 1'b0 ;

  // submodule pixel_engine_char_pixel
  assign pixel_engine_char_pixel$D_IN =
	     { pixel_engine_char_colour$D_OUT[9:1], x__h7731 } ;
  assign pixel_engine_char_pixel$ENQ = CAN_FIRE_RL_pixel_engine_char_pixels ;
  assign pixel_engine_char_pixel$DEQ =
	     CAN_FIRE_RL_pixel_engine_forward_pixel_values ;
  assign pixel_engine_char_pixel$CLR = 1'b0 ;

  // submodule pixel_engine_char_pos
  assign pixel_engine_char_pos$D_IN = { x__h2840, pixel_engine_char_y[7:0] } ;
  assign pixel_engine_char_pos$ENQ =
	     CAN_FIRE_RL_pixel_engine_request_char_values ;
  assign pixel_engine_char_pos$DEQ =
	     WILL_FIRE_RL_pixel_engine_demux_two_chars &&
	     pixel_engine_char_ctr ;
  assign pixel_engine_char_pos$CLR = 1'b0 ;

  // submodule pixel_engine_chars_read
  assign pixel_engine_chars_read$D_IN =
	     !WILL_FIRE_RL_pixel_engine_request_pixel_values ;
  assign pixel_engine_chars_read$ENQ =
	     WILL_FIRE_RL_pixel_engine_request_pixel_values ||
	     WILL_FIRE_RL_pixel_engine_request_char_values ;
  assign pixel_engine_chars_read$DEQ =
	     WILL_FIRE_RL_pixel_engine_buffer_characters_read ||
	     WILL_FIRE_RL_pixel_engine_forward_pixel_values ;
  assign pixel_engine_chars_read$CLR = 1'b0 ;

  // submodule pixel_engine_font_y_pos
  assign pixel_engine_font_y_pos$D_IN = pixel_engine_font_y ;
  assign pixel_engine_font_y_pos$ENQ =
	     CAN_FIRE_RL_pixel_engine_request_char_values ;
  assign pixel_engine_font_y_pos$DEQ =
	     WILL_FIRE_RL_pixel_engine_demux_two_chars &&
	     pixel_engine_char_ctr ;
  assign pixel_engine_font_y_pos$CLR = 1'b0 ;

  // submodule pixel_engine_fontbits
  assign pixel_engine_fontbits$D_IN = pixel_engine_fontrom_rom$v_data ;
  assign pixel_engine_fontbits$ENQ =
	     CAN_FIRE_RL_pixel_engine_mkConnectionGetPut ;
  assign pixel_engine_fontbits$DEQ =
	     WILL_FIRE_RL_pixel_engine_char_pixels &&
	     pixel_engine_char_x_pos == 3'd7 ;
  assign pixel_engine_fontbits$CLR = 1'b0 ;

  // submodule pixel_engine_fontrom_rom
  assign pixel_engine_fontrom_rom$v_addr =
	     { char__h6798, pixel_engine_font_y_pos$D_OUT } ;
  assign pixel_engine_fontrom_rom$v_en =
	     CAN_FIRE_RL_pixel_engine_demux_two_chars ;

  // submodule pixel_engine_fontrom_seq_fifo
  assign pixel_engine_fontrom_seq_fifo$D_IN = 1'd1 ;
  assign pixel_engine_fontrom_seq_fifo$ENQ =
	     CAN_FIRE_RL_pixel_engine_demux_two_chars ;
  assign pixel_engine_fontrom_seq_fifo$DEQ =
	     CAN_FIRE_RL_pixel_engine_mkConnectionGetPut ;
  assign pixel_engine_fontrom_seq_fifo$CLR = 1'b0 ;

  // submodule pixel_engine_pixpos
  assign pixel_engine_pixpos$D_IN =
	     { pixel_engine_addr == 25'd0, pixel_engine_addr == 25'd383999 } ;
  assign pixel_engine_pixpos$ENQ =
	     WILL_FIRE_RL_pixel_engine_request_pixel_values ;
  assign pixel_engine_pixpos$DEQ =
	     CAN_FIRE_RL_pixel_engine_forward_pixel_values ;
  assign pixel_engine_pixpos$CLR = 1'b0 ;

  // submodule pixel_engine_req
  assign pixel_engine_req$D_IN = pixel_engine_ssram_req$D_OUT ;
  assign pixel_engine_req$ENQ = CAN_FIRE_RL_mkConnectionGetPut ;
  assign pixel_engine_req$DEQ =
	     WILL_FIRE_RL_arbitrate_requests && pixel_engine_req$EMPTY_N ;
  assign pixel_engine_req$CLR = 1'b0 ;

  // submodule pixel_engine_ssram_req
  assign pixel_engine_ssram_req$D_IN =
	     WILL_FIRE_RL_pixel_engine_request_char_values ?
	       MUX_pixel_engine_ssram_req$enq_1__VAL_1 :
	       MUX_pixel_engine_ssram_req$enq_1__VAL_2 ;
  assign pixel_engine_ssram_req$ENQ =
	     WILL_FIRE_RL_pixel_engine_request_char_values ||
	     WILL_FIRE_RL_pixel_engine_request_pixel_values ;
  assign pixel_engine_ssram_req$DEQ = CAN_FIRE_RL_mkConnectionGetPut ;
  assign pixel_engine_ssram_req$CLR = 1'b0 ;

  // submodule pixel_engine_ssram_resp
  assign pixel_engine_ssram_resp$D_IN =
	     { mem_resp$D_OUT[15:0], lower_16b_returned$D_OUT[15:0] } ;
  assign pixel_engine_ssram_resp$ENQ =
	     WILL_FIRE_RL_receive_mem_responses &&
	     lower_16b_returned$EMPTY_N &&
	     !response_for_avalon$D_OUT ;
  assign pixel_engine_ssram_resp$DEQ =
	     WILL_FIRE_RL_pixel_engine_buffer_characters_read ||
	     WILL_FIRE_RL_pixel_engine_forward_pixel_values ;
  assign pixel_engine_ssram_resp$CLR = 1'b0 ;

  // submodule pixel_engine_two_chars
  assign pixel_engine_two_chars$D_IN = pixel_engine_ssram_resp$D_OUT ;
  assign pixel_engine_two_chars$ENQ =
	     CAN_FIRE_RL_pixel_engine_buffer_characters_read ;
  assign pixel_engine_two_chars$DEQ =
	     WILL_FIRE_RL_pixel_engine_demux_two_chars &&
	     pixel_engine_char_ctr ;
  assign pixel_engine_two_chars$CLR = 1'b0 ;

  // submodule response_for_avalon
  assign response_for_avalon$D_IN = !pixel_engine_req$EMPTY_N ;
  assign response_for_avalon$ENQ = CAN_FIRE_RL_arbitrate_requests ;
  assign response_for_avalon$DEQ =
	     WILL_FIRE_RL_receive_mem_responses &&
	     lower_16b_returned$EMPTY_N ;
  assign response_for_avalon$CLR = 1'b0 ;

  // submodule touch
  assign touch$D_IN = prev_touch_info$D_IN ;
  assign touch$ENQ =
	     coe_touch_touch_valid &&
	     NOT_coe_touch_x1_EQ_prev_touch_info_92_BITS_47_ETC___d611 &&
	     touch$FULL_N ;
  assign touch$DEQ =
	     WILL_FIRE_RL_avalon_request_splitter &&
	     avalon_slave_outbuf$D_OUT[60:54] == 7'd4 &&
	     avalon_slave_outbuf$D_OUT[53:36] == 18'd7 &&
	     avalon_slave_outbuf$D_OUT[62:61] == 2'd0 ;
  assign touch$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d452 =
	     (avalon_slave_outbuf$D_OUT[53:36] == 18'd7 &&
	      avalon_slave_outbuf$D_OUT[62:61] == 2'd0) ?
	       (touch$EMPTY_N ? { 22'd0, touch$D_OUT[9:0] } : 32'hFFFFFFFF) :
	       32'hFFFFFFFF ;
  assign IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d453 =
	     (avalon_slave_outbuf$D_OUT[53:36] == 18'd6 &&
	      avalon_slave_outbuf$D_OUT[62:61] == 2'd0) ?
	       (touch$EMPTY_N ?
		  { 23'd0, touch$D_OUT[18:10] } :
		  32'hFFFFFFFF) :
	       IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d452 ;
  assign IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d454 =
	     (avalon_slave_outbuf$D_OUT[53:36] == 18'd5 &&
	      avalon_slave_outbuf$D_OUT[62:61] == 2'd0) ?
	       (touch$EMPTY_N ?
		  { 22'd0, touch$D_OUT[28:19] } :
		  32'hFFFFFFFF) :
	       IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d453 ;
  assign IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d455 =
	     (avalon_slave_outbuf$D_OUT[53:36] == 18'd4 &&
	      avalon_slave_outbuf$D_OUT[62:61] == 2'd0) ?
	       (touch$EMPTY_N ?
		  { 23'd0, touch$D_OUT[37:29] } :
		  32'hFFFFFFFF) :
	       IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d454 ;
  assign IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d456 =
	     (avalon_slave_outbuf$D_OUT[53:36] == 18'd3 &&
	      avalon_slave_outbuf$D_OUT[62:61] == 2'd0) ?
	       (touch$EMPTY_N ?
		  { 22'd0, touch$D_OUT[47:38] } :
		  32'hFFFFFFFF) :
	       IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d455 ;
  assign IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d458 =
	     (avalon_slave_outbuf$D_OUT[53:36] == 18'd1 &&
	      avalon_slave_outbuf$D_OUT[62:61] == 2'd0) ?
	       { 16'd0, pixel_engine_cursor_pos } :
	       ((avalon_slave_outbuf$D_OUT[53:36] == 18'd2 &&
		 avalon_slave_outbuf$D_OUT[62:61] == 2'd0) ?
		  { 7'd0, pixel_engine_char_base[22:0], 2'd0 } :
		  IF_avalon_slave_outbuf_first__89_BITS_53_TO_36_ETC___d456) ;
  assign IF_mem_ssram_byteenable_w_whas__65_THEN_mem_ss_ETC___d710 =
	     CAN_FIRE_RL_mem_forward_requests_ssram ?
	       mem_req$D_OUT[43:42] :
	       2'b0 ;
  assign IF_pixel_engine_char_x_two_char_5_EQ_49_0_THEN_ETC___d55 =
	     next_char_y__h2903 * 25'd50 ;
  assign IF_pixel_engine_font_y_4_EQ_11_3_THEN_IF_pixel_ETC___d645 =
	     (pixel_engine_font_y == 4'd11) ?
	       ((pixel_engine_char_y == 25'd39) ?
		  25'd0 :
		  next_char_y___2__h3016) :
	       pixel_engine_char_y ;
  assign IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d621 =
	     pixel_engine_req$EMPTY_N ?
	       pixel_engine_req$D_OUT[61] :
	       avalon_req$D_OUT[61] ;
  assign IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d668 =
	     pixel_engine_req$EMPTY_N ?
	       pixel_engine_req$D_OUT[60:57] :
	       avalon_req$D_OUT[60:57] ;
  assign IF_pixel_engine_req_i_notEmpty__75_THEN_pixel__ETC___d669 =
	     pixel_engine_req$EMPTY_N ?
	       pixel_engine_req$D_OUT[31:0] :
	       avalon_req$D_OUT[31:0] ;
  assign NOT_coe_touch_x1_EQ_prev_touch_info_92_BITS_47_ETC___d611 =
	     coe_touch_x1 != prev_touch_info[47:38] ||
	     coe_touch_y1 != prev_touch_info[37:29] ||
	     coe_touch_x2 != prev_touch_info[28:19] ||
	     coe_touch_y2 != prev_touch_info[18:10] ||
	     coe_touch_count_gesture != prev_touch_info[9:0] ;
  assign a__h3765 = minus__h3867[8] ? 8'd0 : minus__h3867[7:0] ;
  assign a__h3866 =
	     pixel_engine_char_pixel_first__16_BIT_9_17_AND_ETC___d706 ?
	       IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655[23:16] :
	       IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654[23:16] ;
  assign a__h5019 = minus__h5121[8] ? 8'd0 : minus__h5121[7:0] ;
  assign a__h5120 =
	     pixel_engine_char_pixel_first__16_BIT_9_17_AND_ETC___d706 ?
	       IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655[15:8] :
	       IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654[15:8] ;
  assign a__h5610 = minus__h5712[8] ? 8'd0 : minus__h5712[7:0] ;
  assign a__h5711 =
	     pixel_engine_char_pixel_first__16_BIT_9_17_AND_ETC___d706 ?
	       IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655[7:0] :
	       IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654[7:0] ;
  assign b__h14135 =
	     MUX_avalon_slave_datareturned$wset_1__SEL_1 ?
	       avalon_mem_resp$D_OUT[31:0] :
	       avalon_control_reg_resp$D_OUT[31:0] ;
  assign b__h3310 = sum__h3767[8] ? 8'hFF : sum__h3767[7:0] ;
  assign b__h3766 = minus__h4723[8] ? 8'd0 : minus__h4723[7:0] ;
  assign b__h4865 = sum__h5021[8] ? 8'hFF : sum__h5021[7:0] ;
  assign b__h5020 = minus__h5335[8] ? 8'd0 : minus__h5335[7:0] ;
  assign b__h5456 = sum__h5612[8] ? 8'hFF : sum__h5612[7:0] ;
  assign b__h5611 = minus__h5926[8] ? 8'd0 : minus__h5926[7:0] ;
  assign bitmap_col_chan_b__h3300 = sum__h5457[8] ? 8'hFF : sum__h5457[7:0] ;
  assign bitmap_col_chan_g__h3299 = sum__h4866[8] ? 8'hFF : sum__h4866[7:0] ;
  assign bitmap_col_chan_r__h3298 = sum__h3311[8] ? 8'hFF : sum__h3311[7:0] ;
  assign char__h6798 =
	     pixel_engine_char_ctr ?
	       pixel_engine_two_chars$D_OUT[23:16] :
	       pixel_engine_two_chars$D_OUT[7:0] ;
  assign char_alpha__h3227 =
	     pixel_engine_char_pixel_first__16_BIT_9_17_AND_ETC___d706 ?
	       pixel_engine_fb_blend[7:0] :
	       pixel_engine_fb_blend[15:8] ;
  assign mem_req_i_notEmpty__24_AND_IF_mem_req_first__2_ETC___d345 =
	     mem_req$EMPTY_N &&
	     ((mem_req$D_OUT[43:42] == 2'b0) ?
		mem_resp$FULL_N :
		mem_flash_timer != 4'd10 || mem_resp$FULL_N) ;
  assign minus__h3867 =
	     { 1'd0, a__h3866 } - { 1'd0, pixel_engine_fb_blend[23:16] } ;
  assign minus__h4723 =
	     { 1'd0, pixel_engine_ssram_resp$D_OUT[23:16] } -
	     { 1'd0, char_alpha__h3227 } ;
  assign minus__h5121 =
	     { 1'd0, a__h5120 } - { 1'd0, pixel_engine_fb_blend[23:16] } ;
  assign minus__h5335 =
	     { 1'd0, pixel_engine_ssram_resp$D_OUT[15:8] } -
	     { 1'd0, char_alpha__h3227 } ;
  assign minus__h5712 =
	     { 1'd0, a__h5711 } - { 1'd0, pixel_engine_fb_blend[23:16] } ;
  assign minus__h5926 =
	     { 1'd0, pixel_engine_ssram_resp$D_OUT[7:0] } -
	     { 1'd0, char_alpha__h3227 } ;
  assign next_addr__h3065 = pixel_engine_addr + 25'd1 ;
  assign next_char_y___2__h3016 = pixel_engine_char_y + 25'd1 ;
  assign next_char_y__h2903 =
	     (pixel_engine_char_x_two_char == 6'd49) ?
	       IF_pixel_engine_font_y_4_EQ_11_3_THEN_IF_pixel_ETC___d645 :
	       pixel_engine_char_y ;
  assign next_font_y___2__h2969 = pixel_engine_font_y + 4'd1 ;
  assign next_x_two_char_addr__h2897 = pixel_engine_char_x_two_char + 6'd1 ;
  assign next_x_two_char_addr__h2901 =
	     (pixel_engine_char_x_two_char == 6'd49) ?
	       6'd0 :
	       next_x_two_char_addr__h2897 ;
  assign pixel_engine_char_pixel_first__16_BIT_9_17_AND_ETC___d706 =
	     (pixel_engine_char_pixel$D_OUT[9] &&
	      pixel_engine_flash_col[5]) ==
	     (pixel_engine_char_pixel$D_OUT[0] &&
	      (!pixel_engine_char_pixel$D_OUT[8] ||
	       pixel_engine_flash_col[4])) ;
  assign response_for_avalon_i_notEmpty__24_AND_IF_resp_ETC___d529 =
	     response_for_avalon$EMPTY_N &&
	     (response_for_avalon$D_OUT ?
		avalon_mem_resp$FULL_N :
		pixel_engine_ssram_resp$FULL_N) ;
  assign sum__h3311 =
	     { 1'd0,
	       IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652[23:16] } +
	     { 1'd0, b__h3310 } ;
  assign sum__h3767 = { 1'd0, a__h3765 } + { 1'd0, b__h3766 } ;
  assign sum__h4866 =
	     { 1'd0,
	       IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652[15:8] } +
	     { 1'd0, b__h4865 } ;
  assign sum__h5021 = { 1'd0, a__h5019 } + { 1'd0, b__h5020 } ;
  assign sum__h5457 =
	     { 1'd0,
	       IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652[7:0] } +
	     { 1'd0, b__h5456 } ;
  assign sum__h5612 = { 1'd0, a__h5610 } + { 1'd0, b__h5611 } ;
  assign x1_avValue_addr__h12990 =
	     pixel_engine_req$EMPTY_N ?
	       pixel_engine_req$D_OUT[56:32] :
	       avalon_req$D_OUT[56:32] ;
  assign x__h13071 = { x1_avValue_addr__h12990, 1'b0 } ;
  assign x__h2840 = { 1'd0, pixel_engine_char_x_two_char, 1'd0 } ;
  assign x__h3050 = pixel_engine_char_base + y__h3053 ;
  assign x__h7183 =
	     pixel_engine_char_pos$D_OUT[15:8] +
	     { 7'd0, pixel_engine_char_ctr } ;
  assign x__h7731 = pixel_engine_fontbits$D_OUT[x__h7767] ;
  assign x__h7767 = 3'd7 - pixel_engine_char_x_pos ;
  assign x_addr__h13123 = { x1_avValue_addr__h12990, 1'b1 } ;
  assign y__h3053 = { 19'd0, next_x_two_char_addr__h2901 } ;
  always@(pixel_engine_fb_blend)
  begin
    case (pixel_engine_fb_blend[27:24])
      4'd0: IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 = 24'h0;
      4'd1:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'h0000AA;
      4'd2:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'h00AA00;
      4'd3:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'h00AAAA;
      4'd4:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'hAA0000;
      4'd5:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'hAA00AA;
      4'd6:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'hAA5500;
      4'd7:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'hAAAAAA;
      4'd8:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'h555555;
      4'd9:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'h5555FF;
      4'd10:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'h55FF55;
      4'd11:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'h55FFFF;
      4'd12:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'hFF5555;
      4'd13:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'hFF55FF;
      4'd14:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'hFFFF55;
      4'd15:
	  IF_pixel_engine_fb_blend_0_BITS_27_TO_24_1_EQ__ETC___d652 =
	      24'hFFFFFF;
    endcase
  end
  always@(pixel_engine_char_pixel$D_OUT)
  begin
    case (pixel_engine_char_pixel$D_OUT[7:5])
      3'd0: IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655 = 24'h0;
      3'd1:
	  IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655 =
	      24'h0000AA;
      3'd2:
	  IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655 =
	      24'h00AA00;
      3'd3:
	  IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655 =
	      24'h00AAAA;
      3'd4:
	  IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655 =
	      24'hAA0000;
      3'd5:
	  IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655 =
	      24'hAA00AA;
      3'd6:
	  IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655 =
	      24'hAA5500;
      3'd7:
	  IF_pixel_engine_char_pixel_first__16_BITS_7_TO_ETC___d655 =
	      24'hAAAAAA;
    endcase
  end
  always@(pixel_engine_char_pixel$D_OUT)
  begin
    case (pixel_engine_char_pixel$D_OUT[4:1])
      4'd0: IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 = 24'h0;
      4'd1:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'h0000AA;
      4'd2:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'h00AA00;
      4'd3:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'h00AAAA;
      4'd4:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'hAA0000;
      4'd5:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'hAA00AA;
      4'd6:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'hAA5500;
      4'd7:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'hAAAAAA;
      4'd8:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'h555555;
      4'd9:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'h5555FF;
      4'd10:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'h55FF55;
      4'd11:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'h55FFFF;
      4'd12:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'hFF5555;
      4'd13:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'hFF55FF;
      4'd14:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'hFFFF55;
      4'd15:
	  IF_pixel_engine_char_pixel_first__16_BITS_4_TO_ETC___d654 =
	      24'hFFFFFF;
    endcase
  end

  // handling of inlined registers

  always@(posedge csi_clockreset_clk)
  begin
    if (!csi_clockreset_reset_n)
      begin
        avalon_slave_ignore_further_requests <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mem_flash_timer <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pixel_engine_addr <= `BSV_ASSIGNMENT_DELAY 25'd0;
	pixel_engine_char_addr <= `BSV_ASSIGNMENT_DELAY 25'd384000;
	pixel_engine_char_base <= `BSV_ASSIGNMENT_DELAY 25'd384000;
	pixel_engine_char_ctr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pixel_engine_char_end <= `BSV_ASSIGNMENT_DELAY 25'd390000;
	pixel_engine_char_x_pos <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pixel_engine_char_x_two_char <= `BSV_ASSIGNMENT_DELAY 6'd0;
	pixel_engine_char_y <= `BSV_ASSIGNMENT_DELAY 25'd0;
	pixel_engine_cursor_pos <= `BSV_ASSIGNMENT_DELAY 16'd65535;
	pixel_engine_fb_blend <= `BSV_ASSIGNMENT_DELAY 32'd50331647;
	pixel_engine_flash_col <= `BSV_ASSIGNMENT_DELAY 6'd0;
	pixel_engine_font_y <= `BSV_ASSIGNMENT_DELAY 4'd0;
	prev_touch_info <= `BSV_ASSIGNMENT_DELAY 48'hAAAAAAAAAAAA;
      end
    else
      begin
        if (avalon_slave_ignore_further_requests$EN)
	  avalon_slave_ignore_further_requests <= `BSV_ASSIGNMENT_DELAY
	      avalon_slave_ignore_further_requests$D_IN;
	if (mem_flash_timer$EN)
	  mem_flash_timer <= `BSV_ASSIGNMENT_DELAY mem_flash_timer$D_IN;
	if (pixel_engine_addr$EN)
	  pixel_engine_addr <= `BSV_ASSIGNMENT_DELAY pixel_engine_addr$D_IN;
	if (pixel_engine_char_addr$EN)
	  pixel_engine_char_addr <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_char_addr$D_IN;
	if (pixel_engine_char_base$EN)
	  pixel_engine_char_base <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_char_base$D_IN;
	if (pixel_engine_char_ctr$EN)
	  pixel_engine_char_ctr <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_char_ctr$D_IN;
	if (pixel_engine_char_end$EN)
	  pixel_engine_char_end <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_char_end$D_IN;
	if (pixel_engine_char_x_pos$EN)
	  pixel_engine_char_x_pos <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_char_x_pos$D_IN;
	if (pixel_engine_char_x_two_char$EN)
	  pixel_engine_char_x_two_char <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_char_x_two_char$D_IN;
	if (pixel_engine_char_y$EN)
	  pixel_engine_char_y <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_char_y$D_IN;
	if (pixel_engine_cursor_pos$EN)
	  pixel_engine_cursor_pos <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_cursor_pos$D_IN;
	if (pixel_engine_fb_blend$EN)
	  pixel_engine_fb_blend <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_fb_blend$D_IN;
	if (pixel_engine_flash_col$EN)
	  pixel_engine_flash_col <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_flash_col$D_IN;
	if (pixel_engine_font_y$EN)
	  pixel_engine_font_y <= `BSV_ASSIGNMENT_DELAY
	      pixel_engine_font_y$D_IN;
	if (prev_touch_info$EN)
	  prev_touch_info <= `BSV_ASSIGNMENT_DELAY prev_touch_info$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    avalon_slave_ignore_further_requests = 1'h0;
    mem_flash_timer = 4'hA;
    pixel_engine_addr = 25'h0AAAAAA;
    pixel_engine_char_addr = 25'h0AAAAAA;
    pixel_engine_char_base = 25'h0AAAAAA;
    pixel_engine_char_ctr = 1'h0;
    pixel_engine_char_end = 25'h0AAAAAA;
    pixel_engine_char_x_pos = 3'h2;
    pixel_engine_char_x_two_char = 6'h2A;
    pixel_engine_char_y = 25'h0AAAAAA;
    pixel_engine_cursor_pos = 16'hAAAA;
    pixel_engine_fb_blend = 32'hAAAAAAAA;
    pixel_engine_flash_col = 6'h2A;
    pixel_engine_font_y = 4'hA;
    prev_touch_info = 48'hAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMTL_Framebuffer_Flash

