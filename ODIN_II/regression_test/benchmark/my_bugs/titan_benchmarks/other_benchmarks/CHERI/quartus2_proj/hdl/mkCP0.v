//
// Generated by Bluespec Compiler, version 2012.07.beta1 (build 29243, 2012-07-26)
//
// On Fri Aug 31 13:44:29 BST 2012
//
// Method conflict info:
// Method: readReq
// Conflict-free: writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       interrupts,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Sequenced after (restricted): readGet
// Conflicts: readReq
//
// Method: readGet
// Conflict-free: writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Sequenced before (restricted): readReq, interrupts
// Conflicts: readGet
//
// Method: writeReg
// Conflict-free: readReq,
// 	       readGet,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Sequenced before (restricted): interrupts
// Conflicts: writeReg
//
// Method: getException
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Sequenced before (restricted): interrupts
//
// Method: putException
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       getLlScReg,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Sequenced before (restricted): interrupts
// Conflicts: putException
//
// Method: getLlScReg
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       interrupts,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
//
// Method: interrupts
// Conflict-free: readReq,
// 	       getLlScReg,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupData_request_put,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Sequenced before (restricted): interrupts
// Sequenced after (restricted): readGet,
// 			      writeReg,
// 			      getException,
// 			      putException,
// 			      tlbLookupInstruction_response_get,
// 			      tlbLookupData_response_get
//
// Method: getExceptionReturn
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       interrupts,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Conflicts: getExceptionReturn
//
// Method: getCoprocessorEnables
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       interrupts,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
//
// Method: tlbLookupInstruction_request_put
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       interrupts,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Conflicts: tlbLookupInstruction_request_put
//
// Method: tlbLookupInstruction_response_get
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Sequenced before (restricted): interrupts
// Conflicts: tlbLookupInstruction_response_get
//
// Method: tlbLookupData_request_put
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       interrupts,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Conflicts: tlbLookupData_request_put
//
// Method: tlbLookupData_response_get
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupCoprocessors_0_request_put,
// 	       tlbLookupCoprocessors_0_response_get
// Sequenced before (restricted): interrupts
// Conflicts: tlbLookupData_response_get
//
// Method: tlbLookupCoprocessors_0_request_put
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       interrupts,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_response_get
// Conflicts: tlbLookupCoprocessors_0_request_put
//
// Method: tlbLookupCoprocessors_0_response_get
// Conflict-free: readReq,
// 	       readGet,
// 	       writeReg,
// 	       getException,
// 	       putException,
// 	       getLlScReg,
// 	       interrupts,
// 	       getExceptionReturn,
// 	       getCoprocessorEnables,
// 	       tlbLookupInstruction_request_put,
// 	       tlbLookupInstruction_response_get,
// 	       tlbLookupData_request_put,
// 	       tlbLookupData_response_get,
// 	       tlbLookupCoprocessors_0_request_put
// Conflicts: tlbLookupCoprocessors_0_response_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_readReq                    O     1
// readGet                        O    64
// RDY_readGet                    O     1
// RDY_writeReg                   O     1
// getException                   O     7
// RDY_getException               O     1 const
// RDY_putException               O     1 const
// getLlScReg                     O     1
// RDY_getLlScReg                 O     1 const
// RDY_interrupts                 O     1 const
// RDY_getExceptionReturn         O     1 reg
// getCoprocessorEnables          O     4
// RDY_getCoprocessorEnables      O     1 const
// RDY_tlbLookupInstruction_request_put  O     1
// tlbLookupInstruction_response_get  O    50
// RDY_tlbLookupInstruction_response_get  O     1
// RDY_tlbLookupData_request_put  O     1
// tlbLookupData_response_get     O    50
// RDY_tlbLookupData_response_get  O     1
// RDY_tlbLookupCoprocessors_0_request_put  O     1
// tlbLookupCoprocessors_0_response_get  O    50
// RDY_tlbLookupCoprocessors_0_response_get  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// readReq_rn                     I     5 reg
// readReq_sel                    I     3 reg
// readGet_goingToWrite           I     1
// writeReg_rn                    I     5 reg
// writeReg_data                  I    64 reg
// writeReg_forceKernelMode       I     1 reg
// writeReg_writeBack             I     1
// putException_exp               I   139
// getLlScReg_matchAddress        I    64
// interrupts_interruptLines      I     5 reg
// tlbLookupInstruction_request_put  I    75
// tlbLookupData_request_put      I    75
// tlbLookupCoprocessors_0_request_put  I    75
// EN_readReq                     I     1
// EN_writeReg                    I     1
// EN_putException                I     1
// EN_interrupts                  I     1
// EN_getExceptionReturn          I     1
// EN_tlbLookupInstruction_request_put  I     1
// EN_tlbLookupData_request_put   I     1
// EN_tlbLookupCoprocessors_0_request_put  I     1
// EN_readGet                     I     1
// EN_getException                I     1 unused
// EN_tlbLookupInstruction_response_get  I     1
// EN_tlbLookupData_response_get  I     1
// EN_tlbLookupCoprocessors_0_response_get  I     1
//
// Combinational paths from inputs to outputs:
//   getLlScReg_matchAddress -> getLlScReg
//   EN_readGet -> RDY_readReq
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkCP0(CLK,
	     RST_N,

	     readReq_rn,
	     readReq_sel,
	     EN_readReq,
	     RDY_readReq,

	     readGet_goingToWrite,
	     EN_readGet,
	     readGet,
	     RDY_readGet,

	     writeReg_rn,
	     writeReg_data,
	     writeReg_forceKernelMode,
	     writeReg_writeBack,
	     EN_writeReg,
	     RDY_writeReg,

	     EN_getException,
	     getException,
	     RDY_getException,

	     putException_exp,
	     EN_putException,
	     RDY_putException,

	     getLlScReg_matchAddress,
	     getLlScReg,
	     RDY_getLlScReg,

	     interrupts_interruptLines,
	     EN_interrupts,
	     RDY_interrupts,

	     EN_getExceptionReturn,
	     RDY_getExceptionReturn,

	     getCoprocessorEnables,
	     RDY_getCoprocessorEnables,

	     tlbLookupInstruction_request_put,
	     EN_tlbLookupInstruction_request_put,
	     RDY_tlbLookupInstruction_request_put,

	     EN_tlbLookupInstruction_response_get,
	     tlbLookupInstruction_response_get,
	     RDY_tlbLookupInstruction_response_get,

	     tlbLookupData_request_put,
	     EN_tlbLookupData_request_put,
	     RDY_tlbLookupData_request_put,

	     EN_tlbLookupData_response_get,
	     tlbLookupData_response_get,
	     RDY_tlbLookupData_response_get,

	     tlbLookupCoprocessors_0_request_put,
	     EN_tlbLookupCoprocessors_0_request_put,
	     RDY_tlbLookupCoprocessors_0_request_put,

	     EN_tlbLookupCoprocessors_0_response_get,
	     tlbLookupCoprocessors_0_response_get,
	     RDY_tlbLookupCoprocessors_0_response_get);
  input  CLK;
  input  RST_N;

  // action method readReq
  input  [4 : 0] readReq_rn;
  input  [2 : 0] readReq_sel;
  input  EN_readReq;
  output RDY_readReq;

  // actionvalue method readGet
  input  readGet_goingToWrite;
  input  EN_readGet;
  output [63 : 0] readGet;
  output RDY_readGet;

  // action method writeReg
  input  [4 : 0] writeReg_rn;
  input  [63 : 0] writeReg_data;
  input  writeReg_forceKernelMode;
  input  writeReg_writeBack;
  input  EN_writeReg;
  output RDY_writeReg;

  // actionvalue method getException
  input  EN_getException;
  output [6 : 0] getException;
  output RDY_getException;

  // action method putException
  input  [138 : 0] putException_exp;
  input  EN_putException;
  output RDY_putException;

  // value method getLlScReg
  input  [63 : 0] getLlScReg_matchAddress;
  output getLlScReg;
  output RDY_getLlScReg;

  // action method interrupts
  input  [4 : 0] interrupts_interruptLines;
  input  EN_interrupts;
  output RDY_interrupts;

  // action method getExceptionReturn
  input  EN_getExceptionReturn;
  output RDY_getExceptionReturn;

  // value method getCoprocessorEnables
  output [3 : 0] getCoprocessorEnables;
  output RDY_getCoprocessorEnables;

  // action method tlbLookupInstruction_request_put
  input  [74 : 0] tlbLookupInstruction_request_put;
  input  EN_tlbLookupInstruction_request_put;
  output RDY_tlbLookupInstruction_request_put;

  // actionvalue method tlbLookupInstruction_response_get
  input  EN_tlbLookupInstruction_response_get;
  output [49 : 0] tlbLookupInstruction_response_get;
  output RDY_tlbLookupInstruction_response_get;

  // action method tlbLookupData_request_put
  input  [74 : 0] tlbLookupData_request_put;
  input  EN_tlbLookupData_request_put;
  output RDY_tlbLookupData_request_put;

  // actionvalue method tlbLookupData_response_get
  input  EN_tlbLookupData_response_get;
  output [49 : 0] tlbLookupData_response_get;
  output RDY_tlbLookupData_response_get;

  // action method tlbLookupCoprocessors_0_request_put
  input  [74 : 0] tlbLookupCoprocessors_0_request_put;
  input  EN_tlbLookupCoprocessors_0_request_put;
  output RDY_tlbLookupCoprocessors_0_request_put;

  // actionvalue method tlbLookupCoprocessors_0_response_get
  input  EN_tlbLookupCoprocessors_0_response_get;
  output [49 : 0] tlbLookupCoprocessors_0_response_get;
  output RDY_tlbLookupCoprocessors_0_response_get;

  // signals for module outputs
  reg [63 : 0] readGet;
  wire [49 : 0] tlbLookupCoprocessors_0_response_get,
		tlbLookupData_response_get,
		tlbLookupInstruction_response_get;
  wire [6 : 0] getException;
  wire [3 : 0] getCoprocessorEnables;
  wire RDY_getCoprocessorEnables,
       RDY_getException,
       RDY_getExceptionReturn,
       RDY_getLlScReg,
       RDY_interrupts,
       RDY_putException,
       RDY_readGet,
       RDY_readReq,
       RDY_tlbLookupCoprocessors_0_request_put,
       RDY_tlbLookupCoprocessors_0_response_get,
       RDY_tlbLookupData_request_put,
       RDY_tlbLookupData_response_get,
       RDY_tlbLookupInstruction_request_put,
       RDY_tlbLookupInstruction_response_get,
       RDY_writeReg,
       getLlScReg;

  // register badVAddr
  reg [63 : 0] badVAddr;
  wire [63 : 0] badVAddr$D_IN;
  wire badVAddr$EN;

  // register cause
  reg [31 : 0] cause;
  wire [31 : 0] cause$D_IN;
  wire cause$EN;

  // register compare
  reg [31 : 0] compare;
  wire [31 : 0] compare$D_IN;
  wire compare$EN;

  // register configReg0
  reg [31 : 0] configReg0;
  wire [31 : 0] configReg0$D_IN;
  wire configReg0$EN;

  // register configReg1
  reg [31 : 0] configReg1;
  wire [31 : 0] configReg1$D_IN;
  wire configReg1$EN;

  // register configReg2
  reg [31 : 0] configReg2;
  wire [31 : 0] configReg2$D_IN;
  wire configReg2$EN;

  // register configReg3
  reg [30 : 0] configReg3;
  wire [30 : 0] configReg3$D_IN;
  wire configReg3$EN;

  // register count
  reg [31 : 0] count;
  wire [31 : 0] count$D_IN;
  wire count$EN;

  // register epc
  reg [63 : 0] epc;
  wire [63 : 0] epc$D_IN;
  wire epc$EN;

  // register errorEPC
  reg [63 : 0] errorEPC;
  wire [63 : 0] errorEPC$D_IN;
  wire errorEPC$EN;

  // register exInterrupts
  reg [4 : 0] exInterrupts;
  wire [4 : 0] exInterrupts$D_IN;
  wire exInterrupts$EN;

  // register llScReg
  reg [64 : 0] llScReg;
  wire [64 : 0] llScReg$D_IN;
  wire llScReg$EN;

  // register procid
  reg [31 : 0] procid;
  wire [31 : 0] procid$D_IN;
  wire procid$EN;

  // register sr
  reg [31 : 0] sr;
  wire [31 : 0] sr$D_IN;
  wire sr$EN;

  // register tlbContext
  reg [63 : 0] tlbContext;
  wire [63 : 0] tlbContext$D_IN;
  wire tlbContext$EN;

  // register tlbEntryHi
  reg [63 : 0] tlbEntryHi;
  reg [63 : 0] tlbEntryHi$D_IN;
  wire tlbEntryHi$EN;

  // register tlbEntryLo0
  reg [31 : 0] tlbEntryLo0;
  wire [31 : 0] tlbEntryLo0$D_IN;
  wire tlbEntryLo0$EN;

  // register tlbEntryLo1
  reg [31 : 0] tlbEntryLo1;
  wire [31 : 0] tlbEntryLo1$D_IN;
  wire tlbEntryLo1$EN;

  // register tlbIndex
  reg [6 : 0] tlbIndex;
  wire [6 : 0] tlbIndex$D_IN;
  wire tlbIndex$EN;

  // register tlbPageMask
  reg [11 : 0] tlbPageMask;
  wire [11 : 0] tlbPageMask$D_IN;
  wire tlbPageMask$EN;

  // register tlbWired
  reg [2 : 0] tlbWired;
  wire [2 : 0] tlbWired$D_IN;
  wire tlbWired$EN;

  // register tlbXContext
  reg [63 : 0] tlbXContext;
  wire [63 : 0] tlbXContext$D_IN;
  wire tlbXContext$EN;

  // register tlb_asid
  reg [7 : 0] tlb_asid;
  wire [7 : 0] tlb_asid$D_IN;
  wire tlb_asid$EN;

  // register tlb_count
  reg [4 : 0] tlb_count;
  wire [4 : 0] tlb_count$D_IN;
  wire tlb_count$EN;

  // register tlb_entryLo0Reg
  reg [31 : 0] tlb_entryLo0Reg;
  wire [31 : 0] tlb_entryLo0Reg$D_IN;
  wire tlb_entryLo0Reg$EN;

  // register tlb_entryLo1Reg
  reg [31 : 0] tlb_entryLo1Reg;
  wire [31 : 0] tlb_entryLo1Reg$D_IN;
  wire tlb_entryLo1Reg$EN;

  // register tlb_entrySrch
  reg [77 : 0] tlb_entrySrch;
  wire [77 : 0] tlb_entrySrch$D_IN;
  wire tlb_entrySrch$EN;

  // register tlb_entrySrch_1
  reg [77 : 0] tlb_entrySrch_1;
  wire [77 : 0] tlb_entrySrch_1$D_IN;
  wire tlb_entrySrch_1$EN;

  // register tlb_entrySrch_2
  reg [77 : 0] tlb_entrySrch_2;
  wire [77 : 0] tlb_entrySrch_2$D_IN;
  wire tlb_entrySrch_2$EN;

  // register tlb_entrySrch_3
  reg [77 : 0] tlb_entrySrch_3;
  wire [77 : 0] tlb_entrySrch_3$D_IN;
  wire tlb_entrySrch_3$EN;

  // register tlb_entrySrch_4
  reg [77 : 0] tlb_entrySrch_4;
  wire [77 : 0] tlb_entrySrch_4$D_IN;
  wire tlb_entrySrch_4$EN;

  // register tlb_entrySrch_5
  reg [77 : 0] tlb_entrySrch_5;
  wire [77 : 0] tlb_entrySrch_5$D_IN;
  wire tlb_entrySrch_5$EN;

  // register tlb_entrySrch_6
  reg [77 : 0] tlb_entrySrch_6;
  wire [77 : 0] tlb_entrySrch_6$D_IN;
  wire tlb_entrySrch_6$EN;

  // register tlb_entrySrch_7
  reg [77 : 0] tlb_entrySrch_7;
  wire [77 : 0] tlb_entrySrch_7$D_IN;
  wire tlb_entrySrch_7$EN;

  // register tlb_last_hit
  reg [98 : 0] tlb_last_hit;
  wire [98 : 0] tlb_last_hit$D_IN;
  wire tlb_last_hit$EN;

  // register tlb_last_hit_1
  reg [98 : 0] tlb_last_hit_1;
  wire [98 : 0] tlb_last_hit_1$D_IN;
  wire tlb_last_hit_1$EN;

  // register tlb_last_hit_2
  reg [98 : 0] tlb_last_hit_2;
  wire [98 : 0] tlb_last_hit_2$D_IN;
  wire tlb_last_hit_2$EN;

  // register tlb_last_hit_3
  reg [98 : 0] tlb_last_hit_3;
  wire [98 : 0] tlb_last_hit_3$D_IN;
  wire tlb_last_hit_3$EN;

  // register tlb_randomIndex
  reg [2 : 0] tlb_randomIndex;
  wire [2 : 0] tlb_randomIndex$D_IN;
  wire tlb_randomIndex$EN;

  // register tlb_tlbState
  reg [2 : 0] tlb_tlbState;
  reg [2 : 0] tlb_tlbState$D_IN;
  wire tlb_tlbState$EN;

  // register watchHi
  reg [3 : 0] watchHi;
  wire [3 : 0] watchHi$D_IN;
  wire watchHi$EN;

  // register watchLo
  reg [31 : 0] watchLo;
  wire [31 : 0] watchLo$D_IN;
  wire watchLo$EN;

  // ports of submodule avaddrs
  wire [67 : 0] avaddrs$D_IN, avaddrs$D_OUT;
  wire avaddrs$CLR, avaddrs$DEQ, avaddrs$EMPTY_N, avaddrs$ENQ, avaddrs$FULL_N;

  // ports of submodule causeUpdate0
  wire [31 : 0] causeUpdate0$D_IN, causeUpdate0$D_OUT;
  wire causeUpdate0$CLR,
       causeUpdate0$DEQ,
       causeUpdate0$EMPTY_N,
       causeUpdate0$ENQ;

  // ports of submodule causeUpdate1
  wire [31 : 0] causeUpdate1$D_IN, causeUpdate1$D_OUT;
  wire causeUpdate1$CLR,
       causeUpdate1$DEQ,
       causeUpdate1$EMPTY_N,
       causeUpdate1$ENQ;

  // ports of submodule causeUpdate2
  wire [7 : 0] causeUpdate2$D_IN, causeUpdate2$D_OUT;
  wire causeUpdate2$CLR,
       causeUpdate2$DEQ,
       causeUpdate2$EMPTY_N,
       causeUpdate2$ENQ;

  // ports of submodule causeUpdate3
  wire [7 : 0] causeUpdate3$D_IN, causeUpdate3$D_OUT;
  wire causeUpdate3$CLR,
       causeUpdate3$DEQ,
       causeUpdate3$EMPTY_N,
       causeUpdate3$ENQ,
       causeUpdate3$FULL_N;

  // ports of submodule contxtUpdate
  wire [40 : 0] contxtUpdate$D_IN, contxtUpdate$D_OUT;
  wire contxtUpdate$CLR,
       contxtUpdate$DEQ,
       contxtUpdate$EMPTY_N,
       contxtUpdate$ENQ;

  // ports of submodule counterInt
  wire [4 : 0] counterInt$D_IN;
  wire counterInt$CLR, counterInt$DEQ, counterInt$ENQ;

  // ports of submodule dataUpdate
  wire [63 : 0] dataUpdate$D_IN, dataUpdate$D_OUT;
  wire dataUpdate$CLR,
       dataUpdate$DEQ,
       dataUpdate$EMPTY_N,
       dataUpdate$ENQ,
       dataUpdate$FULL_N;

  // ports of submodule dvaddrs
  wire [67 : 0] dvaddrs$D_IN, dvaddrs$D_OUT;
  wire dvaddrs$CLR, dvaddrs$DEQ, dvaddrs$EMPTY_N, dvaddrs$ENQ;

  // ports of submodule eretHappened
  wire eretHappened$CLR,
       eretHappened$DEQ,
       eretHappened$D_IN,
       eretHappened$EMPTY_N,
       eretHappened$ENQ;

  // ports of submodule eretReport
  wire eretReport$CLR,
       eretReport$DEQ,
       eretReport$D_IN,
       eretReport$EMPTY_N,
       eretReport$ENQ,
       eretReport$FULL_N;

  // ports of submodule expectWrites
  wire expectWrites$CLR,
       expectWrites$DEQ,
       expectWrites$D_IN,
       expectWrites$EMPTY_N,
       expectWrites$ENQ;

  // ports of submodule forceUpdate
  wire forceUpdate$CLR,
       forceUpdate$DEQ,
       forceUpdate$D_IN,
       forceUpdate$D_OUT,
       forceUpdate$EMPTY_N,
       forceUpdate$ENQ,
       forceUpdate$FULL_N;

  // ports of submodule ivaddrs
  wire [67 : 0] ivaddrs$D_IN, ivaddrs$D_OUT;
  wire ivaddrs$CLR, ivaddrs$DEQ, ivaddrs$EMPTY_N, ivaddrs$ENQ;

  // ports of submodule readReqs
  wire [7 : 0] readReqs$D_IN, readReqs$D_OUT;
  wire readReqs$CLR,
       readReqs$DEQ,
       readReqs$EMPTY_N,
       readReqs$ENQ,
       readReqs$FULL_N;

  // ports of submodule resetRandom
  wire resetRandom$CLR,
       resetRandom$DEQ,
       resetRandom$D_IN,
       resetRandom$ENQ,
       resetRandom$FULL_N;

  // ports of submodule rnUpdate
  wire [4 : 0] rnUpdate$D_IN, rnUpdate$D_OUT;
  wire rnUpdate$CLR,
       rnUpdate$DEQ,
       rnUpdate$EMPTY_N,
       rnUpdate$ENQ,
       rnUpdate$FULL_N;

  // ports of submodule tlbProbeResponses
  wire tlbProbeResponses$CLR,
       tlbProbeResponses$DEQ,
       tlbProbeResponses$D_IN,
       tlbProbeResponses$EMPTY_N,
       tlbProbeResponses$ENQ;

  // ports of submodule tlbProbes
  wire [63 : 0] tlbProbes$D_IN, tlbProbes$D_OUT;
  wire tlbProbes$CLR,
       tlbProbes$DEQ,
       tlbProbes$EMPTY_N,
       tlbProbes$ENQ,
       tlbProbes$FULL_N;

  // ports of submodule tlbReads
  wire tlbReads$CLR,
       tlbReads$DEQ,
       tlbReads$D_IN,
       tlbReads$EMPTY_N,
       tlbReads$ENQ,
       tlbReads$FULL_N;

  // ports of submodule tlb_entryHiHash
  wire [77 : 0] tlb_entryHiHash$DIA, tlb_entryHiHash$DIB, tlb_entryHiHash$DOA;
  wire [4 : 0] tlb_entryHiHash$ADDRA, tlb_entryHiHash$ADDRB;
  wire tlb_entryHiHash$ENA,
       tlb_entryHiHash$ENB,
       tlb_entryHiHash$WEA,
       tlb_entryHiHash$WEB;

  // ports of submodule tlb_entryLo0
  wire [31 : 0] tlb_entryLo0$DIA, tlb_entryLo0$DIB, tlb_entryLo0$DOA;
  wire [5 : 0] tlb_entryLo0$ADDRA, tlb_entryLo0$ADDRB;
  wire tlb_entryLo0$ENA, tlb_entryLo0$ENB, tlb_entryLo0$WEA, tlb_entryLo0$WEB;

  // ports of submodule tlb_entryLo1
  wire [31 : 0] tlb_entryLo1$DIA, tlb_entryLo1$DIB, tlb_entryLo1$DOA;
  wire [5 : 0] tlb_entryLo1$ADDRA, tlb_entryLo1$ADDRB;
  wire tlb_entryLo1$ENA, tlb_entryLo1$ENB, tlb_entryLo1$WEA, tlb_entryLo1$WEB;

  // ports of submodule tlb_readOut_fifo
  wire [5 : 0] tlb_readOut_fifo$D_IN, tlb_readOut_fifo$D_OUT;
  wire tlb_readOut_fifo$CLR,
       tlb_readOut_fifo$DEQ,
       tlb_readOut_fifo$EMPTY_N,
       tlb_readOut_fifo$ENQ,
       tlb_readOut_fifo$FULL_N;

  // ports of submodule tlb_readWrite_fifo
  wire [149 : 0] tlb_readWrite_fifo$D_IN, tlb_readWrite_fifo$D_OUT;
  wire tlb_readWrite_fifo$CLR,
       tlb_readWrite_fifo$DEQ,
       tlb_readWrite_fifo$EMPTY_N,
       tlb_readWrite_fifo$ENQ;

  // ports of submodule tlb_read_fifo
  wire [84 : 0] tlb_read_fifo$D_IN, tlb_read_fifo$D_OUT;
  wire tlb_read_fifo$CLR,
       tlb_read_fifo$DEQ,
       tlb_read_fifo$EMPTY_N,
       tlb_read_fifo$ENQ,
       tlb_read_fifo$FULL_N;

  // ports of submodule tlb_req_fifos
  wire [74 : 0] tlb_req_fifos$D_IN, tlb_req_fifos$D_OUT;
  wire tlb_req_fifos$CLR,
       tlb_req_fifos$DEQ,
       tlb_req_fifos$EMPTY_N,
       tlb_req_fifos$ENQ;

  // ports of submodule tlb_req_fifos_1
  wire [74 : 0] tlb_req_fifos_1$D_IN, tlb_req_fifos_1$D_OUT;
  wire tlb_req_fifos_1$CLR,
       tlb_req_fifos_1$DEQ,
       tlb_req_fifos_1$EMPTY_N,
       tlb_req_fifos_1$ENQ;

  // ports of submodule tlb_req_fifos_2
  wire [74 : 0] tlb_req_fifos_2$D_IN, tlb_req_fifos_2$D_OUT;
  wire tlb_req_fifos_2$CLR,
       tlb_req_fifos_2$DEQ,
       tlb_req_fifos_2$EMPTY_N,
       tlb_req_fifos_2$ENQ;

  // ports of submodule tlb_req_fifos_3
  wire [74 : 0] tlb_req_fifos_3$D_IN, tlb_req_fifos_3$D_OUT;
  wire tlb_req_fifos_3$CLR,
       tlb_req_fifos_3$DEQ,
       tlb_req_fifos_3$EMPTY_N,
       tlb_req_fifos_3$ENQ;

  // ports of submodule tlb_rsp_fifos
  wire [49 : 0] tlb_rsp_fifos$D_IN, tlb_rsp_fifos$D_OUT;
  wire tlb_rsp_fifos$CLR,
       tlb_rsp_fifos$DEQ,
       tlb_rsp_fifos$EMPTY_N,
       tlb_rsp_fifos$ENQ;

  // ports of submodule tlb_rsp_fifos_1
  wire [49 : 0] tlb_rsp_fifos_1$D_IN, tlb_rsp_fifos_1$D_OUT;
  wire tlb_rsp_fifos_1$CLR,
       tlb_rsp_fifos_1$DEQ,
       tlb_rsp_fifos_1$EMPTY_N,
       tlb_rsp_fifos_1$ENQ;

  // ports of submodule tlb_rsp_fifos_2
  wire [49 : 0] tlb_rsp_fifos_2$D_IN, tlb_rsp_fifos_2$D_OUT;
  wire tlb_rsp_fifos_2$CLR,
       tlb_rsp_fifos_2$DEQ,
       tlb_rsp_fifos_2$EMPTY_N,
       tlb_rsp_fifos_2$ENQ;

  // ports of submodule tlb_rsp_fifos_3
  wire [49 : 0] tlb_rsp_fifos_3$D_IN, tlb_rsp_fifos_3$D_OUT;
  wire tlb_rsp_fifos_3$CLR,
       tlb_rsp_fifos_3$DEQ,
       tlb_rsp_fifos_3$EMPTY_N,
       tlb_rsp_fifos_3$ENQ;

  // ports of submodule tlb_smt_fifos
  wire [49 : 0] tlb_smt_fifos$D_IN;
  wire tlb_smt_fifos$CLR, tlb_smt_fifos$DEQ, tlb_smt_fifos$ENQ;

  // ports of submodule tlb_smt_fifos_1
  wire [49 : 0] tlb_smt_fifos_1$D_IN, tlb_smt_fifos_1$D_OUT;
  wire tlb_smt_fifos_1$CLR,
       tlb_smt_fifos_1$DEQ,
       tlb_smt_fifos_1$EMPTY_N,
       tlb_smt_fifos_1$ENQ,
       tlb_smt_fifos_1$FULL_N;

  // ports of submodule tlb_smt_fifos_2
  wire [49 : 0] tlb_smt_fifos_2$D_IN, tlb_smt_fifos_2$D_OUT;
  wire tlb_smt_fifos_2$CLR,
       tlb_smt_fifos_2$DEQ,
       tlb_smt_fifos_2$EMPTY_N,
       tlb_smt_fifos_2$ENQ,
       tlb_smt_fifos_2$FULL_N;

  // ports of submodule tlb_smt_fifos_3
  wire [49 : 0] tlb_smt_fifos_3$D_IN, tlb_smt_fifos_3$D_OUT;
  wire tlb_smt_fifos_3$CLR,
       tlb_smt_fifos_3$DEQ,
       tlb_smt_fifos_3$EMPTY_N,
       tlb_smt_fifos_3$ENQ,
       tlb_smt_fifos_3$FULL_N;

  // ports of submodule xcntxtUpdate
  wire [30 : 0] xcntxtUpdate$D_IN, xcntxtUpdate$D_OUT;
  wire xcntxtUpdate$CLR,
       xcntxtUpdate$DEQ,
       xcntxtUpdate$EMPTY_N,
       xcntxtUpdate$ENQ;

  // rule scheduling signals
  wire WILL_FIRE_RL_readTlb,
       WILL_FIRE_RL_tlb_doRead,
       WILL_FIRE_RL_tlb_readTLB,
       WILL_FIRE_RL_tlb_startTLB,
       WILL_FIRE_RL_updateCP0Registers;

  // inputs to muxes for submodule ports
  wire [149 : 0] MUX_tlb_readWrite_fifo$enq_1__VAL_1,
		 MUX_tlb_readWrite_fifo$enq_1__VAL_2;
  wire [98 : 0] MUX_tlb_last_hit$write_1__VAL_1,
		MUX_tlb_last_hit$write_1__VAL_2,
		MUX_tlb_last_hit_1$write_1__VAL_2,
		MUX_tlb_last_hit_2$write_1__VAL_2,
		MUX_tlb_last_hit_3$write_1__VAL_2;
  wire [63 : 0] MUX_tlbEntryHi$write_1__VAL_2, MUX_tlbEntryHi$write_1__VAL_3;
  wire [31 : 0] MUX_count$write_1__VAL_1,
		MUX_sr$write_1__VAL_1,
		MUX_sr$write_1__VAL_2,
		MUX_tlbEntryLo0$write_1__VAL_1,
		MUX_tlbEntryLo0$write_1__VAL_2,
		MUX_tlbEntryLo1$write_1__VAL_2,
		MUX_tlb_entryLo0$a_put_3__VAL_2,
		MUX_tlb_entryLo1$a_put_3__VAL_2;
  wire [11 : 0] MUX_tlbPageMask$write_1__VAL_2;
  wire [6 : 0] MUX_tlbIndex$write_1__VAL_1, MUX_tlbIndex$write_1__VAL_2;
  wire [5 : 0] MUX_tlb_entryLo0$a_put_2__VAL_1,
	       MUX_tlb_entryLo0$a_put_2__VAL_2,
	       MUX_tlb_entryLo0$b_put_2__VAL_1,
	       MUX_tlb_entryLo0$b_put_2__VAL_2;
  wire [2 : 0] MUX_tlb_tlbState$write_1__VAL_2,
	       MUX_tlb_tlbState$write_1__VAL_3,
	       MUX_tlb_tlbState$write_1__VAL_4;
  wire MUX_count$write_1__SEL_1,
       MUX_epc$write_1__SEL_1,
       MUX_epc$write_1__SEL_2,
       MUX_sr$write_1__SEL_1,
       MUX_tlbEntryHi$write_1__SEL_1,
       MUX_tlbEntryHi$write_1__SEL_3,
       MUX_tlbEntryLo0$write_1__SEL_1,
       MUX_tlbEntryLo1$write_1__SEL_1,
       MUX_tlbPageMask$write_1__SEL_1,
       MUX_tlb_entryHiHash$a_put_1__SEL_1,
       MUX_tlb_entryHiHash$a_put_1__SEL_2,
       MUX_tlb_entryHiHash$b_put_1__SEL_1,
       MUX_tlb_entrySrch$write_1__SEL_2,
       MUX_tlb_entrySrch$write_1__SEL_3,
       MUX_tlb_entrySrch_1$write_1__SEL_2,
       MUX_tlb_entrySrch_1$write_1__SEL_3,
       MUX_tlb_entrySrch_2$write_1__SEL_2,
       MUX_tlb_entrySrch_2$write_1__SEL_3,
       MUX_tlb_entrySrch_3$write_1__SEL_2,
       MUX_tlb_entrySrch_3$write_1__SEL_3,
       MUX_tlb_entrySrch_4$write_1__SEL_2,
       MUX_tlb_entrySrch_4$write_1__SEL_3,
       MUX_tlb_entrySrch_5$write_1__SEL_2,
       MUX_tlb_entrySrch_5$write_1__SEL_3,
       MUX_tlb_entrySrch_6$write_1__SEL_2,
       MUX_tlb_entrySrch_6$write_1__SEL_3,
       MUX_tlb_entrySrch_7$write_1__SEL_2,
       MUX_tlb_entrySrch_7$write_1__SEL_3,
       MUX_tlb_last_hit$write_1__SEL_1,
       MUX_tlb_last_hit_1$write_1__SEL_1,
       MUX_tlb_last_hit_2$write_1__SEL_1,
       MUX_tlb_last_hit_3$write_1__SEL_1,
       MUX_tlb_readWrite_fifo$enq_1__SEL_1,
       MUX_tlb_tlbState$write_1__SEL_1,
       MUX_tlb_tlbState$write_1__SEL_2,
       MUX_tlb_tlbState$write_1__SEL_5;

  // remaining internal signals
  reg [74 : 0] CASE_requestSource___11175_tlb_req_fifos_3D_O_ETC__q19;
  reg [63 : 0] CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5,
	       IF_readReqs_first__048_BITS_2_TO_0_106_EQ_0_10_ETC___d1131,
	       IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140,
	       v__h24572,
	       v__h24691,
	       v__h24929;
  reg [11 : 0] IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534;
  reg [5 : 0] CASE_dataUpdateD_OUT_BITS_5_TO_0_te_tlbAddr30_ETC__q16;
  reg [4 : 0] CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4,
	      CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3,
	      CASE_cause_BITS_6_TO_2_31_0_cause_BITS_6_TO_2__ETC__q2,
	      CASE_dataUpdateD_OUT_BITS_6_TO_2_31_0_dataUpd_ETC__q17,
	      CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18,
	      IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087;
  reg [2 : 0] CASE_configReg0_BITS_2_TO_0_4_0_configReg0_BIT_ETC__q1,
	      CASE_dataUpdateD_OUT_BITS_5_TO_3_4_0_dataUpda_ETC__q7,
	      CASE_tlb_entryLo0DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q6,
	      CASE_tlb_entryLo1DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q8,
	      CASE_tlb_last_hit_1_BITS_5_TO_3_4_0_tlb_last_h_ETC__q12,
	      CASE_tlb_last_hit_2_BITS_5_TO_3_4_0_tlb_last_h_ETC__q13,
	      CASE_tlb_last_hit_3_BITS_5_TO_3_4_0_tlb_last_h_ETC__q14,
	      CASE_tlb_last_hit_BITS_5_TO_3_4_0_tlb_last_hit_ETC__q11,
	      CASE_tlb_readWrite_fifoD_OUT_BITS_37_TO_35_4__ETC__q9,
	      CASE_tlb_readWrite_fifoD_OUT_BITS_5_TO_3_4_0__ETC__q10,
	      IF_tlbEntryLo0_read__000_BITS_5_TO_3_007_EQ_0__ETC___d2143,
	      IF_tlbEntryLo1_read__002_BITS_5_TO_3_017_EQ_0__ETC___d2145;
  reg [1 : 0] CASE_dataUpdateD_OUT_BITS_5_TO_0_3_1_0_2_2__q15;
  reg IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079,
      TASK_testplusargs___d1294,
      TASK_testplusargs___d1393,
      TASK_testplusargs___d1535,
      TASK_testplusargs___d1708,
      TASK_testplusargs___d492,
      TASK_testplusargs___d500,
      TASK_testplusargs___d779;
  wire [141 : 0] IF_dataUpdate_first__21_BITS_5_TO_0_22_EQ_1_80_ETC___d1031;
  wire [96 : 0] IF_tlb_read_fifo_first__52_BIT_84_55_THEN_IF_t_ETC___d487;
  wire [63 : 0] IF_tlb_entryHiHash_a_read__5_BIT_13_6_AND_tlb__ETC___d473,
		IF_tlb_req_fifos_1_i_notEmpty__69_AND_NOT_tlb__ETC___d1766,
		IF_tlb_req_fifos_2_i_notEmpty__70_AND_NOT_tlb__ETC___d1776,
		IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759,
		rv__h23510,
		rv__h23551,
		rv__h23577,
		rv__h23612,
		rv__h23621,
		rv__h23634,
		rv__h23650,
		rv__h23658,
		rv__h23688,
		rv__h23771,
		rv__h23813,
		rv__h23926,
		rv__h24032,
		rv__h24107,
		rv__h24236,
		rv__h24245,
		v__h24510,
		v__h24520,
		v__h24653,
		v__h24663,
		v__h24795,
		v__h24890;
  wire [40 : 0] v__h19352;
  wire [35 : 0] IF_tlbLookupCoprocessors_0_request_put_BITS_74_ETC___d1659,
		IF_tlbLookupData_request_put_BITS_74_TO_43_459_ETC___d1486,
		IF_tlbLookupInstruction_request_put_BITS_74_TO_ETC___d1345,
		IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d1761,
		IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1760,
		_theResult_____5__h15306,
		addr__h26547,
		addr__h28269,
		addr__h30356,
		response___1__h15677,
		response__h15158,
		x_addr__h27037,
		x_addr__h28759,
		x_addr__h30846;
  wire [31 : 0] x__h23513, x__h23691, x__h23816;
  wire [30 : 0] tlbIndexBase__h23491, v__h19480;
  wire [29 : 0] cause_79_BITS_29_TO_28_90_CONCAT_IF_causeUpdat_ETC___d759;
  wire [26 : 0] cause_79_BITS_26_TO_24_95_CONCAT_IF_causeUpdat_ETC___d758;
  wire [23 : 0] _theResult___pfn__h15802;
  wire [22 : 0] IF_causeUpdate0_i_notEmpty__66_THEN_causeUpdat_ETC___d757;
  wire [15 : 0] IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d756;
  wire [8 : 0] tlb_read_fifo_first__52_BITS_13_TO_12_16_CONCA_ETC___d427;
  wire [7 : 0] IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d2124,
	       x1_avValue_ip__h18475,
	       x1_avValue_ip__h18496,
	       x1_avValue_ip__h18517,
	       x__h20699,
	       x__h21478,
	       x_ip__h18557,
	       y_avValue_ip__h18238;
  wire [5 : 0] IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d485,
	       foundIndex___1__h15741,
	       te_tlbAddr__h23031,
	       x2__h14355,
	       x2__h14503,
	       x2__h8105,
	       x2__h9311,
	       x__h14519,
	       x__h15680,
	       x__h23535,
	       x__h8136,
	       x__h9327,
	       y_avValue_snd_fst__h15681;
  wire [4 : 0] IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845,
	       IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_ETC___d2015,
	       IF_IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_ETC___d1436,
	       IF_IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_ETC___d1588,
	       IF_IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_ETC___d1862,
	       IF_IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_ETC___d1745,
	       IF_IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_ETC___d1749,
	       IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2064,
	       IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2070,
	       IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_AN_ETC___d2014,
	       IF_causeUpdate0_i_notEmpty__66_THEN_IF_cause_7_ETC___d2048,
	       IF_causeUpdate1_i_notEmpty__68_THEN_IF_causeUp_ETC___d708,
	       IF_tlbLookupCoprocessors_0_request_put_BITS_8__ETC___d2072,
	       IF_tlbLookupData_request_put_BITS_8_TO_4_455_E_ETC___d2066,
	       IF_tlbLookupInstruction_request_put_BITS_8_TO__ETC___d2060,
	       IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d2099,
	       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d2102,
	       IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_sm_ETC___d2103,
	       _theResult____h7635,
	       hashKey___1__h7990,
	       hashKey__h14215,
	       hashKey__h15193,
	       hashKey__h20299,
	       hashKey__h7634;
  wire [2 : 0] IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d481,
	       IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d482,
	       IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d483,
	       IF_tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entryS_ETC___d1769,
	       IF_tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entryS_ETC___d1770,
	       IF_tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entryS_ETC___d1771,
	       IF_tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entryS_ETC___d1772,
	       IF_tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entryS_ETC___d1773,
	       IF_tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entryS_ETC___d1774,
	       IF_tlb_req_fifos_2_i_notEmpty__70_AND_NOT_tlb__ETC___d1767,
	       key__h14213,
	       requestSource___1__h11175,
	       x__h17372;
  wire [1 : 0] IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d2063,
	       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d2069,
	       IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_sm_ETC___d2075,
	       _theResult___zeros__h15801;
  wire IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_ETC___d414,
       IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_AN_ETC___d403,
       IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d584,
       IF_tlb_entryHiHash_a_read__5_BIT_13_6_AND_tlb__ETC___d449,
       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_NOT_tl_ETC___d2125,
       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1576,
       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1931,
       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1972,
       NOT_causeUpdate1_i_notEmpty__68_70_AND_IF_caus_ETC___d588,
       NOT_llScReg_read__133_BIT_64_134_554_OR_NOT_0__ETC___d1595,
       NOT_tlbLookupCoprocessors_0_request_put_BITS_7_ETC___d1706,
       NOT_tlbLookupCoprocessors_0_request_put_BITS_7_ETC___d1720,
       NOT_tlbLookupData_request_put_BITS_74_TO_43_45_ETC___d1533,
       NOT_tlbLookupData_request_put_BITS_74_TO_43_45_ETC___d1547,
       NOT_tlbLookupInstruction_request_put_BITS_74_T_ETC___d1391,
       NOT_tlbLookupInstruction_request_put_BITS_74_T_ETC___d1405,
       NOT_tlb_read_fifo_first__52_BIT_84_55_80_AND_N_ETC___d388,
       avaddrs_first__198_BITS_3_TO_0_199_EQ_putExcep_ETC___d2058,
       dataUpdate_i_notEmpty__91_AND_forceUpdate_i_no_ETC___d801,
       dvaddrs_first__193_BITS_3_TO_0_194_EQ_putExcep_ETC___d2057,
       ivaddrs_first__187_BITS_3_TO_0_188_EQ_putExcep_ETC___d2054,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d1045,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d1046,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d820,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d825,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d837,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d842,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d850,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d877,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d900,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d967,
       sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d989,
       tlbLookupCoprocessors_0_request_put_BITS_74_TO_ETC___d1651,
       tlbLookupData_request_put_BITS_74_TO_43_459_EQ_ETC___d1478,
       tlbLookupInstruction_request_put_BITS_74_TO_43_ETC___d1337,
       tlb_entryHiHash_a_read__5_BITS_21_TO_14_61_EQ__ETC___d2122,
       tlb_entryHiHash_a_read__5_BITS_77_TO_27_57_EQ__ETC___d2121,
       tlb_entrySrch_13_BIT_13_14_AND_tlb_entrySrch_1_ETC___d1907,
       tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entrySrch_ETC___d1909,
       tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entrySrch_ETC___d1911,
       tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1913,
       tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1944,
       tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entrySrch_ETC___d1915,
       tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entrySrch_ETC___d1917,
       tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1919,
       tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1950,
       tlb_entrySrch_7_02_BIT_13_03_AND_tlb_entrySrch_ETC___d1921,
       tlb_last_hit_1_17_BITS_39_TO_32_332_EQ_tlbEntr_ETC___d1333,
       tlb_last_hit_1_17_BITS_95_TO_45_326_CONCAT_tlb_ETC___d1330,
       tlb_last_hit_2_29_BITS_39_TO_32_473_EQ_tlbEntr_ETC___d1474,
       tlb_last_hit_2_29_BITS_95_TO_45_467_CONCAT_tlb_ETC___d1471,
       tlb_last_hit_3_41_BITS_39_TO_32_646_EQ_tlbEntr_ETC___d1647,
       tlb_last_hit_3_41_BITS_95_TO_45_640_CONCAT_tlb_ETC___d1644,
       tlb_readOut_fifo_first__09_ULT_8___d1869,
       tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867,
       tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb_req_ETC___d1756,
       tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154;

  // action method readReq
  assign RDY_readReq = readReqs$FULL_N ;

  // actionvalue method readGet
  always@(readReqs$D_OUT or
	  rv__h23510 or
	  rv__h23551 or
	  rv__h23577 or
	  tlbContext or
	  rv__h23612 or
	  rv__h23621 or
	  badVAddr or
	  rv__h23634 or
	  tlbEntryHi or
	  rv__h23650 or
	  rv__h23658 or
	  rv__h23688 or
	  epc or
	  rv__h23771 or
	  IF_readReqs_first__048_BITS_2_TO_0_106_EQ_0_10_ETC___d1131 or
	  llScReg or rv__h24236 or rv__h24245 or tlbXContext or errorEPC)
  begin
    case (readReqs$D_OUT[7:3])
      5'd0: readGet = rv__h23510;
      5'd2: readGet = rv__h23551;
      5'd3: readGet = rv__h23577;
      5'd4: readGet = tlbContext;
      5'd5: readGet = rv__h23612;
      5'd6: readGet = rv__h23621;
      5'd8: readGet = badVAddr;
      5'd9: readGet = rv__h23634;
      5'd10: readGet = tlbEntryHi;
      5'd11: readGet = rv__h23650;
      5'd12: readGet = rv__h23658;
      5'd13: readGet = rv__h23688;
      5'd14: readGet = epc;
      5'd15: readGet = rv__h23771;
      5'd16:
	  readGet =
	      IF_readReqs_first__048_BITS_2_TO_0_106_EQ_0_10_ETC___d1131;
      5'd17: readGet = llScReg[63:0];
      5'd18: readGet = rv__h24236;
      5'd19: readGet = rv__h24245;
      5'd20: readGet = tlbXContext;
      5'd30: readGet = errorEPC;
      default: readGet = 64'b0;
    endcase
  end
  assign RDY_readGet =
	     !tlbProbeResponses$EMPTY_N && !expectWrites$EMPTY_N &&
	     readReqs$EMPTY_N ;

  // action method writeReg
  assign RDY_writeReg =
	     rnUpdate$FULL_N && dataUpdate$FULL_N && forceUpdate$FULL_N ;

  // actionvalue method getException
  assign getException =
	     { sr[22],
	       sr[1],
	       ((cause[15:8] & sr[15:8]) != 8'd0 && sr[0] && !sr[1]) ?
		 5'd0 :
		 5'd25 } ;
  assign RDY_getException = 1'd1 ;

  // action method putException
  assign RDY_putException = 1'd1 ;

  // value method getLlScReg
  assign getLlScReg =
	     llScReg[64] && llScReg[11:0] == getLlScReg_matchAddress[11:0] &&
	     !eretHappened$EMPTY_N ;
  assign RDY_getLlScReg = 1'd1 ;

  // action method interrupts
  assign RDY_interrupts = 1'd1 ;

  // action method getExceptionReturn
  assign RDY_getExceptionReturn = eretReport$EMPTY_N ;

  // value method getCoprocessorEnables
  assign getCoprocessorEnables =
	     { sr[31:29], sr[4:3] == 2'd0 || sr[1] || sr[28] } ;
  assign RDY_getCoprocessorEnables = 1'd1 ;

  // action method tlbLookupInstruction_request_put
  assign RDY_tlbLookupInstruction_request_put =
	     tlb_tlbState == 3'd1 && !tlb_req_fifos_1$EMPTY_N &&
	     tlb_smt_fifos_1$FULL_N ;

  // actionvalue method tlbLookupInstruction_response_get
  assign tlbLookupInstruction_response_get =
	     { IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d1761,
	       (IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d1761 ==
		{ watchHi, watchLo[31:3], 3'b0 } &&
		watchLo[1]) ?
		 ((IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2064 ==
		   5'd25) ?
		    5'd23 :
		    IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2064) :
		 IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2064,
	       tlb_smt_fifos_1$EMPTY_N ?
		 tlb_smt_fifos_1$D_OUT[8:0] :
		 tlb_rsp_fifos_1$D_OUT[8:0] } ;
  assign RDY_tlbLookupInstruction_response_get =
	     tlb_smt_fifos_1$EMPTY_N || tlb_rsp_fifos_1$EMPTY_N ;

  // action method tlbLookupData_request_put
  assign RDY_tlbLookupData_request_put =
	     tlb_tlbState == 3'd1 && !tlb_req_fifos_2$EMPTY_N &&
	     tlb_smt_fifos_2$FULL_N ;

  // actionvalue method tlbLookupData_response_get
  assign tlbLookupData_response_get =
	     { IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1760,
	       IF_IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_ETC___d1862,
	       tlb_smt_fifos_2$EMPTY_N ?
		 tlb_smt_fifos_2$D_OUT[8:0] :
		 tlb_rsp_fifos_2$D_OUT[8:0] } ;
  assign RDY_tlbLookupData_response_get =
	     tlb_smt_fifos_2$EMPTY_N || tlb_rsp_fifos_2$EMPTY_N ;

  // action method tlbLookupCoprocessors_0_request_put
  assign RDY_tlbLookupCoprocessors_0_request_put =
	     tlb_tlbState == 3'd1 && !tlb_req_fifos_3$EMPTY_N &&
	     tlb_smt_fifos_3$FULL_N &&
	     avaddrs$FULL_N ;

  // actionvalue method tlbLookupCoprocessors_0_response_get
  assign tlbLookupCoprocessors_0_response_get =
	     { tlb_smt_fifos_3$EMPTY_N ?
		 tlb_smt_fifos_3$D_OUT[49:14] :
		 tlb_rsp_fifos_3$D_OUT[49:14],
	       (sr[4:3] != 2'd0 && !sr[1]) ?
		 IF_IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_ETC___d1749 :
		 IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_sm_ETC___d2103,
	       tlb_smt_fifos_3$EMPTY_N ?
		 tlb_smt_fifos_3$D_OUT[8:0] :
		 tlb_rsp_fifos_3$D_OUT[8:0] } ;
  assign RDY_tlbLookupCoprocessors_0_response_get =
	     tlb_smt_fifos_3$EMPTY_N || tlb_rsp_fifos_3$EMPTY_N ;

  // submodule avaddrs
  FIFO2 #(.width(32'd68), .guarded(32'd0)) avaddrs(.RST_N(RST_N),
						   .CLK(CLK),
						   .D_IN(avaddrs$D_IN),
						   .ENQ(avaddrs$ENQ),
						   .DEQ(avaddrs$DEQ),
						   .CLR(avaddrs$CLR),
						   .D_OUT(avaddrs$D_OUT),
						   .FULL_N(avaddrs$FULL_N),
						   .EMPTY_N(avaddrs$EMPTY_N));

  // submodule causeUpdate0
  FIFO1 #(.width(32'd32), .guarded(32'd0)) causeUpdate0(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(causeUpdate0$D_IN),
							.ENQ(causeUpdate0$ENQ),
							.DEQ(causeUpdate0$DEQ),
							.CLR(causeUpdate0$CLR),
							.D_OUT(causeUpdate0$D_OUT),
							.FULL_N(),
							.EMPTY_N(causeUpdate0$EMPTY_N));

  // submodule causeUpdate1
  FIFO1 #(.width(32'd32), .guarded(32'd0)) causeUpdate1(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(causeUpdate1$D_IN),
							.ENQ(causeUpdate1$ENQ),
							.DEQ(causeUpdate1$DEQ),
							.CLR(causeUpdate1$CLR),
							.D_OUT(causeUpdate1$D_OUT),
							.FULL_N(),
							.EMPTY_N(causeUpdate1$EMPTY_N));

  // submodule causeUpdate2
  FIFO1 #(.width(32'd8), .guarded(32'd0)) causeUpdate2(.RST_N(RST_N),
						       .CLK(CLK),
						       .D_IN(causeUpdate2$D_IN),
						       .ENQ(causeUpdate2$ENQ),
						       .DEQ(causeUpdate2$DEQ),
						       .CLR(causeUpdate2$CLR),
						       .D_OUT(causeUpdate2$D_OUT),
						       .FULL_N(),
						       .EMPTY_N(causeUpdate2$EMPTY_N));

  // submodule causeUpdate3
  FIFO1 #(.width(32'd8), .guarded(32'd0)) causeUpdate3(.RST_N(RST_N),
						       .CLK(CLK),
						       .D_IN(causeUpdate3$D_IN),
						       .ENQ(causeUpdate3$ENQ),
						       .DEQ(causeUpdate3$DEQ),
						       .CLR(causeUpdate3$CLR),
						       .D_OUT(causeUpdate3$D_OUT),
						       .FULL_N(causeUpdate3$FULL_N),
						       .EMPTY_N(causeUpdate3$EMPTY_N));

  // submodule contxtUpdate
  FIFO1 #(.width(32'd41), .guarded(32'd0)) contxtUpdate(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(contxtUpdate$D_IN),
							.ENQ(contxtUpdate$ENQ),
							.DEQ(contxtUpdate$DEQ),
							.CLR(contxtUpdate$CLR),
							.D_OUT(contxtUpdate$D_OUT),
							.FULL_N(),
							.EMPTY_N(contxtUpdate$EMPTY_N));

  // submodule counterInt
  FIFO2 #(.width(32'd5), .guarded(32'd0)) counterInt(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(counterInt$D_IN),
						     .ENQ(counterInt$ENQ),
						     .DEQ(counterInt$DEQ),
						     .CLR(counterInt$CLR),
						     .D_OUT(),
						     .FULL_N(),
						     .EMPTY_N());

  // submodule dataUpdate
  FIFO2 #(.width(32'd64), .guarded(32'd1)) dataUpdate(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(dataUpdate$D_IN),
						      .ENQ(dataUpdate$ENQ),
						      .DEQ(dataUpdate$DEQ),
						      .CLR(dataUpdate$CLR),
						      .D_OUT(dataUpdate$D_OUT),
						      .FULL_N(dataUpdate$FULL_N),
						      .EMPTY_N(dataUpdate$EMPTY_N));

  // submodule dvaddrs
  FIFO2 #(.width(32'd68), .guarded(32'd0)) dvaddrs(.RST_N(RST_N),
						   .CLK(CLK),
						   .D_IN(dvaddrs$D_IN),
						   .ENQ(dvaddrs$ENQ),
						   .DEQ(dvaddrs$DEQ),
						   .CLR(dvaddrs$CLR),
						   .D_OUT(dvaddrs$D_OUT),
						   .FULL_N(),
						   .EMPTY_N(dvaddrs$EMPTY_N));

  // submodule eretHappened
  FIFO1 #(.width(32'd1), .guarded(32'd0)) eretHappened(.RST_N(RST_N),
						       .CLK(CLK),
						       .D_IN(eretHappened$D_IN),
						       .ENQ(eretHappened$ENQ),
						       .DEQ(eretHappened$DEQ),
						       .CLR(eretHappened$CLR),
						       .D_OUT(),
						       .FULL_N(),
						       .EMPTY_N(eretHappened$EMPTY_N));

  // submodule eretReport
  FIFO1 #(.width(32'd1), .guarded(32'd1)) eretReport(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(eretReport$D_IN),
						     .ENQ(eretReport$ENQ),
						     .DEQ(eretReport$DEQ),
						     .CLR(eretReport$CLR),
						     .D_OUT(),
						     .FULL_N(eretReport$FULL_N),
						     .EMPTY_N(eretReport$EMPTY_N));

  // submodule expectWrites
  FIFO2 #(.width(32'd1), .guarded(32'd0)) expectWrites(.RST_N(RST_N),
						       .CLK(CLK),
						       .D_IN(expectWrites$D_IN),
						       .ENQ(expectWrites$ENQ),
						       .DEQ(expectWrites$DEQ),
						       .CLR(expectWrites$CLR),
						       .D_OUT(),
						       .FULL_N(),
						       .EMPTY_N(expectWrites$EMPTY_N));

  // submodule forceUpdate
  FIFO2 #(.width(32'd1), .guarded(32'd1)) forceUpdate(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(forceUpdate$D_IN),
						      .ENQ(forceUpdate$ENQ),
						      .DEQ(forceUpdate$DEQ),
						      .CLR(forceUpdate$CLR),
						      .D_OUT(forceUpdate$D_OUT),
						      .FULL_N(forceUpdate$FULL_N),
						      .EMPTY_N(forceUpdate$EMPTY_N));

  // submodule ivaddrs
  SizedFIFO #(.p1width(32'd68),
	      .p2depth(32'd7),
	      .p3cntr_width(32'd3),
	      .guarded(32'd0)) ivaddrs(.RST_N(RST_N),
				       .CLK(CLK),
				       .D_IN(ivaddrs$D_IN),
				       .ENQ(ivaddrs$ENQ),
				       .DEQ(ivaddrs$DEQ),
				       .CLR(ivaddrs$CLR),
				       .D_OUT(ivaddrs$D_OUT),
				       .FULL_N(),
				       .EMPTY_N(ivaddrs$EMPTY_N));

  // submodule readReqs
  FIFOL1 #(.width(32'd8)) readReqs(.RST_N(RST_N),
				   .CLK(CLK),
				   .D_IN(readReqs$D_IN),
				   .ENQ(readReqs$ENQ),
				   .DEQ(readReqs$DEQ),
				   .CLR(readReqs$CLR),
				   .D_OUT(readReqs$D_OUT),
				   .FULL_N(readReqs$FULL_N),
				   .EMPTY_N(readReqs$EMPTY_N));

  // submodule resetRandom
  FIFO2 #(.width(32'd1), .guarded(32'd0)) resetRandom(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(resetRandom$D_IN),
						      .ENQ(resetRandom$ENQ),
						      .DEQ(resetRandom$DEQ),
						      .CLR(resetRandom$CLR),
						      .D_OUT(),
						      .FULL_N(resetRandom$FULL_N),
						      .EMPTY_N());

  // submodule rnUpdate
  FIFO2 #(.width(32'd5), .guarded(32'd1)) rnUpdate(.RST_N(RST_N),
						   .CLK(CLK),
						   .D_IN(rnUpdate$D_IN),
						   .ENQ(rnUpdate$ENQ),
						   .DEQ(rnUpdate$DEQ),
						   .CLR(rnUpdate$CLR),
						   .D_OUT(rnUpdate$D_OUT),
						   .FULL_N(rnUpdate$FULL_N),
						   .EMPTY_N(rnUpdate$EMPTY_N));

  // submodule tlbProbeResponses
  FIFO2 #(.width(32'd1), .guarded(32'd0)) tlbProbeResponses(.RST_N(RST_N),
							    .CLK(CLK),
							    .D_IN(tlbProbeResponses$D_IN),
							    .ENQ(tlbProbeResponses$ENQ),
							    .DEQ(tlbProbeResponses$DEQ),
							    .CLR(tlbProbeResponses$CLR),
							    .D_OUT(),
							    .FULL_N(),
							    .EMPTY_N(tlbProbeResponses$EMPTY_N));

  // submodule tlbProbes
  FIFO1 #(.width(32'd64), .guarded(32'd1)) tlbProbes(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(tlbProbes$D_IN),
						     .ENQ(tlbProbes$ENQ),
						     .DEQ(tlbProbes$DEQ),
						     .CLR(tlbProbes$CLR),
						     .D_OUT(tlbProbes$D_OUT),
						     .FULL_N(tlbProbes$FULL_N),
						     .EMPTY_N(tlbProbes$EMPTY_N));

  // submodule tlbReads
  FIFO2 #(.width(32'd1), .guarded(32'd1)) tlbReads(.RST_N(RST_N),
						   .CLK(CLK),
						   .D_IN(tlbReads$D_IN),
						   .ENQ(tlbReads$ENQ),
						   .DEQ(tlbReads$DEQ),
						   .CLR(tlbReads$CLR),
						   .D_OUT(),
						   .FULL_N(tlbReads$FULL_N),
						   .EMPTY_N(tlbReads$EMPTY_N));

  // submodule tlb_entryHiHash
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd78),
	  .MEMSIZE(6'd32)) tlb_entryHiHash(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(tlb_entryHiHash$ADDRA),
					   .ADDRB(tlb_entryHiHash$ADDRB),
					   .DIA(tlb_entryHiHash$DIA),
					   .DIB(tlb_entryHiHash$DIB),
					   .WEA(tlb_entryHiHash$WEA),
					   .WEB(tlb_entryHiHash$WEB),
					   .ENA(tlb_entryHiHash$ENA),
					   .ENB(tlb_entryHiHash$ENB),
					   .DOA(tlb_entryHiHash$DOA),
					   .DOB());

  // submodule tlb_entryLo0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd40)) tlb_entryLo0(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(tlb_entryLo0$ADDRA),
					.ADDRB(tlb_entryLo0$ADDRB),
					.DIA(tlb_entryLo0$DIA),
					.DIB(tlb_entryLo0$DIB),
					.WEA(tlb_entryLo0$WEA),
					.WEB(tlb_entryLo0$WEB),
					.ENA(tlb_entryLo0$ENA),
					.ENB(tlb_entryLo0$ENB),
					.DOA(tlb_entryLo0$DOA),
					.DOB());

  // submodule tlb_entryLo1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd40)) tlb_entryLo1(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(tlb_entryLo1$ADDRA),
					.ADDRB(tlb_entryLo1$ADDRB),
					.DIA(tlb_entryLo1$DIA),
					.DIB(tlb_entryLo1$DIB),
					.WEA(tlb_entryLo1$WEA),
					.WEB(tlb_entryLo1$WEB),
					.ENA(tlb_entryLo1$ENA),
					.ENB(tlb_entryLo1$ENB),
					.DOA(tlb_entryLo1$DOA),
					.DOB());

  // submodule tlb_readOut_fifo
  FIFO2 #(.width(32'd6), .guarded(32'd1)) tlb_readOut_fifo(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_readOut_fifo$D_IN),
							   .ENQ(tlb_readOut_fifo$ENQ),
							   .DEQ(tlb_readOut_fifo$DEQ),
							   .CLR(tlb_readOut_fifo$CLR),
							   .D_OUT(tlb_readOut_fifo$D_OUT),
							   .FULL_N(tlb_readOut_fifo$FULL_N),
							   .EMPTY_N(tlb_readOut_fifo$EMPTY_N));

  // submodule tlb_readWrite_fifo
  FIFO2 #(.width(32'd150), .guarded(32'd0)) tlb_readWrite_fifo(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(tlb_readWrite_fifo$D_IN),
							       .ENQ(tlb_readWrite_fifo$ENQ),
							       .DEQ(tlb_readWrite_fifo$DEQ),
							       .CLR(tlb_readWrite_fifo$CLR),
							       .D_OUT(tlb_readWrite_fifo$D_OUT),
							       .FULL_N(),
							       .EMPTY_N(tlb_readWrite_fifo$EMPTY_N));

  // submodule tlb_read_fifo
  FIFO2 #(.width(32'd85), .guarded(32'd1)) tlb_read_fifo(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(tlb_read_fifo$D_IN),
							 .ENQ(tlb_read_fifo$ENQ),
							 .DEQ(tlb_read_fifo$DEQ),
							 .CLR(tlb_read_fifo$CLR),
							 .D_OUT(tlb_read_fifo$D_OUT),
							 .FULL_N(tlb_read_fifo$FULL_N),
							 .EMPTY_N(tlb_read_fifo$EMPTY_N));

  // submodule tlb_req_fifos
  FIFO2 #(.width(32'd75), .guarded(32'd0)) tlb_req_fifos(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(tlb_req_fifos$D_IN),
							 .ENQ(tlb_req_fifos$ENQ),
							 .DEQ(tlb_req_fifos$DEQ),
							 .CLR(tlb_req_fifos$CLR),
							 .D_OUT(tlb_req_fifos$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(tlb_req_fifos$EMPTY_N));

  // submodule tlb_req_fifos_1
  FIFO2 #(.width(32'd75), .guarded(32'd0)) tlb_req_fifos_1(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_req_fifos_1$D_IN),
							   .ENQ(tlb_req_fifos_1$ENQ),
							   .DEQ(tlb_req_fifos_1$DEQ),
							   .CLR(tlb_req_fifos_1$CLR),
							   .D_OUT(tlb_req_fifos_1$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(tlb_req_fifos_1$EMPTY_N));

  // submodule tlb_req_fifos_2
  FIFO2 #(.width(32'd75), .guarded(32'd0)) tlb_req_fifos_2(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_req_fifos_2$D_IN),
							   .ENQ(tlb_req_fifos_2$ENQ),
							   .DEQ(tlb_req_fifos_2$DEQ),
							   .CLR(tlb_req_fifos_2$CLR),
							   .D_OUT(tlb_req_fifos_2$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(tlb_req_fifos_2$EMPTY_N));

  // submodule tlb_req_fifos_3
  FIFO2 #(.width(32'd75), .guarded(32'd0)) tlb_req_fifos_3(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_req_fifos_3$D_IN),
							   .ENQ(tlb_req_fifos_3$ENQ),
							   .DEQ(tlb_req_fifos_3$DEQ),
							   .CLR(tlb_req_fifos_3$CLR),
							   .D_OUT(tlb_req_fifos_3$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(tlb_req_fifos_3$EMPTY_N));

  // submodule tlb_rsp_fifos
  FIFO2 #(.width(32'd50), .guarded(32'd0)) tlb_rsp_fifos(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(tlb_rsp_fifos$D_IN),
							 .ENQ(tlb_rsp_fifos$ENQ),
							 .DEQ(tlb_rsp_fifos$DEQ),
							 .CLR(tlb_rsp_fifos$CLR),
							 .D_OUT(tlb_rsp_fifos$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(tlb_rsp_fifos$EMPTY_N));

  // submodule tlb_rsp_fifos_1
  FIFO2 #(.width(32'd50), .guarded(32'd0)) tlb_rsp_fifos_1(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_rsp_fifos_1$D_IN),
							   .ENQ(tlb_rsp_fifos_1$ENQ),
							   .DEQ(tlb_rsp_fifos_1$DEQ),
							   .CLR(tlb_rsp_fifos_1$CLR),
							   .D_OUT(tlb_rsp_fifos_1$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(tlb_rsp_fifos_1$EMPTY_N));

  // submodule tlb_rsp_fifos_2
  FIFO2 #(.width(32'd50), .guarded(32'd0)) tlb_rsp_fifos_2(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_rsp_fifos_2$D_IN),
							   .ENQ(tlb_rsp_fifos_2$ENQ),
							   .DEQ(tlb_rsp_fifos_2$DEQ),
							   .CLR(tlb_rsp_fifos_2$CLR),
							   .D_OUT(tlb_rsp_fifos_2$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(tlb_rsp_fifos_2$EMPTY_N));

  // submodule tlb_rsp_fifos_3
  FIFO2 #(.width(32'd50), .guarded(32'd0)) tlb_rsp_fifos_3(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_rsp_fifos_3$D_IN),
							   .ENQ(tlb_rsp_fifos_3$ENQ),
							   .DEQ(tlb_rsp_fifos_3$DEQ),
							   .CLR(tlb_rsp_fifos_3$CLR),
							   .D_OUT(tlb_rsp_fifos_3$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(tlb_rsp_fifos_3$EMPTY_N));

  // submodule tlb_smt_fifos
  FIFO2 #(.width(32'd50), .guarded(32'd0)) tlb_smt_fifos(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(tlb_smt_fifos$D_IN),
							 .ENQ(tlb_smt_fifos$ENQ),
							 .DEQ(tlb_smt_fifos$DEQ),
							 .CLR(tlb_smt_fifos$CLR),
							 .D_OUT(),
							 .FULL_N(),
							 .EMPTY_N());

  // submodule tlb_smt_fifos_1
  FIFO2 #(.width(32'd50), .guarded(32'd0)) tlb_smt_fifos_1(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_smt_fifos_1$D_IN),
							   .ENQ(tlb_smt_fifos_1$ENQ),
							   .DEQ(tlb_smt_fifos_1$DEQ),
							   .CLR(tlb_smt_fifos_1$CLR),
							   .D_OUT(tlb_smt_fifos_1$D_OUT),
							   .FULL_N(tlb_smt_fifos_1$FULL_N),
							   .EMPTY_N(tlb_smt_fifos_1$EMPTY_N));

  // submodule tlb_smt_fifos_2
  FIFO2 #(.width(32'd50), .guarded(32'd0)) tlb_smt_fifos_2(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_smt_fifos_2$D_IN),
							   .ENQ(tlb_smt_fifos_2$ENQ),
							   .DEQ(tlb_smt_fifos_2$DEQ),
							   .CLR(tlb_smt_fifos_2$CLR),
							   .D_OUT(tlb_smt_fifos_2$D_OUT),
							   .FULL_N(tlb_smt_fifos_2$FULL_N),
							   .EMPTY_N(tlb_smt_fifos_2$EMPTY_N));

  // submodule tlb_smt_fifos_3
  FIFO2 #(.width(32'd50), .guarded(32'd0)) tlb_smt_fifos_3(.RST_N(RST_N),
							   .CLK(CLK),
							   .D_IN(tlb_smt_fifos_3$D_IN),
							   .ENQ(tlb_smt_fifos_3$ENQ),
							   .DEQ(tlb_smt_fifos_3$DEQ),
							   .CLR(tlb_smt_fifos_3$CLR),
							   .D_OUT(tlb_smt_fifos_3$D_OUT),
							   .FULL_N(tlb_smt_fifos_3$FULL_N),
							   .EMPTY_N(tlb_smt_fifos_3$EMPTY_N));

  // submodule xcntxtUpdate
  FIFO1 #(.width(32'd31), .guarded(32'd0)) xcntxtUpdate(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(xcntxtUpdate$D_IN),
							.ENQ(xcntxtUpdate$ENQ),
							.DEQ(xcntxtUpdate$DEQ),
							.CLR(xcntxtUpdate$CLR),
							.D_OUT(xcntxtUpdate$D_OUT),
							.FULL_N(),
							.EMPTY_N(xcntxtUpdate$EMPTY_N));

  // rule RL_readTlb
  assign WILL_FIRE_RL_readTlb =
	     tlb_tlbState == 3'd6 && !tlb_readWrite_fifo$EMPTY_N &&
	     tlb_readOut_fifo$EMPTY_N &&
	     tlbReads$EMPTY_N ;

  // rule RL_updateCP0Registers
  assign WILL_FIRE_RL_updateCP0Registers =
	     rnUpdate$EMPTY_N &&
	     dataUpdate_i_notEmpty__91_AND_forceUpdate_i_no_ETC___d801 &&
	     !tlbReads$EMPTY_N &&
	     !tlbProbeResponses$EMPTY_N ;

  // rule RL_tlb_doRead
  assign WILL_FIRE_RL_tlb_doRead =
	     tlb_readOut_fifo$FULL_N && tlb_tlbState == 3'd3 ;

  // rule RL_tlb_startTLB
  assign WILL_FIRE_RL_tlb_startTLB =
	     tlb_read_fifo$FULL_N && tlb_tlbState == 3'd1 ;

  // rule RL_tlb_readTLB
  assign WILL_FIRE_RL_tlb_readTLB =
	     tlb_read_fifo$EMPTY_N && tlb_tlbState == 3'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_count$write_1__SEL_1 = !cause[27] && !TASK_testplusargs___d779 ;
  assign MUX_epc$write_1__SEL_1 =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d967 ;
  assign MUX_epc$write_1__SEL_2 =
	     EN_putException && putException_exp[138:134] != 5'd25 &&
	     !putException_exp[0] ;
  assign MUX_sr$write_1__SEL_1 =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d900 ;
  assign MUX_tlbEntryHi$write_1__SEL_1 =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d850 ;
  assign MUX_tlbEntryHi$write_1__SEL_3 =
	     EN_putException && !putException_exp[0] &&
	     (putException_exp[138:134] == 5'd2 ||
	      putException_exp[138:134] == 5'd3 ||
	      putException_exp[138:134] == 5'd4 ||
	      putException_exp[138:134] == 5'd5 ||
	      putException_exp[138:134] == 5'd6 ||
	      putException_exp[138:134] == 5'd7 ||
	      putException_exp[138:134] == 5'd1 ||
	      putException_exp[138:134] == 5'd8 ||
	      putException_exp[138:134] == 5'd9 ||
	      putException_exp[138:134] == 5'd10) ;
  assign MUX_tlbEntryLo0$write_1__SEL_1 =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d825 ;
  assign MUX_tlbEntryLo1$write_1__SEL_1 =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d837 ;
  assign MUX_tlbPageMask$write_1__SEL_1 =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d842 ;
  assign MUX_tlb_entryHiHash$a_put_1__SEL_1 =
	     WILL_FIRE_RL_tlb_doRead &&
	     !tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 ;
  assign MUX_tlb_entryHiHash$a_put_1__SEL_2 =
	     WILL_FIRE_RL_tlb_startTLB &&
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 ;
  assign MUX_tlb_entryHiHash$b_put_1__SEL_1 =
	     tlb_tlbState == 3'd4 &&
	     !tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 ;
  assign MUX_tlb_entrySrch$write_1__SEL_2 =
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd0 ;
  assign MUX_tlb_entrySrch$write_1__SEL_3 =
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd0 ;
  assign MUX_tlb_entrySrch_1$write_1__SEL_2 =
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd1 ;
  assign MUX_tlb_entrySrch_1$write_1__SEL_3 =
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd1 ;
  assign MUX_tlb_entrySrch_2$write_1__SEL_2 =
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd2 ;
  assign MUX_tlb_entrySrch_2$write_1__SEL_3 =
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd2 ;
  assign MUX_tlb_entrySrch_3$write_1__SEL_2 =
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd3 ;
  assign MUX_tlb_entrySrch_3$write_1__SEL_3 =
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd3 ;
  assign MUX_tlb_entrySrch_4$write_1__SEL_2 =
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd4 ;
  assign MUX_tlb_entrySrch_4$write_1__SEL_3 =
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd4 ;
  assign MUX_tlb_entrySrch_5$write_1__SEL_2 =
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd5 ;
  assign MUX_tlb_entrySrch_5$write_1__SEL_3 =
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd5 ;
  assign MUX_tlb_entrySrch_6$write_1__SEL_2 =
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd6 ;
  assign MUX_tlb_entrySrch_6$write_1__SEL_3 =
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd6 ;
  assign MUX_tlb_entrySrch_7$write_1__SEL_2 =
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd7 ;
  assign MUX_tlb_entrySrch_7$write_1__SEL_3 =
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd7 ;
  assign MUX_tlb_last_hit$write_1__SEL_1 =
	     WILL_FIRE_RL_tlb_readTLB &&
	     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[2:0] == 3'd0 ;
  assign MUX_tlb_last_hit_1$write_1__SEL_1 =
	     WILL_FIRE_RL_tlb_readTLB &&
	     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[2:0] == 3'd1 ;
  assign MUX_tlb_last_hit_2$write_1__SEL_1 =
	     WILL_FIRE_RL_tlb_readTLB &&
	     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[2:0] == 3'd2 ;
  assign MUX_tlb_last_hit_3$write_1__SEL_1 =
	     WILL_FIRE_RL_tlb_readTLB &&
	     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[2:0] == 3'd3 ;
  assign MUX_tlb_readWrite_fifo$enq_1__SEL_1 =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d989 ;
  assign MUX_tlb_tlbState$write_1__SEL_1 =
	     tlb_tlbState == 3'd0 && tlb_count == 5'd31 ;
  assign MUX_tlb_tlbState$write_1__SEL_2 =
	     WILL_FIRE_RL_tlb_startTLB &&
	     (tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 ||
	      tlb_readWrite_fifo$EMPTY_N) ;
  assign MUX_tlb_tlbState$write_1__SEL_5 =
	     WILL_FIRE_RL_readTlb || WILL_FIRE_RL_tlb_readTLB ||
	     tlb_tlbState == 3'd5 ;
  assign MUX_count$write_1__VAL_1 = count + 32'd1 ;
  assign MUX_sr$write_1__VAL_1 =
	     (rnUpdate$D_OUT == 5'd12) ?
	       { dataUpdate$D_OUT[31:28],
		 sr[27:23],
		 dataUpdate$D_OUT[22],
		 sr[21:16],
		 dataUpdate$D_OUT[15:8],
		 sr[7:5],
		 dataUpdate$D_OUT[4:3],
		 sr[2],
		 dataUpdate$D_OUT[1:0] } :
	       { sr[31:2], 1'd0, sr[0] } ;
  assign MUX_sr$write_1__VAL_2 = { sr[31:2], 1'd1, sr[0] } ;
  assign MUX_tlbEntryHi$write_1__VAL_2 =
	     tlb_readOut_fifo_first__09_ULT_8___d1869 ?
	       CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 :
	       tlb_entryHiHash$DOA[77:14] ;
  assign MUX_tlbEntryHi$write_1__VAL_3 =
	     { v__h24795[63:13], 5'd0, tlbEntryHi[7:0] } ;
  assign MUX_tlbEntryLo0$write_1__VAL_1 =
	     { dataUpdate$D_OUT[31:6],
	       CASE_dataUpdateD_OUT_BITS_5_TO_3_4_0_dataUpda_ETC__q7,
	       dataUpdate$D_OUT[2:0] } ;
  assign MUX_tlbEntryLo0$write_1__VAL_2 =
	     { tlb_entryLo0$DOA[31:6],
	       CASE_tlb_entryLo0DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q6,
	       tlb_entryLo0$DOA[2:0] } ;
  assign MUX_tlbEntryLo1$write_1__VAL_2 =
	     { tlb_entryLo1$DOA[31:6],
	       CASE_tlb_entryLo1DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q8,
	       tlb_entryLo1$DOA[2:0] } ;
  assign MUX_tlbIndex$write_1__VAL_1 =
	     { tlb_rsp_fifos$D_OUT[13:9] != 5'd4 &&
	       tlb_rsp_fifos$D_OUT[13:9] != 5'd5,
	       tlb_rsp_fifos$D_OUT[19:14] } ;
  assign MUX_tlbIndex$write_1__VAL_2 = { 1'd1, dataUpdate$D_OUT[5:0] } ;
  assign MUX_tlbPageMask$write_1__VAL_2 =
	     tlb_readOut_fifo_first__09_ULT_8___d1869 ?
	       IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 :
	       tlb_entryHiHash$DOA[12:1] ;
  assign MUX_tlb_entryLo0$a_put_2__VAL_1 =
	     (tlb_entrySrch_7_02_BIT_13_03_AND_tlb_entrySrch_ETC___d1921 ||
	      tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1950) ?
	       x2__h14355 :
	       x2__h14503 ;
  assign MUX_tlb_entryLo0$a_put_2__VAL_2 =
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 ?
	       tlb_readWrite_fifo$D_OUT[147:142] :
	       x2__h8105 ;
  assign MUX_tlb_entryLo0$a_put_3__VAL_2 =
	     { tlb_readWrite_fifo$D_OUT[63:38],
	       CASE_tlb_readWrite_fifoD_OUT_BITS_37_TO_35_4__ETC__q9,
	       tlb_readWrite_fifo$D_OUT[34:32] } ;
  assign MUX_tlb_entryLo0$b_put_2__VAL_1 = { 3'd0, tlb_randomIndex } ;
  assign MUX_tlb_entryLo0$b_put_2__VAL_2 =
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 ?
	       tlb_readWrite_fifo$D_OUT[147:142] :
	       x2__h9311 ;
  assign MUX_tlb_entryLo1$a_put_3__VAL_2 =
	     { tlb_readWrite_fifo$D_OUT[31:6],
	       CASE_tlb_readWrite_fifoD_OUT_BITS_5_TO_3_4_0__ETC__q10,
	       tlb_readWrite_fifo$D_OUT[2:0] } ;
  assign MUX_tlb_last_hit$write_1__VAL_1 =
	     { 1'd1,
	       tlb_read_fifo$D_OUT[26],
	       IF_tlb_read_fifo_first__52_BIT_84_55_THEN_IF_t_ETC___d487 } ;
  assign MUX_tlb_last_hit$write_1__VAL_2 =
	     { 1'd0,
	       tlb_last_hit[97:6],
	       CASE_tlb_last_hit_BITS_5_TO_3_4_0_tlb_last_hit_ETC__q11,
	       tlb_last_hit[2:0] } ;
  assign MUX_tlb_last_hit_1$write_1__VAL_2 =
	     { 1'd0,
	       tlb_last_hit_1[97:6],
	       CASE_tlb_last_hit_1_BITS_5_TO_3_4_0_tlb_last_h_ETC__q12,
	       tlb_last_hit_1[2:0] } ;
  assign MUX_tlb_last_hit_2$write_1__VAL_2 =
	     { 1'd0,
	       tlb_last_hit_2[97:6],
	       CASE_tlb_last_hit_2_BITS_5_TO_3_4_0_tlb_last_h_ETC__q13,
	       tlb_last_hit_2[2:0] } ;
  assign MUX_tlb_last_hit_3$write_1__VAL_2 =
	     { 1'd0,
	       tlb_last_hit_3[97:6],
	       CASE_tlb_last_hit_3_BITS_5_TO_3_4_0_tlb_last_h_ETC__q14,
	       tlb_last_hit_3[2:0] } ;
  assign MUX_tlb_readWrite_fifo$enq_1__VAL_1 =
	     { CASE_dataUpdateD_OUT_BITS_5_TO_0_3_1_0_2_2__q15,
	       CASE_dataUpdateD_OUT_BITS_5_TO_0_te_tlbAddr30_ETC__q16,
	       IF_dataUpdate_first__21_BITS_5_TO_0_22_EQ_1_80_ETC___d1031 } ;
  assign MUX_tlb_readWrite_fifo$enq_1__VAL_2 =
	     { 8'h2A,
	       tlb_entryHiHash$DOA,
	       tlb_entryLo0$DOA[31:6],
	       CASE_tlb_entryLo0DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q6,
	       tlb_entryLo0$DOA[2:0],
	       tlb_entryLo1$DOA[31:6],
	       CASE_tlb_entryLo1DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q8,
	       tlb_entryLo1$DOA[2:0] } ;
  assign MUX_tlb_tlbState$write_1__VAL_2 =
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 ?
	       3'd2 :
	       3'd3 ;
  assign MUX_tlb_tlbState$write_1__VAL_3 =
	     tlb_readWrite_fifo$D_OUT[149] ? 3'd4 : 3'd6 ;
  assign MUX_tlb_tlbState$write_1__VAL_4 =
	     (!tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	      tlb_entryHiHash$DOA[13] &&
	      tlb_readWrite_fifo$D_OUT[148]) ?
	       3'd5 :
	       3'd1 ;

  // register badVAddr
  assign badVAddr$D_IN = v__h24795 ;
  assign badVAddr$EN = MUX_tlbEntryHi$write_1__SEL_3 ;

  // register cause
  assign cause$D_IN =
	     { IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d584,
	       causeUpdate0$EMPTY_N ?
		 cause[30] :
		 NOT_causeUpdate1_i_notEmpty__68_70_AND_IF_caus_ETC___d588,
	       cause_79_BITS_29_TO_28_90_CONCAT_IF_causeUpdat_ETC___d759 } ;
  assign cause$EN = 1'd1 ;

  // register compare
  assign compare$D_IN = dataUpdate$D_OUT[31:0] ;
  assign compare$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd11 ;

  // register configReg0
  assign configReg0$D_IN = 32'h0 ;
  assign configReg0$EN = 1'b0 ;

  // register configReg1
  assign configReg1$D_IN = 32'h0 ;
  assign configReg1$EN = 1'b0 ;

  // register configReg2
  assign configReg2$D_IN = 32'h0 ;
  assign configReg2$EN = 1'b0 ;

  // register configReg3
  assign configReg3$D_IN = 31'h0 ;
  assign configReg3$EN = 1'b0 ;

  // register count
  assign count$D_IN =
	     MUX_count$write_1__SEL_1 ?
	       MUX_count$write_1__VAL_1 :
	       MUX_count$write_1__VAL_1 ;
  assign count$EN =
	     !cause[27] && !TASK_testplusargs___d779 ||
	     EN_putException && putException_exp[138:134] == 5'd25 &&
	     !putException_exp[0] &&
	     !cause[27] &&
	     TASK_testplusargs___d1294 ;

  // register epc
  assign epc$D_IN =
	     MUX_epc$write_1__SEL_1 ?
	       dataUpdate$D_OUT :
	       putException_exp[133:70] ;
  assign epc$EN =
	     EN_putException && putException_exp[138:134] != 5'd25 &&
	     !putException_exp[0] ||
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d967 ;

  // register errorEPC
  assign errorEPC$D_IN = 64'h0 ;
  assign errorEPC$EN = 1'b0 ;

  // register exInterrupts
  assign exInterrupts$D_IN = interrupts_interruptLines ;
  assign exInterrupts$EN = EN_interrupts ;

  // register llScReg
  assign llScReg$D_IN =
	     { NOT_llScReg_read__133_BIT_64_134_554_OR_NOT_0__ETC___d1595 &&
	       !eretHappened$EMPTY_N &&
	       (IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1972 ||
		llScReg[64]),
	       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1972 ?
		 { 28'd0,
		   IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1760 } :
		 llScReg[63:0] } ;
  assign llScReg$EN = EN_tlbLookupData_response_get ;

  // register procid
  assign procid$D_IN = 32'h0 ;
  assign procid$EN = 1'b0 ;

  // register sr
  assign sr$D_IN =
	     MUX_sr$write_1__SEL_1 ?
	       MUX_sr$write_1__VAL_1 :
	       MUX_sr$write_1__VAL_2 ;
  assign sr$EN =
	     EN_putException && putException_exp[138:134] != 5'd25 &&
	     !putException_exp[0] ||
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d900 ;

  // register tlbContext
  assign tlbContext$D_IN = { v__h19352, badVAddr[31:13], 4'b0 } ;
  assign tlbContext$EN = 1'd1 ;

  // register tlbEntryHi
  always@(MUX_tlbEntryHi$write_1__SEL_1 or
	  dataUpdate$D_OUT or
	  WILL_FIRE_RL_readTlb or
	  MUX_tlbEntryHi$write_1__VAL_2 or
	  MUX_tlbEntryHi$write_1__SEL_3 or MUX_tlbEntryHi$write_1__VAL_3)
  case (1'b1)
    MUX_tlbEntryHi$write_1__SEL_1: tlbEntryHi$D_IN = dataUpdate$D_OUT;
    WILL_FIRE_RL_readTlb: tlbEntryHi$D_IN = MUX_tlbEntryHi$write_1__VAL_2;
    MUX_tlbEntryHi$write_1__SEL_3:
	tlbEntryHi$D_IN = MUX_tlbEntryHi$write_1__VAL_3;
    default: tlbEntryHi$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign tlbEntryHi$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d850 ||
	     EN_putException && !putException_exp[0] &&
	     (putException_exp[138:134] == 5'd2 ||
	      putException_exp[138:134] == 5'd3 ||
	      putException_exp[138:134] == 5'd4 ||
	      putException_exp[138:134] == 5'd5 ||
	      putException_exp[138:134] == 5'd6 ||
	      putException_exp[138:134] == 5'd7 ||
	      putException_exp[138:134] == 5'd1 ||
	      putException_exp[138:134] == 5'd8 ||
	      putException_exp[138:134] == 5'd9 ||
	      putException_exp[138:134] == 5'd10) ||
	     WILL_FIRE_RL_readTlb ;

  // register tlbEntryLo0
  assign tlbEntryLo0$D_IN =
	     MUX_tlbEntryLo0$write_1__SEL_1 ?
	       MUX_tlbEntryLo0$write_1__VAL_1 :
	       MUX_tlbEntryLo0$write_1__VAL_2 ;
  assign tlbEntryLo0$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d825 ||
	     WILL_FIRE_RL_readTlb ;

  // register tlbEntryLo1
  assign tlbEntryLo1$D_IN =
	     MUX_tlbEntryLo1$write_1__SEL_1 ?
	       MUX_tlbEntryLo0$write_1__VAL_1 :
	       MUX_tlbEntryLo1$write_1__VAL_2 ;
  assign tlbEntryLo1$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d837 ||
	     WILL_FIRE_RL_readTlb ;

  // register tlbIndex
  assign tlbIndex$D_IN =
	     tlb_rsp_fifos$EMPTY_N ?
	       MUX_tlbIndex$write_1__VAL_1 :
	       MUX_tlbIndex$write_1__VAL_2 ;
  assign tlbIndex$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d820 ||
	     tlb_rsp_fifos$EMPTY_N ;

  // register tlbPageMask
  assign tlbPageMask$D_IN =
	     MUX_tlbPageMask$write_1__SEL_1 ?
	       dataUpdate$D_OUT[11:0] :
	       MUX_tlbPageMask$write_1__VAL_2 ;
  assign tlbPageMask$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d842 ||
	     WILL_FIRE_RL_readTlb ;

  // register tlbWired
  assign tlbWired$D_IN = dataUpdate$D_OUT[2:0] ;
  assign tlbWired$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd6 ;

  // register tlbXContext
  assign tlbXContext$D_IN =
	     { v__h19480, badVAddr[63:62], badVAddr[39:13], 4'b0 } ;
  assign tlbXContext$EN = 1'd1 ;

  // register tlb_asid
  assign tlb_asid$D_IN = 8'h0 ;
  assign tlb_asid$EN = 1'b0 ;

  // register tlb_count
  assign tlb_count$D_IN = tlb_count + 5'd1 ;
  assign tlb_count$EN = tlb_tlbState == 3'd0 ;

  // register tlb_entryLo0Reg
  assign tlb_entryLo0Reg$D_IN = MUX_tlbEntryLo0$write_1__VAL_2 ;
  assign tlb_entryLo0Reg$EN = WILL_FIRE_RL_tlb_readTLB ;

  // register tlb_entryLo1Reg
  assign tlb_entryLo1Reg$D_IN = MUX_tlbEntryLo1$write_1__VAL_2 ;
  assign tlb_entryLo1Reg$EN = WILL_FIRE_RL_tlb_readTLB ;

  // register tlb_entrySrch
  assign tlb_entrySrch$D_IN =
	     (MUX_tlb_entrySrch$write_1__SEL_2 ||
	      MUX_tlb_entrySrch$write_1__SEL_3) ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entrySrch$EN =
	     tlb_tlbState == 3'd0 && tlb_count[2:0] == 3'd0 ||
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd0 ||
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd0 ;

  // register tlb_entrySrch_1
  assign tlb_entrySrch_1$D_IN =
	     (MUX_tlb_entrySrch_1$write_1__SEL_2 ||
	      MUX_tlb_entrySrch_1$write_1__SEL_3) ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entrySrch_1$EN =
	     tlb_tlbState == 3'd0 && tlb_count[2:0] == 3'd1 ||
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd1 ||
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd1 ;

  // register tlb_entrySrch_2
  assign tlb_entrySrch_2$D_IN =
	     (MUX_tlb_entrySrch_2$write_1__SEL_2 ||
	      MUX_tlb_entrySrch_2$write_1__SEL_3) ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entrySrch_2$EN =
	     tlb_tlbState == 3'd0 && tlb_count[2:0] == 3'd2 ||
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd2 ||
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd2 ;

  // register tlb_entrySrch_3
  assign tlb_entrySrch_3$D_IN =
	     (MUX_tlb_entrySrch_3$write_1__SEL_2 ||
	      MUX_tlb_entrySrch_3$write_1__SEL_3) ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entrySrch_3$EN =
	     tlb_tlbState == 3'd0 && tlb_count[2:0] == 3'd3 ||
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd3 ||
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd3 ;

  // register tlb_entrySrch_4
  assign tlb_entrySrch_4$D_IN =
	     (MUX_tlb_entrySrch_4$write_1__SEL_2 ||
	      MUX_tlb_entrySrch_4$write_1__SEL_3) ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entrySrch_4$EN =
	     tlb_tlbState == 3'd0 && tlb_count[2:0] == 3'd4 ||
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd4 ||
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd4 ;

  // register tlb_entrySrch_5
  assign tlb_entrySrch_5$D_IN =
	     (MUX_tlb_entrySrch_5$write_1__SEL_2 ||
	      MUX_tlb_entrySrch_5$write_1__SEL_3) ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entrySrch_5$EN =
	     tlb_tlbState == 3'd0 && tlb_count[2:0] == 3'd5 ||
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd5 ||
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd5 ;

  // register tlb_entrySrch_6
  assign tlb_entrySrch_6$D_IN =
	     (MUX_tlb_entrySrch_6$write_1__SEL_2 ||
	      MUX_tlb_entrySrch_6$write_1__SEL_3) ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entrySrch_6$EN =
	     tlb_tlbState == 3'd0 && tlb_count[2:0] == 3'd6 ||
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd6 ||
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd6 ;

  // register tlb_entrySrch_7
  assign tlb_entrySrch_7$D_IN =
	     (MUX_tlb_entrySrch_7$write_1__SEL_2 ||
	      MUX_tlb_entrySrch_7$write_1__SEL_3) ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entrySrch_7$EN =
	     tlb_tlbState == 3'd0 && tlb_count[2:0] == 3'd7 ||
	     tlb_tlbState == 3'd4 &&
	     tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_readWrite_fifo$D_OUT[147:142] == 6'd7 ||
	     tlb_tlbState == 3'd5 && tlb_randomIndex == 3'd7 ;

  // register tlb_last_hit
  assign tlb_last_hit$D_IN =
	     MUX_tlb_last_hit$write_1__SEL_1 ?
	       MUX_tlb_last_hit$write_1__VAL_1 :
	       MUX_tlb_last_hit$write_1__VAL_2 ;
  assign tlb_last_hit$EN =
	     WILL_FIRE_RL_tlb_readTLB &&
	     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[2:0] == 3'd0 ||
	     tlb_tlbState == 3'd4 ;

  // register tlb_last_hit_1
  assign tlb_last_hit_1$D_IN =
	     MUX_tlb_last_hit_1$write_1__SEL_1 ?
	       MUX_tlb_last_hit$write_1__VAL_1 :
	       MUX_tlb_last_hit_1$write_1__VAL_2 ;
  assign tlb_last_hit_1$EN =
	     WILL_FIRE_RL_tlb_readTLB &&
	     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[2:0] == 3'd1 ||
	     tlb_tlbState == 3'd4 ;

  // register tlb_last_hit_2
  assign tlb_last_hit_2$D_IN =
	     MUX_tlb_last_hit_2$write_1__SEL_1 ?
	       MUX_tlb_last_hit$write_1__VAL_1 :
	       MUX_tlb_last_hit_2$write_1__VAL_2 ;
  assign tlb_last_hit_2$EN =
	     WILL_FIRE_RL_tlb_readTLB &&
	     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[2:0] == 3'd2 ||
	     tlb_tlbState == 3'd4 ;

  // register tlb_last_hit_3
  assign tlb_last_hit_3$D_IN =
	     MUX_tlb_last_hit_3$write_1__SEL_1 ?
	       MUX_tlb_last_hit$write_1__VAL_1 :
	       MUX_tlb_last_hit_3$write_1__VAL_2 ;
  assign tlb_last_hit_3$EN =
	     WILL_FIRE_RL_tlb_readTLB &&
	     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[2:0] == 3'd3 ||
	     tlb_tlbState == 3'd4 ;

  // register tlb_randomIndex
  assign tlb_randomIndex$D_IN =
	     (tlb_randomIndex <= tlbWired) ? 3'd7 : x__h17372 ;
  assign tlb_randomIndex$EN = 1'd1 ;

  // register tlb_tlbState
  always@(MUX_tlb_tlbState$write_1__SEL_2 or
	  MUX_tlb_tlbState$write_1__VAL_2 or
	  WILL_FIRE_RL_tlb_doRead or
	  MUX_tlb_tlbState$write_1__VAL_3 or
	  tlb_tlbState or
	  MUX_tlb_tlbState$write_1__VAL_4 or
	  MUX_tlb_tlbState$write_1__SEL_1 or MUX_tlb_tlbState$write_1__SEL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb_tlbState$write_1__SEL_2:
	  tlb_tlbState$D_IN = MUX_tlb_tlbState$write_1__VAL_2;
      WILL_FIRE_RL_tlb_doRead:
	  tlb_tlbState$D_IN = MUX_tlb_tlbState$write_1__VAL_3;
      tlb_tlbState == 3'd4:
	  tlb_tlbState$D_IN = MUX_tlb_tlbState$write_1__VAL_4;
      MUX_tlb_tlbState$write_1__SEL_1 || MUX_tlb_tlbState$write_1__SEL_5:
	  tlb_tlbState$D_IN = 3'd1;
      default: tlb_tlbState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign tlb_tlbState$EN =
	     tlb_tlbState == 3'd0 && tlb_count == 5'd31 ||
	     WILL_FIRE_RL_tlb_startTLB &&
	     (tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 ||
	      tlb_readWrite_fifo$EMPTY_N) ||
	     WILL_FIRE_RL_tlb_doRead ||
	     tlb_tlbState == 3'd4 ||
	     WILL_FIRE_RL_readTlb ||
	     WILL_FIRE_RL_tlb_readTLB ||
	     tlb_tlbState == 3'd5 ;

  // register watchHi
  assign watchHi$D_IN = dataUpdate$D_OUT[3:0] ;
  assign watchHi$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd19 ;

  // register watchLo
  assign watchLo$D_IN =
	     { dataUpdate$D_OUT[31:3], 1'b0, dataUpdate$D_OUT[1:0] } ;
  assign watchLo$EN =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd18 ;

  // submodule avaddrs
  assign avaddrs$D_IN =
	     { tlbLookupCoprocessors_0_request_put[74:11],
	       tlbLookupCoprocessors_0_request_put[3:0] } ;
  assign avaddrs$ENQ = EN_tlbLookupCoprocessors_0_request_put ;
  assign avaddrs$DEQ =
	     EN_putException && avaddrs$EMPTY_N &&
	     avaddrs_first__198_BITS_3_TO_0_199_EQ_putExcep_ETC___d2058 ;
  assign avaddrs$CLR = 1'b0 ;

  // submodule causeUpdate0
  assign causeUpdate0$D_IN =
	     { dataUpdate$D_OUT[31:7],
	       CASE_dataUpdateD_OUT_BITS_6_TO_2_31_0_dataUpd_ETC__q17,
	       dataUpdate$D_OUT[1:0] } ;
  assign causeUpdate0$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd13 ;
  assign causeUpdate0$DEQ = causeUpdate0$EMPTY_N ;
  assign causeUpdate0$CLR = 1'b0 ;

  // submodule causeUpdate1
  assign causeUpdate1$D_IN =
	     { putException_exp[5],
	       24'd0,
	       CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18,
	       2'd0 } ;
  assign causeUpdate1$ENQ = MUX_epc$write_1__SEL_2 ;
  assign causeUpdate1$DEQ = !causeUpdate0$EMPTY_N && causeUpdate1$EMPTY_N ;
  assign causeUpdate1$CLR = 1'b0 ;

  // submodule causeUpdate2
  assign causeUpdate2$D_IN =
	     (rnUpdate$D_OUT == 5'd11) ? x__h21478 : x__h20699 ;
  assign causeUpdate2$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d877 ;
  assign causeUpdate2$DEQ =
	     !causeUpdate0$EMPTY_N && !causeUpdate1$EMPTY_N &&
	     causeUpdate2$EMPTY_N ;
  assign causeUpdate2$CLR = 1'b0 ;

  // submodule causeUpdate3
  assign causeUpdate3$D_IN = { 1'd1, cause[14:8] } ;
  assign causeUpdate3$ENQ = count == compare && causeUpdate3$FULL_N ;
  assign causeUpdate3$DEQ =
	     !causeUpdate0$EMPTY_N && !causeUpdate1$EMPTY_N &&
	     !causeUpdate2$EMPTY_N &&
	     causeUpdate3$EMPTY_N ;
  assign causeUpdate3$CLR = 1'b0 ;

  // submodule contxtUpdate
  assign contxtUpdate$D_IN = dataUpdate$D_OUT[63:23] ;
  assign contxtUpdate$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd4 ;
  assign contxtUpdate$DEQ = contxtUpdate$EMPTY_N ;
  assign contxtUpdate$CLR = 1'b0 ;

  // submodule counterInt
  assign counterInt$D_IN = 5'h0 ;
  assign counterInt$ENQ = 1'b0 ;
  assign counterInt$DEQ = 1'b0 ;
  assign counterInt$CLR = 1'b0 ;

  // submodule dataUpdate
  assign dataUpdate$D_IN = writeReg_data ;
  assign dataUpdate$ENQ = EN_writeReg && writeReg_writeBack ;
  assign dataUpdate$DEQ = WILL_FIRE_RL_updateCP0Registers ;
  assign dataUpdate$CLR = 1'b0 ;

  // submodule dvaddrs
  assign dvaddrs$D_IN =
	     { tlbLookupData_request_put[74:11],
	       tlbLookupData_request_put[3:0] } ;
  assign dvaddrs$ENQ = EN_tlbLookupData_request_put ;
  assign dvaddrs$DEQ =
	     EN_putException && dvaddrs$EMPTY_N &&
	     dvaddrs_first__193_BITS_3_TO_0_194_EQ_putExcep_ETC___d2057 ;
  assign dvaddrs$CLR = 1'b0 ;

  // submodule eretHappened
  assign eretHappened$D_IN = 1'd1 ;
  assign eretHappened$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d1045 ;
  assign eretHappened$DEQ =
	     EN_tlbLookupData_response_get && eretHappened$EMPTY_N ;
  assign eretHappened$CLR = 1'b0 ;

  // submodule eretReport
  assign eretReport$D_IN = 1'd1 ;
  assign eretReport$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d1046 ;
  assign eretReport$DEQ = EN_getExceptionReturn ;
  assign eretReport$CLR = 1'b0 ;

  // submodule expectWrites
  assign expectWrites$D_IN = 1'd1 ;
  assign expectWrites$ENQ = EN_readGet && readGet_goingToWrite ;
  assign expectWrites$DEQ = EN_writeReg ;
  assign expectWrites$CLR = 1'b0 ;

  // submodule forceUpdate
  assign forceUpdate$D_IN = writeReg_forceKernelMode ;
  assign forceUpdate$ENQ = EN_writeReg && writeReg_writeBack ;
  assign forceUpdate$DEQ = WILL_FIRE_RL_updateCP0Registers ;
  assign forceUpdate$CLR = 1'b0 ;

  // submodule ivaddrs
  assign ivaddrs$D_IN =
	     { tlbLookupInstruction_request_put[74:11],
	       tlbLookupInstruction_request_put[3:0] } ;
  assign ivaddrs$ENQ = EN_tlbLookupInstruction_request_put ;
  assign ivaddrs$DEQ =
	     EN_putException && ivaddrs$EMPTY_N &&
	     ivaddrs_first__187_BITS_3_TO_0_188_EQ_putExcep_ETC___d2054 ;
  assign ivaddrs$CLR = 1'b0 ;

  // submodule readReqs
  assign readReqs$D_IN = { readReq_rn, readReq_sel } ;
  assign readReqs$ENQ = EN_readReq ;
  assign readReqs$DEQ = EN_readGet ;
  assign readReqs$CLR = 1'b0 ;

  // submodule resetRandom
  assign resetRandom$D_IN = 1'd1 ;
  assign resetRandom$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd6 &&
	     resetRandom$FULL_N ;
  assign resetRandom$DEQ = 1'b0 ;
  assign resetRandom$CLR = 1'b0 ;

  // submodule rnUpdate
  assign rnUpdate$D_IN = writeReg_rn ;
  assign rnUpdate$ENQ = EN_writeReg && writeReg_writeBack ;
  assign rnUpdate$DEQ = WILL_FIRE_RL_updateCP0Registers ;
  assign rnUpdate$CLR = 1'b0 ;

  // submodule tlbProbeResponses
  assign tlbProbeResponses$D_IN = 1'd1 ;
  assign tlbProbeResponses$ENQ =
	     tlb_tlbState == 3'd1 && !tlb_req_fifos$EMPTY_N &&
	     tlbProbes$EMPTY_N ;
  assign tlbProbeResponses$DEQ = tlb_rsp_fifos$EMPTY_N ;
  assign tlbProbeResponses$CLR = 1'b0 ;

  // submodule tlbProbes
  assign tlbProbes$D_IN = { tlbEntryHi[63:13], 13'b0 } ;
  assign tlbProbes$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd31 &&
	     dataUpdate$D_OUT[5:0] == 6'd8 ;
  assign tlbProbes$DEQ =
	     tlb_tlbState == 3'd1 && !tlb_req_fifos$EMPTY_N &&
	     tlbProbes$EMPTY_N ;
  assign tlbProbes$CLR = 1'b0 ;

  // submodule tlbReads
  assign tlbReads$D_IN = 1'd1 ;
  assign tlbReads$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd31 &&
	     dataUpdate$D_OUT[5:0] == 6'd1 ;
  assign tlbReads$DEQ = WILL_FIRE_RL_readTlb ;
  assign tlbReads$CLR = 1'b0 ;

  // submodule tlb_entryHiHash
  assign tlb_entryHiHash$ADDRA =
	     MUX_tlb_entryHiHash$a_put_1__SEL_1 ?
	       _theResult____h7635 :
	       hashKey__h14215 ;
  assign tlb_entryHiHash$ADDRB =
	     MUX_tlb_entryHiHash$b_put_1__SEL_1 ?
	       hashKey___1__h7990 :
	       tlb_count ;
  assign tlb_entryHiHash$DIA =
	     MUX_tlb_entryHiHash$a_put_1__SEL_1 ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign tlb_entryHiHash$DIB =
	     MUX_tlb_entryHiHash$b_put_1__SEL_1 ?
	       tlb_readWrite_fifo$D_OUT[141:64] :
	       78'h2AAAAAAAAAAAAAAA8AAA ;
  assign tlb_entryHiHash$WEA = 1'd0 ;
  assign tlb_entryHiHash$WEB = 1'd1 ;
  assign tlb_entryHiHash$ENA =
	     WILL_FIRE_RL_tlb_doRead &&
	     !tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 ||
	     WILL_FIRE_RL_tlb_startTLB &&
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 ;
  assign tlb_entryHiHash$ENB =
	     tlb_tlbState == 3'd4 &&
	     !tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 ||
	     tlb_tlbState == 3'd0 ;

  // submodule tlb_entryLo0
  assign tlb_entryLo0$ADDRA =
	     MUX_tlb_entryHiHash$a_put_1__SEL_2 ?
	       MUX_tlb_entryLo0$a_put_2__VAL_1 :
	       MUX_tlb_entryLo0$a_put_2__VAL_2 ;
  assign tlb_entryLo0$ADDRB =
	     (tlb_tlbState == 3'd5) ?
	       MUX_tlb_entryLo0$b_put_2__VAL_1 :
	       MUX_tlb_entryLo0$b_put_2__VAL_2 ;
  assign tlb_entryLo0$DIA =
	     MUX_tlb_entryHiHash$a_put_1__SEL_2 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       MUX_tlb_entryLo0$a_put_3__VAL_2 ;
  assign tlb_entryLo0$DIB =
	     (tlb_tlbState == 3'd5) ?
	       MUX_tlb_entryLo0$a_put_3__VAL_2 :
	       MUX_tlb_entryLo0$a_put_3__VAL_2 ;
  assign tlb_entryLo0$WEA = 1'd0 ;
  assign tlb_entryLo0$WEB = 1'd1 ;
  assign tlb_entryLo0$ENA =
	     WILL_FIRE_RL_tlb_startTLB &&
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 ||
	     WILL_FIRE_RL_tlb_doRead ;
  assign tlb_entryLo0$ENB = tlb_tlbState == 3'd5 || tlb_tlbState == 3'd4 ;

  // submodule tlb_entryLo1
  assign tlb_entryLo1$ADDRA =
	     MUX_tlb_entryHiHash$a_put_1__SEL_2 ?
	       MUX_tlb_entryLo0$a_put_2__VAL_1 :
	       MUX_tlb_entryLo0$a_put_2__VAL_2 ;
  assign tlb_entryLo1$ADDRB =
	     (tlb_tlbState == 3'd5) ?
	       MUX_tlb_entryLo0$b_put_2__VAL_1 :
	       MUX_tlb_entryLo0$b_put_2__VAL_2 ;
  assign tlb_entryLo1$DIA =
	     MUX_tlb_entryHiHash$a_put_1__SEL_2 ?
	       32'hAAAAAAAA /* unspecified value */  :
	       MUX_tlb_entryLo1$a_put_3__VAL_2 ;
  assign tlb_entryLo1$DIB =
	     (tlb_tlbState == 3'd5) ?
	       MUX_tlb_entryLo1$a_put_3__VAL_2 :
	       MUX_tlb_entryLo1$a_put_3__VAL_2 ;
  assign tlb_entryLo1$WEA = 1'd0 ;
  assign tlb_entryLo1$WEB = 1'd1 ;
  assign tlb_entryLo1$ENA =
	     WILL_FIRE_RL_tlb_startTLB &&
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 ||
	     WILL_FIRE_RL_tlb_doRead ;
  assign tlb_entryLo1$ENB = tlb_tlbState == 3'd5 || tlb_tlbState == 3'd4 ;

  // submodule tlb_readOut_fifo
  assign tlb_readOut_fifo$D_IN = MUX_tlb_entryLo0$a_put_2__VAL_2 ;
  assign tlb_readOut_fifo$ENQ =
	     WILL_FIRE_RL_tlb_doRead && !tlb_readWrite_fifo$D_OUT[149] ;
  assign tlb_readOut_fifo$DEQ = WILL_FIRE_RL_readTlb ;
  assign tlb_readOut_fifo$CLR = 1'b0 ;

  // submodule tlb_readWrite_fifo
  assign tlb_readWrite_fifo$D_IN =
	     MUX_tlb_readWrite_fifo$enq_1__SEL_1 ?
	       MUX_tlb_readWrite_fifo$enq_1__VAL_1 :
	       MUX_tlb_readWrite_fifo$enq_1__VAL_2 ;
  assign tlb_readWrite_fifo$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d989 ||
	     tlb_tlbState == 3'd4 &&
	     !tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 &&
	     tlb_entryHiHash$DOA[13] &&
	     tlb_readWrite_fifo$D_OUT[148] ;
  assign tlb_readWrite_fifo$DEQ =
	     WILL_FIRE_RL_tlb_doRead && !tlb_readWrite_fifo$D_OUT[149] ||
	     tlb_tlbState == 3'd5 ||
	     tlb_tlbState == 3'd4 ;
  assign tlb_readWrite_fifo$CLR = 1'b0 ;

  // submodule tlb_read_fifo
  assign tlb_read_fifo$D_IN =
	     { tlb_entrySrch_7_02_BIT_13_03_AND_tlb_entrySrch_ETC___d1921 ||
	       tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1950,
	       x2__h14355,
	       CASE_requestSource___11175_tlb_req_fifos_3D_O_ETC__q19,
	       requestSource___1__h11175 } ;
  assign tlb_read_fifo$ENQ = MUX_tlb_entryHiHash$a_put_1__SEL_2 ;
  assign tlb_read_fifo$DEQ = WILL_FIRE_RL_tlb_readTLB ;
  assign tlb_read_fifo$CLR = 1'b0 ;

  // submodule tlb_req_fifos
  assign tlb_req_fifos$D_IN = { tlbProbes$D_OUT, 11'd400 } ;
  assign tlb_req_fifos$ENQ =
	     tlb_tlbState == 3'd1 && !tlb_req_fifos$EMPTY_N &&
	     tlbProbes$EMPTY_N ;
  assign tlb_req_fifos$DEQ =
	     WILL_FIRE_RL_tlb_startTLB &&
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	     requestSource___1__h11175 == 3'd0 ;
  assign tlb_req_fifos$CLR = 1'b0 ;

  // submodule tlb_req_fifos_1
  assign tlb_req_fifos_1$D_IN = tlbLookupInstruction_request_put ;
  assign tlb_req_fifos_1$ENQ =
	     EN_tlbLookupInstruction_request_put &&
	     tlbLookupInstruction_request_put[74:67] != 8'h98 &&
	     tlbLookupInstruction_request_put[74:67] != 8'h90 &&
	     tlbLookupInstruction_request_put[74:67] != 8'hA0 &&
	     tlbLookupInstruction_request_put[74:67] != 8'hA8 &&
	     tlbLookupInstruction_request_put[74:67] != 8'hB0 &&
	     tlbLookupInstruction_request_put[8:4] == 5'd25 &&
	     NOT_tlbLookupInstruction_request_put_BITS_74_T_ETC___d1405 ;
  assign tlb_req_fifos_1$DEQ =
	     WILL_FIRE_RL_tlb_startTLB &&
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	     requestSource___1__h11175 == 3'd1 ;
  assign tlb_req_fifos_1$CLR = 1'b0 ;

  // submodule tlb_req_fifos_2
  assign tlb_req_fifos_2$D_IN = tlbLookupData_request_put ;
  assign tlb_req_fifos_2$ENQ =
	     EN_tlbLookupData_request_put &&
	     tlbLookupData_request_put[74:67] != 8'h98 &&
	     tlbLookupData_request_put[74:67] != 8'h90 &&
	     tlbLookupData_request_put[74:67] != 8'hA0 &&
	     tlbLookupData_request_put[74:67] != 8'hA8 &&
	     tlbLookupData_request_put[74:67] != 8'hB0 &&
	     tlbLookupData_request_put[8:4] == 5'd25 &&
	     NOT_tlbLookupData_request_put_BITS_74_TO_43_45_ETC___d1547 ;
  assign tlb_req_fifos_2$DEQ =
	     WILL_FIRE_RL_tlb_startTLB &&
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	     requestSource___1__h11175 == 3'd2 ;
  assign tlb_req_fifos_2$CLR = 1'b0 ;

  // submodule tlb_req_fifos_3
  assign tlb_req_fifos_3$D_IN = tlbLookupCoprocessors_0_request_put ;
  assign tlb_req_fifos_3$ENQ =
	     EN_tlbLookupCoprocessors_0_request_put &&
	     tlbLookupCoprocessors_0_request_put[74:67] != 8'h98 &&
	     tlbLookupCoprocessors_0_request_put[74:67] != 8'h90 &&
	     tlbLookupCoprocessors_0_request_put[74:67] != 8'hA0 &&
	     tlbLookupCoprocessors_0_request_put[74:67] != 8'hA8 &&
	     tlbLookupCoprocessors_0_request_put[74:67] != 8'hB0 &&
	     tlbLookupCoprocessors_0_request_put[8:4] == 5'd25 &&
	     NOT_tlbLookupCoprocessors_0_request_put_BITS_7_ETC___d1720 ;
  assign tlb_req_fifos_3$DEQ =
	     WILL_FIRE_RL_tlb_startTLB &&
	     tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	     requestSource___1__h11175 == 3'd3 ;
  assign tlb_req_fifos_3$CLR = 1'b0 ;

  // submodule tlb_rsp_fifos
  assign tlb_rsp_fifos$D_IN =
	     { _theResult_____5__h15306,
	       IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845,
	       tlb_read_fifo_first__52_BITS_13_TO_12_16_CONCA_ETC___d427 } ;
  assign tlb_rsp_fifos$ENQ =
	     WILL_FIRE_RL_tlb_readTLB && tlb_read_fifo$D_OUT[2:0] == 3'd0 ;
  assign tlb_rsp_fifos$DEQ = tlb_rsp_fifos$EMPTY_N ;
  assign tlb_rsp_fifos$CLR = 1'b0 ;

  // submodule tlb_rsp_fifos_1
  assign tlb_rsp_fifos_1$D_IN = tlb_rsp_fifos$D_IN ;
  assign tlb_rsp_fifos_1$ENQ =
	     WILL_FIRE_RL_tlb_readTLB && tlb_read_fifo$D_OUT[2:0] == 3'd1 ;
  assign tlb_rsp_fifos_1$DEQ =
	     EN_tlbLookupInstruction_response_get &&
	     !tlb_smt_fifos_1$EMPTY_N ;
  assign tlb_rsp_fifos_1$CLR = 1'b0 ;

  // submodule tlb_rsp_fifos_2
  assign tlb_rsp_fifos_2$D_IN = tlb_rsp_fifos$D_IN ;
  assign tlb_rsp_fifos_2$ENQ =
	     WILL_FIRE_RL_tlb_readTLB && tlb_read_fifo$D_OUT[2:0] == 3'd2 ;
  assign tlb_rsp_fifos_2$DEQ =
	     EN_tlbLookupData_response_get && !tlb_smt_fifos_2$EMPTY_N ;
  assign tlb_rsp_fifos_2$CLR = 1'b0 ;

  // submodule tlb_rsp_fifos_3
  assign tlb_rsp_fifos_3$D_IN = tlb_rsp_fifos$D_IN ;
  assign tlb_rsp_fifos_3$ENQ =
	     WILL_FIRE_RL_tlb_readTLB && tlb_read_fifo$D_OUT[2:0] == 3'd3 ;
  assign tlb_rsp_fifos_3$DEQ =
	     EN_tlbLookupCoprocessors_0_response_get &&
	     !tlb_smt_fifos_3$EMPTY_N ;
  assign tlb_rsp_fifos_3$CLR = 1'b0 ;

  // submodule tlb_smt_fifos
  assign tlb_smt_fifos$D_IN = 50'h0 ;
  assign tlb_smt_fifos$ENQ = 1'b0 ;
  assign tlb_smt_fifos$DEQ = 1'b0 ;
  assign tlb_smt_fifos$CLR = 1'b0 ;

  // submodule tlb_smt_fifos_1
  assign tlb_smt_fifos_1$D_IN =
	     { (tlbLookupInstruction_request_put[74:67] == 8'h98 ||
		tlbLookupInstruction_request_put[74:67] == 8'h90 ||
		tlbLookupInstruction_request_put[74:67] == 8'hA0 ||
		tlbLookupInstruction_request_put[74:67] == 8'hA8 ||
		tlbLookupInstruction_request_put[74:67] == 8'hB0 ||
		tlbLookupInstruction_request_put[8:4] != 5'd25) ?
		 tlbLookupInstruction_request_put[46:11] :
		 IF_tlbLookupInstruction_request_put_BITS_74_TO_ETC___d1345,
	       (tlbLookupInstruction_request_put[74:67] == 8'h98 ||
		tlbLookupInstruction_request_put[74:67] == 8'h90 ||
		tlbLookupInstruction_request_put[74:67] == 8'hA0 ||
		tlbLookupInstruction_request_put[74:67] == 8'hA8 ||
		tlbLookupInstruction_request_put[74:67] == 8'hB0 ||
		tlbLookupInstruction_request_put[8:4] != 5'd25 ||
		tlbLookupInstruction_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupInstruction_request_put[42:40] == 3'b100 ||
		 tlbLookupInstruction_request_put[42:40] == 3'b101)) ?
		 5'd25 :
		 ((IF_tlbLookupInstruction_request_put_BITS_8_TO__ETC___d2060 ==
		   5'd25 &&
		   tlbLookupInstruction_request_put[10] &&
		   !tlb_last_hit_1[2]) ?
		    5'd1 :
		    IF_tlbLookupInstruction_request_put_BITS_8_TO__ETC___d2060),
	       tlbLookupInstruction_request_put[10:9],
	       (tlbLookupInstruction_request_put[74:67] == 8'h98 ||
		tlbLookupInstruction_request_put[74:67] == 8'h90 ||
		tlbLookupInstruction_request_put[74:67] == 8'hA0 ||
		tlbLookupInstruction_request_put[74:67] == 8'hA8 ||
		tlbLookupInstruction_request_put[74:67] == 8'hB0 ||
		tlbLookupInstruction_request_put[8:4] != 5'd25 ||
		tlbLookupInstruction_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupInstruction_request_put[42:40] == 3'b100 ||
		 tlbLookupInstruction_request_put[42:40] == 3'b101)) ?
		 tlbLookupInstruction_request_put[74:67] != 8'h90 &&
		 (tlbLookupInstruction_request_put[74:43] != 32'hFFFFFFFF ||
		  tlbLookupInstruction_request_put[42:40] != 3'b101) :
		 tlb_last_hit_1[5:3] != 3'd2,
	       (tlbLookupInstruction_request_put[74:67] == 8'h98 ||
		tlbLookupInstruction_request_put[74:67] == 8'h90 ||
		tlbLookupInstruction_request_put[74:67] == 8'hA0 ||
		tlbLookupInstruction_request_put[74:67] == 8'hA8 ||
		tlbLookupInstruction_request_put[74:67] == 8'hB0 ||
		tlbLookupInstruction_request_put[8:4] != 5'd25 ||
		tlbLookupInstruction_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupInstruction_request_put[42:40] == 3'b100 ||
		 tlbLookupInstruction_request_put[42:40] == 3'b101)) ?
		 2'd2 :
		 ((tlbLookupInstruction_request_put[74:71] < 4'h8) ?
		    ((tlbLookupInstruction_request_put[74:71] < 4'h4) ?
		       2'd0 :
		       2'd1) :
		    2'd2),
	       tlbLookupInstruction_request_put[3:0] } ;
  assign tlb_smt_fifos_1$ENQ =
	     EN_tlbLookupInstruction_request_put &&
	     (tlbLookupInstruction_request_put[74:67] == 8'h98 ||
	      tlbLookupInstruction_request_put[74:67] == 8'h90 ||
	      tlbLookupInstruction_request_put[74:67] == 8'hA0 ||
	      tlbLookupInstruction_request_put[74:67] == 8'hA8 ||
	      tlbLookupInstruction_request_put[74:67] == 8'hB0 ||
	      tlbLookupInstruction_request_put[8:4] != 5'd25 ||
	      tlbLookupInstruction_request_put_BITS_74_TO_43_ETC___d1337) ;
  assign tlb_smt_fifos_1$DEQ =
	     EN_tlbLookupInstruction_response_get && tlb_smt_fifos_1$EMPTY_N ;
  assign tlb_smt_fifos_1$CLR = 1'b0 ;

  // submodule tlb_smt_fifos_2
  assign tlb_smt_fifos_2$D_IN =
	     { (tlbLookupData_request_put[74:67] == 8'h98 ||
		tlbLookupData_request_put[74:67] == 8'h90 ||
		tlbLookupData_request_put[74:67] == 8'hA0 ||
		tlbLookupData_request_put[74:67] == 8'hA8 ||
		tlbLookupData_request_put[74:67] == 8'hB0 ||
		tlbLookupData_request_put[8:4] != 5'd25) ?
		 tlbLookupData_request_put[46:11] :
		 IF_tlbLookupData_request_put_BITS_74_TO_43_459_ETC___d1486,
	       (tlbLookupData_request_put[74:67] == 8'h98 ||
		tlbLookupData_request_put[74:67] == 8'h90 ||
		tlbLookupData_request_put[74:67] == 8'hA0 ||
		tlbLookupData_request_put[74:67] == 8'hA8 ||
		tlbLookupData_request_put[74:67] == 8'hB0 ||
		tlbLookupData_request_put[8:4] != 5'd25 ||
		tlbLookupData_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupData_request_put[42:40] == 3'b100 ||
		 tlbLookupData_request_put[42:40] == 3'b101)) ?
		 5'd25 :
		 ((IF_tlbLookupData_request_put_BITS_8_TO_4_455_E_ETC___d2066 ==
		   5'd25 &&
		   tlbLookupData_request_put[10] &&
		   !tlb_last_hit_2[2]) ?
		    5'd1 :
		    IF_tlbLookupData_request_put_BITS_8_TO_4_455_E_ETC___d2066),
	       tlbLookupData_request_put[10:9],
	       (tlbLookupData_request_put[74:67] == 8'h98 ||
		tlbLookupData_request_put[74:67] == 8'h90 ||
		tlbLookupData_request_put[74:67] == 8'hA0 ||
		tlbLookupData_request_put[74:67] == 8'hA8 ||
		tlbLookupData_request_put[74:67] == 8'hB0 ||
		tlbLookupData_request_put[8:4] != 5'd25 ||
		tlbLookupData_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupData_request_put[42:40] == 3'b100 ||
		 tlbLookupData_request_put[42:40] == 3'b101)) ?
		 tlbLookupData_request_put[74:67] != 8'h90 &&
		 (tlbLookupData_request_put[74:43] != 32'hFFFFFFFF ||
		  tlbLookupData_request_put[42:40] != 3'b101) :
		 tlb_last_hit_2[5:3] != 3'd2,
	       (tlbLookupData_request_put[74:67] == 8'h98 ||
		tlbLookupData_request_put[74:67] == 8'h90 ||
		tlbLookupData_request_put[74:67] == 8'hA0 ||
		tlbLookupData_request_put[74:67] == 8'hA8 ||
		tlbLookupData_request_put[74:67] == 8'hB0 ||
		tlbLookupData_request_put[8:4] != 5'd25 ||
		tlbLookupData_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupData_request_put[42:40] == 3'b100 ||
		 tlbLookupData_request_put[42:40] == 3'b101)) ?
		 2'd2 :
		 ((tlbLookupData_request_put[74:71] < 4'h8) ?
		    ((tlbLookupData_request_put[74:71] < 4'h4) ?
		       2'd0 :
		       2'd1) :
		    2'd2),
	       tlbLookupData_request_put[3:0] } ;
  assign tlb_smt_fifos_2$ENQ =
	     EN_tlbLookupData_request_put &&
	     (tlbLookupData_request_put[74:67] == 8'h98 ||
	      tlbLookupData_request_put[74:67] == 8'h90 ||
	      tlbLookupData_request_put[74:67] == 8'hA0 ||
	      tlbLookupData_request_put[74:67] == 8'hA8 ||
	      tlbLookupData_request_put[74:67] == 8'hB0 ||
	      tlbLookupData_request_put[8:4] != 5'd25 ||
	      tlbLookupData_request_put_BITS_74_TO_43_459_EQ_ETC___d1478) ;
  assign tlb_smt_fifos_2$DEQ =
	     EN_tlbLookupData_response_get && tlb_smt_fifos_2$EMPTY_N ;
  assign tlb_smt_fifos_2$CLR = 1'b0 ;

  // submodule tlb_smt_fifos_3
  assign tlb_smt_fifos_3$D_IN =
	     { (tlbLookupCoprocessors_0_request_put[74:67] == 8'h98 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'h90 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hA0 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hA8 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hB0 ||
		tlbLookupCoprocessors_0_request_put[8:4] != 5'd25) ?
		 tlbLookupCoprocessors_0_request_put[46:11] :
		 IF_tlbLookupCoprocessors_0_request_put_BITS_74_ETC___d1659,
	       (tlbLookupCoprocessors_0_request_put[74:67] == 8'h98 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'h90 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hA0 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hA8 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hB0 ||
		tlbLookupCoprocessors_0_request_put[8:4] != 5'd25 ||
		tlbLookupCoprocessors_0_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupCoprocessors_0_request_put[42:40] == 3'b100 ||
		 tlbLookupCoprocessors_0_request_put[42:40] == 3'b101)) ?
		 5'd25 :
		 ((IF_tlbLookupCoprocessors_0_request_put_BITS_8__ETC___d2072 ==
		   5'd25 &&
		   tlbLookupCoprocessors_0_request_put[10] &&
		   !tlb_last_hit_3[2]) ?
		    5'd1 :
		    IF_tlbLookupCoprocessors_0_request_put_BITS_8__ETC___d2072),
	       tlbLookupCoprocessors_0_request_put[10:9],
	       (tlbLookupCoprocessors_0_request_put[74:67] == 8'h98 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'h90 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hA0 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hA8 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hB0 ||
		tlbLookupCoprocessors_0_request_put[8:4] != 5'd25 ||
		tlbLookupCoprocessors_0_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupCoprocessors_0_request_put[42:40] == 3'b100 ||
		 tlbLookupCoprocessors_0_request_put[42:40] == 3'b101)) ?
		 tlbLookupCoprocessors_0_request_put[74:67] != 8'h90 &&
		 (tlbLookupCoprocessors_0_request_put[74:43] !=
		  32'hFFFFFFFF ||
		  tlbLookupCoprocessors_0_request_put[42:40] != 3'b101) :
		 tlb_last_hit_3[5:3] != 3'd2,
	       (tlbLookupCoprocessors_0_request_put[74:67] == 8'h98 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'h90 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hA0 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hA8 ||
		tlbLookupCoprocessors_0_request_put[74:67] == 8'hB0 ||
		tlbLookupCoprocessors_0_request_put[8:4] != 5'd25 ||
		tlbLookupCoprocessors_0_request_put[74:43] == 32'hFFFFFFFF &&
		(tlbLookupCoprocessors_0_request_put[42:40] == 3'b100 ||
		 tlbLookupCoprocessors_0_request_put[42:40] == 3'b101)) ?
		 2'd2 :
		 ((tlbLookupCoprocessors_0_request_put[74:71] < 4'h8) ?
		    ((tlbLookupCoprocessors_0_request_put[74:71] < 4'h4) ?
		       2'd0 :
		       2'd1) :
		    2'd2),
	       tlbLookupCoprocessors_0_request_put[3:0] } ;
  assign tlb_smt_fifos_3$ENQ =
	     EN_tlbLookupCoprocessors_0_request_put &&
	     (tlbLookupCoprocessors_0_request_put[74:67] == 8'h98 ||
	      tlbLookupCoprocessors_0_request_put[74:67] == 8'h90 ||
	      tlbLookupCoprocessors_0_request_put[74:67] == 8'hA0 ||
	      tlbLookupCoprocessors_0_request_put[74:67] == 8'hA8 ||
	      tlbLookupCoprocessors_0_request_put[74:67] == 8'hB0 ||
	      tlbLookupCoprocessors_0_request_put[8:4] != 5'd25 ||
	      tlbLookupCoprocessors_0_request_put_BITS_74_TO_ETC___d1651) ;
  assign tlb_smt_fifos_3$DEQ =
	     EN_tlbLookupCoprocessors_0_response_get &&
	     tlb_smt_fifos_3$EMPTY_N ;
  assign tlb_smt_fifos_3$CLR = 1'b0 ;

  // submodule xcntxtUpdate
  assign xcntxtUpdate$D_IN = dataUpdate$D_OUT[63:33] ;
  assign xcntxtUpdate$ENQ =
	     WILL_FIRE_RL_updateCP0Registers &&
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd20 ;
  assign xcntxtUpdate$DEQ = xcntxtUpdate$EMPTY_N ;
  assign xcntxtUpdate$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 =
	     IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_ETC___d414 ?
	       5'd1 :
	       IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_ETC___d2015 ;
  assign IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_ETC___d2015 =
	     IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_AN_ETC___d403 ?
	       ((tlb_read_fifo$D_OUT[2:0] == 3'd1) ?
		  5'd3 :
		  (tlb_read_fifo$D_OUT[13] ? 5'd7 : 5'd6)) :
	       IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_AN_ETC___d2014 ;
  assign IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_ETC___d414 =
	     IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_ETC___d2015 ==
	     5'd25 &&
	     tlb_read_fifo$D_OUT[13] &&
	     (tlb_read_fifo$D_OUT[26] ?
		!tlb_entryLo1$DOA[2] :
		!tlb_entryLo0$DOA[2]) ;
  assign IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d481 =
	     (tlb_read_fifo$D_OUT[26] ?
		tlb_entryLo1$DOA[5:3] == 3'd3 :
		tlb_entryLo0$DOA[5:3] == 3'd3) ?
	       3'd3 :
	       3'd4 ;
  assign IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d482 =
	     (tlb_read_fifo$D_OUT[26] ?
		tlb_entryLo1$DOA[5:3] == 3'd2 :
		tlb_entryLo0$DOA[5:3] == 3'd2) ?
	       3'd2 :
	       IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d481 ;
  assign IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d483 =
	     (tlb_read_fifo$D_OUT[26] ?
		tlb_entryLo1$DOA[5:3] == 3'd0 :
		tlb_entryLo0$DOA[5:3] == 3'd0) ?
	       3'd0 :
	       IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d482 ;
  assign IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d485 =
	     { IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d483,
	       tlb_read_fifo$D_OUT[26] ?
		 tlb_entryLo1$DOA[2:0] :
		 tlb_entryLo0$DOA[2:0] } ;
  assign IF_IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_ETC___d1436 =
	     (IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d2063 ==
	      2'd2 ||
	      IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d2063 ==
	      2'd1 &&
	      sr[4:3] != 2'd1) ?
	       5'd8 :
	       IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d2099 ;
  assign IF_IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_ETC___d1588 =
	     (IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d2069 ==
	      2'd2 ||
	      IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d2069 ==
	      2'd1 &&
	      sr[4:3] != 2'd1) ?
	       (IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1931 ?
		  5'd10 :
		  5'd9) :
	       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d2102 ;
  assign IF_IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_ETC___d1862 =
	     IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1576 ?
	       ((IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2070 ==
		 5'd25) ?
		  5'd23 :
		  IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2070) :
	       IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2070 ;
  assign IF_IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_ETC___d1745 =
	     (tlb_smt_fifos_3$EMPTY_N ?
		tlb_smt_fifos_3$D_OUT[8] :
		tlb_rsp_fifos_3$D_OUT[8]) ?
	       5'd10 :
	       5'd9 ;
  assign IF_IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_ETC___d1749 =
	     (IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_sm_ETC___d2075 ==
	      2'd2 ||
	      IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_sm_ETC___d2075 ==
	      2'd1 &&
	      sr[4:3] != 2'd1) ?
	       IF_IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_ETC___d1745 :
	       IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_sm_ETC___d2103 ;
  assign IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2064 =
	     (sr[4:3] != 2'd0 && !sr[1]) ?
	       IF_IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_ETC___d1436 :
	       IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d2099 ;
  assign IF_NOT_sr_read__09_BITS_4_TO_3_10_EQ_0_11_422__ETC___d2070 =
	     (sr[4:3] != 2'd0 && !sr[1]) ?
	       IF_IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_ETC___d1588 :
	       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d2102 ;
  assign IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_AN_ETC___d2014 =
	     (NOT_tlb_read_fifo_first__52_BIT_84_55_80_AND_N_ETC___d388 &&
	      tlb_read_fifo$D_OUT[11:7] == 5'd25) ?
	       ((tlb_read_fifo$D_OUT[2:0] == 3'd1) ?
		  5'd2 :
		  (tlb_read_fifo$D_OUT[13] ? 5'd5 : 5'd4)) :
	       tlb_read_fifo$D_OUT[11:7] ;
  assign IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_AN_ETC___d403 =
	     IF_NOT_tlb_read_fifo_first__52_BIT_84_55_80_AN_ETC___d2014 ==
	     5'd25 &&
	     (tlb_read_fifo$D_OUT[26] ?
		!tlb_entryLo1$DOA[1] :
		!tlb_entryLo0$DOA[1]) ;
  assign IF_causeUpdate0_i_notEmpty__66_THEN_IF_cause_7_ETC___d2048 =
	     causeUpdate0$EMPTY_N ?
	       IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 :
	       IF_causeUpdate1_i_notEmpty__68_THEN_IF_causeUp_ETC___d708 ;
  assign IF_causeUpdate0_i_notEmpty__66_THEN_causeUpdat_ETC___d757 =
	     { causeUpdate0$EMPTY_N ? causeUpdate0$D_OUT[22] : cause[22],
	       cause[21:16],
	       IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d756 } ;
  assign IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d2124 =
	     causeUpdate0$EMPTY_N ?
	       y_avValue_ip__h18238 :
	       x1_avValue_ip__h18517 ;
  assign IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d584 =
	     causeUpdate0$EMPTY_N ?
	       cause[31] :
	       (causeUpdate1$EMPTY_N ? causeUpdate1$D_OUT[31] : cause[31]) ;
  assign IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d756 =
	     { x_ip__h18557,
	       cause[7],
	       CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4,
	       cause[1:0] } ;
  assign IF_causeUpdate1_i_notEmpty__68_THEN_IF_causeUp_ETC___d708 =
	     causeUpdate1$EMPTY_N ?
	       CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 :
	       IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 ;
  assign IF_dataUpdate_first__21_BITS_5_TO_0_22_EQ_1_80_ETC___d1031 =
	     { tlbEntryHi,
	       13'd4096,
	       tlbEntryLo0[0] && tlbEntryLo1[0],
	       tlbEntryLo0[31:6],
	       IF_tlbEntryLo0_read__000_BITS_5_TO_3_007_EQ_0__ETC___d2143,
	       tlbEntryLo0[2:0],
	       tlbEntryLo1[31:6],
	       IF_tlbEntryLo1_read__002_BITS_5_TO_3_017_EQ_0__ETC___d2145,
	       tlbEntryLo1[2:0] } ;
  assign IF_tlbLookupCoprocessors_0_request_put_BITS_74_ETC___d1659 =
	     (tlbLookupCoprocessors_0_request_put[74:43] == 32'hFFFFFFFF &&
	      (tlbLookupCoprocessors_0_request_put[42:40] == 3'b100 ||
	       tlbLookupCoprocessors_0_request_put[42:40] == 3'b101)) ?
	       x_addr__h30846 :
	       addr__h30356 ;
  assign IF_tlbLookupCoprocessors_0_request_put_BITS_8__ETC___d2072 =
	     (tlbLookupCoprocessors_0_request_put[8:4] == 5'd25 &&
	      !tlb_last_hit_3[1]) ?
	       (tlbLookupCoprocessors_0_request_put[10] ? 5'd7 : 5'd6) :
	       tlbLookupCoprocessors_0_request_put[8:4] ;
  assign IF_tlbLookupData_request_put_BITS_74_TO_43_459_ETC___d1486 =
	     (tlbLookupData_request_put[74:43] == 32'hFFFFFFFF &&
	      (tlbLookupData_request_put[42:40] == 3'b100 ||
	       tlbLookupData_request_put[42:40] == 3'b101)) ?
	       x_addr__h28759 :
	       addr__h28269 ;
  assign IF_tlbLookupData_request_put_BITS_8_TO_4_455_E_ETC___d2066 =
	     (tlbLookupData_request_put[8:4] == 5'd25 && !tlb_last_hit_2[1]) ?
	       (tlbLookupData_request_put[10] ? 5'd7 : 5'd6) :
	       tlbLookupData_request_put[8:4] ;
  assign IF_tlbLookupInstruction_request_put_BITS_74_TO_ETC___d1345 =
	     (tlbLookupInstruction_request_put[74:43] == 32'hFFFFFFFF &&
	      (tlbLookupInstruction_request_put[42:40] == 3'b100 ||
	       tlbLookupInstruction_request_put[42:40] == 3'b101)) ?
	       x_addr__h27037 :
	       addr__h26547 ;
  assign IF_tlbLookupInstruction_request_put_BITS_8_TO__ETC___d2060 =
	     (tlbLookupInstruction_request_put[8:4] == 5'd25 &&
	      !tlb_last_hit_1[1]) ?
	       5'd3 :
	       tlbLookupInstruction_request_put[8:4] ;
  assign IF_tlb_entryHiHash_a_read__5_BIT_13_6_AND_tlb__ETC___d449 =
	     (tlb_entryHiHash$DOA[13] &&
	      tlb_entryHiHash_a_read__5_BITS_77_TO_27_57_EQ__ETC___d2121 &&
	      (tlb_entryHiHash_a_read__5_BITS_21_TO_14_61_EQ__ETC___d2122 ||
	       tlb_entryHiHash$DOA[0])) ?
	       tlb_entryHiHash$DOA[0] :
	       IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 ;
  assign IF_tlb_entryHiHash_a_read__5_BIT_13_6_AND_tlb__ETC___d473 =
	     (tlb_entryHiHash$DOA[13] &&
	      tlb_entryHiHash_a_read__5_BITS_77_TO_27_57_EQ__ETC___d2121 &&
	      (tlb_entryHiHash_a_read__5_BITS_21_TO_14_61_EQ__ETC___d2122 ||
	       tlb_entryHiHash$DOA[0])) ?
	       tlb_entryHiHash$DOA[77:14] :
	       IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 ;
  assign IF_tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entryS_ETC___d1769 =
	     tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entrySrch_ETC___d1909 ?
	       3'd1 :
	       3'd0 ;
  assign IF_tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entryS_ETC___d1770 =
	     tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entrySrch_ETC___d1911 ?
	       3'd2 :
	       IF_tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entryS_ETC___d1769 ;
  assign IF_tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entryS_ETC___d1771 =
	     tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1913 ?
	       3'd3 :
	       IF_tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entryS_ETC___d1770 ;
  assign IF_tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entryS_ETC___d1772 =
	     tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entrySrch_ETC___d1915 ?
	       3'd4 :
	       IF_tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entryS_ETC___d1771 ;
  assign IF_tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entryS_ETC___d1773 =
	     tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entrySrch_ETC___d1917 ?
	       3'd5 :
	       IF_tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entryS_ETC___d1772 ;
  assign IF_tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entryS_ETC___d1774 =
	     tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1919 ?
	       3'd6 :
	       IF_tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entryS_ETC___d1773 ;
  assign IF_tlb_read_fifo_first__52_BIT_84_55_THEN_IF_t_ETC___d487 =
	     { tlb_read_fifo$D_OUT[84] ?
		 IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 :
		 IF_tlb_entryHiHash_a_read__5_BIT_13_6_AND_tlb__ETC___d449,
	       tlb_read_fifo$D_OUT[84] ?
		 IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 :
		 IF_tlb_entryHiHash_a_read__5_BIT_13_6_AND_tlb__ETC___d473,
	       _theResult___zeros__h15801,
	       _theResult___pfn__h15802,
	       IF_IF_tlb_read_fifo_first__52_BIT_26_73_THEN_t_ETC___d485 } ;
  assign IF_tlb_req_fifos_1_i_notEmpty__69_AND_NOT_tlb__ETC___d1766 =
	     (tlb_req_fifos_1$EMPTY_N && !tlb_req_fifos$EMPTY_N) ?
	       tlb_req_fifos_1$D_OUT[74:11] :
	       tlb_req_fifos$D_OUT[74:11] ;
  assign IF_tlb_req_fifos_2_i_notEmpty__70_AND_NOT_tlb__ETC___d1767 =
	     (tlb_req_fifos_2$EMPTY_N && !tlb_req_fifos_1$EMPTY_N &&
	      !tlb_req_fifos$EMPTY_N) ?
	       3'd2 :
	       ((tlb_req_fifos_1$EMPTY_N && !tlb_req_fifos$EMPTY_N) ?
		  3'd1 :
		  3'd0) ;
  assign IF_tlb_req_fifos_2_i_notEmpty__70_AND_NOT_tlb__ETC___d1776 =
	     (tlb_req_fifos_2$EMPTY_N && !tlb_req_fifos_1$EMPTY_N &&
	      !tlb_req_fifos$EMPTY_N) ?
	       tlb_req_fifos_2$D_OUT[74:11] :
	       IF_tlb_req_fifos_1_i_notEmpty__69_AND_NOT_tlb__ETC___d1766 ;
  assign IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759 =
	     tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb_req_ETC___d1756 ?
	       tlb_req_fifos_3$D_OUT[74:11] :
	       IF_tlb_req_fifos_2_i_notEmpty__70_AND_NOT_tlb__ETC___d1776 ;
  assign IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d1761 =
	     tlb_smt_fifos_1$EMPTY_N ?
	       tlb_smt_fifos_1$D_OUT[49:14] :
	       tlb_rsp_fifos_1$D_OUT[49:14] ;
  assign IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d2063 =
	     tlb_smt_fifos_1$EMPTY_N ?
	       tlb_smt_fifos_1$D_OUT[5:4] :
	       tlb_rsp_fifos_1$D_OUT[5:4] ;
  assign IF_tlb_smt_fifos_1_i_notEmpty__410_THEN_tlb_sm_ETC___d2099 =
	     tlb_smt_fifos_1$EMPTY_N ?
	       tlb_smt_fifos_1$D_OUT[13:9] :
	       tlb_rsp_fifos_1$D_OUT[13:9] ;
  assign IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_NOT_tl_ETC___d2125 =
	     tlb_smt_fifos_2$EMPTY_N ?
	       !tlb_smt_fifos_2$D_OUT[8] :
	       !tlb_rsp_fifos_2$D_OUT[8] ;
  assign IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1576 =
	     IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1760 ==
	     { watchHi, watchLo[31:3], 3'b0 } &&
	     (watchLo[1] &&
	      IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_NOT_tl_ETC___d2125 ||
	      watchLo[0] &&
	      IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1931) ;
  assign IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1760 =
	     tlb_smt_fifos_2$EMPTY_N ?
	       tlb_smt_fifos_2$D_OUT[49:14] :
	       tlb_rsp_fifos_2$D_OUT[49:14] ;
  assign IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1931 =
	     tlb_smt_fifos_2$EMPTY_N ?
	       tlb_smt_fifos_2$D_OUT[8] :
	       tlb_rsp_fifos_2$D_OUT[8] ;
  assign IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1972 =
	     tlb_smt_fifos_2$EMPTY_N ?
	       tlb_smt_fifos_2$D_OUT[7] :
	       tlb_rsp_fifos_2$D_OUT[7] ;
  assign IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d2069 =
	     tlb_smt_fifos_2$EMPTY_N ?
	       tlb_smt_fifos_2$D_OUT[5:4] :
	       tlb_rsp_fifos_2$D_OUT[5:4] ;
  assign IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d2102 =
	     tlb_smt_fifos_2$EMPTY_N ?
	       tlb_smt_fifos_2$D_OUT[13:9] :
	       tlb_rsp_fifos_2$D_OUT[13:9] ;
  assign IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_sm_ETC___d2075 =
	     tlb_smt_fifos_3$EMPTY_N ?
	       tlb_smt_fifos_3$D_OUT[5:4] :
	       tlb_rsp_fifos_3$D_OUT[5:4] ;
  assign IF_tlb_smt_fifos_3_i_notEmpty__728_THEN_tlb_sm_ETC___d2103 =
	     tlb_smt_fifos_3$EMPTY_N ?
	       tlb_smt_fifos_3$D_OUT[13:9] :
	       tlb_rsp_fifos_3$D_OUT[13:9] ;
  assign NOT_causeUpdate1_i_notEmpty__68_70_AND_IF_caus_ETC___d588 =
	     !causeUpdate1$EMPTY_N &&
	     (causeUpdate2$EMPTY_N ?
		cause[30] :
		causeUpdate3$EMPTY_N || cause[30]) ;
  assign NOT_llScReg_read__133_BIT_64_134_554_OR_NOT_0__ETC___d1595 =
	     !llScReg[64] ||
	     { 28'd0,
	       IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_sm_ETC___d1760 } !=
	     llScReg[63:0] ||
	     IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_NOT_tl_ETC___d2125 ||
	     IF_IF_tlb_smt_fifos_2_i_notEmpty__552_THEN_tlb_ETC___d1862 !=
	     5'd25 ;
  assign NOT_tlbLookupCoprocessors_0_request_put_BITS_7_ETC___d1706 =
	     (tlbLookupCoprocessors_0_request_put[74:43] != 32'hFFFFFFFF ||
	      tlbLookupCoprocessors_0_request_put[42:40] != 3'b100 &&
	      tlbLookupCoprocessors_0_request_put[42:40] != 3'b101) &&
	     tlb_last_hit_3[98] &&
	     tlb_last_hit_3_41_BITS_95_TO_45_640_CONCAT_tlb_ETC___d1644 &&
	     (tlb_last_hit_3_41_BITS_39_TO_32_646_EQ_tlbEntr_ETC___d1647 ||
	      tlb_last_hit_3[96]) ;
  assign NOT_tlbLookupCoprocessors_0_request_put_BITS_7_ETC___d1720 =
	     (tlbLookupCoprocessors_0_request_put[74:43] != 32'hFFFFFFFF ||
	      tlbLookupCoprocessors_0_request_put[42:40] != 3'b100 &&
	      tlbLookupCoprocessors_0_request_put[42:40] != 3'b101) &&
	     (!tlb_last_hit_3[98] ||
	      !tlb_last_hit_3_41_BITS_95_TO_45_640_CONCAT_tlb_ETC___d1644 ||
	      !tlb_last_hit_3_41_BITS_39_TO_32_646_EQ_tlbEntr_ETC___d1647 &&
	      !tlb_last_hit_3[96]) ;
  assign NOT_tlbLookupData_request_put_BITS_74_TO_43_45_ETC___d1533 =
	     (tlbLookupData_request_put[74:43] != 32'hFFFFFFFF ||
	      tlbLookupData_request_put[42:40] != 3'b100 &&
	      tlbLookupData_request_put[42:40] != 3'b101) &&
	     tlb_last_hit_2[98] &&
	     tlb_last_hit_2_29_BITS_95_TO_45_467_CONCAT_tlb_ETC___d1471 &&
	     (tlb_last_hit_2_29_BITS_39_TO_32_473_EQ_tlbEntr_ETC___d1474 ||
	      tlb_last_hit_2[96]) ;
  assign NOT_tlbLookupData_request_put_BITS_74_TO_43_45_ETC___d1547 =
	     (tlbLookupData_request_put[74:43] != 32'hFFFFFFFF ||
	      tlbLookupData_request_put[42:40] != 3'b100 &&
	      tlbLookupData_request_put[42:40] != 3'b101) &&
	     (!tlb_last_hit_2[98] ||
	      !tlb_last_hit_2_29_BITS_95_TO_45_467_CONCAT_tlb_ETC___d1471 ||
	      !tlb_last_hit_2_29_BITS_39_TO_32_473_EQ_tlbEntr_ETC___d1474 &&
	      !tlb_last_hit_2[96]) ;
  assign NOT_tlbLookupInstruction_request_put_BITS_74_T_ETC___d1391 =
	     (tlbLookupInstruction_request_put[74:43] != 32'hFFFFFFFF ||
	      tlbLookupInstruction_request_put[42:40] != 3'b100 &&
	      tlbLookupInstruction_request_put[42:40] != 3'b101) &&
	     tlb_last_hit_1[98] &&
	     tlb_last_hit_1_17_BITS_95_TO_45_326_CONCAT_tlb_ETC___d1330 &&
	     (tlb_last_hit_1_17_BITS_39_TO_32_332_EQ_tlbEntr_ETC___d1333 ||
	      tlb_last_hit_1[96]) ;
  assign NOT_tlbLookupInstruction_request_put_BITS_74_T_ETC___d1405 =
	     (tlbLookupInstruction_request_put[74:43] != 32'hFFFFFFFF ||
	      tlbLookupInstruction_request_put[42:40] != 3'b100 &&
	      tlbLookupInstruction_request_put[42:40] != 3'b101) &&
	     (!tlb_last_hit_1[98] ||
	      !tlb_last_hit_1_17_BITS_95_TO_45_326_CONCAT_tlb_ETC___d1330 ||
	      !tlb_last_hit_1_17_BITS_39_TO_32_332_EQ_tlbEntr_ETC___d1333 &&
	      !tlb_last_hit_1[96]) ;
  assign NOT_tlb_read_fifo_first__52_BIT_84_55_80_AND_N_ETC___d388 =
	     !tlb_read_fifo$D_OUT[84] &&
	     (!tlb_entryHiHash$DOA[13] ||
	      !tlb_entryHiHash_a_read__5_BITS_77_TO_27_57_EQ__ETC___d2121 ||
	      !tlb_entryHiHash_a_read__5_BITS_21_TO_14_61_EQ__ETC___d2122 &&
	      !tlb_entryHiHash$DOA[0]) ;
  assign _theResult_____5__h15306 =
	     (tlb_read_fifo$D_OUT[2:0] == 3'd0) ?
	       response___1__h15677 :
	       response__h15158 ;
  assign _theResult____h7635 =
	     tlb_readWrite_fifo$D_OUT[149] ?
	       hashKey___1__h7990 :
	       hashKey__h7634 ;
  assign _theResult___pfn__h15802 =
	     tlb_read_fifo$D_OUT[26] ?
	       tlb_entryLo1$DOA[29:6] :
	       tlb_entryLo0$DOA[29:6] ;
  assign _theResult___zeros__h15801 =
	     tlb_read_fifo$D_OUT[26] ?
	       tlb_entryLo1$DOA[31:30] :
	       tlb_entryLo0$DOA[31:30] ;
  assign addr__h26547 =
	     { tlb_last_hit_1[29:6],
	       tlbLookupInstruction_request_put[22:11] } ;
  assign addr__h28269 =
	     { tlb_last_hit_2[29:6], tlbLookupData_request_put[22:11] } ;
  assign addr__h30356 =
	     { tlb_last_hit_3[29:6],
	       tlbLookupCoprocessors_0_request_put[22:11] } ;
  assign avaddrs_first__198_BITS_3_TO_0_199_EQ_putExcep_ETC___d2058 =
	     avaddrs$D_OUT[3:0] == putException_exp[4:1] ;
  assign cause_79_BITS_26_TO_24_95_CONCAT_IF_causeUpdat_ETC___d758 =
	     { cause[26:24],
	       causeUpdate0$EMPTY_N ? causeUpdate0$D_OUT[23] : cause[23],
	       IF_causeUpdate0_i_notEmpty__66_THEN_causeUpdat_ETC___d757 } ;
  assign cause_79_BITS_29_TO_28_90_CONCAT_IF_causeUpdat_ETC___d759 =
	     { cause[29:28],
	       causeUpdate0$EMPTY_N ? causeUpdate0$D_OUT[27] : cause[27],
	       cause_79_BITS_26_TO_24_95_CONCAT_IF_causeUpdat_ETC___d758 } ;
  assign dataUpdate_i_notEmpty__91_AND_forceUpdate_i_no_ETC___d801 =
	     dataUpdate$EMPTY_N && forceUpdate$EMPTY_N &&
	     tlb_tlbState == 3'd1 &&
	     !tlb_readWrite_fifo$EMPTY_N &&
	     tlbReads$FULL_N &&
	     eretReport$FULL_N &&
	     tlbProbes$FULL_N ;
  assign dvaddrs_first__193_BITS_3_TO_0_194_EQ_putExcep_ETC___d2057 =
	     dvaddrs$D_OUT[3:0] == putException_exp[4:1] ;
  assign foundIndex___1__h15741 = { 1'd0, hashKey__h15193 } + 6'd8 ;
  assign hashKey___1__h7990 = tlb_readWrite_fifo$D_OUT[95:91] - 5'd8 ;
  assign hashKey__h14215 =
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[17:13] -
	     5'd8 ;
  assign hashKey__h15193 = tlb_read_fifo$D_OUT[31:27] - 5'd8 ;
  assign hashKey__h20299 = tlbEntryHi[17:13] - 5'd8 ;
  assign hashKey__h7634 = tlb_readWrite_fifo$D_OUT[146:142] - 5'd8 ;
  assign ivaddrs_first__187_BITS_3_TO_0_188_EQ_putExcep_ETC___d2054 =
	     ivaddrs$D_OUT[3:0] == putException_exp[4:1] ;
  assign key__h14213 =
	     tlb_entrySrch_7_02_BIT_13_03_AND_tlb_entrySrch_ETC___d1921 ?
	       3'd7 :
	       IF_tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entryS_ETC___d1774 ;
  assign requestSource___1__h11175 =
	     tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb_req_ETC___d1756 ?
	       3'd3 :
	       IF_tlb_req_fifos_2_i_notEmpty__70_AND_NOT_tlb__ETC___d1767 ;
  assign response___1__h15677 = { 30'd0, x__h15680 } ;
  assign response__h15158 =
	     { _theResult___pfn__h15802, tlb_read_fifo$D_OUT[25:14] } ;
  assign rv__h23510 = { {32{x__h23513[31]}}, x__h23513 } ;
  assign rv__h23551 =
	     { 32'd0,
	       tlbEntryLo0[31:6],
	       IF_tlbEntryLo0_read__000_BITS_5_TO_3_007_EQ_0__ETC___d2143,
	       tlbEntryLo0[2:0] } ;
  assign rv__h23577 =
	     { 32'd0,
	       tlbEntryLo1[31:6],
	       IF_tlbEntryLo1_read__002_BITS_5_TO_3_017_EQ_0__ETC___d2145,
	       tlbEntryLo1[2:0] } ;
  assign rv__h23612 = { 52'd0, tlbPageMask } ;
  assign rv__h23621 = { 61'd0, tlbWired } ;
  assign rv__h23634 = { 32'd0, count } ;
  assign rv__h23650 = { 32'd0, compare } ;
  assign rv__h23658 = { 32'd0, sr } ;
  assign rv__h23688 = { 32'd0, x__h23691 } ;
  assign rv__h23771 = { 32'd0, procid } ;
  assign rv__h23813 = { 32'd0, x__h23816 } ;
  assign rv__h23926 = { 32'd0, configReg1 } ;
  assign rv__h24032 = { 32'd0, configReg2 } ;
  assign rv__h24107 = { 33'd0, configReg3 } ;
  assign rv__h24236 = { 32'd0, watchLo } ;
  assign rv__h24245 = { 60'd0, watchHi } ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d1045 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd31 &&
	     dataUpdate$D_OUT[5:0] == 6'd24 &&
	     !sr[2] &&
	     !eretHappened$EMPTY_N ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d1046 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd31 &&
	     dataUpdate$D_OUT[5:0] == 6'd24 &&
	     !sr[2] ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d820 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd0 ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d825 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd2 ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d837 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd3 ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d842 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd5 ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d850 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd10 ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d877 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     (rnUpdate$D_OUT == 5'd11 ||
	      rnUpdate$D_OUT == 5'd12 &&
	      (!dataUpdate$D_OUT[5] || !dataUpdate$D_OUT[6] ||
	       !dataUpdate$D_OUT[7])) ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d900 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     (rnUpdate$D_OUT == 5'd12 ||
	      rnUpdate$D_OUT == 5'd31 && dataUpdate$D_OUT[5:0] == 6'd24 &&
	      !sr[2]) ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d967 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd14 ;
  assign sr_read__09_BITS_4_TO_3_10_EQ_0_11_OR_sr_read__ETC___d989 =
	     (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	     rnUpdate$D_OUT == 5'd31 &&
	     (dataUpdate$D_OUT[5:0] == 6'd1 ||
	      dataUpdate$D_OUT[5:0] == 6'd2 && tlbIndex[6] ||
	      dataUpdate$D_OUT[5:0] == 6'd6) ;
  assign te_tlbAddr__h23031 = { 1'd0, hashKey__h20299 } + 6'd8 ;
  assign tlbIndexBase__h23491 = { 25'd0, x__h23535 } ;
  assign tlbLookupCoprocessors_0_request_put_BITS_74_TO_ETC___d1651 =
	     tlbLookupCoprocessors_0_request_put[74:43] == 32'hFFFFFFFF &&
	     (tlbLookupCoprocessors_0_request_put[42:40] == 3'b100 ||
	      tlbLookupCoprocessors_0_request_put[42:40] == 3'b101) ||
	     tlb_last_hit_3[98] &&
	     tlb_last_hit_3_41_BITS_95_TO_45_640_CONCAT_tlb_ETC___d1644 &&
	     (tlb_last_hit_3_41_BITS_39_TO_32_646_EQ_tlbEntr_ETC___d1647 ||
	      tlb_last_hit_3[96]) ;
  assign tlbLookupData_request_put_BITS_74_TO_43_459_EQ_ETC___d1478 =
	     tlbLookupData_request_put[74:43] == 32'hFFFFFFFF &&
	     (tlbLookupData_request_put[42:40] == 3'b100 ||
	      tlbLookupData_request_put[42:40] == 3'b101) ||
	     tlb_last_hit_2[98] &&
	     tlb_last_hit_2_29_BITS_95_TO_45_467_CONCAT_tlb_ETC___d1471 &&
	     (tlb_last_hit_2_29_BITS_39_TO_32_473_EQ_tlbEntr_ETC___d1474 ||
	      tlb_last_hit_2[96]) ;
  assign tlbLookupInstruction_request_put_BITS_74_TO_43_ETC___d1337 =
	     tlbLookupInstruction_request_put[74:43] == 32'hFFFFFFFF &&
	     (tlbLookupInstruction_request_put[42:40] == 3'b100 ||
	      tlbLookupInstruction_request_put[42:40] == 3'b101) ||
	     tlb_last_hit_1[98] &&
	     tlb_last_hit_1_17_BITS_95_TO_45_326_CONCAT_tlb_ETC___d1330 &&
	     (tlb_last_hit_1_17_BITS_39_TO_32_332_EQ_tlbEntr_ETC___d1333 ||
	      tlb_last_hit_1[96]) ;
  assign tlb_entryHiHash_a_read__5_BITS_21_TO_14_61_EQ__ETC___d2122 =
	     tlb_entryHiHash$DOA[21:14] == tlbEntryHi[7:0] ;
  assign tlb_entryHiHash_a_read__5_BITS_77_TO_27_57_EQ__ETC___d2121 =
	     tlb_entryHiHash$DOA[77:27] == tlb_read_fifo$D_OUT[77:27] ;
  assign tlb_entrySrch_13_BIT_13_14_AND_tlb_entrySrch_1_ETC___d1907 =
	     tlb_entrySrch[13] &&
	     tlb_entrySrch[77:27] ==
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[63:13] &&
	     (tlb_entrySrch[21:14] == tlbEntryHi[7:0] || tlb_entrySrch[0]) ;
  assign tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entrySrch_ETC___d1909 =
	     tlb_entrySrch_1[13] &&
	     tlb_entrySrch_1[77:27] ==
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[63:13] &&
	     (tlb_entrySrch_1[21:14] == tlbEntryHi[7:0] ||
	      tlb_entrySrch_1[0]) ;
  assign tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entrySrch_ETC___d1911 =
	     tlb_entrySrch_2[13] &&
	     tlb_entrySrch_2[77:27] ==
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[63:13] &&
	     (tlb_entrySrch_2[21:14] == tlbEntryHi[7:0] ||
	      tlb_entrySrch_2[0]) ;
  assign tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1913 =
	     tlb_entrySrch_3[13] &&
	     tlb_entrySrch_3[77:27] ==
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[63:13] &&
	     (tlb_entrySrch_3[21:14] == tlbEntryHi[7:0] ||
	      tlb_entrySrch_3[0]) ;
  assign tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1944 =
	     tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1913 ||
	     tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entrySrch_ETC___d1911 ||
	     tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entrySrch_ETC___d1909 ||
	     tlb_entrySrch_13_BIT_13_14_AND_tlb_entrySrch_1_ETC___d1907 ;
  assign tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entrySrch_ETC___d1915 =
	     tlb_entrySrch_4[13] &&
	     tlb_entrySrch_4[77:27] ==
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[63:13] &&
	     (tlb_entrySrch_4[21:14] == tlbEntryHi[7:0] ||
	      tlb_entrySrch_4[0]) ;
  assign tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entrySrch_ETC___d1917 =
	     tlb_entrySrch_5[13] &&
	     tlb_entrySrch_5[77:27] ==
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[63:13] &&
	     (tlb_entrySrch_5[21:14] == tlbEntryHi[7:0] ||
	      tlb_entrySrch_5[0]) ;
  assign tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1919 =
	     tlb_entrySrch_6[13] &&
	     tlb_entrySrch_6[77:27] ==
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[63:13] &&
	     (tlb_entrySrch_6[21:14] == tlbEntryHi[7:0] ||
	      tlb_entrySrch_6[0]) ;
  assign tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1950 =
	     tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1919 ||
	     tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entrySrch_ETC___d1917 ||
	     tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entrySrch_ETC___d1915 ||
	     tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1944 ;
  assign tlb_entrySrch_7_02_BIT_13_03_AND_tlb_entrySrch_ETC___d1921 =
	     tlb_entrySrch_7[13] &&
	     tlb_entrySrch_7[77:27] ==
	     IF_tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb__ETC___d1759[63:13] &&
	     (tlb_entrySrch_7[21:14] == tlbEntryHi[7:0] ||
	      tlb_entrySrch_7[0]) ;
  assign tlb_last_hit_1_17_BITS_39_TO_32_332_EQ_tlbEntr_ETC___d1333 =
	     tlb_last_hit_1[39:32] == tlbEntryHi[7:0] ;
  assign tlb_last_hit_1_17_BITS_95_TO_45_326_CONCAT_tlb_ETC___d1330 =
	     { tlb_last_hit_1[95:45], tlb_last_hit_1[97] } ==
	     tlbLookupInstruction_request_put[74:23] ;
  assign tlb_last_hit_2_29_BITS_39_TO_32_473_EQ_tlbEntr_ETC___d1474 =
	     tlb_last_hit_2[39:32] == tlbEntryHi[7:0] ;
  assign tlb_last_hit_2_29_BITS_95_TO_45_467_CONCAT_tlb_ETC___d1471 =
	     { tlb_last_hit_2[95:45], tlb_last_hit_2[97] } ==
	     tlbLookupData_request_put[74:23] ;
  assign tlb_last_hit_3_41_BITS_39_TO_32_646_EQ_tlbEntr_ETC___d1647 =
	     tlb_last_hit_3[39:32] == tlbEntryHi[7:0] ;
  assign tlb_last_hit_3_41_BITS_95_TO_45_640_CONCAT_tlb_ETC___d1644 =
	     { tlb_last_hit_3[95:45], tlb_last_hit_3[97] } ==
	     tlbLookupCoprocessors_0_request_put[74:23] ;
  assign tlb_readOut_fifo_first__09_ULT_8___d1869 =
	     tlb_readOut_fifo$D_OUT < 6'd8 ;
  assign tlb_readWrite_fifo_first__9_BITS_147_TO_142_0__ETC___d1867 =
	     tlb_readWrite_fifo$D_OUT[147:142] < 6'd8 ;
  assign tlb_read_fifo_first__52_BITS_13_TO_12_16_CONCA_ETC___d427 =
	     { tlb_read_fifo$D_OUT[13:12],
	       tlb_read_fifo$D_OUT[26] ?
		 tlb_entryLo1$DOA[5:3] != 3'd2 :
		 tlb_entryLo0$DOA[5:3] != 3'd2,
	       (tlb_read_fifo$D_OUT[77:74] < 4'h8) ?
		 ((tlb_read_fifo$D_OUT[77:74] < 4'h4) ? 2'd0 : 2'd1) :
		 2'd2,
	       tlb_read_fifo$D_OUT[6:3] } ;
  assign tlb_req_fifos_3_i_notEmpty__71_AND_NOT_tlb_req_ETC___d1756 =
	     tlb_req_fifos_3$EMPTY_N && !tlb_req_fifos_2$EMPTY_N &&
	     !tlb_req_fifos_1$EMPTY_N &&
	     !tlb_req_fifos$EMPTY_N ;
  assign tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 =
	     tlb_req_fifos$EMPTY_N || tlb_req_fifos_1$EMPTY_N ||
	     tlb_req_fifos_2$EMPTY_N ||
	     tlb_req_fifos_3$EMPTY_N ;
  assign v__h19352 =
	     contxtUpdate$EMPTY_N ? contxtUpdate$D_OUT : tlbContext[63:23] ;
  assign v__h19480 =
	     xcntxtUpdate$EMPTY_N ? xcntxtUpdate$D_OUT : tlbXContext[63:33] ;
  assign v__h24510 = ivaddrs$EMPTY_N ? v__h24520 : 64'b0 ;
  assign v__h24520 =
	     ivaddrs_first__187_BITS_3_TO_0_188_EQ_putExcep_ETC___d2054 ?
	       v__h24572 :
	       64'b0 ;
  assign v__h24653 = dvaddrs$EMPTY_N ? v__h24663 : v__h24510 ;
  assign v__h24663 =
	     dvaddrs_first__193_BITS_3_TO_0_194_EQ_putExcep_ETC___d2057 ?
	       v__h24691 :
	       v__h24510 ;
  assign v__h24795 = avaddrs$EMPTY_N ? v__h24890 : v__h24653 ;
  assign v__h24890 =
	     avaddrs_first__198_BITS_3_TO_0_199_EQ_putExcep_ETC___d2058 ?
	       v__h24929 :
	       v__h24653 ;
  assign x1_avValue_ip__h18475 =
	     causeUpdate3$EMPTY_N ? causeUpdate3$D_OUT : cause[15:8] ;
  assign x1_avValue_ip__h18496 =
	     causeUpdate2$EMPTY_N ?
	       causeUpdate2$D_OUT :
	       x1_avValue_ip__h18475 ;
  assign x1_avValue_ip__h18517 =
	     causeUpdate1$EMPTY_N ? cause[15:8] : x1_avValue_ip__h18496 ;
  assign x2__h14355 = { 3'd0, key__h14213 } ;
  assign x2__h14503 = x__h14519 + 6'd8 ;
  assign x2__h8105 = x__h8136 + 6'd8 ;
  assign x2__h9311 = x__h9327 + 6'd8 ;
  assign x__h14519 = { 1'd0, hashKey__h14215 } ;
  assign x__h15680 =
	     tlb_read_fifo$D_OUT[84] ?
	       tlb_read_fifo$D_OUT[83:78] :
	       y_avValue_snd_fst__h15681 ;
  assign x__h17372 = tlb_randomIndex - 3'd1 ;
  assign x__h20699 = { cause[15:9], 1'd1 } ;
  assign x__h21478 = { 1'd0, cause[14:8] } ;
  assign x__h23513 = { !tlbIndex[6], tlbIndexBase__h23491 } ;
  assign x__h23535 = tlbIndex[6] ? tlbIndex[5:0] : 6'd0 ;
  assign x__h23691 =
	     { cause[31:7],
	       CASE_cause_BITS_6_TO_2_31_0_cause_BITS_6_TO_2__ETC__q2,
	       cause[1:0] } ;
  assign x__h23816 =
	     { configReg0[31:3],
	       CASE_configReg0_BITS_2_TO_0_4_0_configReg0_BIT_ETC__q1 } ;
  assign x__h8136 = { 1'd0, _theResult____h7635 } ;
  assign x__h9327 = { 1'd0, hashKey___1__h7990 } ;
  assign x_addr__h27037 = { 7'b0, tlbLookupInstruction_request_put[39:11] } ;
  assign x_addr__h28759 = { 7'b0, tlbLookupData_request_put[39:11] } ;
  assign x_addr__h30846 =
	     { 7'b0, tlbLookupCoprocessors_0_request_put[39:11] } ;
  assign x_ip__h18557 =
	     { IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d2124[7],
	       exInterrupts,
	       IF_causeUpdate0_i_notEmpty__66_THEN_cause_79_B_ETC___d2124[1:0] } ;
  assign y_avValue_ip__h18238 = { cause[15:10], causeUpdate0$D_OUT[9:8] } ;
  assign y_avValue_snd_fst__h15681 =
	     (tlb_entryHiHash$DOA[13] &&
	      tlb_entryHiHash_a_read__5_BITS_77_TO_27_57_EQ__ETC___d2121 &&
	      (tlb_entryHiHash_a_read__5_BITS_21_TO_14_61_EQ__ETC___d2122 ||
	       tlb_entryHiHash$DOA[0])) ?
	       foundIndex___1__h15741 :
	       tlb_read_fifo$D_OUT[83:78] ;
  always@(putException_exp or ivaddrs$D_OUT)
  begin
    case (putException_exp[138:134])
      5'd2, 5'd3, 5'd8: v__h24572 = ivaddrs$D_OUT[67:4];
      default: v__h24572 = 64'b0;
    endcase
  end
  always@(configReg0)
  begin
    case (configReg0[2:0])
      3'd0, 3'd2, 3'd3:
	  CASE_configReg0_BITS_2_TO_0_4_0_configReg0_BIT_ETC__q1 =
	      configReg0[2:0];
      default: CASE_configReg0_BITS_2_TO_0_4_0_configReg0_BIT_ETC__q1 = 3'd4;
    endcase
  end
  always@(cause)
  begin
    case (cause[6:2])
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd10,
      5'd11,
      5'd12,
      5'd13,
      5'd15,
      5'd18,
      5'd22,
      5'd23,
      5'd24,
      5'd25,
      5'd26,
      5'd30:
	  CASE_cause_BITS_6_TO_2_31_0_cause_BITS_6_TO_2__ETC__q2 = cause[6:2];
      default: CASE_cause_BITS_6_TO_2_31_0_cause_BITS_6_TO_2__ETC__q2 = 5'd31;
    endcase
  end
  always@(tlb_readOut_fifo$D_OUT or
	  tlb_entrySrch_7 or
	  tlb_entrySrch or
	  tlb_entrySrch_1 or
	  tlb_entrySrch_2 or
	  tlb_entrySrch_3 or
	  tlb_entrySrch_4 or tlb_entrySrch_5 or tlb_entrySrch_6)
  begin
    case (tlb_readOut_fifo$D_OUT)
      6'd0:
	  IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 =
	      tlb_entrySrch[12:1];
      6'd1:
	  IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 =
	      tlb_entrySrch_1[12:1];
      6'd2:
	  IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 =
	      tlb_entrySrch_2[12:1];
      6'd3:
	  IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 =
	      tlb_entrySrch_3[12:1];
      6'd4:
	  IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 =
	      tlb_entrySrch_4[12:1];
      6'd5:
	  IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 =
	      tlb_entrySrch_5[12:1];
      6'd6:
	  IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 =
	      tlb_entrySrch_6[12:1];
      default: IF_tlb_readOut_fifo_first__09_EQ_0_11_THEN_tlb_ETC___d534 =
		   tlb_entrySrch_7[12:1];
    endcase
  end
  always@(readReqs$D_OUT or
	  rv__h23813 or rv__h23926 or rv__h24032 or rv__h24107)
  begin
    case (readReqs$D_OUT[2:0])
      3'd0:
	  IF_readReqs_first__048_BITS_2_TO_0_106_EQ_0_10_ETC___d1131 =
	      rv__h23813;
      3'd1:
	  IF_readReqs_first__048_BITS_2_TO_0_106_EQ_0_10_ETC___d1131 =
	      rv__h23926;
      3'd2:
	  IF_readReqs_first__048_BITS_2_TO_0_106_EQ_0_10_ETC___d1131 =
	      rv__h24032;
      3'd3:
	  IF_readReqs_first__048_BITS_2_TO_0_106_EQ_0_10_ETC___d1131 =
	      rv__h24107;
      default: IF_readReqs_first__048_BITS_2_TO_0_106_EQ_0_10_ETC___d1131 =
		   64'b0;
    endcase
  end
  always@(tlbEntryLo1)
  begin
    case (tlbEntryLo1[5:3])
      3'd0, 3'd2, 3'd3:
	  IF_tlbEntryLo1_read__002_BITS_5_TO_3_017_EQ_0__ETC___d2145 =
	      tlbEntryLo1[5:3];
      default: IF_tlbEntryLo1_read__002_BITS_5_TO_3_017_EQ_0__ETC___d2145 =
		   3'd4;
    endcase
  end
  always@(tlbEntryLo0)
  begin
    case (tlbEntryLo0[5:3])
      3'd0, 3'd2, 3'd3:
	  IF_tlbEntryLo0_read__000_BITS_5_TO_3_007_EQ_0__ETC___d2143 =
	      tlbEntryLo0[5:3];
      default: IF_tlbEntryLo0_read__000_BITS_5_TO_3_007_EQ_0__ETC___d2143 =
		   3'd4;
    endcase
  end
  always@(putException_exp or v__h24510 or dvaddrs$D_OUT)
  begin
    case (putException_exp[138:134])
      5'd1, 5'd4, 5'd5, 5'd6, 5'd7, 5'd9, 5'd10:
	  v__h24691 = dvaddrs$D_OUT[67:4];
      default: v__h24691 = v__h24510;
    endcase
  end
  always@(putException_exp or v__h24653 or avaddrs$D_OUT)
  begin
    case (putException_exp[138:134])
      5'd1, 5'd4, 5'd5, 5'd6, 5'd7, 5'd9, 5'd10:
	  v__h24929 = avaddrs$D_OUT[67:4];
      default: v__h24929 = v__h24653;
    endcase
  end
  always@(tlb_read_fifo$D_OUT or
	  tlb_entrySrch_7 or
	  tlb_entrySrch or
	  tlb_entrySrch_1 or
	  tlb_entrySrch_2 or
	  tlb_entrySrch_3 or
	  tlb_entrySrch_4 or tlb_entrySrch_5 or tlb_entrySrch_6)
  begin
    case (tlb_read_fifo$D_OUT[83:78])
      6'd0:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 =
	      tlb_entrySrch[0];
      6'd1:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 =
	      tlb_entrySrch_1[0];
      6'd2:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 =
	      tlb_entrySrch_2[0];
      6'd3:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 =
	      tlb_entrySrch_3[0];
      6'd4:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 =
	      tlb_entrySrch_4[0];
      6'd5:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 =
	      tlb_entrySrch_5[0];
      6'd6:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 =
	      tlb_entrySrch_6[0];
      default: IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2079 =
		   tlb_entrySrch_7[0];
    endcase
  end
  always@(cause)
  begin
    case (cause[6:2])
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd10,
      5'd11,
      5'd12,
      5'd13:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 =
	      cause[6:2];
      5'd15:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 = 5'd14;
      5'd18:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 = 5'd15;
      5'd22:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 = 5'd16;
      5'd23:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 = 5'd17;
      5'd24:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 = 5'd18;
      5'd25:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 = 5'd19;
      5'd26:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 = 5'd20;
      5'd30:
	  IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 = 5'd21;
      default: IF_cause_79_BITS_6_TO_2_18_EQ_0_19_OR_cause_79_ETC___d2087 =
		   5'd22;
    endcase
  end
  always@(causeUpdate1$D_OUT)
  begin
    case (causeUpdate1$D_OUT[6:2])
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd10,
      5'd11,
      5'd12,
      5'd13:
	  CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 =
	      causeUpdate1$D_OUT[6:2];
      5'd15: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd14;
      5'd18: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd15;
      5'd22: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd16;
      5'd23: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd17;
      5'd24: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd18;
      5'd25: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd19;
      5'd26: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd20;
      5'd30: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd21;
      default: CASE_causeUpdate1D_OUT_BITS_6_TO_2_22_0_cause_ETC__q3 = 5'd22;
    endcase
  end
  always@(IF_causeUpdate0_i_notEmpty__66_THEN_IF_cause_7_ETC___d2048)
  begin
    case (IF_causeUpdate0_i_notEmpty__66_THEN_IF_cause_7_ETC___d2048)
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd10,
      5'd11,
      5'd12,
      5'd13:
	  CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 =
	      IF_causeUpdate0_i_notEmpty__66_THEN_IF_cause_7_ETC___d2048;
      5'd14: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd15;
      5'd15: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd18;
      5'd16: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd22;
      5'd17: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd23;
      5'd18: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd24;
      5'd19: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd25;
      5'd20: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd26;
      5'd21: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd30;
      default: CASE_IF_causeUpdate0_i_notEmpty__66_THEN_IF_ca_ETC__q4 = 5'd31;
    endcase
  end
  always@(tlb_read_fifo$D_OUT or
	  tlb_entrySrch_7 or
	  tlb_entrySrch or
	  tlb_entrySrch_1 or
	  tlb_entrySrch_2 or
	  tlb_entrySrch_3 or
	  tlb_entrySrch_4 or tlb_entrySrch_5 or tlb_entrySrch_6)
  begin
    case (tlb_read_fifo$D_OUT[83:78])
      6'd0:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
	      tlb_entrySrch[77:14];
      6'd1:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
	      tlb_entrySrch_1[77:14];
      6'd2:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
	      tlb_entrySrch_2[77:14];
      6'd3:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
	      tlb_entrySrch_3[77:14];
      6'd4:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
	      tlb_entrySrch_4[77:14];
      6'd5:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
	      tlb_entrySrch_5[77:14];
      6'd6:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
	      tlb_entrySrch_6[77:14];
      6'd7:
	  IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
	      tlb_entrySrch_7[77:14];
      default: IF_tlb_read_fifo_first__52_BITS_83_TO_78_56_EQ_ETC___d2140 =
		   tlb_entrySrch_7[77:14];
    endcase
  end
  always@(tlb_readOut_fifo$D_OUT or
	  tlb_entrySrch_7 or
	  tlb_entrySrch or
	  tlb_entrySrch_1 or
	  tlb_entrySrch_2 or
	  tlb_entrySrch_3 or
	  tlb_entrySrch_4 or tlb_entrySrch_5 or tlb_entrySrch_6)
  begin
    case (tlb_readOut_fifo$D_OUT)
      6'd0:
	  CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
	      tlb_entrySrch[77:14];
      6'd1:
	  CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
	      tlb_entrySrch_1[77:14];
      6'd2:
	  CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
	      tlb_entrySrch_2[77:14];
      6'd3:
	  CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
	      tlb_entrySrch_3[77:14];
      6'd4:
	  CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
	      tlb_entrySrch_4[77:14];
      6'd5:
	  CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
	      tlb_entrySrch_5[77:14];
      6'd6:
	  CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
	      tlb_entrySrch_6[77:14];
      6'd7:
	  CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
	      tlb_entrySrch_7[77:14];
      default: CASE_tlb_readOut_fifoD_OUT_tlb_entrySrch_7_BI_ETC__q5 =
		   tlb_entrySrch_7[77:14];
    endcase
  end
  always@(tlb_entryLo0$DOA)
  begin
    case (tlb_entryLo0$DOA[5:3])
      3'd0, 3'd2, 3'd3:
	  CASE_tlb_entryLo0DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q6 =
	      tlb_entryLo0$DOA[5:3];
      default: CASE_tlb_entryLo0DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q6 = 3'd4;
    endcase
  end
  always@(dataUpdate$D_OUT)
  begin
    case (dataUpdate$D_OUT[5:3])
      3'd0, 3'd2, 3'd3:
	  CASE_dataUpdateD_OUT_BITS_5_TO_3_4_0_dataUpda_ETC__q7 =
	      dataUpdate$D_OUT[5:3];
      default: CASE_dataUpdateD_OUT_BITS_5_TO_3_4_0_dataUpda_ETC__q7 = 3'd4;
    endcase
  end
  always@(tlb_entryLo1$DOA)
  begin
    case (tlb_entryLo1$DOA[5:3])
      3'd0, 3'd2, 3'd3:
	  CASE_tlb_entryLo1DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q8 =
	      tlb_entryLo1$DOA[5:3];
      default: CASE_tlb_entryLo1DOA_BITS_5_TO_3_4_0_tlb_entr_ETC__q8 = 3'd4;
    endcase
  end
  always@(tlb_readWrite_fifo$D_OUT)
  begin
    case (tlb_readWrite_fifo$D_OUT[37:35])
      3'd0, 3'd2, 3'd3:
	  CASE_tlb_readWrite_fifoD_OUT_BITS_37_TO_35_4__ETC__q9 =
	      tlb_readWrite_fifo$D_OUT[37:35];
      default: CASE_tlb_readWrite_fifoD_OUT_BITS_37_TO_35_4__ETC__q9 = 3'd4;
    endcase
  end
  always@(tlb_readWrite_fifo$D_OUT)
  begin
    case (tlb_readWrite_fifo$D_OUT[5:3])
      3'd0, 3'd2, 3'd3:
	  CASE_tlb_readWrite_fifoD_OUT_BITS_5_TO_3_4_0__ETC__q10 =
	      tlb_readWrite_fifo$D_OUT[5:3];
      default: CASE_tlb_readWrite_fifoD_OUT_BITS_5_TO_3_4_0__ETC__q10 = 3'd4;
    endcase
  end
  always@(tlb_last_hit)
  begin
    case (tlb_last_hit[5:3])
      3'd0, 3'd2, 3'd3:
	  CASE_tlb_last_hit_BITS_5_TO_3_4_0_tlb_last_hit_ETC__q11 =
	      tlb_last_hit[5:3];
      default: CASE_tlb_last_hit_BITS_5_TO_3_4_0_tlb_last_hit_ETC__q11 = 3'd4;
    endcase
  end
  always@(tlb_last_hit_1)
  begin
    case (tlb_last_hit_1[5:3])
      3'd0, 3'd2, 3'd3:
	  CASE_tlb_last_hit_1_BITS_5_TO_3_4_0_tlb_last_h_ETC__q12 =
	      tlb_last_hit_1[5:3];
      default: CASE_tlb_last_hit_1_BITS_5_TO_3_4_0_tlb_last_h_ETC__q12 = 3'd4;
    endcase
  end
  always@(tlb_last_hit_2)
  begin
    case (tlb_last_hit_2[5:3])
      3'd0, 3'd2, 3'd3:
	  CASE_tlb_last_hit_2_BITS_5_TO_3_4_0_tlb_last_h_ETC__q13 =
	      tlb_last_hit_2[5:3];
      default: CASE_tlb_last_hit_2_BITS_5_TO_3_4_0_tlb_last_h_ETC__q13 = 3'd4;
    endcase
  end
  always@(tlb_last_hit_3)
  begin
    case (tlb_last_hit_3[5:3])
      3'd0, 3'd2, 3'd3:
	  CASE_tlb_last_hit_3_BITS_5_TO_3_4_0_tlb_last_h_ETC__q14 =
	      tlb_last_hit_3[5:3];
      default: CASE_tlb_last_hit_3_BITS_5_TO_3_4_0_tlb_last_h_ETC__q14 = 3'd4;
    endcase
  end
  always@(dataUpdate$D_OUT)
  begin
    case (dataUpdate$D_OUT[5:0])
      6'd1: CASE_dataUpdateD_OUT_BITS_5_TO_0_3_1_0_2_2__q15 = 2'd0;
      6'd2: CASE_dataUpdateD_OUT_BITS_5_TO_0_3_1_0_2_2__q15 = 2'd2;
      default: CASE_dataUpdateD_OUT_BITS_5_TO_0_3_1_0_2_2__q15 = 2'd3;
    endcase
  end
  always@(dataUpdate$D_OUT or te_tlbAddr__h23031 or tlbIndex)
  begin
    case (dataUpdate$D_OUT[5:0])
      6'd1, 6'd2:
	  CASE_dataUpdateD_OUT_BITS_5_TO_0_te_tlbAddr30_ETC__q16 =
	      tlbIndex[5:0];
      default: CASE_dataUpdateD_OUT_BITS_5_TO_0_te_tlbAddr30_ETC__q16 =
		   te_tlbAddr__h23031;
    endcase
  end
  always@(dataUpdate$D_OUT)
  begin
    case (dataUpdate$D_OUT[6:2])
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd10,
      5'd11,
      5'd12,
      5'd13,
      5'd15,
      5'd18,
      5'd22,
      5'd23,
      5'd24,
      5'd25,
      5'd26,
      5'd30:
	  CASE_dataUpdateD_OUT_BITS_6_TO_2_31_0_dataUpd_ETC__q17 =
	      dataUpdate$D_OUT[6:2];
      default: CASE_dataUpdateD_OUT_BITS_6_TO_2_31_0_dataUpd_ETC__q17 = 5'd31;
    endcase
  end
  always@(putException_exp)
  begin
    case (putException_exp[138:134])
      5'd0, 5'd1, 5'd23:
	  CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 =
	      putException_exp[138:134];
      5'd2, 5'd3, 5'd4, 5'd6:
	  CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd2;
      5'd5, 5'd7:
	  CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd3;
      5'd8, 5'd9:
	  CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd4;
      5'd10: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd5;
      5'd11: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd6;
      5'd12: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd7;
      5'd13: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd8;
      5'd14: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd9;
      5'd15: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd10;
      5'd16, 5'd17, 5'd18, 5'd19:
	  CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd11;
      5'd20: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd12;
      5'd21: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd13;
      5'd22: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 = 5'd18;
      default: CASE_putException_exp_BITS_138_TO_134_31_0_put_ETC__q18 =
		   5'd31;
    endcase
  end
  always@(requestSource___1__h11175 or
	  tlb_req_fifos_3$D_OUT or
	  tlb_req_fifos$D_OUT or
	  tlb_req_fifos_1$D_OUT or tlb_req_fifos_2$D_OUT)
  begin
    case (requestSource___1__h11175)
      3'd0:
	  CASE_requestSource___11175_tlb_req_fifos_3D_O_ETC__q19 =
	      tlb_req_fifos$D_OUT;
      3'd1:
	  CASE_requestSource___11175_tlb_req_fifos_3D_O_ETC__q19 =
	      tlb_req_fifos_1$D_OUT;
      3'd2:
	  CASE_requestSource___11175_tlb_req_fifos_3D_O_ETC__q19 =
	      tlb_req_fifos_2$D_OUT;
      3'd3:
	  CASE_requestSource___11175_tlb_req_fifos_3D_O_ETC__q19 =
	      tlb_req_fifos_3$D_OUT;
      default: CASE_requestSource___11175_tlb_req_fifos_3D_O_ETC__q19 =
		   tlb_req_fifos_3$D_OUT;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        badVAddr <= `BSV_ASSIGNMENT_DELAY 64'b0;
	cause <= `BSV_ASSIGNMENT_DELAY 32'd0;
	compare <= `BSV_ASSIGNMENT_DELAY 32'b0;
	configReg0 <= `BSV_ASSIGNMENT_DELAY 32'h8000C083;
	configReg1 <= `BSV_ASSIGNMENT_DELAY 32'hCEE03040;
	configReg2 <= `BSV_ASSIGNMENT_DELAY 32'h80003840;
	configReg3 <= `BSV_ASSIGNMENT_DELAY 31'd0;
	count <= `BSV_ASSIGNMENT_DELAY 32'b0;
	epc <= `BSV_ASSIGNMENT_DELAY 64'b0;
	errorEPC <= `BSV_ASSIGNMENT_DELAY 64'b0;
	exInterrupts <= `BSV_ASSIGNMENT_DELAY 5'b0;
	llScReg <= `BSV_ASSIGNMENT_DELAY 65'h10000000000000000;
	procid <= `BSV_ASSIGNMENT_DELAY 32'd1024;
	sr <= `BSV_ASSIGNMENT_DELAY 32'd4194528;
	tlbContext <= `BSV_ASSIGNMENT_DELAY 64'd0;
	tlbEntryHi <= `BSV_ASSIGNMENT_DELAY 64'd0;
	tlbEntryLo0 <= `BSV_ASSIGNMENT_DELAY 32'd30;
	tlbEntryLo1 <= `BSV_ASSIGNMENT_DELAY 32'd30;
	tlbIndex <= `BSV_ASSIGNMENT_DELAY 7'd64;
	tlbPageMask <= `BSV_ASSIGNMENT_DELAY 12'b0;
	tlbWired <= `BSV_ASSIGNMENT_DELAY 3'b0;
	tlbXContext <= `BSV_ASSIGNMENT_DELAY 64'd0;
	tlb_asid <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tlb_count <= `BSV_ASSIGNMENT_DELAY 5'd0;
	tlb_last_hit <= `BSV_ASSIGNMENT_DELAY 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	tlb_last_hit_1 <= `BSV_ASSIGNMENT_DELAY 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	tlb_last_hit_2 <= `BSV_ASSIGNMENT_DELAY 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	tlb_last_hit_3 <= `BSV_ASSIGNMENT_DELAY 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	tlb_randomIndex <= `BSV_ASSIGNMENT_DELAY 3'h7;
	tlb_tlbState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	watchHi <= `BSV_ASSIGNMENT_DELAY 4'b0;
	watchLo <= `BSV_ASSIGNMENT_DELAY 32'b0;
      end
    else
      begin
        if (badVAddr$EN) badVAddr <= `BSV_ASSIGNMENT_DELAY badVAddr$D_IN;
	if (cause$EN) cause <= `BSV_ASSIGNMENT_DELAY cause$D_IN;
	if (compare$EN) compare <= `BSV_ASSIGNMENT_DELAY compare$D_IN;
	if (configReg0$EN)
	  configReg0 <= `BSV_ASSIGNMENT_DELAY configReg0$D_IN;
	if (configReg1$EN)
	  configReg1 <= `BSV_ASSIGNMENT_DELAY configReg1$D_IN;
	if (configReg2$EN)
	  configReg2 <= `BSV_ASSIGNMENT_DELAY configReg2$D_IN;
	if (configReg3$EN)
	  configReg3 <= `BSV_ASSIGNMENT_DELAY configReg3$D_IN;
	if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (epc$EN) epc <= `BSV_ASSIGNMENT_DELAY epc$D_IN;
	if (errorEPC$EN) errorEPC <= `BSV_ASSIGNMENT_DELAY errorEPC$D_IN;
	if (exInterrupts$EN)
	  exInterrupts <= `BSV_ASSIGNMENT_DELAY exInterrupts$D_IN;
	if (llScReg$EN) llScReg <= `BSV_ASSIGNMENT_DELAY llScReg$D_IN;
	if (procid$EN) procid <= `BSV_ASSIGNMENT_DELAY procid$D_IN;
	if (sr$EN) sr <= `BSV_ASSIGNMENT_DELAY sr$D_IN;
	if (tlbContext$EN)
	  tlbContext <= `BSV_ASSIGNMENT_DELAY tlbContext$D_IN;
	if (tlbEntryHi$EN)
	  tlbEntryHi <= `BSV_ASSIGNMENT_DELAY tlbEntryHi$D_IN;
	if (tlbEntryLo0$EN)
	  tlbEntryLo0 <= `BSV_ASSIGNMENT_DELAY tlbEntryLo0$D_IN;
	if (tlbEntryLo1$EN)
	  tlbEntryLo1 <= `BSV_ASSIGNMENT_DELAY tlbEntryLo1$D_IN;
	if (tlbIndex$EN) tlbIndex <= `BSV_ASSIGNMENT_DELAY tlbIndex$D_IN;
	if (tlbPageMask$EN)
	  tlbPageMask <= `BSV_ASSIGNMENT_DELAY tlbPageMask$D_IN;
	if (tlbWired$EN) tlbWired <= `BSV_ASSIGNMENT_DELAY tlbWired$D_IN;
	if (tlbXContext$EN)
	  tlbXContext <= `BSV_ASSIGNMENT_DELAY tlbXContext$D_IN;
	if (tlb_asid$EN) tlb_asid <= `BSV_ASSIGNMENT_DELAY tlb_asid$D_IN;
	if (tlb_count$EN) tlb_count <= `BSV_ASSIGNMENT_DELAY tlb_count$D_IN;
	if (tlb_last_hit$EN)
	  tlb_last_hit <= `BSV_ASSIGNMENT_DELAY tlb_last_hit$D_IN;
	if (tlb_last_hit_1$EN)
	  tlb_last_hit_1 <= `BSV_ASSIGNMENT_DELAY tlb_last_hit_1$D_IN;
	if (tlb_last_hit_2$EN)
	  tlb_last_hit_2 <= `BSV_ASSIGNMENT_DELAY tlb_last_hit_2$D_IN;
	if (tlb_last_hit_3$EN)
	  tlb_last_hit_3 <= `BSV_ASSIGNMENT_DELAY tlb_last_hit_3$D_IN;
	if (tlb_randomIndex$EN)
	  tlb_randomIndex <= `BSV_ASSIGNMENT_DELAY tlb_randomIndex$D_IN;
	if (tlb_tlbState$EN)
	  tlb_tlbState <= `BSV_ASSIGNMENT_DELAY tlb_tlbState$D_IN;
	if (watchHi$EN) watchHi <= `BSV_ASSIGNMENT_DELAY watchHi$D_IN;
	if (watchLo$EN) watchLo <= `BSV_ASSIGNMENT_DELAY watchLo$D_IN;
      end
    if (tlb_entryLo0Reg$EN)
      tlb_entryLo0Reg <= `BSV_ASSIGNMENT_DELAY tlb_entryLo0Reg$D_IN;
    if (tlb_entryLo1Reg$EN)
      tlb_entryLo1Reg <= `BSV_ASSIGNMENT_DELAY tlb_entryLo1Reg$D_IN;
    if (tlb_entrySrch$EN)
      tlb_entrySrch <= `BSV_ASSIGNMENT_DELAY tlb_entrySrch$D_IN;
    if (tlb_entrySrch_1$EN)
      tlb_entrySrch_1 <= `BSV_ASSIGNMENT_DELAY tlb_entrySrch_1$D_IN;
    if (tlb_entrySrch_2$EN)
      tlb_entrySrch_2 <= `BSV_ASSIGNMENT_DELAY tlb_entrySrch_2$D_IN;
    if (tlb_entrySrch_3$EN)
      tlb_entrySrch_3 <= `BSV_ASSIGNMENT_DELAY tlb_entrySrch_3$D_IN;
    if (tlb_entrySrch_4$EN)
      tlb_entrySrch_4 <= `BSV_ASSIGNMENT_DELAY tlb_entrySrch_4$D_IN;
    if (tlb_entrySrch_5$EN)
      tlb_entrySrch_5 <= `BSV_ASSIGNMENT_DELAY tlb_entrySrch_5$D_IN;
    if (tlb_entrySrch_6$EN)
      tlb_entrySrch_6 <= `BSV_ASSIGNMENT_DELAY tlb_entrySrch_6$D_IN;
    if (tlb_entrySrch_7$EN)
      tlb_entrySrch_7 <= `BSV_ASSIGNMENT_DELAY tlb_entrySrch_7$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    badVAddr = 64'hAAAAAAAAAAAAAAAA;
    cause = 32'hAAAAAAAA;
    compare = 32'hAAAAAAAA;
    configReg0 = 32'hAAAAAAAA;
    configReg1 = 32'hAAAAAAAA;
    configReg2 = 32'hAAAAAAAA;
    configReg3 = 31'h2AAAAAAA;
    count = 32'hAAAAAAAA;
    epc = 64'hAAAAAAAAAAAAAAAA;
    errorEPC = 64'hAAAAAAAAAAAAAAAA;
    exInterrupts = 5'h0A;
    llScReg = 65'h0AAAAAAAAAAAAAAAA;
    procid = 32'hAAAAAAAA;
    sr = 32'hAAAAAAAA;
    tlbContext = 64'hAAAAAAAAAAAAAAAA;
    tlbEntryHi = 64'hAAAAAAAAAAAAAAAA;
    tlbEntryLo0 = 32'hAAAAAAAA;
    tlbEntryLo1 = 32'hAAAAAAAA;
    tlbIndex = 7'h2A;
    tlbPageMask = 12'hAAA;
    tlbWired = 3'h2;
    tlbXContext = 64'hAAAAAAAAAAAAAAAA;
    tlb_asid = 8'hAA;
    tlb_count = 5'h0A;
    tlb_entryLo0Reg = 32'hAAAAAAAA;
    tlb_entryLo1Reg = 32'hAAAAAAAA;
    tlb_entrySrch = 78'h2AAAAAAAAAAAAAAAAAAA;
    tlb_entrySrch_1 = 78'h2AAAAAAAAAAAAAAAAAAA;
    tlb_entrySrch_2 = 78'h2AAAAAAAAAAAAAAAAAAA;
    tlb_entrySrch_3 = 78'h2AAAAAAAAAAAAAAAAAAA;
    tlb_entrySrch_4 = 78'h2AAAAAAAAAAAAAAAAAAA;
    tlb_entrySrch_5 = 78'h2AAAAAAAAAAAAAAAAAAA;
    tlb_entrySrch_6 = 78'h2AAAAAAAAAAAAAAAAAAA;
    tlb_entrySrch_7 = 78'h2AAAAAAAAAAAAAAAAAAA;
    tlb_last_hit = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    tlb_last_hit_1 = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    tlb_last_hit_2 = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    tlb_last_hit_3 = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    tlb_randomIndex = 3'h2;
    tlb_tlbState = 3'h2;
    watchHi = 4'hA;
    watchLo = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (EN_putException && putException_exp[138:134] == 5'd25 &&
	  !putException_exp[0])
	begin
	  TASK_testplusargs___d1294 =
	      $test$plusargs("instructionBasedCycleCounter");
	  #0;
	end
    if (RST_N)
      if (EN_tlbLookupInstruction_request_put &&
	  tlbLookupInstruction_request_put[74:67] != 8'h98 &&
	  tlbLookupInstruction_request_put[74:67] != 8'h90 &&
	  tlbLookupInstruction_request_put[74:67] != 8'hA0 &&
	  tlbLookupInstruction_request_put[74:67] != 8'hA8 &&
	  tlbLookupInstruction_request_put[74:67] != 8'hB0 &&
	  tlbLookupInstruction_request_put[8:4] == 5'd25 &&
	  NOT_tlbLookupInstruction_request_put_BITS_74_T_ETC___d1391)
	begin
	  TASK_testplusargs___d1393 = $test$plusargs("showTranslations");
	  #0;
	end
    if (RST_N)
      if (EN_tlbLookupInstruction_request_put &&
	  tlbLookupInstruction_request_put[74:67] != 8'h98 &&
	  tlbLookupInstruction_request_put[74:67] != 8'h90 &&
	  tlbLookupInstruction_request_put[74:67] != 8'hA0 &&
	  tlbLookupInstruction_request_put[74:67] != 8'hA8 &&
	  tlbLookupInstruction_request_put[74:67] != 8'hB0 &&
	  tlbLookupInstruction_request_put[8:4] == 5'd25 &&
	  (tlbLookupInstruction_request_put[74:43] != 32'hFFFFFFFF ||
	   tlbLookupInstruction_request_put[42:40] != 3'b100 &&
	   tlbLookupInstruction_request_put[42:40] != 3'b101) &&
	  tlb_last_hit_1[98] &&
	  tlb_last_hit_1_17_BITS_95_TO_45_326_CONCAT_tlb_ETC___d1330 &&
	  (tlb_last_hit_1_17_BITS_39_TO_32_332_EQ_tlbEntr_ETC___d1333 ||
	   tlb_last_hit_1[96]) &&
	  TASK_testplusargs___d1393)
	$display("(lookup %s %x->%x)",
		 "instruction",
		 tlbLookupInstruction_request_put[74:11],
		 addr__h26547);
    if (RST_N)
      if (EN_tlbLookupData_request_put &&
	  tlbLookupData_request_put[74:67] != 8'h98 &&
	  tlbLookupData_request_put[74:67] != 8'h90 &&
	  tlbLookupData_request_put[74:67] != 8'hA0 &&
	  tlbLookupData_request_put[74:67] != 8'hA8 &&
	  tlbLookupData_request_put[74:67] != 8'hB0 &&
	  tlbLookupData_request_put[8:4] == 5'd25 &&
	  NOT_tlbLookupData_request_put_BITS_74_TO_43_45_ETC___d1533)
	begin
	  TASK_testplusargs___d1535 = $test$plusargs("showTranslations");
	  #0;
	end
    if (RST_N)
      if (EN_tlbLookupData_request_put &&
	  tlbLookupData_request_put[74:67] != 8'h98 &&
	  tlbLookupData_request_put[74:67] != 8'h90 &&
	  tlbLookupData_request_put[74:67] != 8'hA0 &&
	  tlbLookupData_request_put[74:67] != 8'hA8 &&
	  tlbLookupData_request_put[74:67] != 8'hB0 &&
	  tlbLookupData_request_put[8:4] == 5'd25 &&
	  (tlbLookupData_request_put[74:43] != 32'hFFFFFFFF ||
	   tlbLookupData_request_put[42:40] != 3'b100 &&
	   tlbLookupData_request_put[42:40] != 3'b101) &&
	  tlb_last_hit_2[98] &&
	  tlb_last_hit_2_29_BITS_95_TO_45_467_CONCAT_tlb_ETC___d1471 &&
	  (tlb_last_hit_2_29_BITS_39_TO_32_473_EQ_tlbEntr_ETC___d1474 ||
	   tlb_last_hit_2[96]) &&
	  TASK_testplusargs___d1535)
	$display("(lookup %s %x->%x)",
		 "data",
		 tlbLookupData_request_put[74:11],
		 addr__h28269);
    if (RST_N)
      if (EN_tlbLookupCoprocessors_0_request_put &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'h98 &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'h90 &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'hA0 &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'hA8 &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'hB0 &&
	  tlbLookupCoprocessors_0_request_put[8:4] == 5'd25 &&
	  NOT_tlbLookupCoprocessors_0_request_put_BITS_7_ETC___d1706)
	begin
	  TASK_testplusargs___d1708 = $test$plusargs("showTranslations");
	  #0;
	end
    if (RST_N)
      if (EN_tlbLookupCoprocessors_0_request_put &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'h98 &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'h90 &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'hA0 &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'hA8 &&
	  tlbLookupCoprocessors_0_request_put[74:67] != 8'hB0 &&
	  tlbLookupCoprocessors_0_request_put[8:4] == 5'd25 &&
	  (tlbLookupCoprocessors_0_request_put[74:43] != 32'hFFFFFFFF ||
	   tlbLookupCoprocessors_0_request_put[42:40] != 3'b100 &&
	   tlbLookupCoprocessors_0_request_put[42:40] != 3'b101) &&
	  tlb_last_hit_3[98] &&
	  tlb_last_hit_3_41_BITS_95_TO_45_640_CONCAT_tlb_ETC___d1644 &&
	  (tlb_last_hit_3_41_BITS_39_TO_32_646_EQ_tlbEntr_ETC___d1647 ||
	   tlb_last_hit_3[96]) &&
	  TASK_testplusargs___d1708)
	$display("(lookup %s %x->%x)",
		 "capability",
		 tlbLookupCoprocessors_0_request_put[74:11],
		 addr__h30356);
    if (RST_N)
      begin
        TASK_testplusargs___d779 =
	    $test$plusargs("instructionBasedCycleCounter");
	#0;
      end
    if (RST_N)
      if (WILL_FIRE_RL_updateCP0Registers &&
	  (sr[4:3] == 2'd0 || sr[1] || forceUpdate$D_OUT || sr[28]) &&
	  rnUpdate$D_OUT == 5'd23)
	$finish(32'd1);
    if (RST_N)
      if (WILL_FIRE_RL_tlb_startTLB &&
	  tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	  tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entrySrch_ETC___d1909 &&
	  tlb_entrySrch_13_BIT_13_14_AND_tlb_entrySrch_1_ETC___d1907)
	$display("Two matching TLB indices! %d and %d.",
		 3'd0,
		 $signed(32'd1));
    if (RST_N)
      if (WILL_FIRE_RL_tlb_startTLB &&
	  tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	  tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entrySrch_ETC___d1911 &&
	  (tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entrySrch_ETC___d1909 ||
	   tlb_entrySrch_13_BIT_13_14_AND_tlb_entrySrch_1_ETC___d1907))
	$display("Two matching TLB indices! %d and %d.",
		 IF_tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entryS_ETC___d1769,
		 $signed(32'd2));
    if (RST_N)
      if (WILL_FIRE_RL_tlb_startTLB &&
	  tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	  tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1913 &&
	  (tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entrySrch_ETC___d1911 ||
	   tlb_entrySrch_1_78_BIT_13_79_AND_tlb_entrySrch_ETC___d1909 ||
	   tlb_entrySrch_13_BIT_13_14_AND_tlb_entrySrch_1_ETC___d1907))
	$display("Two matching TLB indices! %d and %d.",
		 IF_tlb_entrySrch_2_27_BIT_13_28_AND_tlb_entryS_ETC___d1770,
		 $signed(32'd3));
    if (RST_N)
      if (WILL_FIRE_RL_tlb_startTLB &&
	  tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	  tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entrySrch_ETC___d1915 &&
	  tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1944)
	$display("Two matching TLB indices! %d and %d.",
		 IF_tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entryS_ETC___d1771,
		 $signed(32'd4));
    if (RST_N)
      if (WILL_FIRE_RL_tlb_startTLB &&
	  tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	  tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entrySrch_ETC___d1917 &&
	  (tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entrySrch_ETC___d1915 ||
	   tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1944))
	$display("Two matching TLB indices! %d and %d.",
		 IF_tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entryS_ETC___d1772,
		 $signed(32'd5));
    if (RST_N)
      if (WILL_FIRE_RL_tlb_startTLB &&
	  tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	  tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1919 &&
	  (tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entrySrch_ETC___d1917 ||
	   tlb_entrySrch_4_57_BIT_13_58_AND_tlb_entrySrch_ETC___d1915 ||
	   tlb_entrySrch_3_42_BIT_13_43_AND_tlb_entrySrch_ETC___d1944))
	$display("Two matching TLB indices! %d and %d.",
		 IF_tlb_entrySrch_5_72_BIT_13_73_AND_tlb_entryS_ETC___d1773,
		 $signed(32'd6));
    if (RST_N)
      if (WILL_FIRE_RL_tlb_startTLB &&
	  tlb_req_fifos_i_notEmpty__68_OR_tlb_req_fifos__ETC___d2154 &&
	  tlb_entrySrch_7_02_BIT_13_03_AND_tlb_entrySrch_ETC___d1921 &&
	  tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entrySrch_ETC___d1950)
	$display("Two matching TLB indices! %d and %d.",
		 IF_tlb_entrySrch_6_87_BIT_13_88_AND_tlb_entryS_ETC___d1774,
		 $signed(32'd7));
    if (RST_N)
      if (WILL_FIRE_RL_tlb_readTLB &&
	  IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 == 5'd25)
	begin
	  TASK_testplusargs___d492 = $test$plusargs("showTranslations");
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_tlb_readTLB &&
	  IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 ==
	  5'd25 &&
	  TASK_testplusargs___d492)
	if (tlb_read_fifo$D_OUT[2:0] == 3'd0)
	  $display("(lookup %s %x->%x)",
		   "Probe",
		   tlb_read_fifo$D_OUT[77:14],
		   _theResult_____5__h15306);
	else
	  if (tlb_read_fifo$D_OUT[2:0] == 3'd1)
	    $display("(lookup %s %x->%x)",
		     "Instruction",
		     tlb_read_fifo$D_OUT[77:14],
		     _theResult_____5__h15306);
	  else
	    if (tlb_read_fifo$D_OUT[2:0] == 3'd2)
	      $display("(lookup %s %x->%x)",
		       "Data",
		       tlb_read_fifo$D_OUT[77:14],
		       _theResult_____5__h15306);
	    else
	      if (tlb_read_fifo$D_OUT[2:0] == 3'd3)
		$display("(lookup %s %x->%x)",
			 "Capability",
			 tlb_read_fifo$D_OUT[77:14],
			 _theResult_____5__h15306);
	      else
		$display("(lookup %s %x->%x)",
			 "Coprocessor",
			 tlb_read_fifo$D_OUT[77:14],
			 _theResult_____5__h15306);
    if (RST_N)
      if (WILL_FIRE_RL_tlb_readTLB &&
	  IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 != 5'd25)
	begin
	  TASK_testplusargs___d500 = $test$plusargs("showTranslations");
	  #0;
	end
    if (RST_N)
      if (WILL_FIRE_RL_tlb_readTLB &&
	  IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845 !=
	  5'd25 &&
	  TASK_testplusargs___d500)
	if (tlb_read_fifo$D_OUT[2:0] == 3'd0)
	  $display("(lookup %s on %x was a miss, ExpCode:%d)",
		   "Probe",
		   tlb_read_fifo$D_OUT[77:14],
		   IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845);
	else
	  if (tlb_read_fifo$D_OUT[2:0] == 3'd1)
	    $display("(lookup %s on %x was a miss, ExpCode:%d)",
		     "Instruction",
		     tlb_read_fifo$D_OUT[77:14],
		     IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845);
	  else
	    if (tlb_read_fifo$D_OUT[2:0] == 3'd2)
	      $display("(lookup %s on %x was a miss, ExpCode:%d)",
		       "Data",
		       tlb_read_fifo$D_OUT[77:14],
		       IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845);
	    else
	      if (tlb_read_fifo$D_OUT[2:0] == 3'd3)
		$display("(lookup %s on %x was a miss, ExpCode:%d)",
			 "Capability",
			 tlb_read_fifo$D_OUT[77:14],
			 IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845);
	      else
		$display("(lookup %s on %x was a miss, ExpCode:%d)",
			 "Coprocessor",
			 tlb_read_fifo$D_OUT[77:14],
			 IF_IF_IF_NOT_tlb_read_fifo_first__52_BIT_84_55_ETC___d1845);
  end
  // synopsys translate_on
endmodule  // mkCP0

