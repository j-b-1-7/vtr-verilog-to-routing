//
// Generated by Bluespec Compiler, version 2012.07.beta1 (build 29243, 2012-07-26)
//
// On Fri Aug 31 13:44:45 BST 2012
//
// Method conflict info:
// Method: muldiv_request_put
// Sequenced before (restricted): muldiv_response_get
// Conflicts: muldiv_request_put
//
// Method: muldiv_response_get
// Sequenced after (restricted): muldiv_request_put
// Conflicts: muldiv_response_get
//
//
// Ports:
// Name                         I/O  size props
// RDY_muldiv_request_put         O     1
// muldiv_response_get            O   130
// RDY_muldiv_response_get        O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// muldiv_request_put             I   263
// EN_muldiv_request_put          I     1
// EN_muldiv_response_get         I     1
//
// Combinational paths from inputs to outputs:
//   (muldiv_request_put, EN_muldiv_request_put) -> RDY_muldiv_response_get
//   (muldiv_request_put, EN_muldiv_request_put) -> muldiv_response_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkMulDiv(CLK,
		RST_N,

		muldiv_request_put,
		EN_muldiv_request_put,
		RDY_muldiv_request_put,

		EN_muldiv_response_get,
		muldiv_response_get,
		RDY_muldiv_response_get);
  input  CLK;
  input  RST_N;

  // action method muldiv_request_put
  input  [262 : 0] muldiv_request_put;
  input  EN_muldiv_request_put;
  output RDY_muldiv_request_put;

  // actionvalue method muldiv_response_get
  input  EN_muldiv_response_get;
  output [129 : 0] muldiv_response_get;
  output RDY_muldiv_response_get;

  // signals for module outputs
  wire [129 : 0] muldiv_response_get;
  wire RDY_muldiv_request_put, RDY_muldiv_response_get;

  // inlined wires
  reg [64 : 0] hi_fifo_rw_enq$wget, lo_fifo_rw_enq$wget;
  wire lo_fifo_rw_enq$whas;

  // register divint
  reg [265 : 0] divint;
  wire [265 : 0] divint$D_IN;
  wire divint$EN;

  // register hi_fifo_taggedReg
  reg [65 : 0] hi_fifo_taggedReg;
  wire [65 : 0] hi_fifo_taggedReg$D_IN;
  wire hi_fifo_taggedReg$EN;

  // register lo_fifo_taggedReg
  reg [65 : 0] lo_fifo_taggedReg;
  wire [65 : 0] lo_fifo_taggedReg$D_IN;
  wire lo_fifo_taggedReg$EN;

  // register mulIntReg
  reg [257 : 0] mulIntReg;
  wire [257 : 0] mulIntReg$D_IN;
  wire mulIntReg$EN;

  // register state
  reg [2 : 0] state;
  reg [2 : 0] state$D_IN;
  wire state$EN;

  // ports of submodule request_fifo
  wire [262 : 0] request_fifo$D_IN, request_fifo$D_OUT;
  wire request_fifo$CLR,
       request_fifo$DEQ,
       request_fifo$EMPTY_N,
       request_fifo$ENQ,
       request_fifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_doDivide,
       WILL_FIRE_RL_finishDivide,
       WILL_FIRE_RL_hi_fifo_rule_enq,
       WILL_FIRE_RL_lo_fifo_rule_enq,
       WILL_FIRE_RL_mulPipe4;

  // inputs to muxes for submodule ports
  reg [2 : 0] MUX_state$write_1__VAL_2;
  wire [265 : 0] MUX_divint$write_1__VAL_1, MUX_divint$write_1__VAL_2;
  wire [257 : 0] MUX_mulIntReg$write_1__VAL_1, MUX_mulIntReg$write_1__VAL_2;
  wire [65 : 0] MUX_hi_fifo_taggedReg$write_1__VAL_1,
		MUX_lo_fifo_taggedReg$write_1__VAL_1;
  wire [64 : 0] MUX_hi_fifo_rw_enq$wset_1__VAL_1,
		MUX_hi_fifo_rw_enq$wset_1__VAL_2,
		MUX_hi_fifo_rw_enq$wset_1__VAL_3,
		MUX_lo_fifo_rw_enq$wset_1__VAL_1,
		MUX_lo_fifo_rw_enq$wset_1__VAL_2,
		MUX_lo_fifo_rw_enq$wset_1__VAL_3;
  wire MUX_divint$write_1__SEL_1,
       MUX_hi_fifo_rw_enq$wset_1__SEL_1,
       MUX_mulIntReg$write_1__SEL_1,
       MUX_state$write_1__SEL_1,
       MUX_state$write_1__SEL_2,
       MUX_state$write_1__SEL_3;

  // remaining internal signals
  reg [127 : 0] IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC___d271;
  wire [127 : 0] IF_request_fifo_first__4_BIT_262_5_THEN_IF_NOT_ETC___d272,
		 _0_CONCAT_mulIntReg_BITS_129_TO_66_PLUS_0_CONCA_ETC__q3,
		 _0_CONCAT_mulIntReg_read__2_BITS_161_TO_130_4_5_ETC___d36,
		 _0_CONCAT_mulIntReg_read__2_BITS_161_TO_130_4_5_ETC___d38,
		 _0_CONCAT_mulIntReg_read__2_BITS_225_TO_194_3_4_ETC___d27,
		 _0_CONCAT_mulIntReg_read__2_BITS_225_TO_194_3_4_ETC___d31,
		 _theResult_____1_dividend__h4791,
		 _theResult____h3766,
		 _theResult___dividend__h4720,
		 mydiv___1_dividend__h4726,
		 mydiv_dividend__h4663,
		 product___1__h4098,
		 product__h3765,
		 product__h3952,
		 product__h3995,
		 product__h4310,
		 x_dividend__h7213;
  wire [63 : 0] IF_muldiv_request_put_BIT_261_75_THEN_IF_IF_mu_ETC___d270,
		_theResult_____2__h5132,
		_theResult_____2_fst__h6340,
		_theResult_____2_snd_fst__h6342,
		_theResult___fst__h6377,
		_theResult___quotient__h4721,
		_theResult___quotient__h5201,
		_theResult___snd__h6378,
		a___1__h6385,
		a___1__h6896,
		a___2__h6419,
		a__h5584,
		b___1__h6386,
		b___1__h6451,
		b___2__h6420,
		b__h5585,
		b__h5616,
		mydiv_quotient__h4664,
		mydiv_quotient__h4798,
		newHi__h3951,
		newLo__h3950,
		remainder___1__h5390,
		spliced_bits__h4887,
		x__h3998,
		x__h4313,
		x__h4960,
		y__h5243,
		y__h5385;
  wire [31 : 0] IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC__q6,
		IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC__q7,
		muldiv_request_put_BITS_159_TO_128__q2,
		muldiv_request_put_BITS_223_TO_192__q1,
		theResult_____2132_BITS_31_TO_0__q5,
		theResult___quotient201_BITS_31_TO_0__q4;
  wire [7 : 0] _theResult_____1_count__h4793,
	       mydiv___1_count__h4728,
	       mydiv_count__h4665;
  wire IF_divint_read__01_BITS_200_TO_129_03_EQ_0x0_0_ETC___d260;

  // action method muldiv_request_put
  assign RDY_muldiv_request_put =
	     state == 3'd0 && request_fifo$FULL_N && !lo_fifo_taggedReg[65] &&
	     !hi_fifo_taggedReg[65] ;

  // actionvalue method muldiv_response_get
  assign muldiv_response_get =
	     { lo_fifo_rw_enq$whas ?
		 hi_fifo_rw_enq$wget[64] :
		 !hi_fifo_taggedReg[65] || hi_fifo_taggedReg[64],
	       lo_fifo_rw_enq$whas ?
		 hi_fifo_rw_enq$wget[63:0] :
		 hi_fifo_taggedReg[63:0],
	       lo_fifo_rw_enq$whas ?
		 lo_fifo_rw_enq$wget[64] :
		 !lo_fifo_taggedReg[65] || lo_fifo_taggedReg[64],
	       lo_fifo_rw_enq$whas ?
		 lo_fifo_rw_enq$wget[63:0] :
		 lo_fifo_taggedReg[63:0] } ;
  assign RDY_muldiv_response_get =
	     (lo_fifo_taggedReg[65] || lo_fifo_rw_enq$whas) &&
	     (hi_fifo_taggedReg[65] || lo_fifo_rw_enq$whas) ;

  // submodule request_fifo
  FIFO1 #(.width(32'd263), .guarded(32'd1)) request_fifo(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(request_fifo$D_IN),
							 .ENQ(request_fifo$ENQ),
							 .DEQ(request_fifo$DEQ),
							 .CLR(request_fifo$CLR),
							 .D_OUT(request_fifo$D_OUT),
							 .FULL_N(request_fifo$FULL_N),
							 .EMPTY_N(request_fifo$EMPTY_N));

  // rule RL_mulPipe4
  assign WILL_FIRE_RL_mulPipe4 =
	     request_fifo$EMPTY_N && !lo_fifo_taggedReg[65] &&
	     !hi_fifo_taggedReg[65] &&
	     state == 3'd4 ;

  // rule RL_doDivide
  assign WILL_FIRE_RL_doDivide = request_fifo$EMPTY_N && state == 3'd5 ;

  // rule RL_finishDivide
  assign WILL_FIRE_RL_finishDivide =
	     request_fifo$EMPTY_N && !lo_fifo_taggedReg[65] &&
	     !hi_fifo_taggedReg[65] &&
	     state == 3'd6 ;

  // rule RL_lo_fifo_rule_enq
  assign WILL_FIRE_RL_lo_fifo_rule_enq =
	     lo_fifo_rw_enq$whas && !EN_muldiv_response_get ;

  // rule RL_hi_fifo_rule_enq
  assign WILL_FIRE_RL_hi_fifo_rule_enq =
	     lo_fifo_rw_enq$whas && !EN_muldiv_response_get ;

  // inputs to muxes for submodule ports
  assign MUX_divint$write_1__SEL_1 =
	     EN_muldiv_request_put && muldiv_request_put[260:256] == 5'd13 ;
  assign MUX_hi_fifo_rw_enq$wset_1__SEL_1 =
	     EN_muldiv_request_put &&
	     (muldiv_request_put[260:256] == 5'd17 ||
	      muldiv_request_put[260:256] == 5'd18) ;
  assign MUX_mulIntReg$write_1__SEL_1 =
	     EN_muldiv_request_put &&
	     (muldiv_request_put[260:256] == 5'd12 ||
	      muldiv_request_put[260:256] == 5'd14 ||
	      muldiv_request_put[260:256] == 5'd15 ||
	      muldiv_request_put[260:256] == 5'd16) ;
  assign MUX_state$write_1__SEL_1 =
	     WILL_FIRE_RL_doDivide && _theResult_____1_count__h4793 == 8'd0 ;
  assign MUX_state$write_1__SEL_2 =
	     EN_muldiv_request_put &&
	     (muldiv_request_put[260:256] == 5'd12 ||
	      muldiv_request_put[260:256] == 5'd14 ||
	      muldiv_request_put[260:256] == 5'd15 ||
	      muldiv_request_put[260:256] == 5'd16 ||
	      muldiv_request_put[260:256] == 5'd13) ;
  assign MUX_state$write_1__SEL_3 =
	     WILL_FIRE_RL_finishDivide || WILL_FIRE_RL_mulPipe4 ;
  assign MUX_divint$write_1__VAL_1 =
	     { IF_muldiv_request_put_BIT_261_75_THEN_IF_IF_mu_ETC___d270,
	       x_dividend__h7213,
	       72'd64,
	       muldiv_request_put[261] && a__h5584[63],
	       muldiv_request_put[261] && b__h5585[63] } ;
  assign MUX_divint$write_1__VAL_2 =
	     { divint[265:202],
	       _theResult_____1_dividend__h4791,
	       x__h4960,
	       _theResult_____1_count__h4793,
	       divint[1:0] } ;
  assign MUX_hi_fifo_rw_enq$wset_1__VAL_1 =
	     { muldiv_request_put[260:256] == 5'd17,
	       IF_muldiv_request_put_BIT_261_75_THEN_IF_IF_mu_ETC___d270 } ;
  assign MUX_hi_fifo_rw_enq$wset_1__VAL_2 =
	     { 1'd1,
	       IF_request_fifo_first__4_BIT_262_5_THEN_IF_NOT_ETC___d272[127:64] } ;
  assign MUX_hi_fifo_rw_enq$wset_1__VAL_3 =
	     { 1'd1,
	       request_fifo$D_OUT[262] ?
		 _theResult_____2__h5132 :
		 y__h5385 } ;
  assign MUX_hi_fifo_taggedReg$write_1__VAL_1 =
	     { 1'd1, hi_fifo_rw_enq$wget } ;
  assign MUX_lo_fifo_rw_enq$wset_1__VAL_1 =
	     { muldiv_request_put[260:256] != 5'd17,
	       IF_muldiv_request_put_BIT_261_75_THEN_IF_IF_mu_ETC___d270 } ;
  assign MUX_lo_fifo_rw_enq$wset_1__VAL_2 =
	     { 1'd1,
	       IF_request_fifo_first__4_BIT_262_5_THEN_IF_NOT_ETC___d272[63:0] } ;
  assign MUX_lo_fifo_rw_enq$wset_1__VAL_3 =
	     { 1'd1,
	       request_fifo$D_OUT[262] ?
		 _theResult___quotient__h5201 :
		 y__h5243 } ;
  assign MUX_lo_fifo_taggedReg$write_1__VAL_1 =
	     { 1'd1, lo_fifo_rw_enq$wget } ;
  assign MUX_mulIntReg$write_1__VAL_1 =
	     { 32'd0,
	       b__h5616[63:32],
	       32'd0,
	       b__h5616[31:0],
	       32'd0,
	       IF_muldiv_request_put_BIT_261_75_THEN_IF_IF_mu_ETC___d270[63:32],
	       32'd0,
	       IF_muldiv_request_put_BIT_261_75_THEN_IF_IF_mu_ETC___d270[31:0],
	       muldiv_request_put[261] && a__h5584[63],
	       muldiv_request_put[261] && b__h5585[63] } ;
  assign MUX_mulIntReg$write_1__VAL_2 =
	     { _0_CONCAT_mulIntReg_read__2_BITS_225_TO_194_3_4_ETC___d27[63:0],
	       _0_CONCAT_mulIntReg_read__2_BITS_225_TO_194_3_4_ETC___d31[63:0],
	       _0_CONCAT_mulIntReg_read__2_BITS_161_TO_130_4_5_ETC___d36[63:0],
	       _0_CONCAT_mulIntReg_read__2_BITS_161_TO_130_4_5_ETC___d38[63:0],
	       mulIntReg[1:0] } ;
  always@(muldiv_request_put)
  begin
    case (muldiv_request_put[260:256])
      5'd12, 5'd14, 5'd15, 5'd16: MUX_state$write_1__VAL_2 = 3'd1;
      default: MUX_state$write_1__VAL_2 = 3'd5;
    endcase
  end

  // inlined wires
  always@(MUX_hi_fifo_rw_enq$wset_1__SEL_1 or
	  MUX_lo_fifo_rw_enq$wset_1__VAL_1 or
	  WILL_FIRE_RL_mulPipe4 or
	  MUX_lo_fifo_rw_enq$wset_1__VAL_2 or
	  WILL_FIRE_RL_finishDivide or MUX_lo_fifo_rw_enq$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_hi_fifo_rw_enq$wset_1__SEL_1:
	  lo_fifo_rw_enq$wget = MUX_lo_fifo_rw_enq$wset_1__VAL_1;
      WILL_FIRE_RL_mulPipe4:
	  lo_fifo_rw_enq$wget = MUX_lo_fifo_rw_enq$wset_1__VAL_2;
      WILL_FIRE_RL_finishDivide:
	  lo_fifo_rw_enq$wget = MUX_lo_fifo_rw_enq$wset_1__VAL_3;
      default: lo_fifo_rw_enq$wget =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign lo_fifo_rw_enq$whas =
	     EN_muldiv_request_put &&
	     (muldiv_request_put[260:256] == 5'd17 ||
	      muldiv_request_put[260:256] == 5'd18) ||
	     WILL_FIRE_RL_mulPipe4 ||
	     WILL_FIRE_RL_finishDivide ;
  always@(MUX_hi_fifo_rw_enq$wset_1__SEL_1 or
	  MUX_hi_fifo_rw_enq$wset_1__VAL_1 or
	  WILL_FIRE_RL_mulPipe4 or
	  MUX_hi_fifo_rw_enq$wset_1__VAL_2 or
	  WILL_FIRE_RL_finishDivide or MUX_hi_fifo_rw_enq$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_hi_fifo_rw_enq$wset_1__SEL_1:
	  hi_fifo_rw_enq$wget = MUX_hi_fifo_rw_enq$wset_1__VAL_1;
      WILL_FIRE_RL_mulPipe4:
	  hi_fifo_rw_enq$wget = MUX_hi_fifo_rw_enq$wset_1__VAL_2;
      WILL_FIRE_RL_finishDivide:
	  hi_fifo_rw_enq$wget = MUX_hi_fifo_rw_enq$wset_1__VAL_3;
      default: hi_fifo_rw_enq$wget =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register divint
  assign divint$D_IN =
	     MUX_divint$write_1__SEL_1 ?
	       MUX_divint$write_1__VAL_1 :
	       MUX_divint$write_1__VAL_2 ;
  assign divint$EN =
	     EN_muldiv_request_put && muldiv_request_put[260:256] == 5'd13 ||
	     WILL_FIRE_RL_doDivide ;

  // register hi_fifo_taggedReg
  assign hi_fifo_taggedReg$D_IN =
	     WILL_FIRE_RL_hi_fifo_rule_enq ?
	       MUX_hi_fifo_taggedReg$write_1__VAL_1 :
	       66'h0AAAAAAAAAAAAAAAA ;
  assign hi_fifo_taggedReg$EN =
	     WILL_FIRE_RL_hi_fifo_rule_enq || EN_muldiv_response_get ;

  // register lo_fifo_taggedReg
  assign lo_fifo_taggedReg$D_IN =
	     WILL_FIRE_RL_lo_fifo_rule_enq ?
	       MUX_lo_fifo_taggedReg$write_1__VAL_1 :
	       66'h0AAAAAAAAAAAAAAAA ;
  assign lo_fifo_taggedReg$EN =
	     WILL_FIRE_RL_lo_fifo_rule_enq || EN_muldiv_response_get ;

  // register mulIntReg
  assign mulIntReg$D_IN =
	     MUX_mulIntReg$write_1__SEL_1 ?
	       MUX_mulIntReg$write_1__VAL_1 :
	       MUX_mulIntReg$write_1__VAL_2 ;
  assign mulIntReg$EN =
	     EN_muldiv_request_put &&
	     (muldiv_request_put[260:256] == 5'd12 ||
	      muldiv_request_put[260:256] == 5'd14 ||
	      muldiv_request_put[260:256] == 5'd15 ||
	      muldiv_request_put[260:256] == 5'd16) ||
	     state == 3'd1 ;

  // register state
  always@(MUX_state$write_1__SEL_1 or
	  MUX_state$write_1__SEL_2 or
	  MUX_state$write_1__VAL_2 or MUX_state$write_1__SEL_3 or state)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state$write_1__SEL_1: state$D_IN = 3'd6;
      MUX_state$write_1__SEL_2: state$D_IN = MUX_state$write_1__VAL_2;
      MUX_state$write_1__SEL_3: state$D_IN = 3'd0;
      state == 3'd1: state$D_IN = 3'd4;
      default: state$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign state$EN =
	     WILL_FIRE_RL_doDivide && _theResult_____1_count__h4793 == 8'd0 ||
	     EN_muldiv_request_put &&
	     (muldiv_request_put[260:256] == 5'd12 ||
	      muldiv_request_put[260:256] == 5'd14 ||
	      muldiv_request_put[260:256] == 5'd15 ||
	      muldiv_request_put[260:256] == 5'd16 ||
	      muldiv_request_put[260:256] == 5'd13) ||
	     WILL_FIRE_RL_finishDivide ||
	     WILL_FIRE_RL_mulPipe4 ||
	     state == 3'd1 ;

  // submodule request_fifo
  assign request_fifo$D_IN = muldiv_request_put ;
  assign request_fifo$ENQ = MUX_state$write_1__SEL_2 ;
  assign request_fifo$DEQ = MUX_state$write_1__SEL_3 ;
  assign request_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_divint_read__01_BITS_200_TO_129_03_EQ_0x0_0_ETC___d260 =
	     _theResult___dividend__h4720[127:64] < divint[265:202] ;
  assign IF_muldiv_request_put_BIT_261_75_THEN_IF_IF_mu_ETC___d270 =
	     muldiv_request_put[261] ?
	       _theResult_____2_fst__h6340 :
	       a__h5584 ;
  assign IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC__q6 =
	     IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC___d271[63:32] ;
  assign IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC__q7 =
	     IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC___d271[31:0] ;
  assign IF_request_fifo_first__4_BIT_262_5_THEN_IF_NOT_ETC___d272 =
	     request_fifo$D_OUT[262] ? _theResult____h3766 : product__h3952 ;
  assign _0_CONCAT_mulIntReg_BITS_129_TO_66_PLUS_0_CONCA_ETC__q3 =
	     { 64'd0, mulIntReg[129:66] } + { 64'd0, mulIntReg[193:130] } ;
  assign _0_CONCAT_mulIntReg_read__2_BITS_161_TO_130_4_5_ETC___d36 =
	     { 32'd0, mulIntReg[161:130] } * { 32'd0, mulIntReg[97:66] } ;
  assign _0_CONCAT_mulIntReg_read__2_BITS_161_TO_130_4_5_ETC___d38 =
	     { 32'd0, mulIntReg[161:130] } * { 32'd0, mulIntReg[33:2] } ;
  assign _0_CONCAT_mulIntReg_read__2_BITS_225_TO_194_3_4_ETC___d27 =
	     { 32'd0, mulIntReg[225:194] } * { 32'd0, mulIntReg[97:66] } ;
  assign _0_CONCAT_mulIntReg_read__2_BITS_225_TO_194_3_4_ETC___d31 =
	     { 32'd0, mulIntReg[225:194] } * { 32'd0, mulIntReg[33:2] } ;
  assign _theResult_____1_count__h4793 =
	     (divint[200:129] == 72'h0 && mydiv_count__h4665 > 8'd9) ?
	       mydiv___1_count__h4728 :
	       mydiv_count__h4665 ;
  assign _theResult_____1_dividend__h4791 =
	     request_fifo$D_OUT[261] ?
	       (spliced_bits__h4887[63] ?
		  _theResult___dividend__h4720 :
		  { spliced_bits__h4887,
		    _theResult___dividend__h4720[63:0] }) :
	       (IF_divint_read__01_BITS_200_TO_129_03_EQ_0x0_0_ETC___d260 ?
		  _theResult___dividend__h4720 :
		  { spliced_bits__h4887,
		    _theResult___dividend__h4720[63:0] }) ;
  assign _theResult_____2__h5132 =
	     (divint[0] && request_fifo$D_OUT[261]) ?
	       remainder___1__h5390 :
	       divint[201:138] ;
  assign _theResult_____2_fst__h6340 =
	     a__h5584[63] ? a___1__h6896 : a__h5584 ;
  assign _theResult_____2_snd_fst__h6342 =
	     b__h5585[63] ? b___1__h6451 : b__h5585 ;
  assign _theResult____h3766 =
	     (mulIntReg[1] != mulIntReg[0] && request_fifo$D_OUT[261]) ?
	       product___1__h4098 :
	       product__h3765 ;
  assign _theResult___dividend__h4720 =
	     (divint[200:129] == 72'h0 && mydiv_count__h4665 > 8'd9) ?
	       mydiv___1_dividend__h4726 :
	       mydiv_dividend__h4663 ;
  assign _theResult___fst__h6377 =
	     muldiv_request_put[261] ? a___1__h6385 : a___2__h6419 ;
  assign _theResult___quotient__h4721 =
	     (divint[200:129] == 72'h0 && mydiv_count__h4665 > 8'd9) ?
	       { divint[64:10], 9'd0 } :
	       mydiv_quotient__h4664 ;
  assign _theResult___quotient__h5201 =
	     (divint[1] != divint[0] && request_fifo$D_OUT[261]) ?
	       ~divint[73:10] + 64'd1 :
	       divint[73:10] ;
  assign _theResult___snd__h6378 =
	     muldiv_request_put[261] ? b___1__h6386 : b___2__h6420 ;
  assign a___1__h6385 =
	     { {32{muldiv_request_put_BITS_223_TO_192__q1[31]}},
	       muldiv_request_put_BITS_223_TO_192__q1 } ;
  assign a___1__h6896 = ~(a__h5584 - 64'd1) ;
  assign a___2__h6419 = { 32'd0, muldiv_request_put[223:192] } ;
  assign a__h5584 =
	     muldiv_request_put[262] ?
	       muldiv_request_put[255:192] :
	       _theResult___fst__h6377 ;
  assign b___1__h6386 =
	     { {32{muldiv_request_put_BITS_159_TO_128__q2[31]}},
	       muldiv_request_put_BITS_159_TO_128__q2 } ;
  assign b___1__h6451 = ~(b__h5585 - 64'd1) ;
  assign b___2__h6420 = { 32'd0, muldiv_request_put[159:128] } ;
  assign b__h5585 =
	     muldiv_request_put[262] ?
	       muldiv_request_put[191:128] :
	       _theResult___snd__h6378 ;
  assign b__h5616 =
	     muldiv_request_put[261] ?
	       _theResult_____2_snd_fst__h6342 :
	       b__h5585 ;
  assign muldiv_request_put_BITS_159_TO_128__q2 =
	     muldiv_request_put[159:128] ;
  assign muldiv_request_put_BITS_223_TO_192__q1 =
	     muldiv_request_put[223:192] ;
  assign mydiv___1_count__h4728 = mydiv_count__h4665 - 8'd8 ;
  assign mydiv___1_dividend__h4726 = { divint[192:74], 9'd0 } ;
  assign mydiv_count__h4665 = divint[9:2] - 8'd1 ;
  assign mydiv_dividend__h4663 = { divint[200:74], 1'd0 } ;
  assign mydiv_quotient__h4664 = { divint[72:10], 1'd0 } ;
  assign mydiv_quotient__h4798 =
	     { _theResult___quotient__h4721[63:1], 1'd1 } ;
  assign newHi__h3951 =
	     { {32{IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC__q6[31]}},
	       IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC__q6 } ;
  assign newLo__h3950 =
	     { {32{IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC__q7[31]}},
	       IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC__q7 } ;
  assign product___1__h4098 = ~product__h3765 + 128'd1 ;
  assign product__h3765 =
	     { mulIntReg[257:194], mulIntReg[65:2] } +
	     { _0_CONCAT_mulIntReg_BITS_129_TO_66_PLUS_0_CONCA_ETC__q3[95:0],
	       32'd0 } ;
  assign product__h3952 = { newHi__h3951, newLo__h3950 } ;
  assign product__h3995 = { {64{x__h3998[63]}}, x__h3998 } ;
  assign product__h4310 = { {64{x__h4313[63]}}, x__h4313 } ;
  assign remainder___1__h5390 = ~divint[201:138] + 64'd1 ;
  assign spliced_bits__h4887 =
	     _theResult___dividend__h4720[127:64] - divint[265:202] ;
  assign theResult_____2132_BITS_31_TO_0__q5 = _theResult_____2__h5132[31:0] ;
  assign theResult___quotient201_BITS_31_TO_0__q4 =
	     _theResult___quotient__h5201[31:0] ;
  assign x__h3998 =
	     { request_fifo$D_OUT[31:0], request_fifo$D_OUT[95:64] } +
	     _theResult____h3766[63:0] ;
  assign x__h4313 =
	     { request_fifo$D_OUT[31:0], request_fifo$D_OUT[95:64] } -
	     _theResult____h3766[63:0] ;
  assign x__h4960 =
	     request_fifo$D_OUT[261] ?
	       (spliced_bits__h4887[63] ?
		  _theResult___quotient__h4721 :
		  mydiv_quotient__h4798) :
	       (IF_divint_read__01_BITS_200_TO_129_03_EQ_0x0_0_ETC___d260 ?
		  _theResult___quotient__h4721 :
		  mydiv_quotient__h4798) ;
  assign x_dividend__h7213 = { 64'h0, b__h5616 } ;
  assign y__h5243 =
	     { {32{theResult___quotient201_BITS_31_TO_0__q4[31]}},
	       theResult___quotient201_BITS_31_TO_0__q4 } ;
  assign y__h5385 =
	     { {32{theResult_____2132_BITS_31_TO_0__q5[31]}},
	       theResult_____2132_BITS_31_TO_0__q5 } ;
  always@(request_fifo$D_OUT or
	  _theResult____h3766 or product__h3995 or product__h4310)
  begin
    case (request_fifo$D_OUT[260:256])
      5'd15:
	  IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC___d271 =
	      product__h3995;
      5'd16:
	  IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC___d271 =
	      product__h4310;
      default: IF_request_fifo_first__4_BITS_260_TO_256_6_EQ__ETC___d271 =
		   _theResult____h3766;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        divint <= `BSV_ASSIGNMENT_DELAY 266'd0;
	hi_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY 66'h0AAAAAAAAAAAAAAAA;
	lo_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY 66'h0AAAAAAAAAAAAAAAA;
	mulIntReg <= `BSV_ASSIGNMENT_DELAY
	    258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	state <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (divint$EN) divint <= `BSV_ASSIGNMENT_DELAY divint$D_IN;
	if (hi_fifo_taggedReg$EN)
	  hi_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY hi_fifo_taggedReg$D_IN;
	if (lo_fifo_taggedReg$EN)
	  lo_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY lo_fifo_taggedReg$D_IN;
	if (mulIntReg$EN) mulIntReg <= `BSV_ASSIGNMENT_DELAY mulIntReg$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    divint =
	266'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    hi_fifo_taggedReg = 66'h2AAAAAAAAAAAAAAAA;
    lo_fifo_taggedReg = 66'h2AAAAAAAAAAAAAAAA;
    mulIntReg =
	258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    state = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMulDiv

