//
// Generated by Bluespec Compiler, version 2012.07.beta1 (build 29243, 2012-07-26)
//
// On Fri Aug 31 13:45:36 BST 2012
//
// Method conflict info:
// Method: avm_m0
// Conflict-free: avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
// Conflicts: avm_m0
//
// Method: avm_irq
// Conflict-free: avm_m0,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
// Sequenced before (restricted): avm_irq
//
// Method: avm_writedata
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
//
// Method: avm_address
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
//
// Method: avm_read
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
//
// Method: avm_write
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
//
// Method: avm_byteenable
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
//
// Method: debugStreamSink_stream_in
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
// Conflicts: debugStreamSink_stream_in
//
// Method: debugStreamSink_stream_in_ready
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid,
// 	       debugStreamSource_stream_out
//
// Method: debugStreamSource_stream_out_data
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid
// Sequenced after (restricted): debugStreamSource_stream_out
//
// Method: debugStreamSource_stream_out_valid
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready,
// 	       debugStreamSource_stream_out_data,
// 	       debugStreamSource_stream_out_valid
// Sequenced after (restricted): debugStreamSource_stream_out
//
// Method: debugStreamSource_stream_out
// Conflict-free: avm_m0,
// 	       avm_irq,
// 	       avm_writedata,
// 	       avm_address,
// 	       avm_read,
// 	       avm_write,
// 	       avm_byteenable,
// 	       debugStreamSink_stream_in,
// 	       debugStreamSink_stream_in_ready
// Sequenced before (restricted): debugStreamSource_stream_out_data,
// 			       debugStreamSource_stream_out_valid
// Conflicts: debugStreamSource_stream_out
//
//
// Ports:
// Name                         I/O  size props
// avm_writedata                  O   256 reg
// avm_address                    O    32
// avm_read                       O     1 reg
// avm_write                      O     1 reg
// avm_byteenable                 O    32 reg
// debugStreamSink_stream_in_ready  O     1
// debugStreamSource_stream_out_data  O     8
// debugStreamSource_stream_out_valid  O     1
// csi_clockreset_clk             I     1 clock
// csi_clockreset_reset_n         I     1 reset
// avm_readdata                   I   256
// avm_readdatavalid              I     1
// avm_waitrequest                I     1
// avm_irq_irqs                   I     5 reg
// debugStreamSink_stream_in_data  I     8
// debugStreamSink_stream_in_valid  I     1
// debugStreamSource_stream_out_ready  I     1
//
// Combinational paths from inputs to outputs:
//   debugStreamSource_stream_out_ready -> debugStreamSource_stream_out_data
//   debugStreamSource_stream_out_ready -> debugStreamSource_stream_out_valid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkTopAvalonPhy(csi_clockreset_clk,
		      csi_clockreset_reset_n,

		      avm_readdata,
		      avm_readdatavalid,
		      avm_waitrequest,

		      avm_irq_irqs,

		      avm_writedata,

		      avm_address,

		      avm_read,

		      avm_write,

		      avm_byteenable,

		      debugStreamSink_stream_in_data,
		      debugStreamSink_stream_in_valid,

		      debugStreamSink_stream_in_ready,

		      debugStreamSource_stream_out_data,

		      debugStreamSource_stream_out_valid,

		      debugStreamSource_stream_out_ready);
  input  csi_clockreset_clk;
  input  csi_clockreset_reset_n;

  // action method avm_m0
  input  [255 : 0] avm_readdata;
  input  avm_readdatavalid;
  input  avm_waitrequest;

  // action method avm_irq
  input  [4 : 0] avm_irq_irqs;

  // value method avm_writedata
  output [255 : 0] avm_writedata;

  // value method avm_address
  output [31 : 0] avm_address;

  // value method avm_read
  output avm_read;

  // value method avm_write
  output avm_write;

  // value method avm_byteenable
  output [31 : 0] avm_byteenable;

  // action method debugStreamSink_stream_in
  input  [7 : 0] debugStreamSink_stream_in_data;
  input  debugStreamSink_stream_in_valid;

  // value method debugStreamSink_stream_in_ready
  output debugStreamSink_stream_in_ready;

  // value method debugStreamSource_stream_out_data
  output [7 : 0] debugStreamSource_stream_out_data;

  // value method debugStreamSource_stream_out_valid
  output debugStreamSource_stream_out_valid;

  // action method debugStreamSource_stream_out
  input  debugStreamSource_stream_out_ready;

  // signals for module outputs
  wire [255 : 0] avm_writedata;
  wire [31 : 0] avm_address, avm_byteenable;
  wire [7 : 0] debugStreamSource_stream_out_data;
  wire avm_read,
       avm_write,
       debugStreamSink_stream_in_ready,
       debugStreamSource_stream_out_valid;

  // inlined wires
  wire [256 : 0] datareturnbuf_rw_enq$wget;
  wire [8 : 0] streamIn_d_dw$wget, streamOut_data_dw$wget;
  wire signal_read$whas, signal_write$whas, streamOut_data_dw$whas;

  // register address_r
  reg [26 : 0] address_r;
  wire [26 : 0] address_r$D_IN;
  wire address_r$EN;

  // register byteenable_r
  reg [31 : 0] byteenable_r;
  wire [31 : 0] byteenable_r$D_IN;
  wire byteenable_r$EN;

  // register count
  reg [15 : 0] count;
  wire [15 : 0] count$D_IN;
  wire count$EN;

  // register datareturnbuf_taggedReg
  reg [257 : 0] datareturnbuf_taggedReg;
  wire [257 : 0] datareturnbuf_taggedReg$D_IN;
  wire datareturnbuf_taggedReg$EN;

  // register interrupts
  reg [4 : 0] interrupts;
  wire [4 : 0] interrupts$D_IN;
  wire interrupts$EN;

  // register read_r
  reg read_r;
  wire read_r$D_IN, read_r$EN;

  // register write_r
  reg write_r;
  wire write_r$D_IN, write_r$EN;

  // register writedata_r
  reg [255 : 0] writedata_r;
  wire [255 : 0] writedata_r$D_IN;
  wire writedata_r$EN;

  // ports of submodule beri
  wire [316 : 0] beri$memory_request_get;
  wire [255 : 0] beri$memory_response_put;
  wire [7 : 0] beri$debugStream_request_put, beri$debugStream_response_get;
  wire [4 : 0] beri$putIrqs_interruptLines;
  wire beri$EN_debugStream_request_put,
       beri$EN_debugStream_response_get,
       beri$EN_memory_request_get,
       beri$EN_memory_response_put,
       beri$EN_putIrqs,
       beri$RDY_debugStream_request_put,
       beri$RDY_debugStream_response_get,
       beri$RDY_memory_request_get,
       beri$RDY_memory_response_put;

  // ports of submodule pending_acks
  wire pending_acks$CLR,
       pending_acks$DEQ,
       pending_acks$D_IN,
       pending_acks$EMPTY_N,
       pending_acks$ENQ,
       pending_acks$FULL_N;

  // ports of submodule perif_reads
  wire [2 : 0] perif_reads$D_IN, perif_reads$D_OUT;
  wire perif_reads$CLR, perif_reads$DEQ, perif_reads$EMPTY_N, perif_reads$ENQ;

  // ports of submodule streamIn_f
  wire [7 : 0] streamIn_f$D_IN, streamIn_f$D_OUT;
  wire streamIn_f$CLR,
       streamIn_f$DEQ,
       streamIn_f$EMPTY_N,
       streamIn_f$ENQ,
       streamIn_f$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_buffer_data_read,
       WILL_FIRE_RL_datareturnbuf_rule_enq,
       WILL_FIRE_RL_getRequest;

  // inputs to muxes for submodule ports
  wire [257 : 0] MUX_datareturnbuf_taggedReg$write_1__VAL_1;
  wire MUX_datareturnbuf_taggedReg$write_1__SEL_2;

  // remaining internal signals
  wire [255 : 0] v__h1794, v__h1820;

  // value method avm_writedata
  assign avm_writedata = writedata_r ;

  // value method avm_address
  assign avm_address = { address_r, 5'b0 } ;

  // value method avm_read
  assign avm_read = read_r ;

  // value method avm_write
  assign avm_write = write_r ;

  // value method avm_byteenable
  assign avm_byteenable = byteenable_r ;

  // value method debugStreamSink_stream_in_ready
  assign debugStreamSink_stream_in_ready = streamIn_f$FULL_N ;

  // value method debugStreamSource_stream_out_data
  assign debugStreamSource_stream_out_data = streamOut_data_dw$wget[7:0] ;

  // value method debugStreamSource_stream_out_valid
  assign debugStreamSource_stream_out_valid =
	     streamOut_data_dw$whas && streamOut_data_dw$wget[8] ;

  // submodule beri
  mkMIPSTop beri(.csi_c0_clk(csi_clockreset_clk),
		 .csi_c0_reset_n(csi_clockreset_reset_n),
		 .debugStream_request_put(beri$debugStream_request_put),
		 .memory_response_put(beri$memory_response_put),
		 .putIrqs_interruptLines(beri$putIrqs_interruptLines),
		 .EN_memory_request_get(beri$EN_memory_request_get),
		 .EN_memory_response_put(beri$EN_memory_response_put),
		 .EN_putIrqs(beri$EN_putIrqs),
		 .EN_debugStream_request_put(beri$EN_debugStream_request_put),
		 .EN_debugStream_response_get(beri$EN_debugStream_response_get),
		 .memory_request_get(beri$memory_request_get),
		 .RDY_memory_request_get(beri$RDY_memory_request_get),
		 .RDY_memory_response_put(beri$RDY_memory_response_put),
		 .RDY_putIrqs(),
		 .RDY_debugStream_request_put(beri$RDY_debugStream_request_put),
		 .debugStream_response_get(beri$debugStream_response_get),
		 .RDY_debugStream_response_get(beri$RDY_debugStream_response_get));

  // submodule pending_acks
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) pending_acks(.RST_N(csi_clockreset_reset_n),
					    .CLK(csi_clockreset_clk),
					    .D_IN(pending_acks$D_IN),
					    .ENQ(pending_acks$ENQ),
					    .DEQ(pending_acks$DEQ),
					    .CLR(pending_acks$CLR),
					    .D_OUT(),
					    .FULL_N(pending_acks$FULL_N),
					    .EMPTY_N(pending_acks$EMPTY_N));

  // submodule perif_reads
  FIFO2 #(.width(32'd3),
	  .guarded(32'd0)) perif_reads(.RST_N(csi_clockreset_reset_n),
				       .CLK(csi_clockreset_clk),
				       .D_IN(perif_reads$D_IN),
				       .ENQ(perif_reads$ENQ),
				       .DEQ(perif_reads$DEQ),
				       .CLR(perif_reads$CLR),
				       .D_OUT(perif_reads$D_OUT),
				       .FULL_N(),
				       .EMPTY_N(perif_reads$EMPTY_N));

  // submodule streamIn_f
  FIFOL1 #(.width(32'd8)) streamIn_f(.RST_N(csi_clockreset_reset_n),
				     .CLK(csi_clockreset_clk),
				     .D_IN(streamIn_f$D_IN),
				     .ENQ(streamIn_f$ENQ),
				     .DEQ(streamIn_f$DEQ),
				     .CLR(streamIn_f$CLR),
				     .D_OUT(streamIn_f$D_OUT),
				     .FULL_N(streamIn_f$FULL_N),
				     .EMPTY_N(streamIn_f$EMPTY_N));

  // rule RL_buffer_data_read
  assign WILL_FIRE_RL_buffer_data_read =
	     !datareturnbuf_taggedReg[257] && avm_readdatavalid ;

  // rule RL_getRequest
  assign WILL_FIRE_RL_getRequest =
	     beri$RDY_memory_request_get && pending_acks$FULL_N &&
	     (!avm_waitrequest || !read_r && !write_r) ;

  // rule RL_datareturnbuf_rule_enq
  assign WILL_FIRE_RL_datareturnbuf_rule_enq =
	     WILL_FIRE_RL_buffer_data_read &&
	     !MUX_datareturnbuf_taggedReg$write_1__SEL_2 ;

  // inputs to muxes for submodule ports
  assign MUX_datareturnbuf_taggedReg$write_1__SEL_2 =
	     beri$RDY_memory_response_put &&
	     (datareturnbuf_taggedReg[257] ||
	      WILL_FIRE_RL_buffer_data_read) &&
	     pending_acks$EMPTY_N ;
  assign MUX_datareturnbuf_taggedReg$write_1__VAL_1 =
	     { 1'd1, datareturnbuf_rw_enq$wget } ;

  // inlined wires
  assign datareturnbuf_rw_enq$wget =
	     { 1'd1, perif_reads$EMPTY_N ? v__h1794 : avm_readdata } ;
  assign streamIn_d_dw$wget = { 1'd1, debugStreamSink_stream_in_data } ;
  assign streamOut_data_dw$wget = { 1'd1, beri$debugStream_response_get } ;
  assign streamOut_data_dw$whas =
	     beri$RDY_debugStream_response_get &&
	     debugStreamSource_stream_out_ready ;
  assign signal_read$whas =
	     WILL_FIRE_RL_getRequest && !beri$memory_request_get[316] ;
  assign signal_write$whas =
	     WILL_FIRE_RL_getRequest && beri$memory_request_get[316] ;

  // register address_r
  assign address_r$D_IN = beri$memory_request_get[315:289] ;
  assign address_r$EN = WILL_FIRE_RL_getRequest ;

  // register byteenable_r
  assign byteenable_r$D_IN = beri$memory_request_get[32:1] ;
  assign byteenable_r$EN = WILL_FIRE_RL_getRequest ;

  // register count
  assign count$D_IN = count + 16'd1 ;
  assign count$EN =
	     WILL_FIRE_RL_buffer_data_read && perif_reads$EMPTY_N &&
	     perif_reads$D_OUT == 3'd2 ;

  // register datareturnbuf_taggedReg
  assign datareturnbuf_taggedReg$D_IN =
	     WILL_FIRE_RL_datareturnbuf_rule_enq ?
	       MUX_datareturnbuf_taggedReg$write_1__VAL_1 :
	       258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign datareturnbuf_taggedReg$EN =
	     WILL_FIRE_RL_datareturnbuf_rule_enq ||
	     beri$RDY_memory_response_put &&
	     (datareturnbuf_taggedReg[257] ||
	      WILL_FIRE_RL_buffer_data_read) &&
	     pending_acks$EMPTY_N ;

  // register interrupts
  assign interrupts$D_IN = avm_irq_irqs ;
  assign interrupts$EN = 1'd1 ;

  // register read_r
  assign read_r$D_IN = signal_read$whas ;
  assign read_r$EN = signal_read$whas || !avm_waitrequest ;

  // register write_r
  assign write_r$D_IN = signal_write$whas ;
  assign write_r$EN = signal_write$whas || !avm_waitrequest ;

  // register writedata_r
  assign writedata_r$D_IN = beri$memory_request_get[288:33] ;
  assign writedata_r$EN = WILL_FIRE_RL_getRequest ;

  // submodule beri
  assign beri$debugStream_request_put = streamIn_f$D_OUT ;
  assign beri$memory_response_put =
	     (WILL_FIRE_RL_buffer_data_read ?
		!datareturnbuf_rw_enq$wget[256] :
		datareturnbuf_taggedReg[257] &&
		!datareturnbuf_taggedReg[256]) ?
	       256'b0 :
	       (WILL_FIRE_RL_buffer_data_read ?
		  datareturnbuf_rw_enq$wget[255:0] :
		  datareturnbuf_taggedReg[255:0]) ;
  assign beri$putIrqs_interruptLines = interrupts ;
  assign beri$EN_memory_request_get = WILL_FIRE_RL_getRequest ;
  assign beri$EN_memory_response_put =
	     MUX_datareturnbuf_taggedReg$write_1__SEL_2 ;
  assign beri$EN_putIrqs = 1'd1 ;
  assign beri$EN_debugStream_request_put =
	     beri$RDY_debugStream_request_put && streamIn_f$EMPTY_N ;
  assign beri$EN_debugStream_response_get =
	     beri$RDY_debugStream_response_get &&
	     debugStreamSource_stream_out_ready ;

  // submodule pending_acks
  assign pending_acks$D_IN = 1'd0 ;
  assign pending_acks$ENQ = signal_read$whas ;
  assign pending_acks$DEQ = MUX_datareturnbuf_taggedReg$write_1__SEL_2 ;
  assign pending_acks$CLR = 1'b0 ;

  // submodule perif_reads
  assign perif_reads$D_IN =
	     (beri$memory_request_get[315:289] == 27'h3F80200) ? 3'd2 : 3'd5 ;
  assign perif_reads$ENQ = signal_read$whas ;
  assign perif_reads$DEQ =
	     WILL_FIRE_RL_buffer_data_read && perif_reads$EMPTY_N ;
  assign perif_reads$CLR = 1'b0 ;

  // submodule streamIn_f
  assign streamIn_f$D_IN = streamIn_d_dw$wget[7:0] ;
  assign streamIn_f$ENQ =
	     streamIn_f$FULL_N && debugStreamSink_stream_in_valid &&
	     streamIn_d_dw$wget[8] ;
  assign streamIn_f$DEQ =
	     beri$RDY_debugStream_request_put && streamIn_f$EMPTY_N ;
  assign streamIn_f$CLR = 1'b0 ;

  // remaining internal signals
  assign v__h1794 = (perif_reads$D_OUT == 3'd2) ? v__h1820 : avm_readdata ;
  assign v__h1820 = { avm_readdata[255:16], count } ;

  // handling of inlined registers

  always@(posedge csi_clockreset_clk)
  begin
    if (!csi_clockreset_reset_n)
      begin
        address_r <= `BSV_ASSIGNMENT_DELAY 27'd0;
	byteenable_r <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	count <= `BSV_ASSIGNMENT_DELAY 16'd0;
	datareturnbuf_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    258'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	interrupts <= `BSV_ASSIGNMENT_DELAY 5'b0;
	read_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	write_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	writedata_r <= `BSV_ASSIGNMENT_DELAY 256'd0;
      end
    else
      begin
        if (address_r$EN) address_r <= `BSV_ASSIGNMENT_DELAY address_r$D_IN;
	if (byteenable_r$EN)
	  byteenable_r <= `BSV_ASSIGNMENT_DELAY byteenable_r$D_IN;
	if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (datareturnbuf_taggedReg$EN)
	  datareturnbuf_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      datareturnbuf_taggedReg$D_IN;
	if (interrupts$EN)
	  interrupts <= `BSV_ASSIGNMENT_DELAY interrupts$D_IN;
	if (read_r$EN) read_r <= `BSV_ASSIGNMENT_DELAY read_r$D_IN;
	if (write_r$EN) write_r <= `BSV_ASSIGNMENT_DELAY write_r$D_IN;
	if (writedata_r$EN)
	  writedata_r <= `BSV_ASSIGNMENT_DELAY writedata_r$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    address_r = 27'h2AAAAAA;
    byteenable_r = 32'hAAAAAAAA;
    count = 16'hAAAA;
    datareturnbuf_taggedReg =
	258'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    interrupts = 5'h0A;
    read_r = 1'h0;
    write_r = 1'h0;
    writedata_r =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTopAvalonPhy

