//
// Generated by Bluespec Compiler, version 2012.07.beta1 (build 29243, 2012-07-26)
//
// On Fri Aug 31 13:44:48 BST 2012
//
// Method conflict info:
// Method: stream_request_put
// Conflict-free: stream_response_get,
// 	       messages_request_get,
// 	       messages_response_put
// Conflicts: stream_request_put
//
// Method: stream_response_get
// Conflict-free: stream_request_put, messages_request_get, messages_response_put
// Conflicts: stream_response_get
//
// Method: messages_request_get
// Conflict-free: stream_request_put, stream_response_get, messages_response_put
// Conflicts: messages_request_get
//
// Method: messages_response_put
// Conflict-free: stream_request_put, stream_response_get, messages_request_get
// Conflicts: messages_response_put
//
//
// Ports:
// Name                         I/O  size props
// RDY_stream_request_put         O     1 reg
// stream_response_get            O     8 reg
// RDY_stream_response_get        O     1 reg
// messages_request_get           O   272
// RDY_messages_request_get       O     1 reg
// RDY_messages_response_put      O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// stream_request_put             I     8 reg
// messages_response_put          I   272
// EN_stream_request_put          I     1
// EN_messages_response_put       I     1
// EN_stream_response_get         I     1
// EN_messages_request_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkDebugConvert(CLK,
		      RST_N,

		      stream_request_put,
		      EN_stream_request_put,
		      RDY_stream_request_put,

		      EN_stream_response_get,
		      stream_response_get,
		      RDY_stream_response_get,

		      EN_messages_request_get,
		      messages_request_get,
		      RDY_messages_request_get,

		      messages_response_put,
		      EN_messages_response_put,
		      RDY_messages_response_put);
  input  CLK;
  input  RST_N;

  // action method stream_request_put
  input  [7 : 0] stream_request_put;
  input  EN_stream_request_put;
  output RDY_stream_request_put;

  // actionvalue method stream_response_get
  input  EN_stream_response_get;
  output [7 : 0] stream_response_get;
  output RDY_stream_response_get;

  // actionvalue method messages_request_get
  input  EN_messages_request_get;
  output [271 : 0] messages_request_get;
  output RDY_messages_request_get;

  // action method messages_response_put
  input  [271 : 0] messages_response_put;
  input  EN_messages_response_put;
  output RDY_messages_response_put;

  // signals for module outputs
  wire [271 : 0] messages_request_get;
  wire [7 : 0] stream_response_get;
  wire RDY_messages_request_get,
       RDY_messages_response_put,
       RDY_stream_request_put,
       RDY_stream_response_get;

  // register command
  reg [271 : 0] command;
  wire [271 : 0] command$D_IN;
  wire command$EN;

  // register commandCount
  reg [7 : 0] commandCount;
  wire [7 : 0] commandCount$D_IN;
  wire commandCount$EN;

  // register commandState
  reg [1 : 0] commandState;
  reg [1 : 0] commandState$D_IN;
  wire commandState$EN;

  // register responseCount
  reg [7 : 0] responseCount;
  wire [7 : 0] responseCount$D_IN;
  wire responseCount$EN;

  // register responseState
  reg [1 : 0] responseState;
  reg [1 : 0] responseState$D_IN;
  wire responseState$EN;

  // ports of submodule commands
  wire [271 : 0] commands$D_IN, commands$D_OUT;
  wire commands$CLR,
       commands$DEQ,
       commands$EMPTY_N,
       commands$ENQ,
       commands$FULL_N;

  // ports of submodule inChar
  wire [7 : 0] inChar$D_IN, inChar$D_OUT;
  wire inChar$CLR, inChar$DEQ, inChar$EMPTY_N, inChar$ENQ, inChar$FULL_N;

  // ports of submodule outChar
  reg [7 : 0] outChar$D_IN;
  wire [7 : 0] outChar$D_OUT;
  wire outChar$CLR, outChar$DEQ, outChar$EMPTY_N, outChar$ENQ, outChar$FULL_N;

  // ports of submodule responses
  wire [271 : 0] responses$D_IN, responses$D_OUT;
  wire responses$CLR,
       responses$DEQ,
       responses$EMPTY_N,
       responses$ENQ,
       responses$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_deliverResponse, WILL_FIRE_RL_getCommand;

  // remaining internal signals
  reg [263 : 0] IF_commandState_EQ_0_THEN_0b0_CONCAT_DONTCARE__ETC___d369;
  reg [7 : 0] CASE_command_BITS_271_TO_264_32_0_command_BITS_ETC__q2,
	      CASE_commandsD_OUT_BITS_271_TO_264_32_0_comma_ETC__q1,
	      CASE_messages_response_put_BITS_271_TO_264_32__ETC__q3,
	      x__h14752,
	      x__h15152;
  wire [263 : 0] IF_NOT_inChar_first__7_EQ_0_8_9_AND_inChar_fir_ETC___d365;
  wire [255 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d747;
  wire [239 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d221;
  wire [223 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d214;
  wire [207 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d207;
  wire [191 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d200;
  wire [175 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d193;
  wire [159 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d186;
  wire [143 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d179;
  wire [127 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d172;
  wire [111 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d165;
  wire [95 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d158;
  wire [79 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d151;
  wire [63 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d144;
  wire [47 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d137;
  wire [31 : 0] IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d130;
  wire [7 : 0] IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d309,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d310,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d311,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d312,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d313,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d314,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d315,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d316,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d317,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d318,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d319,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d320,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d321,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d322,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d323,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d324,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d325,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d326,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d327,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d328,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d329,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d330,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d331,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d332,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d333,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d334,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d335,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d336,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d337,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d338,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d339,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d340,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d341,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d342,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d343,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d344,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d345,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d346,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d347;
  wire commandState_EQ_1_AND_inChar_first__7_EQ_0_8_O_ETC___d34,
       commandState_EQ_1_OR_commandState_EQ_2_AND_NOT_ETC___d15,
       inChar_first__7_ULE_32___d745,
       responseState_74_EQ_1_76_AND_responses_first___ETC___d572,
       responseState_74_EQ_1_76_OR_responseState_74_E_ETC___d564;

  // action method stream_request_put
  assign RDY_stream_request_put = inChar$FULL_N ;

  // actionvalue method stream_response_get
  assign stream_response_get = outChar$D_OUT ;
  assign RDY_stream_response_get = outChar$EMPTY_N ;

  // actionvalue method messages_request_get
  assign messages_request_get =
	     { CASE_commandsD_OUT_BITS_271_TO_264_32_0_comma_ETC__q1,
	       commands$D_OUT[263:0] } ;
  assign RDY_messages_request_get = commands$EMPTY_N ;

  // action method messages_response_put
  assign RDY_messages_response_put = responses$FULL_N ;

  // submodule commands
  FIFO1 #(.width(32'd272), .guarded(32'd1)) commands(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(commands$D_IN),
						     .ENQ(commands$ENQ),
						     .DEQ(commands$DEQ),
						     .CLR(commands$CLR),
						     .D_OUT(commands$D_OUT),
						     .FULL_N(commands$FULL_N),
						     .EMPTY_N(commands$EMPTY_N));

  // submodule inChar
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd1024),
	      .p3cntr_width(32'd10),
	      .guarded(32'd1)) inChar(.RST_N(RST_N),
				      .CLK(CLK),
				      .D_IN(inChar$D_IN),
				      .ENQ(inChar$ENQ),
				      .DEQ(inChar$DEQ),
				      .CLR(inChar$CLR),
				      .D_OUT(inChar$D_OUT),
				      .FULL_N(inChar$FULL_N),
				      .EMPTY_N(inChar$EMPTY_N));

  // submodule outChar
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd1024),
	      .p3cntr_width(32'd10),
	      .guarded(32'd1)) outChar(.RST_N(RST_N),
				       .CLK(CLK),
				       .D_IN(outChar$D_IN),
				       .ENQ(outChar$ENQ),
				       .DEQ(outChar$DEQ),
				       .CLR(outChar$CLR),
				       .D_OUT(outChar$D_OUT),
				       .FULL_N(outChar$FULL_N),
				       .EMPTY_N(outChar$EMPTY_N));

  // submodule responses
  FIFO1 #(.width(32'd272), .guarded(32'd1)) responses(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(responses$D_IN),
						      .ENQ(responses$ENQ),
						      .DEQ(responses$DEQ),
						      .CLR(responses$CLR),
						      .D_OUT(responses$D_OUT),
						      .FULL_N(responses$FULL_N),
						      .EMPTY_N(responses$EMPTY_N));

  // rule RL_getCommand
  assign WILL_FIRE_RL_getCommand = inChar$EMPTY_N && commands$FULL_N ;

  // rule RL_deliverResponse
  assign WILL_FIRE_RL_deliverResponse = responses$EMPTY_N && outChar$FULL_N ;

  // register command
  assign command$D_IN =
	     { IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d347,
	       IF_commandState_EQ_0_THEN_0b0_CONCAT_DONTCARE__ETC___d369 } ;
  assign command$EN = WILL_FIRE_RL_getCommand ;

  // register commandCount
  assign commandCount$D_IN =
	     (commandState == 2'd1) ? 8'd0 : commandCount + 8'd1 ;
  assign commandCount$EN =
	     WILL_FIRE_RL_getCommand &&
	     (commandState == 2'd1 && inChar$D_OUT != 8'd0 &&
	      inChar_first__7_ULE_32___d745 ||
	      commandState == 2'd2) ;

  // register commandState
  always@(commandState or inChar$D_OUT or inChar_first__7_ULE_32___d745)
  begin
    case (commandState)
      2'd0: commandState$D_IN = 2'd1;
      2'd1:
	  commandState$D_IN =
	      (inChar$D_OUT != 8'd0 && inChar_first__7_ULE_32___d745) ?
		2'd2 :
		2'd0;
      default: commandState$D_IN = 2'd0;
    endcase
  end
  assign commandState$EN =
	     WILL_FIRE_RL_getCommand &&
	     (commandState == 2'd0 ||
	      commandState_EQ_1_OR_commandState_EQ_2_AND_NOT_ETC___d15) ;

  // register responseCount
  assign responseCount$D_IN =
	     (responseState == 2'd1) ? 8'd0 : responseCount + 8'd1 ;
  assign responseCount$EN =
	     WILL_FIRE_RL_deliverResponse &&
	     (responseState == 2'd1 && responses$D_OUT[263:256] != 8'd0 ||
	      responseState == 2'd2) ;

  // register responseState
  always@(responseState or responses$D_OUT)
  begin
    case (responseState)
      2'd0: responseState$D_IN = 2'd1;
      2'd1:
	  responseState$D_IN =
	      (responses$D_OUT[263:256] == 8'd0) ? 2'd0 : 2'd2;
      default: responseState$D_IN = 2'd0;
    endcase
  end
  assign responseState$EN =
	     WILL_FIRE_RL_deliverResponse &&
	     (responseState == 2'd0 ||
	      responseState_74_EQ_1_76_OR_responseState_74_E_ETC___d564) ;

  // submodule commands
  assign commands$D_IN =
	     { CASE_command_BITS_271_TO_264_32_0_command_BITS_ETC__q2,
	       (commandState == 2'd1) ?
		 { 8'd0, command[255:0] } :
		 { command[263:256],
		   IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d747 } } ;
  assign commands$ENQ =
	     WILL_FIRE_RL_getCommand && commandState != 2'd0 &&
	     commandState_EQ_1_AND_inChar_first__7_EQ_0_8_O_ETC___d34 ;
  assign commands$DEQ = EN_messages_request_get ;
  assign commands$CLR = 1'b0 ;

  // submodule inChar
  assign inChar$D_IN = stream_request_put ;
  assign inChar$ENQ = EN_stream_request_put ;
  assign inChar$DEQ = WILL_FIRE_RL_getCommand ;
  assign inChar$CLR = 1'b0 ;

  // submodule outChar
  always@(responseState or x__h15152 or x__h14752 or responses$D_OUT)
  begin
    case (responseState)
      2'd0: outChar$D_IN = x__h14752;
      2'd1: outChar$D_IN = responses$D_OUT[263:256];
      default: outChar$D_IN = x__h15152;
    endcase
  end
  assign outChar$ENQ =
	     WILL_FIRE_RL_deliverResponse &&
	     (responseState == 2'd0 || responseState == 2'd1 ||
	      responseState == 2'd2) ;
  assign outChar$DEQ = EN_stream_response_get ;
  assign outChar$CLR = 1'b0 ;

  // submodule responses
  assign responses$D_IN =
	     { CASE_messages_response_put_BITS_271_TO_264_32__ETC__q3,
	       messages_response_put[263:0] } ;
  assign responses$ENQ = EN_messages_response_put ;
  assign responses$DEQ =
	     WILL_FIRE_RL_deliverResponse && responseState != 2'd0 &&
	     responseState_74_EQ_1_76_AND_responses_first___ETC___d572 ;
  assign responses$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d309 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd255 :
		command[271:264] == 8'd255) ?
	       8'd255 :
	       8'd32 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d310 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd211 :
		command[271:264] == 8'd211) ?
	       8'd211 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d309 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d311 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd245 :
		command[271:264] == 8'd245) ?
	       8'd245 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d310 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d312 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd227 :
		command[271:264] == 8'd227) ?
	       8'd227 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d311 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d313 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd244 :
		command[271:264] == 8'd244) ?
	       8'd244 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d312 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d314 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd243 :
		command[271:264] == 8'd243) ?
	       8'd243 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d313 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d315 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd242 :
		command[271:264] == 8'd242) ?
	       8'd242 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d314 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d316 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd240 :
		command[271:264] == 8'd240) ?
	       8'd240 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d315 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d317 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd228 :
		command[271:264] == 8'd228) ?
	       8'd228 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d316 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d318 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd197 :
		command[271:264] == 8'd197) ?
	       8'd197 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d317 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d319 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd229 :
		command[271:264] == 8'd229) ?
	       8'd229 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d318 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d320 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd205 :
		command[271:264] == 8'd205) ?
	       8'd205 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d319 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d321 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd195 :
		command[271:264] == 8'd195) ?
	       8'd195 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d320 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d322 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd179 :
		command[271:264] == 8'd179) ?
	       8'd179 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d321 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d323 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd178 :
		command[271:264] == 8'd178) ?
	       8'd178 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d322 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d324 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd177 :
		command[271:264] == 8'd177) ?
	       8'd177 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d323 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d325 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd176 :
		command[271:264] == 8'd176) ?
	       8'd176 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d324 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d326 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd226 :
		command[271:264] == 8'd226) ?
	       8'd226 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d325 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d327 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd225 :
		command[271:264] == 8'd225) ?
	       8'd225 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d326 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d328 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd233 :
		command[271:264] == 8'd233) ?
	       8'd233 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d327 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d329 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd83 :
		command[271:264] == 8'd83) ?
	       8'd83 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d328 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d330 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd116 :
		command[271:264] == 8'd116) ?
	       8'd116 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d329 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d331 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd117 :
		command[271:264] == 8'd117) ?
	       8'd117 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d330 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d332 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd99 :
		command[271:264] == 8'd99) ?
	       8'd99 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d331 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d333 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd115 :
		command[271:264] == 8'd115) ?
	       8'd115 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d332 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d334 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd114 :
		command[271:264] == 8'd114) ?
	       8'd114 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d333 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d335 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd112 :
		command[271:264] == 8'd112) ?
	       8'd112 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d334 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d336 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd100 :
		command[271:264] == 8'd100) ?
	       8'd100 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d335 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d337 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd101 :
		command[271:264] == 8'd101) ?
	       8'd101 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d336 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d338 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd77 :
		command[271:264] == 8'd77) ?
	       8'd77 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d337 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d339 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd67 :
		command[271:264] == 8'd67) ?
	       8'd67 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d338 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d340 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd51 :
		command[271:264] == 8'd51) ?
	       8'd51 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d339 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d341 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd50 :
		command[271:264] == 8'd50) ?
	       8'd50 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d340 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d342 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd49 :
		command[271:264] == 8'd49) ?
	       8'd49 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d341 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d343 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd48 :
		command[271:264] == 8'd48) ?
	       8'd48 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d342 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d344 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd98 :
		command[271:264] == 8'd98) ?
	       8'd98 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d343 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d345 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd97 :
		command[271:264] == 8'd97) ?
	       8'd97 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d344 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d346 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd105 :
		command[271:264] == 8'd105) ?
	       8'd105 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d345 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d347 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd0 :
		command[271:264] == 8'd0) ?
	       8'd0 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__7_E_ETC___d346 ;
  assign IF_NOT_inChar_first__7_EQ_0_8_9_AND_inChar_fir_ETC___d365 =
	     { (inChar$D_OUT != 8'd0 && inChar_first__7_ULE_32___d745) ?
		 inChar$D_OUT :
		 8'd0,
	       command[255:0] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d130 =
	     { (commandCount == 8'd31) ? inChar$D_OUT : command[255:248],
	       (commandCount == 8'd30) ? inChar$D_OUT : command[247:240],
	       (commandCount == 8'd29) ? inChar$D_OUT : command[239:232],
	       (commandCount == 8'd28) ? inChar$D_OUT : command[231:224] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d137 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d130,
	       (commandCount == 8'd27) ? inChar$D_OUT : command[223:216],
	       (commandCount == 8'd26) ? inChar$D_OUT : command[215:208] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d144 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d137,
	       (commandCount == 8'd25) ? inChar$D_OUT : command[207:200],
	       (commandCount == 8'd24) ? inChar$D_OUT : command[199:192] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d151 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d144,
	       (commandCount == 8'd23) ? inChar$D_OUT : command[191:184],
	       (commandCount == 8'd22) ? inChar$D_OUT : command[183:176] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d158 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d151,
	       (commandCount == 8'd21) ? inChar$D_OUT : command[175:168],
	       (commandCount == 8'd20) ? inChar$D_OUT : command[167:160] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d165 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d158,
	       (commandCount == 8'd19) ? inChar$D_OUT : command[159:152],
	       (commandCount == 8'd18) ? inChar$D_OUT : command[151:144] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d172 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d165,
	       (commandCount == 8'd17) ? inChar$D_OUT : command[143:136],
	       (commandCount == 8'd16) ? inChar$D_OUT : command[135:128] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d179 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d172,
	       (commandCount == 8'd15) ? inChar$D_OUT : command[127:120],
	       (commandCount == 8'd14) ? inChar$D_OUT : command[119:112] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d186 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d179,
	       (commandCount == 8'd13) ? inChar$D_OUT : command[111:104],
	       (commandCount == 8'd12) ? inChar$D_OUT : command[103:96] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d193 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d186,
	       (commandCount == 8'd11) ? inChar$D_OUT : command[95:88],
	       (commandCount == 8'd10) ? inChar$D_OUT : command[87:80] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d200 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d193,
	       (commandCount == 8'd9) ? inChar$D_OUT : command[79:72],
	       (commandCount == 8'd8) ? inChar$D_OUT : command[71:64] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d207 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d200,
	       (commandCount == 8'd7) ? inChar$D_OUT : command[63:56],
	       (commandCount == 8'd6) ? inChar$D_OUT : command[55:48] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d214 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d207,
	       (commandCount == 8'd5) ? inChar$D_OUT : command[47:40],
	       (commandCount == 8'd4) ? inChar$D_OUT : command[39:32] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d221 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d214,
	       (commandCount == 8'd3) ? inChar$D_OUT : command[31:24],
	       (commandCount == 8'd2) ? inChar$D_OUT : command[23:16] } ;
  assign IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d747 =
	     { IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d221,
	       (commandCount == 8'd1) ? inChar$D_OUT : command[15:8],
	       (commandCount == 8'd0) ? inChar$D_OUT : command[7:0] } ;
  assign commandState_EQ_1_AND_inChar_first__7_EQ_0_8_O_ETC___d34 =
	     commandState == 2'd1 &&
	     (inChar$D_OUT == 8'd0 || !inChar_first__7_ULE_32___d745) ||
	     commandState == 2'd2 && commandCount >= command[263:256] - 8'd1 ;
  assign commandState_EQ_1_OR_commandState_EQ_2_AND_NOT_ETC___d15 =
	     commandState == 2'd1 ||
	     commandState == 2'd2 && commandCount >= command[263:256] - 8'd1 ;
  assign inChar_first__7_ULE_32___d745 = inChar$D_OUT <= 8'd32 ;
  assign responseState_74_EQ_1_76_AND_responses_first___ETC___d572 =
	     responseState == 2'd1 && responses$D_OUT[263:256] == 8'd0 ||
	     responseState == 2'd2 &&
	     responseCount >= responses$D_OUT[263:256] - 8'd1 ;
  assign responseState_74_EQ_1_76_OR_responseState_74_E_ETC___d564 =
	     responseState == 2'd1 ||
	     responseState == 2'd2 &&
	     responseCount >= responses$D_OUT[263:256] - 8'd1 ;
  always@(commands$D_OUT)
  begin
    case (commands$D_OUT[271:264])
      8'd0,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd67,
      8'd77,
      8'd83,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd105,
      8'd112,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd195,
      8'd197,
      8'd205,
      8'd211,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd233,
      8'd240,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd255:
	  CASE_commandsD_OUT_BITS_271_TO_264_32_0_comma_ETC__q1 =
	      commands$D_OUT[271:264];
      default: CASE_commandsD_OUT_BITS_271_TO_264_32_0_comma_ETC__q1 = 8'd32;
    endcase
  end
  always@(responseCount or responses$D_OUT)
  begin
    case (responseCount)
      8'd0: x__h15152 = responses$D_OUT[7:0];
      8'd1: x__h15152 = responses$D_OUT[15:8];
      8'd2: x__h15152 = responses$D_OUT[23:16];
      8'd3: x__h15152 = responses$D_OUT[31:24];
      8'd4: x__h15152 = responses$D_OUT[39:32];
      8'd5: x__h15152 = responses$D_OUT[47:40];
      8'd6: x__h15152 = responses$D_OUT[55:48];
      8'd7: x__h15152 = responses$D_OUT[63:56];
      8'd8: x__h15152 = responses$D_OUT[71:64];
      8'd9: x__h15152 = responses$D_OUT[79:72];
      8'd10: x__h15152 = responses$D_OUT[87:80];
      8'd11: x__h15152 = responses$D_OUT[95:88];
      8'd12: x__h15152 = responses$D_OUT[103:96];
      8'd13: x__h15152 = responses$D_OUT[111:104];
      8'd14: x__h15152 = responses$D_OUT[119:112];
      8'd15: x__h15152 = responses$D_OUT[127:120];
      8'd16: x__h15152 = responses$D_OUT[135:128];
      8'd17: x__h15152 = responses$D_OUT[143:136];
      8'd18: x__h15152 = responses$D_OUT[151:144];
      8'd19: x__h15152 = responses$D_OUT[159:152];
      8'd20: x__h15152 = responses$D_OUT[167:160];
      8'd21: x__h15152 = responses$D_OUT[175:168];
      8'd22: x__h15152 = responses$D_OUT[183:176];
      8'd23: x__h15152 = responses$D_OUT[191:184];
      8'd24: x__h15152 = responses$D_OUT[199:192];
      8'd25: x__h15152 = responses$D_OUT[207:200];
      8'd26: x__h15152 = responses$D_OUT[215:208];
      8'd27: x__h15152 = responses$D_OUT[223:216];
      8'd28: x__h15152 = responses$D_OUT[231:224];
      8'd29: x__h15152 = responses$D_OUT[239:232];
      8'd30: x__h15152 = responses$D_OUT[247:240];
      default: x__h15152 = responses$D_OUT[255:248];
    endcase
  end
  always@(responses$D_OUT)
  begin
    case (responses$D_OUT[271:264])
      8'd0,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd67,
      8'd77,
      8'd83,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd105,
      8'd112,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd195,
      8'd197,
      8'd205,
      8'd211,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd233,
      8'd240,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd255:
	  x__h14752 = responses$D_OUT[271:264];
      default: x__h14752 = 8'd32;
    endcase
  end
  always@(commandState or
	  command or
	  IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d747 or
	  IF_NOT_inChar_first__7_EQ_0_8_9_AND_inChar_fir_ETC___d365)
  begin
    case (commandState)
      2'd0:
	  IF_commandState_EQ_0_THEN_0b0_CONCAT_DONTCARE__ETC___d369 =
	      { 8'b0, command[255:0] };
      2'd1:
	  IF_commandState_EQ_0_THEN_0b0_CONCAT_DONTCARE__ETC___d369 =
	      IF_NOT_inChar_first__7_EQ_0_8_9_AND_inChar_fir_ETC___d365;
      default: IF_commandState_EQ_0_THEN_0b0_CONCAT_DONTCARE__ETC___d369 =
		   { command[263:256],
		     (commandState == 2'd2) ?
		       IF_commandCount_EQ_31_17_THEN_inChar_first__7__ETC___d747 :
		       command[255:0] };
    endcase
  end
  always@(command)
  begin
    case (command[271:264])
      8'd0,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd67,
      8'd77,
      8'd83,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd105,
      8'd112,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd195,
      8'd197,
      8'd205,
      8'd211,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd233,
      8'd240,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd255:
	  CASE_command_BITS_271_TO_264_32_0_command_BITS_ETC__q2 =
	      command[271:264];
      default: CASE_command_BITS_271_TO_264_32_0_command_BITS_ETC__q2 = 8'd32;
    endcase
  end
  always@(messages_response_put)
  begin
    case (messages_response_put[271:264])
      8'd0,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd67,
      8'd77,
      8'd83,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd105,
      8'd112,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd195,
      8'd197,
      8'd205,
      8'd211,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd233,
      8'd240,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd255:
	  CASE_messages_response_put_BITS_271_TO_264_32__ETC__q3 =
	      messages_response_put[271:264];
      default: CASE_messages_response_put_BITS_271_TO_264_32__ETC__q3 = 8'd32;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        commandCount <= `BSV_ASSIGNMENT_DELAY 8'd0;
	commandState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	responseCount <= `BSV_ASSIGNMENT_DELAY 8'd0;
	responseState <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (commandCount$EN)
	  commandCount <= `BSV_ASSIGNMENT_DELAY commandCount$D_IN;
	if (commandState$EN)
	  commandState <= `BSV_ASSIGNMENT_DELAY commandState$D_IN;
	if (responseCount$EN)
	  responseCount <= `BSV_ASSIGNMENT_DELAY responseCount$D_IN;
	if (responseState$EN)
	  responseState <= `BSV_ASSIGNMENT_DELAY responseState$D_IN;
      end
    if (command$EN) command <= `BSV_ASSIGNMENT_DELAY command$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    command =
	272'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    commandCount = 8'hAA;
    commandState = 2'h2;
    responseCount = 8'hAA;
    responseState = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDebugConvert

