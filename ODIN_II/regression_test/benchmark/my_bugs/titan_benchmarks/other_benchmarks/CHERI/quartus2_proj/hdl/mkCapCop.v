//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Thu Jun 21 15:25:16 BST 2012
//
// Method conflict info:
// Method: capMem_request_get
// Conflict-free: capMem_response_put,
// 	       iGet,
// 	       putCapInst,
// 	       getCapResponse,
// 	       hadException,
// 	       commitWriteback
// Conflicts: capMem_request_get
//
// Method: capMem_response_put
// Conflict-free: capMem_request_get,
// 	       iGet,
// 	       putCapInst,
// 	       getCapResponse,
// 	       hadException,
// 	       commitWriteback
// Conflicts: capMem_response_put
//
// Method: iGet
// Conflict-free: capMem_request_get,
// 	       capMem_response_put,
// 	       putCapInst,
// 	       commitWriteback
// Sequenced before: getCapResponse, hadException
// Conflicts: iGet
//
// Method: putCapInst
// Conflict-free: capMem_request_get,
// 	       capMem_response_put,
// 	       iGet,
// 	       getCapResponse,
// 	       hadException,
// 	       commitWriteback
// Conflicts: putCapInst
//
// Method: getCapResponse
// Conflict-free: capMem_request_get,
// 	       capMem_response_put,
// 	       putCapInst,
// 	       hadException,
// 	       commitWriteback
// Sequenced after: iGet
// Conflicts: getCapResponse
//
// Method: hadException
// Conflict-free: capMem_request_get,
// 	       capMem_response_put,
// 	       putCapInst,
// 	       getCapResponse,
// 	       commitWriteback
// Sequenced after: iGet
// Conflicts: hadException
//
// Method: commitWriteback
// Conflict-free: capMem_request_get,
// 	       capMem_response_put,
// 	       iGet,
// 	       putCapInst,
// 	       getCapResponse,
// 	       hadException
// Conflicts: commitWriteback
//
//
// Ports:
// Name                         I/O  size props
// capMem_request_get             O   322 reg
// RDY_capMem_request_get         O     1 reg
// RDY_capMem_response_put        O     1
// iGet                           O    65
// RDY_iGet                       O     1
// RDY_putCapInst                 O     1
// getCapResponse                 O    65
// RDY_getCapResponse             O     1
// RDY_hadException               O     1 reg
// RDY_commitWriteback            O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// capMem_response_put            I   256
// iGet_capReq                    I    75
// putCapInst_capInst             I    87
// getCapResponse_capReq          I    75
// hadException_expEvent          I     1 reg
// commitWriteback_wbReq          I     5
// EN_capMem_response_put         I     1
// EN_putCapInst                  I     1
// EN_hadException                I     1
// EN_commitWriteback             I     1
// EN_capMem_request_get          I     1
// EN_iGet                        I     1
// EN_getCapResponse              I     1
//
// Combinational paths from inputs to outputs:
//   iGet_capReq -> iGet
//   getCapResponse_capReq -> getCapResponse
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkCapCop(CLK,
		RST_N,

		EN_capMem_request_get,
		capMem_request_get,
		RDY_capMem_request_get,

		capMem_response_put,
		EN_capMem_response_put,
		RDY_capMem_response_put,

		iGet_capReq,
		EN_iGet,
		iGet,
		RDY_iGet,

		putCapInst_capInst,
		EN_putCapInst,
		RDY_putCapInst,

		getCapResponse_capReq,
		EN_getCapResponse,
		getCapResponse,
		RDY_getCapResponse,

		hadException_expEvent,
		EN_hadException,
		RDY_hadException,

		commitWriteback_wbReq,
		EN_commitWriteback,
		RDY_commitWriteback);
  input  CLK;
  input  RST_N;

  // actionvalue method capMem_request_get
  input  EN_capMem_request_get;
  output [321 : 0] capMem_request_get;
  output RDY_capMem_request_get;

  // action method capMem_response_put
  input  [255 : 0] capMem_response_put;
  input  EN_capMem_response_put;
  output RDY_capMem_response_put;

  // actionvalue method iGet
  input  [74 : 0] iGet_capReq;
  input  EN_iGet;
  output [64 : 0] iGet;
  output RDY_iGet;

  // action method putCapInst
  input  [86 : 0] putCapInst_capInst;
  input  EN_putCapInst;
  output RDY_putCapInst;

  // actionvalue method getCapResponse
  input  [74 : 0] getCapResponse_capReq;
  input  EN_getCapResponse;
  output [64 : 0] getCapResponse;
  output RDY_getCapResponse;

  // action method hadException
  input  hadException_expEvent;
  input  EN_hadException;
  output RDY_hadException;

  // action method commitWriteback
  input  [4 : 0] commitWriteback_wbReq;
  input  EN_commitWriteback;
  output RDY_commitWriteback;

  // signals for module outputs
  wire [321 : 0] capMem_request_get;
  wire [64 : 0] getCapResponse, iGet;
  wire RDY_capMem_request_get,
       RDY_capMem_response_put,
       RDY_commitWriteback,
       RDY_getCapResponse,
       RDY_hadException,
       RDY_iGet,
       RDY_putCapInst;

  // inlined wires
  wire commitWritebackFifo_rw_enq$whas;

  // register capState
  reg [2 : 0] capState;
  reg [2 : 0] capState$D_IN;
  wire capState$EN;

  // register capWriteback
  reg [265 : 0] capWriteback;
  wire [265 : 0] capWriteback$D_IN;
  wire capWriteback$EN;

  // register commitWritebackFifo_taggedReg
  reg [1 : 0] commitWritebackFifo_taggedReg;
  wire [1 : 0] commitWritebackFifo_taggedReg$D_IN;
  wire commitWritebackFifo_taggedReg$EN;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count$D_IN;
  wire count$EN;

  // register pcc
  reg [255 : 0] pcc;
  wire [255 : 0] pcc$D_IN;
  wire pcc$EN;

  // register pipeEmpty
  reg pipeEmpty;
  wire pipeEmpty$D_IN, pipeEmpty$EN;

  // register writesCalculated
  reg [4 : 0] writesCalculated;
  wire [4 : 0] writesCalculated$D_IN;
  wire writesCalculated$EN;

  // register writesDone
  reg [4 : 0] writesDone;
  wire [4 : 0] writesDone$D_IN;
  wire writesDone$EN;

  // register writesIn
  reg [4 : 0] writesIn;
  wire [4 : 0] writesIn$D_IN;
  wire writesIn$EN;

  // ports of submodule baseRegs
  reg [63 : 0] baseRegs$D_IN;
  reg [4 : 0] baseRegs$ADDR_IN;
  wire [63 : 0] baseRegs$D_OUT_1, baseRegs$D_OUT_2;
  wire [4 : 0] baseRegs$ADDR_1,
	       baseRegs$ADDR_2,
	       baseRegs$ADDR_3,
	       baseRegs$ADDR_4,
	       baseRegs$ADDR_5;
  wire baseRegs$WE;

  // ports of submodule capInsts
  wire [96 : 0] capInsts$D_IN, capInsts$D_OUT;
  wire capInsts$CLR,
       capInsts$DEQ,
       capInsts$EMPTY_N,
       capInsts$ENQ,
       capInsts$FULL_N;

  // ports of submodule capMemInsts
  wire [334 : 0] capMemInsts$D_IN, capMemInsts$D_OUT;
  wire capMemInsts$CLR,
       capMemInsts$DEQ,
       capMemInsts$EMPTY_N,
       capMemInsts$ENQ,
       capMemInsts$FULL_N;

  // ports of submodule capWritebackTags
  wire [9 : 0] capWritebackTags$D_IN, capWritebackTags$D_OUT;
  wire capWritebackTags$CLR,
       capWritebackTags$DEQ,
       capWritebackTags$EMPTY_N,
       capWritebackTags$ENQ,
       capWritebackTags$FULL_N;

  // ports of submodule commitStore
  wire commitStore$CLR,
       commitStore$DEQ,
       commitStore$D_IN,
       commitStore$D_OUT,
       commitStore$EMPTY_N,
       commitStore$ENQ,
       commitStore$FULL_N;

  // ports of submodule exception
  wire exception$CLR,
       exception$DEQ,
       exception$D_IN,
       exception$D_OUT,
       exception$EMPTY_N,
       exception$ENQ,
       exception$FULL_N;

  // ports of submodule fetchFifoA
  wire [4 : 0] fetchFifoA$D_IN, fetchFifoA$D_OUT;
  wire fetchFifoA$CLR,
       fetchFifoA$DEQ,
       fetchFifoA$EMPTY_N,
       fetchFifoA$ENQ,
       fetchFifoA$FULL_N;

  // ports of submodule fetchFifoB
  wire [4 : 0] fetchFifoB$D_IN, fetchFifoB$D_OUT;
  wire fetchFifoB$CLR,
       fetchFifoB$DEQ,
       fetchFifoB$EMPTY_N,
       fetchFifoB$ENQ,
       fetchFifoB$FULL_N;

  // ports of submodule insts
  wire insts$CLR,
       insts$DEQ,
       insts$D_IN,
       insts$EMPTY_N,
       insts$ENQ,
       insts$FULL_N;

  // ports of submodule lengthRegs
  reg [63 : 0] lengthRegs$D_IN;
  reg [4 : 0] lengthRegs$ADDR_IN;
  wire [63 : 0] lengthRegs$D_OUT_1, lengthRegs$D_OUT_2;
  wire [4 : 0] lengthRegs$ADDR_1,
	       lengthRegs$ADDR_2,
	       lengthRegs$ADDR_3,
	       lengthRegs$ADDR_4,
	       lengthRegs$ADDR_5;
  wire lengthRegs$WE;

  // ports of submodule memAccesses
  wire [321 : 0] memAccesses$D_IN, memAccesses$D_OUT;
  wire memAccesses$CLR,
       memAccesses$DEQ,
       memAccesses$EMPTY_N,
       memAccesses$ENQ,
       memAccesses$FULL_N;

  // ports of submodule memResponse
  wire [255 : 0] memResponse$D_IN;
  wire memResponse$CLR, memResponse$DEQ, memResponse$ENQ, memResponse$FULL_N;

  // ports of submodule nextCapState
  wire [2 : 0] nextCapState$D_IN, nextCapState$D_OUT;
  wire nextCapState$CLR,
       nextCapState$DEQ,
       nextCapState$EMPTY_N,
       nextCapState$ENQ;

  // ports of submodule nextWillWriteback
  wire nextWillWriteback$CLR,
       nextWillWriteback$DEQ,
       nextWillWriteback$D_IN,
       nextWillWriteback$D_OUT,
       nextWillWriteback$EMPTY_N,
       nextWillWriteback$ENQ,
       nextWillWriteback$FULL_N;

  // ports of submodule oTypeRegs
  reg [63 : 0] oTypeRegs$D_IN;
  reg [4 : 0] oTypeRegs$ADDR_IN;
  wire [63 : 0] oTypeRegs$D_OUT_1;
  wire [4 : 0] oTypeRegs$ADDR_1,
	       oTypeRegs$ADDR_2,
	       oTypeRegs$ADDR_3,
	       oTypeRegs$ADDR_4,
	       oTypeRegs$ADDR_5;
  wire oTypeRegs$WE;

  // ports of submodule permRegs
  reg [63 : 0] permRegs$D_IN;
  reg [4 : 0] permRegs$ADDR_IN;
  wire [63 : 0] permRegs$D_OUT_1;
  wire [4 : 0] permRegs$ADDR_1,
	       permRegs$ADDR_2,
	       permRegs$ADDR_3,
	       permRegs$ADDR_4,
	       permRegs$ADDR_5;
  wire permRegs$WE;

  // ports of submodule startExp
  wire startExp$CLR,
       startExp$DEQ,
       startExp$D_IN,
       startExp$EMPTY_N,
       startExp$ENQ,
       startExp$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_capMemoryLoad,
       WILL_FIRE_RL_capMemoryStore,
       WILL_FIRE_RL_commitWritebackFifo_rule_enq,
       WILL_FIRE_RL_finishException,
       WILL_FIRE_RL_startException,
       WILL_FIRE_RL_writeBack;

  // inputs to muxes for submodule ports
  wire [321 : 0] MUX_memAccesses$enq_1__VAL_1, MUX_memAccesses$enq_1__VAL_2;
  wire [265 : 0] MUX_capWriteback$write_1__VAL_1,
		 MUX_capWriteback$write_1__VAL_2;
  wire [255 : 0] MUX_pcc$write_1__VAL_2;
  wire [9 : 0] MUX_capWritebackTags$enq_1__VAL_1,
	       MUX_capWritebackTags$enq_1__VAL_2;
  wire [4 : 0] MUX_fetchFifoA$enq_1__VAL_1,
	       MUX_fetchFifoA$enq_1__VAL_2,
	       MUX_writesCalculated$write_1__VAL_1;
  wire [2 : 0] MUX_capState$write_1__VAL_2;
  wire MUX_baseRegs$upd_1__SEL_1,
       MUX_capState$write_1__SEL_1,
       MUX_capState$write_1__SEL_2,
       MUX_capState$write_1__SEL_4,
       MUX_capWriteback$write_1__SEL_1,
       MUX_capWritebackTags$enq_1__SEL_1,
       MUX_memAccesses$enq_1__SEL_1,
       MUX_pcc$write_1__SEL_1,
       MUX_writesCalculated$write_1__SEL_1;

  // remaining internal signals
  reg [127 : 0] CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q6;
  reg [63 : 0] CASE_capInstsD_OUT_BITS_96_TO_92_IF_NOT_capIn_ETC__q4,
	       IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889,
	       IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d895,
	       _theResult_____8_fst_oType_eaddr__h13470;
  reg [14 : 0] CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q5;
  reg [5 : 0] x__h6671;
  reg [4 : 0] CASE_capInstsD_OUT_BITS_96_TO_92_31_0_capInst_ETC__q7,
	      CASE_capMemInstsD_OUT_BITS_334_TO_330_31_0_ca_ETC__q8,
	      CASE_putCapInst_capInst_BITS_86_TO_82_0_1_putC_ETC__q3,
	      CASE_putCapInst_capInst_BITS_86_TO_82_31_0_put_ETC__q9,
	      x__h13350;
  reg CASE_capInstsD_OUT_BITS_17_TO_15_NOT_capInsts_ETC__q2,
      CASE_capInstsD_OUT_BITS_96_TO_92_NOT_capInsts_ETC__q1,
      IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d819,
      IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d634;
  wire [255 : 0] IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d960;
  wire [254 : 0] IF_capInsts_first__28_BITS_96_TO_92_29_EQ_0_32_ETC___d679,
		 IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d680,
		 IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1152;
  wire [127 : 0] IF_IF_capInsts_first__28_BITS_9_TO_5_02_EQ_cap_ETC___d669,
		 IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1150,
		 IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d664;
  wire [73 : 0] getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d558;
  wire [63 : 0] IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d940,
		IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1109,
		IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d542,
		IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968,
		_theResult_____8_fst_oType_eaddr__h13460,
		writeback___1_base__h13507,
		x1_avValue_base__h9411,
		x1_avValue_oType_eaddr__h9410;
  wire [47 : 0] x1_avValue_reserved__h9409;
  wire [39 : 0] IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1133;
  wire [23 : 0] IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1110;
  wire [15 : 0] x__h14462;
  wire [14 : 0] IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1149;
  wire [5 : 0] x__h12726;
  wire [4 : 0] IF_putCapInst_capInst_BITS_86_TO_82_11_EQ_0_12_ETC___d939,
	       x__h8745,
	       x__h8753;
  wire IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d820,
       IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d823,
       IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d635,
       IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d825,
       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1030,
       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073,
       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d565,
       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d626,
       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d629,
       NOT_capInsts_first__28_BITS_96_TO_92_29_EQ_0_3_ETC___d569,
       capInsts_first__28_BITS_96_TO_92_29_EQ_16_34_O_ETC___d817,
       capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_OR_ETC___d589,
       capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_OR_ETC___d730,
       capState_read_EQ_5_9_OR_capState_read_EQ_1_6_0_ETC___d906,
       commitWriteback_wbReq_BITS_3_TO_0_15_EQ_capWri_ETC___d918,
       getCapResponse_capReq_BITS_45_TO_6_35_PLUS_0_C_ETC___d1135,
       getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d971,
       getCapResponse_capReq_BITS_69_TO_6_54_ULT_IF_c_ETC___d972,
       pcc_7_BIT_244_46_OR_NOT_IF_capInsts_first__28__ETC___d822;

  // actionvalue method capMem_request_get
  assign capMem_request_get = memAccesses$D_OUT ;
  assign RDY_capMem_request_get = memAccesses$EMPTY_N ;

  // action method capMem_response_put
  assign RDY_capMem_response_put =
	     memResponse$FULL_N && capMemInsts$EMPTY_N && capState == 3'd2 &&
	     capWritebackTags$FULL_N ;

  // actionvalue method iGet
  assign iGet =
	     { iGet_capReq[45:6] + { 34'd0, x__h6671 } <= pcc[39:0],
	       pcc[127:104] + iGet_capReq[69:46],
	       pcc[103:64] + iGet_capReq[45:6] } ;
  assign RDY_iGet = !exception$EMPTY_N && insts$FULL_N ;

  // action method putCapInst
  assign RDY_putCapInst =
	     capState == 3'd5 && writesIn - writesDone <= 5'd2 &&
	     fetchFifoA$FULL_N &&
	     fetchFifoB$FULL_N &&
	     capInsts$FULL_N &&
	     nextWillWriteback$FULL_N ;

  // actionvalue method getCapResponse
  assign getCapResponse =
	     { IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d825,
	       IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d940 } ;
  assign RDY_getCapResponse =
	     nextWillWriteback$EMPTY_N &&
	     capState_read_EQ_5_9_OR_capState_read_EQ_1_6_0_ETC___d906 &&
	     fetchFifoA$EMPTY_N &&
	     capInsts$EMPTY_N &&
	     fetchFifoB$EMPTY_N &&
	     capMemInsts$FULL_N &&
	     capWritebackTags$FULL_N ;

  // action method hadException
  assign RDY_hadException = exception$FULL_N ;

  // action method commitWriteback
  assign RDY_commitWriteback =
	     capState != 3'd0 && capState != 3'd3 &&
	     capWritebackTags$EMPTY_N &&
	     insts$EMPTY_N &&
	     !commitWritebackFifo_taggedReg[1] &&
	     commitStore$FULL_N ;

  // submodule baseRegs
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd64),
	    .lo(5'd0),
	    .hi(5'd31)) baseRegs(.CLK(CLK),
				 .ADDR_1(baseRegs$ADDR_1),
				 .ADDR_2(baseRegs$ADDR_2),
				 .ADDR_3(baseRegs$ADDR_3),
				 .ADDR_4(baseRegs$ADDR_4),
				 .ADDR_5(baseRegs$ADDR_5),
				 .ADDR_IN(baseRegs$ADDR_IN),
				 .D_IN(baseRegs$D_IN),
				 .WE(baseRegs$WE),
				 .D_OUT_1(baseRegs$D_OUT_1),
				 .D_OUT_2(baseRegs$D_OUT_2),
				 .D_OUT_3(),
				 .D_OUT_4(),
				 .D_OUT_5());

  // submodule capInsts
  SizedFIFO #(.p1width(32'd97),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) capInsts(.RST_N(RST_N),
					.CLK(CLK),
					.D_IN(capInsts$D_IN),
					.ENQ(capInsts$ENQ),
					.DEQ(capInsts$DEQ),
					.CLR(capInsts$CLR),
					.D_OUT(capInsts$D_OUT),
					.FULL_N(capInsts$FULL_N),
					.EMPTY_N(capInsts$EMPTY_N));

  // submodule capMemInsts
  FIFO1 #(.width(32'd335), .guarded(32'd1)) capMemInsts(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(capMemInsts$D_IN),
							.ENQ(capMemInsts$ENQ),
							.DEQ(capMemInsts$DEQ),
							.CLR(capMemInsts$CLR),
							.D_OUT(capMemInsts$D_OUT),
							.FULL_N(capMemInsts$FULL_N),
							.EMPTY_N(capMemInsts$EMPTY_N));

  // submodule capWritebackTags
  FIFO2 #(.width(32'd10), .guarded(32'd1)) capWritebackTags(.RST_N(RST_N),
							    .CLK(CLK),
							    .D_IN(capWritebackTags$D_IN),
							    .ENQ(capWritebackTags$ENQ),
							    .DEQ(capWritebackTags$DEQ),
							    .CLR(capWritebackTags$CLR),
							    .D_OUT(capWritebackTags$D_OUT),
							    .FULL_N(capWritebackTags$FULL_N),
							    .EMPTY_N(capWritebackTags$EMPTY_N));

  // submodule commitStore
  FIFO2 #(.width(32'd1), .guarded(32'd1)) commitStore(.RST_N(RST_N),
						      .CLK(CLK),
						      .D_IN(commitStore$D_IN),
						      .ENQ(commitStore$ENQ),
						      .DEQ(commitStore$DEQ),
						      .CLR(commitStore$CLR),
						      .D_OUT(commitStore$D_OUT),
						      .FULL_N(commitStore$FULL_N),
						      .EMPTY_N(commitStore$EMPTY_N));

  // submodule exception
  FIFO1 #(.width(32'd1), .guarded(32'd1)) exception(.RST_N(RST_N),
						    .CLK(CLK),
						    .D_IN(exception$D_IN),
						    .ENQ(exception$ENQ),
						    .DEQ(exception$DEQ),
						    .CLR(exception$CLR),
						    .D_OUT(exception$D_OUT),
						    .FULL_N(exception$FULL_N),
						    .EMPTY_N(exception$EMPTY_N));

  // submodule fetchFifoA
  SizedFIFO #(.p1width(32'd5),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fetchFifoA(.RST_N(RST_N),
					  .CLK(CLK),
					  .D_IN(fetchFifoA$D_IN),
					  .ENQ(fetchFifoA$ENQ),
					  .DEQ(fetchFifoA$DEQ),
					  .CLR(fetchFifoA$CLR),
					  .D_OUT(fetchFifoA$D_OUT),
					  .FULL_N(fetchFifoA$FULL_N),
					  .EMPTY_N(fetchFifoA$EMPTY_N));

  // submodule fetchFifoB
  SizedFIFO #(.p1width(32'd5),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) fetchFifoB(.RST_N(RST_N),
					  .CLK(CLK),
					  .D_IN(fetchFifoB$D_IN),
					  .ENQ(fetchFifoB$ENQ),
					  .DEQ(fetchFifoB$DEQ),
					  .CLR(fetchFifoB$CLR),
					  .D_OUT(fetchFifoB$D_OUT),
					  .FULL_N(fetchFifoB$FULL_N),
					  .EMPTY_N(fetchFifoB$EMPTY_N));

  // submodule insts
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) insts(.RST_N(RST_N),
				     .CLK(CLK),
				     .D_IN(insts$D_IN),
				     .ENQ(insts$ENQ),
				     .DEQ(insts$DEQ),
				     .CLR(insts$CLR),
				     .D_OUT(),
				     .FULL_N(insts$FULL_N),
				     .EMPTY_N(insts$EMPTY_N));

  // submodule lengthRegs
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd64),
	    .lo(5'd0),
	    .hi(5'd31)) lengthRegs(.CLK(CLK),
				   .ADDR_1(lengthRegs$ADDR_1),
				   .ADDR_2(lengthRegs$ADDR_2),
				   .ADDR_3(lengthRegs$ADDR_3),
				   .ADDR_4(lengthRegs$ADDR_4),
				   .ADDR_5(lengthRegs$ADDR_5),
				   .ADDR_IN(lengthRegs$ADDR_IN),
				   .D_IN(lengthRegs$D_IN),
				   .WE(lengthRegs$WE),
				   .D_OUT_1(lengthRegs$D_OUT_1),
				   .D_OUT_2(lengthRegs$D_OUT_2),
				   .D_OUT_3(),
				   .D_OUT_4(),
				   .D_OUT_5());

  // submodule memAccesses
  FIFO1 #(.width(32'd322), .guarded(32'd1)) memAccesses(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(memAccesses$D_IN),
							.ENQ(memAccesses$ENQ),
							.DEQ(memAccesses$DEQ),
							.CLR(memAccesses$CLR),
							.D_OUT(memAccesses$D_OUT),
							.FULL_N(memAccesses$FULL_N),
							.EMPTY_N(memAccesses$EMPTY_N));

  // submodule memResponse
  FIFO2 #(.width(32'd256), .guarded(32'd0)) memResponse(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(memResponse$D_IN),
							.ENQ(memResponse$ENQ),
							.DEQ(memResponse$DEQ),
							.CLR(memResponse$CLR),
							.D_OUT(),
							.FULL_N(memResponse$FULL_N),
							.EMPTY_N());

  // submodule nextCapState
  FIFO2 #(.width(32'd3), .guarded(32'd0)) nextCapState(.RST_N(RST_N),
						       .CLK(CLK),
						       .D_IN(nextCapState$D_IN),
						       .ENQ(nextCapState$ENQ),
						       .DEQ(nextCapState$DEQ),
						       .CLR(nextCapState$CLR),
						       .D_OUT(nextCapState$D_OUT),
						       .FULL_N(),
						       .EMPTY_N(nextCapState$EMPTY_N));

  // submodule nextWillWriteback
  FIFO2 #(.width(32'd1), .guarded(32'd1)) nextWillWriteback(.RST_N(RST_N),
							    .CLK(CLK),
							    .D_IN(nextWillWriteback$D_IN),
							    .ENQ(nextWillWriteback$ENQ),
							    .DEQ(nextWillWriteback$DEQ),
							    .CLR(nextWillWriteback$CLR),
							    .D_OUT(nextWillWriteback$D_OUT),
							    .FULL_N(nextWillWriteback$FULL_N),
							    .EMPTY_N(nextWillWriteback$EMPTY_N));

  // submodule oTypeRegs
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd64),
	    .lo(5'd0),
	    .hi(5'd31)) oTypeRegs(.CLK(CLK),
				  .ADDR_1(oTypeRegs$ADDR_1),
				  .ADDR_2(oTypeRegs$ADDR_2),
				  .ADDR_3(oTypeRegs$ADDR_3),
				  .ADDR_4(oTypeRegs$ADDR_4),
				  .ADDR_5(oTypeRegs$ADDR_5),
				  .ADDR_IN(oTypeRegs$ADDR_IN),
				  .D_IN(oTypeRegs$D_IN),
				  .WE(oTypeRegs$WE),
				  .D_OUT_1(oTypeRegs$D_OUT_1),
				  .D_OUT_2(),
				  .D_OUT_3(),
				  .D_OUT_4(),
				  .D_OUT_5());

  // submodule permRegs
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd64),
	    .lo(5'd0),
	    .hi(5'd31)) permRegs(.CLK(CLK),
				 .ADDR_1(permRegs$ADDR_1),
				 .ADDR_2(permRegs$ADDR_2),
				 .ADDR_3(permRegs$ADDR_3),
				 .ADDR_4(permRegs$ADDR_4),
				 .ADDR_5(permRegs$ADDR_5),
				 .ADDR_IN(permRegs$ADDR_IN),
				 .D_IN(permRegs$D_IN),
				 .WE(permRegs$WE),
				 .D_OUT_1(permRegs$D_OUT_1),
				 .D_OUT_2(),
				 .D_OUT_3(),
				 .D_OUT_4(),
				 .D_OUT_5());

  // submodule startExp
  FIFO1 #(.width(32'd1), .guarded(32'd1)) startExp(.RST_N(RST_N),
						   .CLK(CLK),
						   .D_IN(startExp$D_IN),
						   .ENQ(startExp$ENQ),
						   .DEQ(startExp$DEQ),
						   .CLR(startExp$CLR),
						   .D_OUT(),
						   .FULL_N(startExp$FULL_N),
						   .EMPTY_N(startExp$EMPTY_N));

  // rule RL_capMemoryLoad
  assign WILL_FIRE_RL_capMemoryLoad =
	     capMemInsts$EMPTY_N && memAccesses$FULL_N && capState == 3'd1 &&
	     capMemInsts$D_OUT[334:330] == 5'd10 ;

  // rule RL_capMemoryStore
  assign WILL_FIRE_RL_capMemoryStore =
	     capMemInsts$EMPTY_N && commitStore$EMPTY_N &&
	     memAccesses$FULL_N &&
	     (capState == 3'd5 || capState == 3'd1) &&
	     capMemInsts$D_OUT[334:330] == 5'd9 ;

  // rule RL_startException
  assign WILL_FIRE_RL_startException =
	     exception$EMPTY_N && fetchFifoA$FULL_N && startExp$FULL_N &&
	     capState == 3'd3 ;

  // rule RL_finishException
  assign WILL_FIRE_RL_finishException =
	     exception$EMPTY_N && fetchFifoA$EMPTY_N && startExp$EMPTY_N &&
	     capState == 3'd3 &&
	     !WILL_FIRE_RL_startException ;

  // rule RL_writeBack
  assign WILL_FIRE_RL_writeBack =
	     (commitWritebackFifo_taggedReg[1] ||
	      commitWritebackFifo_rw_enq$whas) &&
	     capState != 3'd0 &&
	     capState != 3'd3 ;

  // rule RL_commitWritebackFifo_rule_enq
  assign WILL_FIRE_RL_commitWritebackFifo_rule_enq =
	     commitWritebackFifo_rw_enq$whas && !WILL_FIRE_RL_writeBack ;

  // inputs to muxes for submodule ports
  assign MUX_baseRegs$upd_1__SEL_1 =
	     WILL_FIRE_RL_startException && !exception$D_OUT ;
  assign MUX_capState$write_1__SEL_1 = capState == 3'd0 && count == 5'd31 ;
  assign MUX_capState$write_1__SEL_2 =
	     capState == 3'd5 &&
	     (exception$EMPTY_N && pipeEmpty || nextCapState$EMPTY_N) ;
  assign MUX_capState$write_1__SEL_4 =
	     WILL_FIRE_RL_finishException || EN_capMem_response_put ;
  assign MUX_capWriteback$write_1__SEL_1 =
	     EN_getCapResponse &&
	     capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_OR_ETC___d589 ;
  assign MUX_capWritebackTags$enq_1__SEL_1 =
	     EN_getCapResponse && capInsts$D_OUT[96:92] != 5'd10 ;
  assign MUX_memAccesses$enq_1__SEL_1 =
	     WILL_FIRE_RL_capMemoryStore && capMemInsts$D_OUT[73] &&
	     commitStore$D_OUT ;
  assign MUX_pcc$write_1__SEL_1 =
	     EN_getCapResponse &&
	     (capInsts$D_OUT[96:92] == 5'd7 ||
	      capInsts$D_OUT[96:92] == 5'd8) ;
  assign MUX_writesCalculated$write_1__SEL_1 =
	     EN_getCapResponse &&
	     (capInsts$D_OUT[96:92] == 5'd4 ||
	      NOT_capInsts_first__28_BITS_96_TO_92_29_EQ_0_3_ETC___d569) ;
  assign MUX_capState$write_1__VAL_2 =
	     (exception$EMPTY_N && pipeEmpty) ? 3'd3 : nextCapState$D_OUT ;
  assign MUX_capWriteback$write_1__VAL_1 =
	     { 1'd1,
	       IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d635,
	       IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d680,
	       x__h13350,
	       capInsts$D_OUT[13:10] } ;
  assign MUX_capWriteback$write_1__VAL_2 =
	     { (pcc[244] || capMemInsts$D_OUT[8:4] != 5'd28) &&
	       (pcc[243] || capMemInsts$D_OUT[8:4] != 5'd29) &&
	       (pcc[242] || capMemInsts$D_OUT[8:4] != 5'd30) &&
	       (pcc[241] || capMemInsts$D_OUT[8:4] != 5'd31),
	       capMem_response_put,
	       capMemInsts$D_OUT[8:0] } ;
  assign MUX_capWritebackTags$enq_1__VAL_1 =
	     { CASE_capInstsD_OUT_BITS_96_TO_92_31_0_capInst_ETC__q7,
	       capInsts$D_OUT[13:10],
	       capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_OR_ETC___d730 } ;
  assign MUX_capWritebackTags$enq_1__VAL_2 =
	     { CASE_capMemInstsD_OUT_BITS_334_TO_330_31_0_ca_ETC__q8,
	       capMemInsts$D_OUT[3:0],
	       (pcc[244] || capMemInsts$D_OUT[8:4] != 5'd28) &&
	       (pcc[243] || capMemInsts$D_OUT[8:4] != 5'd29) &&
	       (pcc[242] || capMemInsts$D_OUT[8:4] != 5'd30) &&
	       (pcc[241] || capMemInsts$D_OUT[8:4] != 5'd31) } ;
  assign MUX_fetchFifoA$enq_1__VAL_1 = exception$D_OUT ? 5'd31 : 5'd29 ;
  assign MUX_fetchFifoA$enq_1__VAL_2 =
	     (putCapInst_capInst[86:82] == 5'd2 ||
	      putCapInst_capInst[86:82] == 5'd3 ||
	      putCapInst_capInst[86:82] == 5'd5 ||
	      putCapInst_capInst[86:82] == 5'd6) ?
	       5'd0 :
	       IF_putCapInst_capInst_BITS_86_TO_82_11_EQ_0_12_ETC___d939 ;
  assign MUX_memAccesses$enq_1__VAL_1 =
	     { 2'd1, capMemInsts$D_OUT[72:9], capMemInsts$D_OUT[329:74] } ;
  assign MUX_memAccesses$enq_1__VAL_2 =
	     { 2'd0,
	       capMemInsts$D_OUT[72:9],
	       256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_pcc$write_1__VAL_2 =
	     { permRegs$D_OUT_1,
	       oTypeRegs$D_OUT_1,
	       baseRegs$D_OUT_2,
	       lengthRegs$D_OUT_2 } ;
  assign MUX_writesCalculated$write_1__VAL_1 = writesCalculated + 5'd1 ;

  // inlined wires
  assign commitWritebackFifo_rw_enq$whas =
	     EN_commitWriteback &&
	     commitWriteback_wbReq_BITS_3_TO_0_15_EQ_capWri_ETC___d918 &&
	     capWritebackTags$D_OUT[0] &&
	     capWritebackTags$D_OUT[4:1] == capWriteback[3:0] &&
	     commitWriteback_wbReq[4] ;

  // register capState
  always@(MUX_capState$write_1__SEL_2 or
	  MUX_capState$write_1__VAL_2 or
	  WILL_FIRE_RL_capMemoryLoad or
	  MUX_capState$write_1__SEL_1 or MUX_capState$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_capState$write_1__SEL_2:
	  capState$D_IN = MUX_capState$write_1__VAL_2;
      WILL_FIRE_RL_capMemoryLoad: capState$D_IN = 3'd2;
      MUX_capState$write_1__SEL_1 || MUX_capState$write_1__SEL_4:
	  capState$D_IN = 3'd5;
      default: capState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign capState$EN =
	     capState == 3'd0 && count == 5'd31 ||
	     MUX_capState$write_1__SEL_2 ||
	     WILL_FIRE_RL_capMemoryLoad ||
	     WILL_FIRE_RL_finishException ||
	     EN_capMem_response_put ;

  // register capWriteback
  assign capWriteback$D_IN =
	     MUX_capWriteback$write_1__SEL_1 ?
	       MUX_capWriteback$write_1__VAL_1 :
	       MUX_capWriteback$write_1__VAL_2 ;
  assign capWriteback$EN =
	     EN_getCapResponse &&
	     capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_OR_ETC___d589 ||
	     EN_capMem_response_put ;

  // register commitWritebackFifo_taggedReg
  assign commitWritebackFifo_taggedReg$D_IN =
	     WILL_FIRE_RL_commitWritebackFifo_rule_enq ? 2'd3 : 2'd0 ;
  assign commitWritebackFifo_taggedReg$EN =
	     WILL_FIRE_RL_commitWritebackFifo_rule_enq ||
	     (commitWritebackFifo_taggedReg[1] ||
	      commitWritebackFifo_rw_enq$whas) &&
	     capState != 3'd0 &&
	     capState != 3'd3 ;

  // register count
  assign count$D_IN = count + 5'd1 ;
  assign count$EN = capState == 3'd0 ;

  // register pcc
  assign pcc$D_IN =
	     MUX_pcc$write_1__SEL_1 ?
	       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d960 :
	       MUX_pcc$write_1__VAL_2 ;
  assign pcc$EN =
	     EN_getCapResponse &&
	     (capInsts$D_OUT[96:92] == 5'd7 ||
	      capInsts$D_OUT[96:92] == 5'd8) ||
	     WILL_FIRE_RL_finishException ;

  // register pipeEmpty
  assign pipeEmpty$D_IN = !insts$EMPTY_N ;
  assign pipeEmpty$EN = 1'd1 ;

  // register writesCalculated
  assign writesCalculated$D_IN =
	     MUX_writesCalculated$write_1__SEL_1 ?
	       MUX_writesCalculated$write_1__VAL_1 :
	       MUX_writesCalculated$write_1__VAL_1 ;
  assign writesCalculated$EN =
	     EN_getCapResponse &&
	     (capInsts$D_OUT[96:92] == 5'd4 ||
	      NOT_capInsts_first__28_BITS_96_TO_92_29_EQ_0_3_ETC___d569) ||
	     EN_capMem_response_put ;

  // register writesDone
  assign writesDone$D_IN = writesDone + 5'd1 ;
  assign writesDone$EN =
	     EN_commitWriteback &&
	     commitWriteback_wbReq_BITS_3_TO_0_15_EQ_capWri_ETC___d918 &&
	     capWritebackTags$D_OUT[0] &&
	     capWritebackTags$D_OUT[4:1] == capWriteback[3:0] ;

  // register writesIn
  assign writesIn$D_IN = writesIn + 5'd1 ;
  assign writesIn$EN =
	     EN_putCapInst &&
	     (putCapInst_capInst[86:82] == 5'd4 ||
	      putCapInst_capInst[86:82] == 5'd7 ||
	      putCapInst_capInst[86:82] == 5'd1 ||
	      putCapInst_capInst[86:82] == 5'd10) ;

  // submodule baseRegs
  assign baseRegs$ADDR_1 = fetchFifoB$D_OUT ;
  assign baseRegs$ADDR_2 = fetchFifoA$D_OUT ;
  assign baseRegs$ADDR_3 = 5'h0 ;
  assign baseRegs$ADDR_4 = 5'h0 ;
  assign baseRegs$ADDR_5 = 5'h0 ;
  always@(MUX_baseRegs$upd_1__SEL_1 or
	  WILL_FIRE_RL_writeBack or capWriteback or capState or count)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_baseRegs$upd_1__SEL_1: baseRegs$ADDR_IN = 5'd31;
      WILL_FIRE_RL_writeBack: baseRegs$ADDR_IN = capWriteback[8:4];
      capState == 3'd0: baseRegs$ADDR_IN = count;
      default: baseRegs$ADDR_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_baseRegs$upd_1__SEL_1 or
	  pcc or WILL_FIRE_RL_writeBack or capWriteback or capState)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_baseRegs$upd_1__SEL_1: baseRegs$D_IN = pcc[127:64];
      WILL_FIRE_RL_writeBack: baseRegs$D_IN = capWriteback[136:73];
      capState == 3'd0: baseRegs$D_IN = 64'b0;
      default: baseRegs$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign baseRegs$WE =
	     WILL_FIRE_RL_startException && !exception$D_OUT ||
	     WILL_FIRE_RL_writeBack ||
	     capState == 3'd0 ;

  // submodule capInsts
  assign capInsts$D_IN =
	     { CASE_putCapInst_capInst_BITS_86_TO_82_31_0_put_ETC__q9,
	       putCapInst_capInst[81:0],
	       x__h8745,
	       x__h8753 } ;
  assign capInsts$ENQ = EN_putCapInst ;
  assign capInsts$DEQ = EN_getCapResponse ;
  assign capInsts$CLR = 1'b0 ;

  // submodule capMemInsts
  assign capMemInsts$D_IN =
	     { (capInsts$D_OUT[96:92] == 5'd10) ?
		 capInsts$D_OUT[96:92] :
		 5'd9,
	       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d960,
	       getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d558 } ;
  assign capMemInsts$ENQ =
	     EN_getCapResponse &&
	     (capInsts$D_OUT[96:92] == 5'd10 ||
	      capInsts$D_OUT[96:92] == 5'd9) ;
  assign capMemInsts$DEQ =
	     WILL_FIRE_RL_capMemoryStore || EN_capMem_response_put ;
  assign capMemInsts$CLR = 1'b0 ;

  // submodule capWritebackTags
  assign capWritebackTags$D_IN =
	     MUX_capWritebackTags$enq_1__SEL_1 ?
	       MUX_capWritebackTags$enq_1__VAL_1 :
	       MUX_capWritebackTags$enq_1__VAL_2 ;
  assign capWritebackTags$ENQ =
	     EN_getCapResponse && capInsts$D_OUT[96:92] != 5'd10 ||
	     EN_capMem_response_put ;
  assign capWritebackTags$DEQ =
	     EN_commitWriteback &&
	     commitWriteback_wbReq_BITS_3_TO_0_15_EQ_capWri_ETC___d918 ;
  assign capWritebackTags$CLR = 1'b0 ;

  // submodule commitStore
  assign commitStore$D_IN = commitWriteback_wbReq[4] ;
  assign commitStore$ENQ =
	     EN_commitWriteback &&
	     commitWriteback_wbReq_BITS_3_TO_0_15_EQ_capWri_ETC___d918 &&
	     capWritebackTags$D_OUT[9:5] == 5'd9 ;
  assign commitStore$DEQ = WILL_FIRE_RL_capMemoryStore ;
  assign commitStore$CLR = 1'b0 ;

  // submodule exception
  assign exception$D_IN = hadException_expEvent ;
  assign exception$ENQ = EN_hadException ;
  assign exception$DEQ = WILL_FIRE_RL_finishException ;
  assign exception$CLR = 1'b0 ;

  // submodule fetchFifoA
  assign fetchFifoA$D_IN =
	     WILL_FIRE_RL_startException ?
	       MUX_fetchFifoA$enq_1__VAL_1 :
	       MUX_fetchFifoA$enq_1__VAL_2 ;
  assign fetchFifoA$ENQ = WILL_FIRE_RL_startException || EN_putCapInst ;
  assign fetchFifoA$DEQ = WILL_FIRE_RL_finishException || EN_getCapResponse ;
  assign fetchFifoA$CLR = 1'b0 ;

  // submodule fetchFifoB
  assign fetchFifoB$D_IN =
	     (putCapInst_capInst[86:82] != 5'd9 &&
	      putCapInst_capInst[86:82] != 5'd10) ?
	       5'd0 :
	       putCapInst_capInst[76:72] ;
  assign fetchFifoB$ENQ = EN_putCapInst ;
  assign fetchFifoB$DEQ = EN_getCapResponse ;
  assign fetchFifoB$CLR = 1'b0 ;

  // submodule insts
  assign insts$D_IN = 1'd1 ;
  assign insts$ENQ = EN_iGet ;
  assign insts$DEQ = EN_commitWriteback ;
  assign insts$CLR = 1'b0 ;

  // submodule lengthRegs
  assign lengthRegs$ADDR_1 = fetchFifoB$D_OUT ;
  assign lengthRegs$ADDR_2 = fetchFifoA$D_OUT ;
  assign lengthRegs$ADDR_3 = 5'h0 ;
  assign lengthRegs$ADDR_4 = 5'h0 ;
  assign lengthRegs$ADDR_5 = 5'h0 ;
  always@(MUX_baseRegs$upd_1__SEL_1 or
	  WILL_FIRE_RL_writeBack or capWriteback or capState or count)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_baseRegs$upd_1__SEL_1: lengthRegs$ADDR_IN = 5'd31;
      WILL_FIRE_RL_writeBack: lengthRegs$ADDR_IN = capWriteback[8:4];
      capState == 3'd0: lengthRegs$ADDR_IN = count;
      default: lengthRegs$ADDR_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_baseRegs$upd_1__SEL_1 or
	  pcc or WILL_FIRE_RL_writeBack or capWriteback or capState)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_baseRegs$upd_1__SEL_1: lengthRegs$D_IN = pcc[63:0];
      WILL_FIRE_RL_writeBack: lengthRegs$D_IN = capWriteback[72:9];
      capState == 3'd0: lengthRegs$D_IN = 64'hFFFFFFFFFFFFFFFF;
      default: lengthRegs$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign lengthRegs$WE =
	     WILL_FIRE_RL_startException && !exception$D_OUT ||
	     WILL_FIRE_RL_writeBack ||
	     capState == 3'd0 ;

  // submodule memAccesses
  assign memAccesses$D_IN =
	     MUX_memAccesses$enq_1__SEL_1 ?
	       MUX_memAccesses$enq_1__VAL_1 :
	       MUX_memAccesses$enq_1__VAL_2 ;
  assign memAccesses$ENQ =
	     WILL_FIRE_RL_capMemoryStore && capMemInsts$D_OUT[73] &&
	     commitStore$D_OUT ||
	     WILL_FIRE_RL_capMemoryLoad && capMemInsts$D_OUT[73] ;
  assign memAccesses$DEQ = EN_capMem_request_get ;
  assign memAccesses$CLR = 1'b0 ;

  // submodule memResponse
  assign memResponse$D_IN = 256'h0 ;
  assign memResponse$ENQ = 1'b0 ;
  assign memResponse$DEQ = 1'b0 ;
  assign memResponse$CLR = 1'b0 ;

  // submodule nextCapState
  assign nextCapState$D_IN =
	     (putCapInst_capInst[86:82] != 5'd2 &&
	      putCapInst_capInst[86:82] != 5'd3 &&
	      putCapInst_capInst[86:82] != 5'd5 &&
	      putCapInst_capInst[86:82] != 5'd6 &&
	      putCapInst_capInst[86:82] != 5'd10 &&
	      putCapInst_capInst[86:82] != 5'd11) ?
	       3'd5 :
	       ((putCapInst_capInst[86:82] == 5'd10) ? 3'd1 : 3'd5) ;
  assign nextCapState$ENQ = EN_putCapInst ;
  assign nextCapState$DEQ =
	     capState == 3'd5 && (!exception$EMPTY_N || !pipeEmpty) &&
	     nextCapState$EMPTY_N ;
  assign nextCapState$CLR = 1'b0 ;

  // submodule nextWillWriteback
  assign nextWillWriteback$D_IN =
	     putCapInst_capInst[86:82] == 5'd4 ||
	     putCapInst_capInst[86:82] == 5'd7 ||
	     putCapInst_capInst[86:82] == 5'd1 ||
	     putCapInst_capInst[86:82] == 5'd10 ;
  assign nextWillWriteback$ENQ = EN_putCapInst ;
  assign nextWillWriteback$DEQ = EN_getCapResponse ;
  assign nextWillWriteback$CLR = 1'b0 ;

  // submodule oTypeRegs
  assign oTypeRegs$ADDR_1 = fetchFifoA$D_OUT ;
  assign oTypeRegs$ADDR_2 = 5'h0 ;
  assign oTypeRegs$ADDR_3 = 5'h0 ;
  assign oTypeRegs$ADDR_4 = 5'h0 ;
  assign oTypeRegs$ADDR_5 = 5'h0 ;
  always@(MUX_baseRegs$upd_1__SEL_1 or
	  WILL_FIRE_RL_writeBack or capWriteback or capState or count)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_baseRegs$upd_1__SEL_1: oTypeRegs$ADDR_IN = 5'd31;
      WILL_FIRE_RL_writeBack: oTypeRegs$ADDR_IN = capWriteback[8:4];
      capState == 3'd0: oTypeRegs$ADDR_IN = count;
      default: oTypeRegs$ADDR_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_baseRegs$upd_1__SEL_1 or
	  pcc or WILL_FIRE_RL_writeBack or capWriteback or capState)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_baseRegs$upd_1__SEL_1: oTypeRegs$D_IN = pcc[191:128];
      WILL_FIRE_RL_writeBack: oTypeRegs$D_IN = capWriteback[200:137];
      capState == 3'd0: oTypeRegs$D_IN = 64'b0;
      default: oTypeRegs$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign oTypeRegs$WE =
	     WILL_FIRE_RL_startException && !exception$D_OUT ||
	     WILL_FIRE_RL_writeBack ||
	     capState == 3'd0 ;

  // submodule permRegs
  assign permRegs$ADDR_1 = fetchFifoA$D_OUT ;
  assign permRegs$ADDR_2 = 5'h0 ;
  assign permRegs$ADDR_3 = 5'h0 ;
  assign permRegs$ADDR_4 = 5'h0 ;
  assign permRegs$ADDR_5 = 5'h0 ;
  always@(MUX_baseRegs$upd_1__SEL_1 or
	  WILL_FIRE_RL_writeBack or capWriteback or capState or count)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_baseRegs$upd_1__SEL_1: permRegs$ADDR_IN = 5'd31;
      WILL_FIRE_RL_writeBack: permRegs$ADDR_IN = capWriteback[8:4];
      capState == 3'd0: permRegs$ADDR_IN = count;
      default: permRegs$ADDR_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_baseRegs$upd_1__SEL_1 or
	  pcc or WILL_FIRE_RL_writeBack or capWriteback or capState)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_baseRegs$upd_1__SEL_1: permRegs$D_IN = pcc[255:192];
      WILL_FIRE_RL_writeBack: permRegs$D_IN = capWriteback[264:201];
      capState == 3'd0: permRegs$D_IN = 64'hFFFF000000000000;
      default: permRegs$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign permRegs$WE =
	     WILL_FIRE_RL_startException && !exception$D_OUT ||
	     WILL_FIRE_RL_writeBack ||
	     capState == 3'd0 ;

  // submodule startExp
  assign startExp$D_IN = 1'd1 ;
  assign startExp$ENQ = WILL_FIRE_RL_startException ;
  assign startExp$DEQ = WILL_FIRE_RL_finishException ;
  assign startExp$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_capInsts_first__28_BITS_9_TO_5_02_EQ_cap_ETC___d669 =
	     IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1030 ?
	       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1150 :
	       { writeback___1_base__h13507,
		 IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968 -
		 getCapResponse_capReq[69:6] } ;
  assign IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d820 =
	     (capInsts$D_OUT[96:92] != 5'd4 &&
	      capInsts$D_OUT[96:92] != 5'd0 &&
	      capInsts$D_OUT[96:92] != 5'd7 &&
	      capInsts$D_OUT[96:92] != 5'd8 &&
	      capInsts$D_OUT[96:92] != 5'd1 &&
	      capInsts$D_OUT[96:92] != 5'd10 &&
	      capInsts$D_OUT[96:92] != 5'd9 &&
	      capInsts$D_OUT[96:92] != 5'd2 &&
	      capInsts$D_OUT[96:92] != 5'd3 &&
	      capInsts$D_OUT[96:92] != 5'd5 &&
	      capInsts$D_OUT[96:92] != 5'd6) ?
	       getCapResponse_capReq_BITS_45_TO_6_35_PLUS_0_C_ETC___d1135 :
	       IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d819 ;
  assign IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d823 =
	     (capInsts$D_OUT[96:92] != 5'd0 &&
	      capInsts$D_OUT[96:92] != 5'd7 &&
	      capInsts$D_OUT[96:92] != 5'd8 &&
	      capInsts$D_OUT[96:92] != 5'd1 &&
	      capInsts$D_OUT[96:92] != 5'd10 &&
	      capInsts$D_OUT[96:92] != 5'd9 &&
	      capInsts$D_OUT[96:92] != 5'd2 &&
	      capInsts$D_OUT[96:92] != 5'd3 &&
	      capInsts$D_OUT[96:92] != 5'd5 &&
	      capInsts$D_OUT[96:92] != 5'd6) ?
	       getCapResponse_capReq_BITS_45_TO_6_35_PLUS_0_C_ETC___d1135 :
	       ((capInsts$D_OUT[96:92] == 5'd0) ?
		  capInsts$D_OUT[17:15] != 3'd3 &&
		  capInsts$D_OUT[17:15] != 3'd5 :
		  capInsts_first__28_BITS_96_TO_92_29_EQ_16_34_O_ETC___d817) ;
  assign IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d940 =
	     (capInsts$D_OUT[96:92] != 5'd4 &&
	      capInsts$D_OUT[96:92] != 5'd0 &&
	      capInsts$D_OUT[96:92] != 5'd7 &&
	      capInsts$D_OUT[96:92] != 5'd8 &&
	      capInsts$D_OUT[96:92] != 5'd1 &&
	      capInsts$D_OUT[96:92] != 5'd10 &&
	      capInsts$D_OUT[96:92] != 5'd9 &&
	      capInsts$D_OUT[96:92] != 5'd2 &&
	      capInsts$D_OUT[96:92] != 5'd3 &&
	      capInsts$D_OUT[96:92] != 5'd5 &&
	      capInsts$D_OUT[96:92] != 5'd6) ?
	       { x1_avValue_base__h9411[63:40] + getCapResponse_capReq[69:46],
		 x1_avValue_base__h9411[39:0] +
		 getCapResponse_capReq[45:6] } :
	       CASE_capInstsD_OUT_BITS_96_TO_92_IF_NOT_capIn_ETC__q4 ;
  assign IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1109 =
	     (capInsts$D_OUT[4:0] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[136:73] :
	       baseRegs$D_OUT_1 ;
  assign IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1110 =
	     IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1109[63:40] +
	     getCapResponse_capReq[69:46] ;
  assign IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1133 =
	     IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1109[39:0] +
	     getCapResponse_capReq[45:6] ;
  assign IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d542 =
	     (capInsts$D_OUT[4:0] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[72:9] :
	       lengthRegs$D_OUT_1 ;
  assign IF_capInsts_first__28_BITS_96_TO_92_29_EQ_0_32_ETC___d679 =
	     (capInsts$D_OUT[96:92] != 5'd1 &&
	      capInsts$D_OUT[96:92] != 5'd2 &&
	      capInsts$D_OUT[96:92] != 5'd3 &&
	      capInsts$D_OUT[96:92] != 5'd5 &&
	      capInsts$D_OUT[96:92] != 5'd6 &&
	      capInsts$D_OUT[96:92] != 5'd7 &&
	      capInsts$D_OUT[96:92] != 5'd8 &&
	      capInsts$D_OUT[96:92] != 5'd9 &&
	      capInsts$D_OUT[96:92] != 5'd10 &&
	      capInsts$D_OUT[96:92] != 5'd11) ?
	       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1152 :
	       ((capInsts$D_OUT[96:92] == 5'd7) ?
		  pcc[254:0] :
		  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1152) ;
  assign IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d635 =
	     (capInsts$D_OUT[96:92] != 5'd1 &&
	      capInsts$D_OUT[96:92] != 5'd2 &&
	      capInsts$D_OUT[96:92] != 5'd3 &&
	      capInsts$D_OUT[96:92] != 5'd5 &&
	      capInsts$D_OUT[96:92] != 5'd6 &&
	      capInsts$D_OUT[96:92] != 5'd7 &&
	      capInsts$D_OUT[96:92] != 5'd8 &&
	      capInsts$D_OUT[96:92] != 5'd9 &&
	      capInsts$D_OUT[96:92] != 5'd10 &&
	      capInsts$D_OUT[96:92] != 5'd11) ?
	       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073 :
	       IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d634 ;
  assign IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d680 =
	     (capInsts$D_OUT[96:92] == 5'd4) ?
	       { CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q5,
		 x1_avValue_reserved__h9409,
		 _theResult_____8_fst_oType_eaddr__h13470,
		 CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q6 } :
	       IF_capInsts_first__28_BITS_96_TO_92_29_EQ_0_32_ETC___d679 ;
  assign IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d825 =
	     (capInsts$D_OUT[96:92] == 5'd4 ||
	      NOT_capInsts_first__28_BITS_96_TO_92_29_EQ_0_3_ETC___d569) ?
	       pcc_7_BIT_244_46_OR_NOT_IF_capInsts_first__28__ETC___d822 :
	       !capInsts$D_OUT[14] &&
	       IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d823 ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1030 =
	     IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968 <=
	     getCapResponse_capReq[69:6] ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[264] :
	       permRegs$D_OUT_1[63] ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1149 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[263:249] :
	       permRegs$D_OUT_1[62:48] ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1150 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[136:9] :
	       { baseRegs$D_OUT_2, lengthRegs$D_OUT_2 } ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1152 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[263:9] :
	       { permRegs$D_OUT_1[62:48],
		 48'b0,
		 oTypeRegs$D_OUT_1,
		 baseRegs$D_OUT_2,
		 lengthRegs$D_OUT_2 } ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d565 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[263] :
	       permRegs$D_OUT_1[62] ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d626 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       !capWriteback[264] :
	       !permRegs$D_OUT_1[63] ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d629 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       !capWriteback[263] :
	       !permRegs$D_OUT_1[62] ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d664 =
	     { x1_avValue_base__h9411,
	       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1030 ?
		 IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968 :
		 getCapResponse_capReq[69:6] } ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d960 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[264:9] :
	       { permRegs$D_OUT_1[63:48],
		 48'b0,
		 oTypeRegs$D_OUT_1,
		 baseRegs$D_OUT_2,
		 lengthRegs$D_OUT_2 } ;
  assign IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[72:9] :
	       lengthRegs$D_OUT_2 ;
  assign IF_putCapInst_capInst_BITS_86_TO_82_11_EQ_0_12_ETC___d939 =
	     (putCapInst_capInst[86:82] != 5'd1 &&
	      putCapInst_capInst[86:82] != 5'd2 &&
	      putCapInst_capInst[86:82] != 5'd3 &&
	      putCapInst_capInst[86:82] != 5'd5 &&
	      putCapInst_capInst[86:82] != 5'd6 &&
	      putCapInst_capInst[86:82] != 5'd9 &&
	      putCapInst_capInst[86:82] != 5'd10 &&
	      putCapInst_capInst[86:82] != 5'd11) ?
	       putCapInst_capInst[76:72] :
	       CASE_putCapInst_capInst_BITS_86_TO_82_0_1_putC_ETC__q3 ;
  assign NOT_capInsts_first__28_BITS_96_TO_92_29_EQ_0_3_ETC___d569 =
	     capInsts$D_OUT[96:92] == 5'd7 ||
	     capInsts$D_OUT[96:92] == 5'd1 &&
	     IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073 &&
	     IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d565 ;
  assign _theResult_____8_fst_oType_eaddr__h13460 =
	     getCapResponse_capReq_BITS_69_TO_6_54_ULT_IF_c_ETC___d972 ?
	       writeback___1_base__h13507 :
	       x1_avValue_oType_eaddr__h9410 ;
  assign capInsts_first__28_BITS_96_TO_92_29_EQ_16_34_O_ETC___d817 =
	     capInsts$D_OUT[96:92] != 5'd1 && capInsts$D_OUT[96:92] != 5'd2 &&
	     capInsts$D_OUT[96:92] != 5'd3 &&
	     capInsts$D_OUT[96:92] != 5'd5 &&
	     capInsts$D_OUT[96:92] != 5'd6 &&
	     capInsts$D_OUT[96:92] != 5'd7 &&
	     capInsts$D_OUT[96:92] != 5'd8 &&
	     capInsts$D_OUT[96:92] != 5'd9 &&
	     capInsts$D_OUT[96:92] != 5'd10 &&
	     capInsts$D_OUT[96:92] != 5'd11 ||
	     ((capInsts$D_OUT[96:92] == 5'd7) ?
		getCapResponse_capReq[45:6] + 40'd4 <= pcc[39:0] :
		capInsts$D_OUT[96:92] == 5'd8 ||
		CASE_capInstsD_OUT_BITS_96_TO_92_NOT_capInsts_ETC__q1) ;
  assign capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_OR_ETC___d589 =
	     (capInsts$D_OUT[96:92] == 5'd4 ||
	      NOT_capInsts_first__28_BITS_96_TO_92_29_EQ_0_3_ETC___d569) &&
	     (pcc[244] || x__h13350 != 5'd28) &&
	     (pcc[243] || x__h13350 != 5'd29) &&
	     (pcc[242] || x__h13350 != 5'd30) &&
	     (pcc[241] || x__h13350 != 5'd31) ;
  assign capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_OR_ETC___d730 =
	     (capInsts$D_OUT[96:92] == 5'd4 ||
	      NOT_capInsts_first__28_BITS_96_TO_92_29_EQ_0_3_ETC___d569) &&
	     (pcc[244] || x__h13350 != 5'd28) &&
	     (pcc[243] || x__h13350 != 5'd29) &&
	     (pcc[242] || x__h13350 != 5'd30) &&
	     (pcc[241] || x__h13350 != 5'd31) ;
  assign capState_read_EQ_5_9_OR_capState_read_EQ_1_6_0_ETC___d906 =
	     (capState == 3'd5 || capState == 3'd1) &&
	     (!nextWillWriteback$D_OUT || writesCalculated == writesDone) ;
  assign commitWriteback_wbReq_BITS_3_TO_0_15_EQ_capWri_ETC___d918 =
	     commitWriteback_wbReq[3:0] == capWritebackTags$D_OUT[4:1] ;
  assign getCapResponse_capReq_BITS_45_TO_6_35_PLUS_0_C_ETC___d1135 =
	     getCapResponse_capReq[45:6] + { 34'd0, x__h12726 } <=
	     IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968[39:0] ;
  assign getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d558 =
	     { getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d971,
	       IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1110,
	       IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1133,
	       (capInsts$D_OUT[96:92] == 5'd10) ?
		 capInsts$D_OUT[91:87] :
		 5'd0,
	       capInsts$D_OUT[13:10] } ;
  assign getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d971 =
	     getCapResponse_capReq[45:6] + 40'd32 <=
	     IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d542[39:0] ;
  assign getCapResponse_capReq_BITS_69_TO_6_54_ULT_IF_c_ETC___d972 =
	     getCapResponse_capReq[69:6] <
	     IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968 ;
  assign pcc_7_BIT_244_46_OR_NOT_IF_capInsts_first__28__ETC___d822 =
	     (pcc[244] || x__h13350 != 5'd28) &&
	     (pcc[243] || x__h13350 != 5'd29) &&
	     (pcc[242] || x__h13350 != 5'd30) &&
	     (pcc[241] || x__h13350 != 5'd31) &&
	     !capInsts$D_OUT[14] &&
	     IF_NOT_capInsts_first__28_BITS_96_TO_92_29_EQ__ETC___d820 ;
  assign writeback___1_base__h13507 =
	     x1_avValue_base__h9411 + getCapResponse_capReq[69:6] ;
  assign x1_avValue_base__h9411 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[136:73] :
	       baseRegs$D_OUT_2 ;
  assign x1_avValue_oType_eaddr__h9410 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[200:137] :
	       oTypeRegs$D_OUT_1 ;
  assign x1_avValue_reserved__h9409 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[248:201] :
	       48'b0 ;
  assign x__h12726 =
	     (capInsts$D_OUT[96:92] == 5'd10 ||
	      capInsts$D_OUT[96:92] == 5'd9) ?
	       6'd32 :
	       ((capInsts$D_OUT[96:92] != 5'd4 &&
		 capInsts$D_OUT[96:92] != 5'd0 &&
		 capInsts$D_OUT[96:92] != 5'd16 &&
		 capInsts$D_OUT[96:92] != 5'd20 &&
		 capInsts$D_OUT[96:92] != 5'd17 &&
		 capInsts$D_OUT[96:92] != 5'd21 &&
		 capInsts$D_OUT[96:92] != 5'd18 &&
		 capInsts$D_OUT[96:92] != 5'd22 &&
		 capInsts$D_OUT[96:92] != 5'd24 &&
		 capInsts$D_OUT[96:92] != 5'd28 &&
		 capInsts$D_OUT[96:92] != 5'd25 &&
		 capInsts$D_OUT[96:92] != 5'd29 &&
		 capInsts$D_OUT[96:92] != 5'd26 &&
		 capInsts$D_OUT[96:92] != 5'd30 &&
		 capInsts$D_OUT[96:92] != 5'd1 &&
		 capInsts$D_OUT[96:92] != 5'd2 &&
		 capInsts$D_OUT[96:92] != 5'd3 &&
		 capInsts$D_OUT[96:92] != 5'd5 &&
		 capInsts$D_OUT[96:92] != 5'd6 &&
		 capInsts$D_OUT[96:92] != 5'd7 &&
		 capInsts$D_OUT[96:92] != 5'd8 &&
		 capInsts$D_OUT[96:92] != 5'd9 &&
		 capInsts$D_OUT[96:92] != 5'd10 &&
		 capInsts$D_OUT[96:92] != 5'd11) ?
		  6'd8 :
		  ((capInsts$D_OUT[96:92] == 5'd4 ||
		    capInsts$D_OUT[96:92] == 5'd0 ||
		    capInsts$D_OUT[96:92] == 5'd18 ||
		    capInsts$D_OUT[96:92] == 5'd22 ||
		    capInsts$D_OUT[96:92] == 5'd26 ||
		    capInsts$D_OUT[96:92] == 5'd30 ||
		    (capInsts$D_OUT[96:92] == 5'd1 ||
		     capInsts$D_OUT[96:92] == 5'd2 ||
		     capInsts$D_OUT[96:92] == 5'd3 ||
		     capInsts$D_OUT[96:92] == 5'd5 ||
		     capInsts$D_OUT[96:92] == 5'd6 ||
		     capInsts$D_OUT[96:92] == 5'd7 ||
		     capInsts$D_OUT[96:92] == 5'd8 ||
		     capInsts$D_OUT[96:92] == 5'd9 ||
		     capInsts$D_OUT[96:92] == 5'd10 ||
		     capInsts$D_OUT[96:92] == 5'd11) &&
		    capInsts$D_OUT[96:92] != 5'd10 &&
		    capInsts$D_OUT[96:92] != 5'd9) ?
		     6'd4 :
		     ((capInsts$D_OUT[96:92] == 5'd17 ||
		       capInsts$D_OUT[96:92] == 5'd21 ||
		       capInsts$D_OUT[96:92] == 5'd25 ||
		       capInsts$D_OUT[96:92] == 5'd29) ?
			6'd2 :
			((capInsts$D_OUT[96:92] == 5'd16 ||
			  capInsts$D_OUT[96:92] == 5'd20 ||
			  capInsts$D_OUT[96:92] == 5'd24 ||
			  capInsts$D_OUT[96:92] == 5'd28) ?
			   6'd1 :
			   6'd32)))) ;
  assign x__h14462 =
	     (capInsts$D_OUT[9:5] == capWriteback[8:4] && capWriteback[265]) ?
	       capWriteback[264:249] :
	       permRegs$D_OUT_1[63:48] ;
  assign x__h8745 =
	     (putCapInst_capInst[86:82] != 5'd2 &&
	      putCapInst_capInst[86:82] != 5'd3 &&
	      putCapInst_capInst[86:82] != 5'd5 &&
	      putCapInst_capInst[86:82] != 5'd6) ?
	       IF_putCapInst_capInst_BITS_86_TO_82_11_EQ_0_12_ETC___d939 :
	       5'd0 ;
  assign x__h8753 =
	     (putCapInst_capInst[86:82] == 5'd9 ||
	      putCapInst_capInst[86:82] == 5'd10) ?
	       putCapInst_capInst[76:72] :
	       5'd0 ;
  always@(capInsts$D_OUT)
  begin
    case (capInsts$D_OUT[96:92])
      5'd4: x__h13350 = capInsts$D_OUT[91:87];
      5'd7: x__h13350 = 5'd27;
      default: x__h13350 = capInsts$D_OUT[86:82];
    endcase
  end
  always@(iGet_capReq)
  begin
    case (iGet_capReq[5:2])
      4'd0: x__h6671 = 6'd32;
      4'd1, 4'd2, 4'd3: x__h6671 = 6'd8;
      4'd4, 4'd5, 4'd6: x__h6671 = 6'd4;
      4'd7: x__h6671 = 6'd2;
      4'd8: x__h6671 = 6'd1;
      default: x__h6671 = 6'd32;
    endcase
  end
  always@(capInsts$D_OUT or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968 or
	  x1_avValue_base__h9411 or
	  x1_avValue_oType_eaddr__h9410 or x__h14462)
  begin
    case (capInsts$D_OUT[17:15])
      3'd0:
	  IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889 =
	      IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d968;
      3'd1:
	  IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889 =
	      x1_avValue_base__h9411;
      3'd2:
	  IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889 =
	      x1_avValue_oType_eaddr__h9410;
      3'd4: IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889 = 64'd0;
      3'd6:
	  IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889 =
	      { 48'd0, x__h14462 };
      default: IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889 =
		   64'h0;
    endcase
  end
  always@(capInsts$D_OUT or
	  x1_avValue_oType_eaddr__h9410 or
	  _theResult_____8_fst_oType_eaddr__h13460)
  begin
    case (capInsts$D_OUT[17:15])
      3'd0, 3'd1:
	  _theResult_____8_fst_oType_eaddr__h13470 =
	      x1_avValue_oType_eaddr__h9410;
      3'd2:
	  _theResult_____8_fst_oType_eaddr__h13470 =
	      _theResult_____8_fst_oType_eaddr__h13460;
      default: _theResult_____8_fst_oType_eaddr__h13470 =
		   x1_avValue_oType_eaddr__h9410;
    endcase
  end
  always@(capInsts$D_OUT or
	  getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d971 or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073 or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d565)
  begin
    case (capInsts$D_OUT[96:92])
      5'd1:
	  CASE_capInstsD_OUT_BITS_96_TO_92_NOT_capInsts_ETC__q1 =
	      IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073 &&
	      IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d565;
      5'd10:
	  CASE_capInstsD_OUT_BITS_96_TO_92_NOT_capInsts_ETC__q1 =
	      getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d971;
      default: CASE_capInstsD_OUT_BITS_96_TO_92_NOT_capInsts_ETC__q1 =
		   capInsts$D_OUT[96:92] != 5'd9 ||
		   getCapResponse_capReq_BITS_45_TO_6_35_PLUS_32__ETC___d971;
    endcase
  end
  always@(capInsts$D_OUT or
	  getCapResponse_capReq_BITS_69_TO_6_54_ULT_IF_c_ETC___d972 or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1030)
  begin
    case (capInsts$D_OUT[17:15])
      3'd0, 3'd1:
	  CASE_capInstsD_OUT_BITS_17_TO_15_NOT_capInsts_ETC__q2 =
	      !IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1030;
      default: CASE_capInstsD_OUT_BITS_17_TO_15_NOT_capInsts_ETC__q2 =
		   capInsts$D_OUT[17:15] != 3'd2 ||
		   getCapResponse_capReq_BITS_69_TO_6_54_ULT_IF_c_ETC___d972;
    endcase
  end
  always@(capInsts$D_OUT or
	  capInsts_first__28_BITS_96_TO_92_29_EQ_16_34_O_ETC___d817 or
	  CASE_capInstsD_OUT_BITS_17_TO_15_NOT_capInsts_ETC__q2)
  begin
    case (capInsts$D_OUT[96:92])
      5'd0:
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d819 =
	      capInsts$D_OUT[17:15] != 3'd3 && capInsts$D_OUT[17:15] != 3'd5;
      5'd4:
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d819 =
	      CASE_capInstsD_OUT_BITS_17_TO_15_NOT_capInsts_ETC__q2;
      default: IF_capInsts_first__28_BITS_96_TO_92_29_EQ_4_30_ETC___d819 =
		   capInsts_first__28_BITS_96_TO_92_29_EQ_16_34_O_ETC___d817;
    endcase
  end
  always@(capInsts$D_OUT or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073 or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d626 or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d629 or pcc)
  begin
    case (capInsts$D_OUT[96:92])
      5'd1:
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d634 =
	      (IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d626 ||
	       IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d629) &&
	      IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073;
      5'd7:
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d634 =
	      pcc[255];
      5'd8:
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d634 =
	      IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073;
      default: IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d634 =
		   IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1073;
    endcase
  end
  always@(putCapInst_capInst)
  begin
    case (putCapInst_capInst[86:82])
      5'd1, 5'd9, 5'd10:
	  CASE_putCapInst_capInst_BITS_86_TO_82_0_1_putC_ETC__q3 =
	      putCapInst_capInst[81:77];
      default: CASE_putCapInst_capInst_BITS_86_TO_82_0_1_putC_ETC__q3 = 5'd0;
    endcase
  end
  always@(capInsts$D_OUT or
	  pcc or
	  getCapResponse_capReq or
	  IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1110 or
	  IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1133)
  begin
    case (capInsts$D_OUT[96:92])
      5'd1, 5'd8:
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d895 = 64'b0;
      5'd7:
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d895 =
	      { pcc[127:104] + getCapResponse_capReq[69:46],
		pcc[103:64] + getCapResponse_capReq[45:6] };
      5'd9, 5'd10:
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d895 =
	      { IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1110,
		IF_capInsts_first__28_BITS_4_TO_0_37_EQ_capWri_ETC___d1133 };
      default: IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d895 =
		   64'h0;
    endcase
  end
  always@(capInsts$D_OUT or
	  IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d895 or
	  IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889)
  begin
    case (capInsts$D_OUT[96:92])
      5'd0:
	  CASE_capInstsD_OUT_BITS_96_TO_92_IF_NOT_capIn_ETC__q4 =
	      IF_capInsts_first__28_BITS_17_TO_15_36_EQ_0_37_ETC___d889;
      5'd4: CASE_capInstsD_OUT_BITS_96_TO_92_IF_NOT_capIn_ETC__q4 = 64'h0;
      default: CASE_capInstsD_OUT_BITS_96_TO_92_IF_NOT_capIn_ETC__q4 =
		   (capInsts$D_OUT[96:92] != 5'd1 &&
		    capInsts$D_OUT[96:92] != 5'd2 &&
		    capInsts$D_OUT[96:92] != 5'd3 &&
		    capInsts$D_OUT[96:92] != 5'd5 &&
		    capInsts$D_OUT[96:92] != 5'd6 &&
		    capInsts$D_OUT[96:92] != 5'd7 &&
		    capInsts$D_OUT[96:92] != 5'd8 &&
		    capInsts$D_OUT[96:92] != 5'd9 &&
		    capInsts$D_OUT[96:92] != 5'd10 &&
		    capInsts$D_OUT[96:92] != 5'd11) ?
		     64'h0 :
		     IF_capInsts_first__28_BITS_96_TO_92_29_EQ_7_76_ETC___d895;
    endcase
  end
  always@(capInsts$D_OUT or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1149 or
	  getCapResponse_capReq)
  begin
    case (capInsts$D_OUT[17:15])
      3'd0, 3'd1, 3'd2:
	  CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q5 =
	      IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1149;
      3'd6:
	  CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q5 =
	      IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1149 &
	      getCapResponse_capReq[20:6];
      default: CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q5 =
		   IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1149;
    endcase
  end
  always@(capInsts$D_OUT or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1150 or
	  IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d664 or
	  IF_IF_capInsts_first__28_BITS_9_TO_5_02_EQ_cap_ETC___d669)
  begin
    case (capInsts$D_OUT[17:15])
      3'd0:
	  CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q6 =
	      IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d664;
      3'd1:
	  CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q6 =
	      IF_IF_capInsts_first__28_BITS_9_TO_5_02_EQ_cap_ETC___d669;
      default: CASE_capInstsD_OUT_BITS_17_TO_15_IF_capInsts__ETC__q6 =
		   IF_capInsts_first__28_BITS_9_TO_5_02_EQ_capWri_ETC___d1150;
    endcase
  end
  always@(capInsts$D_OUT)
  begin
    case (capInsts$D_OUT[96:92])
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd11,
      5'd16,
      5'd17,
      5'd18,
      5'd19,
      5'd20,
      5'd21,
      5'd22,
      5'd23,
      5'd24,
      5'd25,
      5'd26,
      5'd27,
      5'd28,
      5'd29,
      5'd30:
	  CASE_capInstsD_OUT_BITS_96_TO_92_31_0_capInst_ETC__q7 =
	      capInsts$D_OUT[96:92];
      default: CASE_capInstsD_OUT_BITS_96_TO_92_31_0_capInst_ETC__q7 = 5'd31;
    endcase
  end
  always@(capMemInsts$D_OUT)
  begin
    case (capMemInsts$D_OUT[334:330])
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd10,
      5'd11,
      5'd16,
      5'd17,
      5'd18,
      5'd19,
      5'd20,
      5'd21,
      5'd22,
      5'd23,
      5'd24,
      5'd25,
      5'd26,
      5'd27,
      5'd28,
      5'd29,
      5'd30:
	  CASE_capMemInstsD_OUT_BITS_334_TO_330_31_0_ca_ETC__q8 =
	      capMemInsts$D_OUT[334:330];
      default: CASE_capMemInstsD_OUT_BITS_334_TO_330_31_0_ca_ETC__q8 = 5'd31;
    endcase
  end
  always@(putCapInst_capInst)
  begin
    case (putCapInst_capInst[86:82])
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd10,
      5'd11,
      5'd16,
      5'd17,
      5'd18,
      5'd19,
      5'd20,
      5'd21,
      5'd22,
      5'd23,
      5'd24,
      5'd25,
      5'd26,
      5'd27,
      5'd28,
      5'd29,
      5'd30:
	  CASE_putCapInst_capInst_BITS_86_TO_82_31_0_put_ETC__q9 =
	      putCapInst_capInst[86:82];
      default: CASE_putCapInst_capInst_BITS_86_TO_82_31_0_put_ETC__q9 = 5'd31;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        capState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	capWriteback <= `BSV_ASSIGNMENT_DELAY
	    266'h15555555555555555555555555555555555555555555555555555555555555555F0;
	commitWritebackFifo_taggedReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	count <= `BSV_ASSIGNMENT_DELAY 5'd0;
	pcc <= `BSV_ASSIGNMENT_DELAY
	    256'hFFFF00000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF;
	pipeEmpty <= `BSV_ASSIGNMENT_DELAY 1'd0;
	writesCalculated <= `BSV_ASSIGNMENT_DELAY 5'd0;
	writesDone <= `BSV_ASSIGNMENT_DELAY 5'd0;
	writesIn <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (capState$EN) capState <= `BSV_ASSIGNMENT_DELAY capState$D_IN;
	if (capWriteback$EN)
	  capWriteback <= `BSV_ASSIGNMENT_DELAY capWriteback$D_IN;
	if (commitWritebackFifo_taggedReg$EN)
	  commitWritebackFifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      commitWritebackFifo_taggedReg$D_IN;
	if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (pcc$EN) pcc <= `BSV_ASSIGNMENT_DELAY pcc$D_IN;
	if (pipeEmpty$EN) pipeEmpty <= `BSV_ASSIGNMENT_DELAY pipeEmpty$D_IN;
	if (writesCalculated$EN)
	  writesCalculated <= `BSV_ASSIGNMENT_DELAY writesCalculated$D_IN;
	if (writesDone$EN)
	  writesDone <= `BSV_ASSIGNMENT_DELAY writesDone$D_IN;
	if (writesIn$EN) writesIn <= `BSV_ASSIGNMENT_DELAY writesIn$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    capState = 3'h2;
    capWriteback =
	266'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    commitWritebackFifo_taggedReg = 2'h2;
    count = 5'h0A;
    pcc =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    pipeEmpty = 1'h0;
    writesCalculated = 5'h0A;
    writesDone = 5'h0A;
    writesIn = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkCapCop

