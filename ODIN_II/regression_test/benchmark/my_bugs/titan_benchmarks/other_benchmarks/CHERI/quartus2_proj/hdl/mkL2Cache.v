//
// Generated by Bluespec Compiler, version 2012.07.beta1 (build 29243, 2012-07-26)
//
// On Fri Aug 31 13:44:40 BST 2012
//
// Method conflict info:
// Method: cache_request_put
// Conflict-free: cache_response_get, memory_request_get, memory_response_put
// Conflicts: cache_request_put
//
// Method: cache_response_get
// Conflict-free: cache_request_put, memory_request_get
// Sequenced after (restricted): memory_response_put
// Conflicts: cache_response_get
//
// Method: memory_request_get
// Conflict-free: cache_request_put, cache_response_get, memory_response_put
// Conflicts: memory_request_get
//
// Method: memory_response_put
// Conflict-free: cache_request_put, memory_request_get
// Sequenced before (restricted): cache_response_get
// Conflicts: memory_response_put
//
//
// Ports:
// Name                         I/O  size props
// RDY_cache_request_put          O     1
// cache_response_get             O   256
// RDY_cache_response_get         O     1
// memory_request_get             O   317
// RDY_memory_request_get         O     1
// RDY_memory_response_put        O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// cache_request_put              I   317 reg
// memory_response_put            I   256
// EN_cache_request_put           I     1
// EN_memory_response_put         I     1
// EN_cache_response_get          I     1
// EN_memory_request_get          I     1
//
// Combinational paths from inputs to outputs:
//   (memory_response_put, EN_memory_response_put) -> cache_response_get
//   EN_memory_response_put -> RDY_cache_response_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkL2Cache(CLK,
		 RST_N,

		 cache_request_put,
		 EN_cache_request_put,
		 RDY_cache_request_put,

		 EN_cache_response_get,
		 cache_response_get,
		 RDY_cache_response_get,

		 EN_memory_request_get,
		 memory_request_get,
		 RDY_memory_request_get,

		 memory_response_put,
		 EN_memory_response_put,
		 RDY_memory_response_put);
  input  CLK;
  input  RST_N;

  // action method cache_request_put
  input  [316 : 0] cache_request_put;
  input  EN_cache_request_put;
  output RDY_cache_request_put;

  // actionvalue method cache_response_get
  input  EN_cache_response_get;
  output [255 : 0] cache_response_get;
  output RDY_cache_response_get;

  // actionvalue method memory_request_get
  input  EN_memory_request_get;
  output [316 : 0] memory_request_get;
  output RDY_memory_request_get;

  // action method memory_response_put
  input  [255 : 0] memory_response_put;
  input  EN_memory_response_put;
  output RDY_memory_response_put;

  // signals for module outputs
  wire [316 : 0] memory_request_get;
  wire [255 : 0] cache_response_get;
  wire RDY_cache_request_put,
       RDY_cache_response_get,
       RDY_memory_request_get,
       RDY_memory_response_put;

  // inlined wires
  wire [316 : 0] memReq_fifo_rw_enq$wget;
  wire [255 : 0] out_fifo_rw_enq$wget;
  wire memReq_fifo_rw_enq$whas, out_fifo_rw_enq$whas;

  // register addrReg
  reg [31 : 0] addrReg;
  wire [31 : 0] addrReg$D_IN;
  wire addrReg$EN;

  // register bank_lastReadAddrA
  reg [10 : 0] bank_lastReadAddrA;
  wire [10 : 0] bank_lastReadAddrA$D_IN;
  wire bank_lastReadAddrA$EN;

  // register bank_lastReadAddrA_1
  reg [10 : 0] bank_lastReadAddrA_1;
  wire [10 : 0] bank_lastReadAddrA_1$D_IN;
  wire bank_lastReadAddrA_1$EN;

  // register bank_lastReadAddrA_2
  reg [10 : 0] bank_lastReadAddrA_2;
  wire [10 : 0] bank_lastReadAddrA_2$D_IN;
  wire bank_lastReadAddrA_2$EN;

  // register bank_lastReadAddrA_3
  reg [10 : 0] bank_lastReadAddrA_3;
  wire [10 : 0] bank_lastReadAddrA_3$D_IN;
  wire bank_lastReadAddrA_3$EN;

  // register bank_lastReadAddrB
  reg [10 : 0] bank_lastReadAddrB;
  wire [10 : 0] bank_lastReadAddrB$D_IN;
  wire bank_lastReadAddrB$EN;

  // register bank_lastReadAddrB_1
  reg [10 : 0] bank_lastReadAddrB_1;
  wire [10 : 0] bank_lastReadAddrB_1$D_IN;
  wire bank_lastReadAddrB_1$EN;

  // register bank_lastReadAddrB_2
  reg [10 : 0] bank_lastReadAddrB_2;
  wire [10 : 0] bank_lastReadAddrB_2$D_IN;
  wire bank_lastReadAddrB_2$EN;

  // register bank_lastReadAddrB_3
  reg [10 : 0] bank_lastReadAddrB_3;
  wire [10 : 0] bank_lastReadAddrB_3$D_IN;
  wire bank_lastReadAddrB_3$EN;

  // register bank_lastWriteAddrA
  reg [10 : 0] bank_lastWriteAddrA;
  wire [10 : 0] bank_lastWriteAddrA$D_IN;
  wire bank_lastWriteAddrA$EN;

  // register bank_lastWriteAddrA_1
  reg [10 : 0] bank_lastWriteAddrA_1;
  wire [10 : 0] bank_lastWriteAddrA_1$D_IN;
  wire bank_lastWriteAddrA_1$EN;

  // register bank_lastWriteAddrA_2
  reg [10 : 0] bank_lastWriteAddrA_2;
  wire [10 : 0] bank_lastWriteAddrA_2$D_IN;
  wire bank_lastWriteAddrA_2$EN;

  // register bank_lastWriteAddrA_3
  reg [10 : 0] bank_lastWriteAddrA_3;
  wire [10 : 0] bank_lastWriteAddrA_3$D_IN;
  wire bank_lastWriteAddrA_3$EN;

  // register bank_lastWriteAddrB
  reg [10 : 0] bank_lastWriteAddrB;
  wire [10 : 0] bank_lastWriteAddrB$D_IN;
  wire bank_lastWriteAddrB$EN;

  // register bank_lastWriteAddrB_1
  reg [10 : 0] bank_lastWriteAddrB_1;
  wire [10 : 0] bank_lastWriteAddrB_1$D_IN;
  wire bank_lastWriteAddrB_1$EN;

  // register bank_lastWriteAddrB_2
  reg [10 : 0] bank_lastWriteAddrB_2;
  wire [10 : 0] bank_lastWriteAddrB_2$D_IN;
  wire bank_lastWriteAddrB_2$EN;

  // register bank_lastWriteAddrB_3
  reg [10 : 0] bank_lastWriteAddrB_3;
  wire [10 : 0] bank_lastWriteAddrB_3$D_IN;
  wire bank_lastWriteAddrB_3$EN;

  // register bank_lastWriteDataA
  reg [63 : 0] bank_lastWriteDataA;
  wire [63 : 0] bank_lastWriteDataA$D_IN;
  wire bank_lastWriteDataA$EN;

  // register bank_lastWriteDataA_1
  reg [63 : 0] bank_lastWriteDataA_1;
  wire [63 : 0] bank_lastWriteDataA_1$D_IN;
  wire bank_lastWriteDataA_1$EN;

  // register bank_lastWriteDataA_2
  reg [63 : 0] bank_lastWriteDataA_2;
  wire [63 : 0] bank_lastWriteDataA_2$D_IN;
  wire bank_lastWriteDataA_2$EN;

  // register bank_lastWriteDataA_3
  reg [63 : 0] bank_lastWriteDataA_3;
  wire [63 : 0] bank_lastWriteDataA_3$D_IN;
  wire bank_lastWriteDataA_3$EN;

  // register bank_lastWriteDataB
  reg [63 : 0] bank_lastWriteDataB;
  wire [63 : 0] bank_lastWriteDataB$D_IN;
  wire bank_lastWriteDataB$EN;

  // register bank_lastWriteDataB_1
  reg [63 : 0] bank_lastWriteDataB_1;
  wire [63 : 0] bank_lastWriteDataB_1$D_IN;
  wire bank_lastWriteDataB_1$EN;

  // register bank_lastWriteDataB_2
  reg [63 : 0] bank_lastWriteDataB_2;
  wire [63 : 0] bank_lastWriteDataB_2$D_IN;
  wire bank_lastWriteDataB_2$EN;

  // register bank_lastWriteDataB_3
  reg [63 : 0] bank_lastWriteDataB_3;
  wire [63 : 0] bank_lastWriteDataB_3$D_IN;
  wire bank_lastWriteDataB_3$EN;

  // register byteWriteReg_0
  reg [7 : 0] byteWriteReg_0;
  wire [7 : 0] byteWriteReg_0$D_IN;
  wire byteWriteReg_0$EN;

  // register byteWriteReg_1
  reg [7 : 0] byteWriteReg_1;
  wire [7 : 0] byteWriteReg_1$D_IN;
  wire byteWriteReg_1$EN;

  // register byteWriteReg_2
  reg [7 : 0] byteWriteReg_2;
  wire [7 : 0] byteWriteReg_2$D_IN;
  wire byteWriteReg_2$EN;

  // register byteWriteReg_3
  reg [7 : 0] byteWriteReg_3;
  wire [7 : 0] byteWriteReg_3$D_IN;
  wire byteWriteReg_3$EN;

  // register cacheState
  reg [1 : 0] cacheState;
  wire [1 : 0] cacheState$D_IN;
  wire cacheState$EN;

  // register count
  reg [10 : 0] count;
  wire [10 : 0] count$D_IN;
  wire count$EN;

  // register dataReg
  reg [255 : 0] dataReg;
  wire [255 : 0] dataReg$D_IN;
  wire dataReg$EN;

  // register memReq_fifo_taggedReg
  reg [317 : 0] memReq_fifo_taggedReg;
  wire [317 : 0] memReq_fifo_taggedReg$D_IN;
  wire memReq_fifo_taggedReg$EN;

  // register memResp_fifo_taggedReg
  reg [256 : 0] memResp_fifo_taggedReg;
  wire [256 : 0] memResp_fifo_taggedReg$D_IN;
  wire memResp_fifo_taggedReg$EN;

  // register missCached
  reg missCached;
  wire missCached$D_IN, missCached$EN;

  // register missWriteReg
  reg missWriteReg;
  wire missWriteReg$D_IN, missWriteReg$EN;

  // register out_fifo_taggedReg
  reg [256 : 0] out_fifo_taggedReg;
  wire [256 : 0] out_fifo_taggedReg$D_IN;
  wire out_fifo_taggedReg$EN;

  // register tags_lastReadAddrA
  reg [10 : 0] tags_lastReadAddrA;
  wire [10 : 0] tags_lastReadAddrA$D_IN;
  wire tags_lastReadAddrA$EN;

  // register tags_lastReadAddrB
  reg [10 : 0] tags_lastReadAddrB;
  wire [10 : 0] tags_lastReadAddrB$D_IN;
  wire tags_lastReadAddrB$EN;

  // register tags_lastWriteAddrA
  reg [10 : 0] tags_lastWriteAddrA;
  wire [10 : 0] tags_lastWriteAddrA$D_IN;
  wire tags_lastWriteAddrA$EN;

  // register tags_lastWriteAddrB
  reg [10 : 0] tags_lastWriteAddrB;
  reg [10 : 0] tags_lastWriteAddrB$D_IN;
  wire tags_lastWriteAddrB$EN;

  // register tags_lastWriteDataA
  reg [17 : 0] tags_lastWriteDataA;
  wire [17 : 0] tags_lastWriteDataA$D_IN;
  wire tags_lastWriteDataA$EN;

  // register tags_lastWriteDataB
  reg [17 : 0] tags_lastWriteDataB;
  reg [17 : 0] tags_lastWriteDataB$D_IN;
  wire tags_lastWriteDataB$EN;

  // register updateReg
  reg [255 : 0] updateReg;
  wire [255 : 0] updateReg$D_IN;
  wire updateReg$EN;

  // ports of submodule bank_bram
  wire [63 : 0] bank_bram$DIA, bank_bram$DIB, bank_bram$DOA;
  wire [10 : 0] bank_bram$ADDRA, bank_bram$ADDRB;
  wire bank_bram$ENA, bank_bram$ENB, bank_bram$WEA, bank_bram$WEB;

  // ports of submodule bank_bram_1
  wire [63 : 0] bank_bram_1$DIA, bank_bram_1$DIB, bank_bram_1$DOA;
  wire [10 : 0] bank_bram_1$ADDRA, bank_bram_1$ADDRB;
  wire bank_bram_1$ENA, bank_bram_1$ENB, bank_bram_1$WEA, bank_bram_1$WEB;

  // ports of submodule bank_bram_2
  wire [63 : 0] bank_bram_2$DIA, bank_bram_2$DIB, bank_bram_2$DOA;
  wire [10 : 0] bank_bram_2$ADDRA, bank_bram_2$ADDRB;
  wire bank_bram_2$ENA, bank_bram_2$ENB, bank_bram_2$WEA, bank_bram_2$WEB;

  // ports of submodule bank_bram_3
  wire [63 : 0] bank_bram_3$DIA, bank_bram_3$DIB, bank_bram_3$DOA;
  wire [10 : 0] bank_bram_3$ADDRA, bank_bram_3$ADDRB;
  wire bank_bram_3$ENA, bank_bram_3$ENB, bank_bram_3$WEA, bank_bram_3$WEB;

  // ports of submodule evict_fifo
  wire [287 : 0] evict_fifo$D_IN, evict_fifo$D_OUT;
  wire evict_fifo$CLR,
       evict_fifo$DEQ,
       evict_fifo$EMPTY_N,
       evict_fifo$ENQ,
       evict_fifo$FULL_N;

  // ports of submodule req_fifo
  wire [316 : 0] req_fifo$D_IN, req_fifo$D_OUT;
  wire req_fifo$CLR,
       req_fifo$DEQ,
       req_fifo$EMPTY_N,
       req_fifo$ENQ,
       req_fifo$FULL_N;

  // ports of submodule tags_bram
  reg [17 : 0] tags_bram$DIB;
  reg [10 : 0] tags_bram$ADDRB;
  wire [17 : 0] tags_bram$DIA, tags_bram$DOA;
  wire [10 : 0] tags_bram$ADDRA;
  wire tags_bram$ENA, tags_bram$ENB, tags_bram$WEA, tags_bram$WEB;

  // ports of submodule tags_fifo
  wire [17 : 0] tags_fifo$D_IN;
  wire tags_fifo$CLR, tags_fifo$DEQ, tags_fifo$ENQ;

  // ports of submodule toServing_fifo
  wire toServing_fifo$CLR,
       toServing_fifo$DEQ,
       toServing_fifo$D_IN,
       toServing_fifo$EMPTY_N,
       toServing_fifo$ENQ,
       toServing_fifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_clearNewRequests,
       WILL_FIRE_RL_getCacheResponse,
       WILL_FIRE_RL_memReq_fifo_rule_enq,
       WILL_FIRE_RL_memResp_fifo_rule_deq,
       WILL_FIRE_RL_memResp_fifo_rule_enq,
       WILL_FIRE_RL_out_fifo_rule_enq;

  // inputs to muxes for submodule ports
  wire [317 : 0] MUX_memReq_fifo_taggedReg$write_1__VAL_1;
  wire [316 : 0] MUX_memReq_fifo_rw_enq$wset_1__VAL_1,
		 MUX_memReq_fifo_rw_enq$wset_1__VAL_2;
  wire [256 : 0] MUX_memResp_fifo_taggedReg$write_1__VAL_1,
		 MUX_out_fifo_taggedReg$write_1__VAL_1;
  wire [63 : 0] MUX_bank_bram$b_put_3__VAL_1,
		MUX_bank_bram$b_put_3__VAL_2,
		MUX_bank_bram_1$b_put_3__VAL_1,
		MUX_bank_bram_1$b_put_3__VAL_2,
		MUX_bank_bram_2$b_put_3__VAL_1,
		MUX_bank_bram_2$b_put_3__VAL_2,
		MUX_bank_bram_3$b_put_3__VAL_1,
		MUX_bank_bram_3$b_put_3__VAL_2;
  wire [17 : 0] MUX_tags_bram$b_put_3__VAL_1, MUX_tags_bram$b_put_3__VAL_2;
  wire MUX_bank_bram$b_put_1__SEL_1,
       MUX_cacheState$write_1__SEL_1,
       MUX_cacheState$write_1__SEL_2,
       MUX_memReq_fifo_rw_enq$wset_1__SEL_1,
       MUX_memReq_fifo_rw_enq$wset_1__SEL_2,
       MUX_out_fifo_rw_enq$wset_1__SEL_1,
       MUX_tags_bram$b_put_1__SEL_2;

  // remaining internal signals
  wire [255 : 0] resp__h13851, v__h4661;
  wire [63 : 0] IF_bank_lastReadAddrA_1_read__35_EQ_bank_lastW_ETC___d580,
		IF_bank_lastReadAddrA_2_read__88_EQ_bank_lastW_ETC___d574,
		IF_bank_lastReadAddrA_3_read__41_EQ_bank_lastW_ETC___d569,
		IF_bank_lastReadAddrA_read__2_EQ_bank_lastWrit_ETC___d586,
		IF_req_fifo_first__0_BIT_10_33_THEN_IF_req_fif_ETC___d578,
		IF_req_fifo_first__0_BIT_11_32_THEN_IF_req_fif_ETC___d577,
		IF_req_fifo_first__0_BIT_12_31_THEN_IF_req_fif_ETC___d576,
		IF_req_fifo_first__0_BIT_13_30_THEN_IF_req_fif_ETC___d575,
		IF_req_fifo_first__0_BIT_14_29_THEN_IF_req_fif_ETC___d547,
		IF_req_fifo_first__0_BIT_15_28_THEN_IF_req_fif_ETC___d555,
		IF_req_fifo_first__0_BIT_16_26_THEN_req_fifo_f_ETC___d589,
		IF_req_fifo_first__0_BIT_17_87_THEN_IF_bank_la_ETC___d573,
		IF_req_fifo_first__0_BIT_18_86_THEN_IF_req_fif_ETC___d572,
		IF_req_fifo_first__0_BIT_19_85_THEN_IF_req_fif_ETC___d548,
		IF_req_fifo_first__0_BIT_1_1_THEN_IF_bank_last_ETC___d585,
		IF_req_fifo_first__0_BIT_20_84_THEN_IF_req_fif_ETC___d571,
		IF_req_fifo_first__0_BIT_21_83_THEN_IF_req_fif_ETC___d570,
		IF_req_fifo_first__0_BIT_22_82_THEN_IF_req_fif_ETC___d592,
		IF_req_fifo_first__0_BIT_23_81_THEN_IF_req_fif_ETC___d554,
		IF_req_fifo_first__0_BIT_24_79_THEN_req_fifo_f_ETC___d588,
		IF_req_fifo_first__0_BIT_25_40_THEN_IF_bank_la_ETC___d568,
		IF_req_fifo_first__0_BIT_26_39_THEN_IF_req_fif_ETC___d567,
		IF_req_fifo_first__0_BIT_27_38_THEN_IF_req_fif_ETC___d566,
		IF_req_fifo_first__0_BIT_28_37_THEN_IF_req_fif_ETC___d565,
		IF_req_fifo_first__0_BIT_29_36_THEN_IF_req_fif_ETC___d564,
		IF_req_fifo_first__0_BIT_2_0_THEN_IF_req_fifo__ETC___d584,
		IF_req_fifo_first__0_BIT_30_35_THEN_IF_req_fif_ETC___d591,
		IF_req_fifo_first__0_BIT_31_34_THEN_IF_req_fif_ETC___d553,
		IF_req_fifo_first__0_BIT_32_32_THEN_req_fifo_f_ETC___d587,
		IF_req_fifo_first__0_BIT_3_9_THEN_IF_req_fifo__ETC___d583,
		IF_req_fifo_first__0_BIT_4_8_THEN_IF_req_fifo__ETC___d582,
		IF_req_fifo_first__0_BIT_5_7_THEN_IF_req_fifo__ETC___d581,
		IF_req_fifo_first__0_BIT_6_6_THEN_IF_req_fifo__ETC___d593,
		IF_req_fifo_first__0_BIT_7_5_THEN_IF_req_fifo__ETC___d557,
		IF_req_fifo_first__0_BIT_8_3_THEN_req_fifo_fir_ETC___d590,
		IF_req_fifo_first__0_BIT_9_34_THEN_IF_bank_las_ETC___d579;
  wire [31 : 0] byteenable__h4327, x_addr__h12399;
  wire [15 : 0] x_a_read_tag__h4514;
  wire [7 : 0] IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_0_ETC___d382,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_1_ETC___d377,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_2_ETC___d372,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_3_ETC___d367,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_4_ETC___d362,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_5_ETC___d357,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_6_ETC___d352,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_7_ETC___d347,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_0_ETC___d427,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_1_ETC___d422,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_2_ETC___d417,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_3_ETC___d412,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_4_ETC___d407,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_5_ETC___d402,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_6_ETC___d397,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_7_ETC___d392,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_0_ETC___d472,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_1_ETC___d467,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_2_ETC___d462,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_3_ETC___d457,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_4_ETC___d452,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_5_ETC___d447,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_6_ETC___d442,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_7_ETC___d437,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_0_ETC___d517,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_1_ETC___d512,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_2_ETC___d507,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_3_ETC___d502,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_4_ETC___d497,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_5_ETC___d492,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_6_ETC___d487,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_7_ETC___d482;
  wire IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d317,
       IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607,
       NOT_req_fifo_first__0_BITS_315_TO_300_5_EQ_IF__ETC___d296,
       _dand1req_fifo$EN_deq,
       req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558,
       req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d65,
       tags_lastReadAddrA_read__6_EQ_tags_lastWriteAd_ETC___d622;

  // action method cache_request_put
  assign RDY_cache_request_put = req_fifo$FULL_N ;

  // actionvalue method cache_response_get
  assign cache_response_get =
	     out_fifo_rw_enq$whas ?
	       out_fifo_rw_enq$wget :
	       out_fifo_taggedReg[255:0] ;
  assign RDY_cache_response_get =
	     out_fifo_taggedReg[256] || out_fifo_rw_enq$whas ;

  // actionvalue method memory_request_get
  assign memory_request_get =
	     memReq_fifo_rw_enq$whas ?
	       memReq_fifo_rw_enq$wget :
	       memReq_fifo_taggedReg[316:0] ;
  assign RDY_memory_request_get =
	     memReq_fifo_taggedReg[317] || memReq_fifo_rw_enq$whas ;

  // action method memory_response_put
  assign RDY_memory_response_put = !memResp_fifo_taggedReg[256] ;

  // submodule bank_bram
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) bank_bram(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(bank_bram$ADDRA),
					.ADDRB(bank_bram$ADDRB),
					.DIA(bank_bram$DIA),
					.DIB(bank_bram$DIB),
					.WEA(bank_bram$WEA),
					.WEB(bank_bram$WEB),
					.ENA(bank_bram$ENA),
					.ENB(bank_bram$ENB),
					.DOA(bank_bram$DOA),
					.DOB());

  // submodule bank_bram_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) bank_bram_1(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(bank_bram_1$ADDRA),
					  .ADDRB(bank_bram_1$ADDRB),
					  .DIA(bank_bram_1$DIA),
					  .DIB(bank_bram_1$DIB),
					  .WEA(bank_bram_1$WEA),
					  .WEB(bank_bram_1$WEB),
					  .ENA(bank_bram_1$ENA),
					  .ENB(bank_bram_1$ENB),
					  .DOA(bank_bram_1$DOA),
					  .DOB());

  // submodule bank_bram_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) bank_bram_2(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(bank_bram_2$ADDRA),
					  .ADDRB(bank_bram_2$ADDRB),
					  .DIA(bank_bram_2$DIA),
					  .DIB(bank_bram_2$DIB),
					  .WEA(bank_bram_2$WEA),
					  .WEB(bank_bram_2$WEB),
					  .ENA(bank_bram_2$ENA),
					  .ENB(bank_bram_2$ENB),
					  .DOA(bank_bram_2$DOA),
					  .DOB());

  // submodule bank_bram_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(12'd2048)) bank_bram_3(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(bank_bram_3$ADDRA),
					  .ADDRB(bank_bram_3$ADDRB),
					  .DIA(bank_bram_3$DIA),
					  .DIB(bank_bram_3$DIB),
					  .WEA(bank_bram_3$WEA),
					  .WEB(bank_bram_3$WEB),
					  .ENA(bank_bram_3$ENA),
					  .ENB(bank_bram_3$ENB),
					  .DOA(bank_bram_3$DOA),
					  .DOB());

  // submodule evict_fifo
  FIFO1 #(.width(32'd288), .guarded(32'd1)) evict_fifo(.RST_N(RST_N),
						       .CLK(CLK),
						       .D_IN(evict_fifo$D_IN),
						       .ENQ(evict_fifo$ENQ),
						       .DEQ(evict_fifo$DEQ),
						       .CLR(evict_fifo$CLR),
						       .D_OUT(evict_fifo$D_OUT),
						       .FULL_N(evict_fifo$FULL_N),
						       .EMPTY_N(evict_fifo$EMPTY_N));

  // submodule req_fifo
  FIFOL1 #(.width(32'd317)) req_fifo(.RST_N(RST_N),
				     .CLK(CLK),
				     .D_IN(req_fifo$D_IN),
				     .ENQ(req_fifo$ENQ),
				     .DEQ(req_fifo$DEQ),
				     .CLR(req_fifo$CLR),
				     .D_OUT(req_fifo$D_OUT),
				     .FULL_N(req_fifo$FULL_N),
				     .EMPTY_N(req_fifo$EMPTY_N));

  // submodule tags_bram
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd18),
	  .MEMSIZE(12'd2048)) tags_bram(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(tags_bram$ADDRA),
					.ADDRB(tags_bram$ADDRB),
					.DIA(tags_bram$DIA),
					.DIB(tags_bram$DIB),
					.WEA(tags_bram$WEA),
					.WEB(tags_bram$WEB),
					.ENA(tags_bram$ENA),
					.ENB(tags_bram$ENB),
					.DOA(tags_bram$DOA),
					.DOB());

  // submodule tags_fifo
  FIFOL1 #(.width(32'd18)) tags_fifo(.RST_N(RST_N),
				     .CLK(CLK),
				     .D_IN(tags_fifo$D_IN),
				     .ENQ(tags_fifo$ENQ),
				     .DEQ(tags_fifo$DEQ),
				     .CLR(tags_fifo$CLR),
				     .D_OUT(),
				     .FULL_N(),
				     .EMPTY_N());

  // submodule toServing_fifo
  FIFO2 #(.width(32'd1), .guarded(32'd1)) toServing_fifo(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(toServing_fifo$D_IN),
							 .ENQ(toServing_fifo$ENQ),
							 .DEQ(toServing_fifo$DEQ),
							 .CLR(toServing_fifo$CLR),
							 .D_OUT(),
							 .FULL_N(toServing_fifo$FULL_N),
							 .EMPTY_N(toServing_fifo$EMPTY_N));

  // rule RL_getCacheResponse
  assign WILL_FIRE_RL_getCacheResponse =
	     req_fifo$EMPTY_N && !out_fifo_taggedReg[256] &&
	     !memReq_fifo_taggedReg[317] &&
	     evict_fifo$FULL_N &&
	     cacheState == 2'd1 ;

  // rule RL_clearNewRequests
  assign WILL_FIRE_RL_clearNewRequests =
	     req_fifo$EMPTY_N && toServing_fifo$EMPTY_N &&
	     cacheState == 2'd2 ;

  // rule RL_out_fifo_rule_enq
  assign WILL_FIRE_RL_out_fifo_rule_enq =
	     out_fifo_rw_enq$whas && !EN_cache_response_get ;

  // rule RL_memReq_fifo_rule_enq
  assign WILL_FIRE_RL_memReq_fifo_rule_enq =
	     memReq_fifo_rw_enq$whas && !EN_memory_request_get ;

  // rule RL_memResp_fifo_rule_enq
  assign WILL_FIRE_RL_memResp_fifo_rule_enq =
	     EN_memory_response_put && !WILL_FIRE_RL_memResp_fifo_rule_deq ;

  // rule RL_memResp_fifo_rule_deq
  assign WILL_FIRE_RL_memResp_fifo_rule_deq =
	     (memResp_fifo_taggedReg[256] || EN_memory_response_put) &&
	     toServing_fifo$FULL_N &&
	     !out_fifo_taggedReg[256] &&
	     cacheState == 2'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_bank_bram$b_put_1__SEL_1 =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ;
  assign MUX_cacheState$write_1__SEL_1 =
	     cacheState == 2'd0 && count == 11'd2047 ;
  assign MUX_cacheState$write_1__SEL_2 =
	     WILL_FIRE_RL_getCacheResponse &&
	     (NOT_req_fifo_first__0_BITS_315_TO_300_5_EQ_IF__ETC___d296 ||
	      !req_fifo$D_OUT[0]) &&
	     (req_fifo$D_OUT[0] || !req_fifo$D_OUT[316]) ;
  assign MUX_memReq_fifo_rw_enq$wset_1__SEL_1 =
	     WILL_FIRE_RL_getCacheResponse &&
	     (NOT_req_fifo_first__0_BITS_315_TO_300_5_EQ_IF__ETC___d296 ||
	      !req_fifo$D_OUT[0]) ;
  assign MUX_memReq_fifo_rw_enq$wset_1__SEL_2 =
	     !memReq_fifo_taggedReg[317] && evict_fifo$EMPTY_N &&
	     cacheState == 2'd2 ;
  assign MUX_out_fifo_rw_enq$wset_1__SEL_1 =
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     !req_fifo$D_OUT[316] ;
  assign MUX_tags_bram$b_put_1__SEL_2 =
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d65 ;
  assign MUX_bank_bram$b_put_3__VAL_1 =
	     { IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_7_ETC___d347,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_6_ETC___d352,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_5_ETC___d357,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_4_ETC___d362,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_3_ETC___d367,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_2_ETC___d372,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_1_ETC___d377,
	       IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_0_ETC___d382 } ;
  assign MUX_bank_bram$b_put_3__VAL_2 =
	     (req_fifo$D_OUT[316] &&
	      (req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	       IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 ||
	       !req_fifo$D_OUT[0])) ?
	       IF_req_fifo_first__0_BIT_8_3_THEN_req_fifo_fir_ETC___d590 :
	       IF_bank_lastReadAddrA_read__2_EQ_bank_lastWrit_ETC___d586 ;
  assign MUX_bank_bram_1$b_put_3__VAL_1 =
	     { IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_7_ETC___d392,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_6_ETC___d397,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_5_ETC___d402,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_4_ETC___d407,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_3_ETC___d412,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_2_ETC___d417,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_1_ETC___d422,
	       IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_0_ETC___d427 } ;
  assign MUX_bank_bram_1$b_put_3__VAL_2 =
	     (req_fifo$D_OUT[316] &&
	      (req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	       IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 ||
	       !req_fifo$D_OUT[0])) ?
	       IF_req_fifo_first__0_BIT_16_26_THEN_req_fifo_f_ETC___d589 :
	       IF_bank_lastReadAddrA_1_read__35_EQ_bank_lastW_ETC___d580 ;
  assign MUX_bank_bram_2$b_put_3__VAL_1 =
	     { IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_7_ETC___d437,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_6_ETC___d442,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_5_ETC___d447,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_4_ETC___d452,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_3_ETC___d457,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_2_ETC___d462,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_1_ETC___d467,
	       IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_0_ETC___d472 } ;
  assign MUX_bank_bram_2$b_put_3__VAL_2 =
	     (req_fifo$D_OUT[316] &&
	      (req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	       IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 ||
	       !req_fifo$D_OUT[0])) ?
	       IF_req_fifo_first__0_BIT_24_79_THEN_req_fifo_f_ETC___d588 :
	       IF_bank_lastReadAddrA_2_read__88_EQ_bank_lastW_ETC___d574 ;
  assign MUX_bank_bram_3$b_put_3__VAL_1 =
	     { IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_7_ETC___d482,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_6_ETC___d487,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_5_ETC___d492,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_4_ETC___d497,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_3_ETC___d502,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_2_ETC___d507,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_1_ETC___d512,
	       IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_0_ETC___d517 } ;
  assign MUX_bank_bram_3$b_put_3__VAL_2 =
	     (req_fifo$D_OUT[316] &&
	      (req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	       IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 ||
	       !req_fifo$D_OUT[0])) ?
	       IF_req_fifo_first__0_BIT_32_32_THEN_req_fifo_f_ETC___d587 :
	       IF_bank_lastReadAddrA_3_read__41_EQ_bank_lastW_ETC___d569 ;
  assign MUX_memReq_fifo_rw_enq$wset_1__VAL_1 =
	     { req_fifo$D_OUT[316] && !req_fifo$D_OUT[0],
	       req_fifo$D_OUT[315:289],
	       v__h4661,
	       byteenable__h4327,
	       1'd0 } ;
  assign MUX_memReq_fifo_rw_enq$wset_1__VAL_2 =
	     { 1'd1,
	       evict_fifo$D_OUT[287:261],
	       evict_fifo$D_OUT[255:0],
	       33'h1FFFFFFFE } ;
  assign MUX_memReq_fifo_taggedReg$write_1__VAL_1 =
	     { 1'd1, memReq_fifo_rw_enq$wget } ;
  assign MUX_memResp_fifo_taggedReg$write_1__VAL_1 =
	     { 1'd1, memory_response_put } ;
  assign MUX_out_fifo_taggedReg$write_1__VAL_1 =
	     { 1'd1, out_fifo_rw_enq$wget } ;
  assign MUX_tags_bram$b_put_3__VAL_1 =
	     { addrReg[31:16], 1'd1, missWriteReg } ;
  assign MUX_tags_bram$b_put_3__VAL_2 =
	     { x_a_read_tag__h4514,
	       req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	       IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	       req_fifo$D_OUT[0],
	       1'd1 } ;

  // inlined wires
  assign out_fifo_rw_enq$wget =
	     MUX_out_fifo_rw_enq$wset_1__SEL_1 ? v__h4661 : resp__h13851 ;
  assign out_fifo_rw_enq$whas =
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     !req_fifo$D_OUT[316] ||
	     WILL_FIRE_RL_memResp_fifo_rule_deq && !missWriteReg ;
  assign memReq_fifo_rw_enq$wget =
	     MUX_memReq_fifo_rw_enq$wset_1__SEL_1 ?
	       MUX_memReq_fifo_rw_enq$wset_1__VAL_1 :
	       MUX_memReq_fifo_rw_enq$wset_1__VAL_2 ;
  assign memReq_fifo_rw_enq$whas =
	     WILL_FIRE_RL_getCacheResponse &&
	     (NOT_req_fifo_first__0_BITS_315_TO_300_5_EQ_IF__ETC___d296 ||
	      !req_fifo$D_OUT[0]) ||
	     !memReq_fifo_taggedReg[317] && evict_fifo$EMPTY_N &&
	     cacheState == 2'd2 ;

  // register addrReg
  assign addrReg$D_IN = { req_fifo$D_OUT[315:289], 5'b0 } ;
  assign addrReg$EN = WILL_FIRE_RL_getCacheResponse ;

  // register bank_lastReadAddrA
  assign bank_lastReadAddrA$D_IN = cache_request_put[299:289] ;
  assign bank_lastReadAddrA$EN = EN_cache_request_put ;

  // register bank_lastReadAddrA_1
  assign bank_lastReadAddrA_1$D_IN = cache_request_put[299:289] ;
  assign bank_lastReadAddrA_1$EN = EN_cache_request_put ;

  // register bank_lastReadAddrA_2
  assign bank_lastReadAddrA_2$D_IN = cache_request_put[299:289] ;
  assign bank_lastReadAddrA_2$EN = EN_cache_request_put ;

  // register bank_lastReadAddrA_3
  assign bank_lastReadAddrA_3$D_IN = cache_request_put[299:289] ;
  assign bank_lastReadAddrA_3$EN = EN_cache_request_put ;

  // register bank_lastReadAddrB
  assign bank_lastReadAddrB$D_IN = 11'h0 ;
  assign bank_lastReadAddrB$EN = 1'b0 ;

  // register bank_lastReadAddrB_1
  assign bank_lastReadAddrB_1$D_IN = 11'h0 ;
  assign bank_lastReadAddrB_1$EN = 1'b0 ;

  // register bank_lastReadAddrB_2
  assign bank_lastReadAddrB_2$D_IN = 11'h0 ;
  assign bank_lastReadAddrB_2$EN = 1'b0 ;

  // register bank_lastReadAddrB_3
  assign bank_lastReadAddrB_3$D_IN = 11'h0 ;
  assign bank_lastReadAddrB_3$EN = 1'b0 ;

  // register bank_lastWriteAddrA
  assign bank_lastWriteAddrA$D_IN = 11'h0 ;
  assign bank_lastWriteAddrA$EN = 1'b0 ;

  // register bank_lastWriteAddrA_1
  assign bank_lastWriteAddrA_1$D_IN = 11'h0 ;
  assign bank_lastWriteAddrA_1$EN = 1'b0 ;

  // register bank_lastWriteAddrA_2
  assign bank_lastWriteAddrA_2$D_IN = 11'h0 ;
  assign bank_lastWriteAddrA_2$EN = 1'b0 ;

  // register bank_lastWriteAddrA_3
  assign bank_lastWriteAddrA_3$D_IN = 11'h0 ;
  assign bank_lastWriteAddrA_3$EN = 1'b0 ;

  // register bank_lastWriteAddrB
  assign bank_lastWriteAddrB$D_IN =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       addrReg[15:5] :
	       req_fifo$D_OUT[299:289] ;
  assign bank_lastWriteAddrB$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // register bank_lastWriteAddrB_1
  assign bank_lastWriteAddrB_1$D_IN =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       addrReg[15:5] :
	       req_fifo$D_OUT[299:289] ;
  assign bank_lastWriteAddrB_1$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // register bank_lastWriteAddrB_2
  assign bank_lastWriteAddrB_2$D_IN =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       addrReg[15:5] :
	       req_fifo$D_OUT[299:289] ;
  assign bank_lastWriteAddrB_2$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // register bank_lastWriteAddrB_3
  assign bank_lastWriteAddrB_3$D_IN =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       addrReg[15:5] :
	       req_fifo$D_OUT[299:289] ;
  assign bank_lastWriteAddrB_3$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // register bank_lastWriteDataA
  assign bank_lastWriteDataA$D_IN = 64'h0 ;
  assign bank_lastWriteDataA$EN = 1'b0 ;

  // register bank_lastWriteDataA_1
  assign bank_lastWriteDataA_1$D_IN = 64'h0 ;
  assign bank_lastWriteDataA_1$EN = 1'b0 ;

  // register bank_lastWriteDataA_2
  assign bank_lastWriteDataA_2$D_IN = 64'h0 ;
  assign bank_lastWriteDataA_2$EN = 1'b0 ;

  // register bank_lastWriteDataA_3
  assign bank_lastWriteDataA_3$D_IN = 64'h0 ;
  assign bank_lastWriteDataA_3$EN = 1'b0 ;

  // register bank_lastWriteDataB
  assign bank_lastWriteDataB$D_IN =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       MUX_bank_bram$b_put_3__VAL_1 :
	       MUX_bank_bram$b_put_3__VAL_2 ;
  assign bank_lastWriteDataB$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // register bank_lastWriteDataB_1
  assign bank_lastWriteDataB_1$D_IN =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       MUX_bank_bram_1$b_put_3__VAL_1 :
	       MUX_bank_bram_1$b_put_3__VAL_2 ;
  assign bank_lastWriteDataB_1$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // register bank_lastWriteDataB_2
  assign bank_lastWriteDataB_2$D_IN =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       MUX_bank_bram_2$b_put_3__VAL_1 :
	       MUX_bank_bram_2$b_put_3__VAL_2 ;
  assign bank_lastWriteDataB_2$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // register bank_lastWriteDataB_3
  assign bank_lastWriteDataB_3$D_IN =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       MUX_bank_bram_3$b_put_3__VAL_1 :
	       MUX_bank_bram_3$b_put_3__VAL_2 ;
  assign bank_lastWriteDataB_3$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // register byteWriteReg_0
  assign byteWriteReg_0$D_IN =
	     req_fifo$D_OUT[316] ? req_fifo$D_OUT[8:1] : 8'd0 ;
  assign byteWriteReg_0$EN = MUX_cacheState$write_1__SEL_2 ;

  // register byteWriteReg_1
  assign byteWriteReg_1$D_IN =
	     req_fifo$D_OUT[316] ? req_fifo$D_OUT[16:9] : 8'd0 ;
  assign byteWriteReg_1$EN = MUX_cacheState$write_1__SEL_2 ;

  // register byteWriteReg_2
  assign byteWriteReg_2$D_IN =
	     req_fifo$D_OUT[316] ? req_fifo$D_OUT[24:17] : 8'd0 ;
  assign byteWriteReg_2$EN = MUX_cacheState$write_1__SEL_2 ;

  // register byteWriteReg_3
  assign byteWriteReg_3$D_IN =
	     req_fifo$D_OUT[316] ? req_fifo$D_OUT[32:25] : 8'd0 ;
  assign byteWriteReg_3$EN = MUX_cacheState$write_1__SEL_2 ;

  // register cacheState
  assign cacheState$D_IN =
	     (MUX_cacheState$write_1__SEL_1 ||
	      WILL_FIRE_RL_clearNewRequests) ?
	       2'd1 :
	       2'd2 ;
  assign cacheState$EN =
	     cacheState == 2'd0 && count == 11'd2047 ||
	     WILL_FIRE_RL_getCacheResponse &&
	     (NOT_req_fifo_first__0_BITS_315_TO_300_5_EQ_IF__ETC___d296 ||
	      !req_fifo$D_OUT[0]) &&
	     (req_fifo$D_OUT[0] || !req_fifo$D_OUT[316]) ||
	     WILL_FIRE_RL_clearNewRequests ;

  // register count
  assign count$D_IN = count + 11'd1 ;
  assign count$EN = cacheState == 2'd0 ;

  // register dataReg
  assign dataReg$D_IN = req_fifo$D_OUT[288:33] ;
  assign dataReg$EN = WILL_FIRE_RL_getCacheResponse ;

  // register memReq_fifo_taggedReg
  assign memReq_fifo_taggedReg$D_IN =
	     WILL_FIRE_RL_memReq_fifo_rule_enq ?
	       MUX_memReq_fifo_taggedReg$write_1__VAL_1 :
	       318'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign memReq_fifo_taggedReg$EN =
	     WILL_FIRE_RL_memReq_fifo_rule_enq || EN_memory_request_get ;

  // register memResp_fifo_taggedReg
  assign memResp_fifo_taggedReg$D_IN =
	     WILL_FIRE_RL_memResp_fifo_rule_enq ?
	       MUX_memResp_fifo_taggedReg$write_1__VAL_1 :
	       257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign memResp_fifo_taggedReg$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_enq ||
	     WILL_FIRE_RL_memResp_fifo_rule_deq ;

  // register missCached
  assign missCached$D_IN = req_fifo$D_OUT[0] ;
  assign missCached$EN = WILL_FIRE_RL_getCacheResponse ;

  // register missWriteReg
  assign missWriteReg$D_IN = req_fifo$D_OUT[316] ;
  assign missWriteReg$EN = MUX_cacheState$write_1__SEL_2 ;

  // register out_fifo_taggedReg
  assign out_fifo_taggedReg$D_IN =
	     WILL_FIRE_RL_out_fifo_rule_enq ?
	       MUX_out_fifo_taggedReg$write_1__VAL_1 :
	       257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign out_fifo_taggedReg$EN =
	     WILL_FIRE_RL_out_fifo_rule_enq || EN_cache_response_get ;

  // register tags_lastReadAddrA
  assign tags_lastReadAddrA$D_IN = cache_request_put[299:289] ;
  assign tags_lastReadAddrA$EN = EN_cache_request_put ;

  // register tags_lastReadAddrB
  assign tags_lastReadAddrB$D_IN = 11'h0 ;
  assign tags_lastReadAddrB$EN = 1'b0 ;

  // register tags_lastWriteAddrA
  assign tags_lastWriteAddrA$D_IN = 11'h0 ;
  assign tags_lastWriteAddrA$EN = 1'b0 ;

  // register tags_lastWriteAddrB
  always@(MUX_bank_bram$b_put_1__SEL_1 or
	  addrReg or
	  MUX_tags_bram$b_put_1__SEL_2 or
	  req_fifo$D_OUT or cacheState or count)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bank_bram$b_put_1__SEL_1: tags_lastWriteAddrB$D_IN = addrReg[15:5];
      MUX_tags_bram$b_put_1__SEL_2:
	  tags_lastWriteAddrB$D_IN = req_fifo$D_OUT[299:289];
      cacheState == 2'd0: tags_lastWriteAddrB$D_IN = count;
      default: tags_lastWriteAddrB$D_IN =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign tags_lastWriteAddrB$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d65 ||
	     cacheState == 2'd0 ;

  // register tags_lastWriteDataA
  assign tags_lastWriteDataA$D_IN = 18'h0 ;
  assign tags_lastWriteDataA$EN = 1'b0 ;

  // register tags_lastWriteDataB
  always@(MUX_bank_bram$b_put_1__SEL_1 or
	  MUX_tags_bram$b_put_3__VAL_1 or
	  MUX_tags_bram$b_put_1__SEL_2 or
	  MUX_tags_bram$b_put_3__VAL_2 or cacheState)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bank_bram$b_put_1__SEL_1:
	  tags_lastWriteDataB$D_IN = MUX_tags_bram$b_put_3__VAL_1;
      MUX_tags_bram$b_put_1__SEL_2:
	  tags_lastWriteDataB$D_IN = MUX_tags_bram$b_put_3__VAL_2;
      cacheState == 2'd0: tags_lastWriteDataB$D_IN = 18'h2AAA8;
      default: tags_lastWriteDataB$D_IN =
		   18'b101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign tags_lastWriteDataB$EN =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d65 ||
	     cacheState == 2'd0 ;

  // register updateReg
  assign updateReg$D_IN = 256'h0 ;
  assign updateReg$EN = 1'b0 ;

  // submodule bank_bram
  assign bank_bram$ADDRA = cache_request_put[299:289] ;
  assign bank_bram$ADDRB =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       addrReg[15:5] :
	       req_fifo$D_OUT[299:289] ;
  assign bank_bram$DIA = 64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign bank_bram$DIB =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       MUX_bank_bram$b_put_3__VAL_1 :
	       MUX_bank_bram$b_put_3__VAL_2 ;
  assign bank_bram$WEA = 1'd0 ;
  assign bank_bram$WEB = 1'd1 ;
  assign bank_bram$ENA = EN_cache_request_put ;
  assign bank_bram$ENB =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // submodule bank_bram_1
  assign bank_bram_1$ADDRA = cache_request_put[299:289] ;
  assign bank_bram_1$ADDRB =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       addrReg[15:5] :
	       req_fifo$D_OUT[299:289] ;
  assign bank_bram_1$DIA = 64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign bank_bram_1$DIB =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       MUX_bank_bram_1$b_put_3__VAL_1 :
	       MUX_bank_bram_1$b_put_3__VAL_2 ;
  assign bank_bram_1$WEA = 1'd0 ;
  assign bank_bram_1$WEB = 1'd1 ;
  assign bank_bram_1$ENA = EN_cache_request_put ;
  assign bank_bram_1$ENB =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // submodule bank_bram_2
  assign bank_bram_2$ADDRA = cache_request_put[299:289] ;
  assign bank_bram_2$ADDRB =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       addrReg[15:5] :
	       req_fifo$D_OUT[299:289] ;
  assign bank_bram_2$DIA = 64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign bank_bram_2$DIB =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       MUX_bank_bram_2$b_put_3__VAL_1 :
	       MUX_bank_bram_2$b_put_3__VAL_2 ;
  assign bank_bram_2$WEA = 1'd0 ;
  assign bank_bram_2$WEB = 1'd1 ;
  assign bank_bram_2$ENA = EN_cache_request_put ;
  assign bank_bram_2$ENB =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // submodule bank_bram_3
  assign bank_bram_3$ADDRA = cache_request_put[299:289] ;
  assign bank_bram_3$ADDRB =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       addrReg[15:5] :
	       req_fifo$D_OUT[299:289] ;
  assign bank_bram_3$DIA = 64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign bank_bram_3$DIB =
	     MUX_bank_bram$b_put_1__SEL_1 ?
	       MUX_bank_bram_3$b_put_3__VAL_1 :
	       MUX_bank_bram_3$b_put_3__VAL_2 ;
  assign bank_bram_3$WEA = 1'd0 ;
  assign bank_bram_3$WEB = 1'd1 ;
  assign bank_bram_3$ENA = EN_cache_request_put ;
  assign bank_bram_3$ENB =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ;

  // submodule evict_fifo
  assign evict_fifo$D_IN = { x_addr__h12399, v__h4661 } ;
  assign evict_fifo$ENQ =
	     WILL_FIRE_RL_getCacheResponse &&
	     (NOT_req_fifo_first__0_BITS_315_TO_300_5_EQ_IF__ETC___d296 ||
	      !req_fifo$D_OUT[0]) &&
	     (req_fifo$D_OUT[316] && req_fifo$D_OUT[0] &&
	      IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d317 ||
	      !req_fifo$D_OUT[316] &&
	      IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d317) ;
  assign evict_fifo$DEQ = MUX_memReq_fifo_rw_enq$wset_1__SEL_2 ;
  assign evict_fifo$CLR = 1'b0 ;

  // submodule req_fifo
  assign req_fifo$D_IN = cache_request_put ;
  assign req_fifo$ENQ = EN_cache_request_put ;
  assign req_fifo$DEQ =
	     _dand1req_fifo$EN_deq || WILL_FIRE_RL_clearNewRequests ;
  assign req_fifo$CLR = 1'b0 ;

  // submodule tags_bram
  assign tags_bram$ADDRA = cache_request_put[299:289] ;
  always@(MUX_bank_bram$b_put_1__SEL_1 or
	  addrReg or
	  MUX_tags_bram$b_put_1__SEL_2 or
	  req_fifo$D_OUT or cacheState or count)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bank_bram$b_put_1__SEL_1: tags_bram$ADDRB = addrReg[15:5];
      MUX_tags_bram$b_put_1__SEL_2: tags_bram$ADDRB = req_fifo$D_OUT[299:289];
      cacheState == 2'd0: tags_bram$ADDRB = count;
      default: tags_bram$ADDRB = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign tags_bram$DIA = 18'b101010101010101010 /* unspecified value */  ;
  always@(MUX_bank_bram$b_put_1__SEL_1 or
	  MUX_tags_bram$b_put_3__VAL_1 or
	  MUX_tags_bram$b_put_1__SEL_2 or
	  MUX_tags_bram$b_put_3__VAL_2 or cacheState)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bank_bram$b_put_1__SEL_1:
	  tags_bram$DIB = MUX_tags_bram$b_put_3__VAL_1;
      MUX_tags_bram$b_put_1__SEL_2:
	  tags_bram$DIB = MUX_tags_bram$b_put_3__VAL_2;
      cacheState == 2'd0: tags_bram$DIB = 18'h2AAA8;
      default: tags_bram$DIB =
		   18'b101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign tags_bram$WEA = 1'd0 ;
  assign tags_bram$WEB = 1'd1 ;
  assign tags_bram$ENA = EN_cache_request_put ;
  assign tags_bram$ENB =
	     WILL_FIRE_RL_memResp_fifo_rule_deq && missCached ||
	     WILL_FIRE_RL_getCacheResponse &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d65 ||
	     cacheState == 2'd0 ;

  // submodule tags_fifo
  assign tags_fifo$D_IN = 18'h0 ;
  assign tags_fifo$ENQ = 1'b0 ;
  assign tags_fifo$DEQ = 1'b0 ;
  assign tags_fifo$CLR = 1'b0 ;

  // submodule toServing_fifo
  assign toServing_fifo$D_IN = 1'd1 ;
  assign toServing_fifo$ENQ = WILL_FIRE_RL_memResp_fifo_rule_deq ;
  assign toServing_fifo$DEQ = WILL_FIRE_RL_clearNewRequests ;
  assign toServing_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_bank_lastReadAddrA_1_read__35_EQ_bank_lastW_ETC___d580 =
	     (bank_lastReadAddrA_1 == bank_lastWriteAddrB_1) ?
	       bank_lastWriteDataB_1 :
	       bank_bram_1$DOA ;
  assign IF_bank_lastReadAddrA_2_read__88_EQ_bank_lastW_ETC___d574 =
	     (bank_lastReadAddrA_2 == bank_lastWriteAddrB_2) ?
	       bank_lastWriteDataB_2 :
	       bank_bram_2$DOA ;
  assign IF_bank_lastReadAddrA_3_read__41_EQ_bank_lastW_ETC___d569 =
	     (bank_lastReadAddrA_3 == bank_lastWriteAddrB_3) ?
	       bank_lastWriteDataB_3 :
	       bank_bram_3$DOA ;
  assign IF_bank_lastReadAddrA_read__2_EQ_bank_lastWrit_ETC___d586 =
	     (bank_lastReadAddrA == bank_lastWriteAddrB) ?
	       bank_lastWriteDataB :
	       bank_bram$DOA ;
  assign IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_0_ETC___d382 =
	     (missWriteReg && byteWriteReg_0[0]) ?
	       dataReg[7:0] :
	       resp__h13851[7:0] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_1_ETC___d377 =
	     (missWriteReg && byteWriteReg_0[1]) ?
	       dataReg[15:8] :
	       resp__h13851[15:8] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_2_ETC___d372 =
	     (missWriteReg && byteWriteReg_0[2]) ?
	       dataReg[23:16] :
	       resp__h13851[23:16] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_3_ETC___d367 =
	     (missWriteReg && byteWriteReg_0[3]) ?
	       dataReg[31:24] :
	       resp__h13851[31:24] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_4_ETC___d362 =
	     (missWriteReg && byteWriteReg_0[4]) ?
	       dataReg[39:32] :
	       resp__h13851[39:32] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_5_ETC___d357 =
	     (missWriteReg && byteWriteReg_0[5]) ?
	       dataReg[47:40] :
	       resp__h13851[47:40] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_6_ETC___d352 =
	     (missWriteReg && byteWriteReg_0[6]) ?
	       dataReg[55:48] :
	       resp__h13851[55:48] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_0_41_BIT_7_ETC___d347 =
	     (missWriteReg && byteWriteReg_0[7]) ?
	       dataReg[63:56] :
	       resp__h13851[63:56] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_0_ETC___d427 =
	     (missWriteReg && byteWriteReg_1[0]) ?
	       dataReg[71:64] :
	       resp__h13851[71:64] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_1_ETC___d422 =
	     (missWriteReg && byteWriteReg_1[1]) ?
	       dataReg[79:72] :
	       resp__h13851[79:72] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_2_ETC___d417 =
	     (missWriteReg && byteWriteReg_1[2]) ?
	       dataReg[87:80] :
	       resp__h13851[87:80] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_3_ETC___d412 =
	     (missWriteReg && byteWriteReg_1[3]) ?
	       dataReg[95:88] :
	       resp__h13851[95:88] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_4_ETC___d407 =
	     (missWriteReg && byteWriteReg_1[4]) ?
	       dataReg[103:96] :
	       resp__h13851[103:96] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_5_ETC___d402 =
	     (missWriteReg && byteWriteReg_1[5]) ?
	       dataReg[111:104] :
	       resp__h13851[111:104] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_6_ETC___d397 =
	     (missWriteReg && byteWriteReg_1[6]) ?
	       dataReg[119:112] :
	       resp__h13851[119:112] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_1_87_BIT_7_ETC___d392 =
	     (missWriteReg && byteWriteReg_1[7]) ?
	       dataReg[127:120] :
	       resp__h13851[127:120] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_0_ETC___d472 =
	     (missWriteReg && byteWriteReg_2[0]) ?
	       dataReg[135:128] :
	       resp__h13851[135:128] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_1_ETC___d467 =
	     (missWriteReg && byteWriteReg_2[1]) ?
	       dataReg[143:136] :
	       resp__h13851[143:136] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_2_ETC___d462 =
	     (missWriteReg && byteWriteReg_2[2]) ?
	       dataReg[151:144] :
	       resp__h13851[151:144] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_3_ETC___d457 =
	     (missWriteReg && byteWriteReg_2[3]) ?
	       dataReg[159:152] :
	       resp__h13851[159:152] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_4_ETC___d452 =
	     (missWriteReg && byteWriteReg_2[4]) ?
	       dataReg[167:160] :
	       resp__h13851[167:160] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_5_ETC___d447 =
	     (missWriteReg && byteWriteReg_2[5]) ?
	       dataReg[175:168] :
	       resp__h13851[175:168] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_6_ETC___d442 =
	     (missWriteReg && byteWriteReg_2[6]) ?
	       dataReg[183:176] :
	       resp__h13851[183:176] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_2_32_BIT_7_ETC___d437 =
	     (missWriteReg && byteWriteReg_2[7]) ?
	       dataReg[191:184] :
	       resp__h13851[191:184] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_0_ETC___d517 =
	     (missWriteReg && byteWriteReg_3[0]) ?
	       dataReg[199:192] :
	       resp__h13851[199:192] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_1_ETC___d512 =
	     (missWriteReg && byteWriteReg_3[1]) ?
	       dataReg[207:200] :
	       resp__h13851[207:200] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_2_ETC___d507 =
	     (missWriteReg && byteWriteReg_3[2]) ?
	       dataReg[215:208] :
	       resp__h13851[215:208] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_3_ETC___d502 =
	     (missWriteReg && byteWriteReg_3[3]) ?
	       dataReg[223:216] :
	       resp__h13851[223:216] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_4_ETC___d497 =
	     (missWriteReg && byteWriteReg_3[4]) ?
	       dataReg[231:224] :
	       resp__h13851[231:224] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_5_ETC___d492 =
	     (missWriteReg && byteWriteReg_3[5]) ?
	       dataReg[239:232] :
	       resp__h13851[239:232] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_6_ETC___d487 =
	     (missWriteReg && byteWriteReg_3[6]) ?
	       dataReg[247:240] :
	       resp__h13851[247:240] ;
  assign IF_missWriteReg_33_AND_byteWriteReg_3_77_BIT_7_ETC___d482 =
	     (missWriteReg && byteWriteReg_3[7]) ?
	       dataReg[255:248] :
	       resp__h13851[255:248] ;
  assign IF_req_fifo_first__0_BIT_10_33_THEN_IF_req_fif_ETC___d578 =
	     req_fifo$D_OUT[10] ?
	       { IF_req_fifo_first__0_BIT_9_34_THEN_IF_bank_las_ETC___d579[63:16],
		 req_fifo$D_OUT[112:105],
		 IF_req_fifo_first__0_BIT_9_34_THEN_IF_bank_las_ETC___d579[7:0] } :
	       IF_req_fifo_first__0_BIT_9_34_THEN_IF_bank_las_ETC___d579 ;
  assign IF_req_fifo_first__0_BIT_11_32_THEN_IF_req_fif_ETC___d577 =
	     req_fifo$D_OUT[11] ?
	       { IF_req_fifo_first__0_BIT_10_33_THEN_IF_req_fif_ETC___d578[63:24],
		 req_fifo$D_OUT[120:113],
		 IF_req_fifo_first__0_BIT_10_33_THEN_IF_req_fif_ETC___d578[15:0] } :
	       IF_req_fifo_first__0_BIT_10_33_THEN_IF_req_fif_ETC___d578 ;
  assign IF_req_fifo_first__0_BIT_12_31_THEN_IF_req_fif_ETC___d576 =
	     req_fifo$D_OUT[12] ?
	       { IF_req_fifo_first__0_BIT_11_32_THEN_IF_req_fif_ETC___d577[63:32],
		 req_fifo$D_OUT[128:121],
		 IF_req_fifo_first__0_BIT_11_32_THEN_IF_req_fif_ETC___d577[23:0] } :
	       IF_req_fifo_first__0_BIT_11_32_THEN_IF_req_fif_ETC___d577 ;
  assign IF_req_fifo_first__0_BIT_13_30_THEN_IF_req_fif_ETC___d575 =
	     req_fifo$D_OUT[13] ?
	       { IF_req_fifo_first__0_BIT_12_31_THEN_IF_req_fif_ETC___d576[63:40],
		 req_fifo$D_OUT[136:129],
		 IF_req_fifo_first__0_BIT_12_31_THEN_IF_req_fif_ETC___d576[31:0] } :
	       IF_req_fifo_first__0_BIT_12_31_THEN_IF_req_fif_ETC___d576 ;
  assign IF_req_fifo_first__0_BIT_14_29_THEN_IF_req_fif_ETC___d547 =
	     req_fifo$D_OUT[14] ?
	       { IF_req_fifo_first__0_BIT_13_30_THEN_IF_req_fif_ETC___d575[63:48],
		 req_fifo$D_OUT[144:137],
		 IF_req_fifo_first__0_BIT_13_30_THEN_IF_req_fif_ETC___d575[39:0] } :
	       IF_req_fifo_first__0_BIT_13_30_THEN_IF_req_fif_ETC___d575 ;
  assign IF_req_fifo_first__0_BIT_15_28_THEN_IF_req_fif_ETC___d555 =
	     req_fifo$D_OUT[15] ?
	       { IF_req_fifo_first__0_BIT_14_29_THEN_IF_req_fif_ETC___d547[63:56],
		 req_fifo$D_OUT[152:145],
		 IF_req_fifo_first__0_BIT_14_29_THEN_IF_req_fif_ETC___d547[47:0] } :
	       IF_req_fifo_first__0_BIT_14_29_THEN_IF_req_fif_ETC___d547 ;
  assign IF_req_fifo_first__0_BIT_16_26_THEN_req_fifo_f_ETC___d589 =
	     req_fifo$D_OUT[16] ?
	       { req_fifo$D_OUT[160:153],
		 IF_req_fifo_first__0_BIT_15_28_THEN_IF_req_fif_ETC___d555[55:0] } :
	       IF_req_fifo_first__0_BIT_15_28_THEN_IF_req_fif_ETC___d555 ;
  assign IF_req_fifo_first__0_BIT_17_87_THEN_IF_bank_la_ETC___d573 =
	     req_fifo$D_OUT[17] ?
	       { IF_bank_lastReadAddrA_2_read__88_EQ_bank_lastW_ETC___d574[63:8],
		 req_fifo$D_OUT[168:161] } :
	       IF_bank_lastReadAddrA_2_read__88_EQ_bank_lastW_ETC___d574 ;
  assign IF_req_fifo_first__0_BIT_18_86_THEN_IF_req_fif_ETC___d572 =
	     req_fifo$D_OUT[18] ?
	       { IF_req_fifo_first__0_BIT_17_87_THEN_IF_bank_la_ETC___d573[63:16],
		 req_fifo$D_OUT[176:169],
		 IF_req_fifo_first__0_BIT_17_87_THEN_IF_bank_la_ETC___d573[7:0] } :
	       IF_req_fifo_first__0_BIT_17_87_THEN_IF_bank_la_ETC___d573 ;
  assign IF_req_fifo_first__0_BIT_19_85_THEN_IF_req_fif_ETC___d548 =
	     req_fifo$D_OUT[19] ?
	       { IF_req_fifo_first__0_BIT_18_86_THEN_IF_req_fif_ETC___d572[63:24],
		 req_fifo$D_OUT[184:177],
		 IF_req_fifo_first__0_BIT_18_86_THEN_IF_req_fif_ETC___d572[15:0] } :
	       IF_req_fifo_first__0_BIT_18_86_THEN_IF_req_fif_ETC___d572 ;
  assign IF_req_fifo_first__0_BIT_1_1_THEN_IF_bank_last_ETC___d585 =
	     req_fifo$D_OUT[1] ?
	       { IF_bank_lastReadAddrA_read__2_EQ_bank_lastWrit_ETC___d586[63:8],
		 req_fifo$D_OUT[40:33] } :
	       IF_bank_lastReadAddrA_read__2_EQ_bank_lastWrit_ETC___d586 ;
  assign IF_req_fifo_first__0_BIT_20_84_THEN_IF_req_fif_ETC___d571 =
	     req_fifo$D_OUT[20] ?
	       { IF_req_fifo_first__0_BIT_19_85_THEN_IF_req_fif_ETC___d548[63:32],
		 req_fifo$D_OUT[192:185],
		 IF_req_fifo_first__0_BIT_19_85_THEN_IF_req_fif_ETC___d548[23:0] } :
	       IF_req_fifo_first__0_BIT_19_85_THEN_IF_req_fif_ETC___d548 ;
  assign IF_req_fifo_first__0_BIT_21_83_THEN_IF_req_fif_ETC___d570 =
	     req_fifo$D_OUT[21] ?
	       { IF_req_fifo_first__0_BIT_20_84_THEN_IF_req_fif_ETC___d571[63:40],
		 req_fifo$D_OUT[200:193],
		 IF_req_fifo_first__0_BIT_20_84_THEN_IF_req_fif_ETC___d571[31:0] } :
	       IF_req_fifo_first__0_BIT_20_84_THEN_IF_req_fif_ETC___d571 ;
  assign IF_req_fifo_first__0_BIT_22_82_THEN_IF_req_fif_ETC___d592 =
	     req_fifo$D_OUT[22] ?
	       { IF_req_fifo_first__0_BIT_21_83_THEN_IF_req_fif_ETC___d570[63:48],
		 req_fifo$D_OUT[208:201],
		 IF_req_fifo_first__0_BIT_21_83_THEN_IF_req_fif_ETC___d570[39:0] } :
	       IF_req_fifo_first__0_BIT_21_83_THEN_IF_req_fif_ETC___d570 ;
  assign IF_req_fifo_first__0_BIT_23_81_THEN_IF_req_fif_ETC___d554 =
	     req_fifo$D_OUT[23] ?
	       { IF_req_fifo_first__0_BIT_22_82_THEN_IF_req_fif_ETC___d592[63:56],
		 req_fifo$D_OUT[216:209],
		 IF_req_fifo_first__0_BIT_22_82_THEN_IF_req_fif_ETC___d592[47:0] } :
	       IF_req_fifo_first__0_BIT_22_82_THEN_IF_req_fif_ETC___d592 ;
  assign IF_req_fifo_first__0_BIT_24_79_THEN_req_fifo_f_ETC___d588 =
	     req_fifo$D_OUT[24] ?
	       { req_fifo$D_OUT[224:217],
		 IF_req_fifo_first__0_BIT_23_81_THEN_IF_req_fif_ETC___d554[55:0] } :
	       IF_req_fifo_first__0_BIT_23_81_THEN_IF_req_fif_ETC___d554 ;
  assign IF_req_fifo_first__0_BIT_25_40_THEN_IF_bank_la_ETC___d568 =
	     req_fifo$D_OUT[25] ?
	       { IF_bank_lastReadAddrA_3_read__41_EQ_bank_lastW_ETC___d569[63:8],
		 req_fifo$D_OUT[232:225] } :
	       IF_bank_lastReadAddrA_3_read__41_EQ_bank_lastW_ETC___d569 ;
  assign IF_req_fifo_first__0_BIT_26_39_THEN_IF_req_fif_ETC___d567 =
	     req_fifo$D_OUT[26] ?
	       { IF_req_fifo_first__0_BIT_25_40_THEN_IF_bank_la_ETC___d568[63:16],
		 req_fifo$D_OUT[240:233],
		 IF_req_fifo_first__0_BIT_25_40_THEN_IF_bank_la_ETC___d568[7:0] } :
	       IF_req_fifo_first__0_BIT_25_40_THEN_IF_bank_la_ETC___d568 ;
  assign IF_req_fifo_first__0_BIT_27_38_THEN_IF_req_fif_ETC___d566 =
	     req_fifo$D_OUT[27] ?
	       { IF_req_fifo_first__0_BIT_26_39_THEN_IF_req_fif_ETC___d567[63:24],
		 req_fifo$D_OUT[248:241],
		 IF_req_fifo_first__0_BIT_26_39_THEN_IF_req_fif_ETC___d567[15:0] } :
	       IF_req_fifo_first__0_BIT_26_39_THEN_IF_req_fif_ETC___d567 ;
  assign IF_req_fifo_first__0_BIT_28_37_THEN_IF_req_fif_ETC___d565 =
	     req_fifo$D_OUT[28] ?
	       { IF_req_fifo_first__0_BIT_27_38_THEN_IF_req_fif_ETC___d566[63:32],
		 req_fifo$D_OUT[256:249],
		 IF_req_fifo_first__0_BIT_27_38_THEN_IF_req_fif_ETC___d566[23:0] } :
	       IF_req_fifo_first__0_BIT_27_38_THEN_IF_req_fif_ETC___d566 ;
  assign IF_req_fifo_first__0_BIT_29_36_THEN_IF_req_fif_ETC___d564 =
	     req_fifo$D_OUT[29] ?
	       { IF_req_fifo_first__0_BIT_28_37_THEN_IF_req_fif_ETC___d565[63:40],
		 req_fifo$D_OUT[264:257],
		 IF_req_fifo_first__0_BIT_28_37_THEN_IF_req_fif_ETC___d565[31:0] } :
	       IF_req_fifo_first__0_BIT_28_37_THEN_IF_req_fif_ETC___d565 ;
  assign IF_req_fifo_first__0_BIT_2_0_THEN_IF_req_fifo__ETC___d584 =
	     req_fifo$D_OUT[2] ?
	       { IF_req_fifo_first__0_BIT_1_1_THEN_IF_bank_last_ETC___d585[63:16],
		 req_fifo$D_OUT[48:41],
		 IF_req_fifo_first__0_BIT_1_1_THEN_IF_bank_last_ETC___d585[7:0] } :
	       IF_req_fifo_first__0_BIT_1_1_THEN_IF_bank_last_ETC___d585 ;
  assign IF_req_fifo_first__0_BIT_30_35_THEN_IF_req_fif_ETC___d591 =
	     req_fifo$D_OUT[30] ?
	       { IF_req_fifo_first__0_BIT_29_36_THEN_IF_req_fif_ETC___d564[63:48],
		 req_fifo$D_OUT[272:265],
		 IF_req_fifo_first__0_BIT_29_36_THEN_IF_req_fif_ETC___d564[39:0] } :
	       IF_req_fifo_first__0_BIT_29_36_THEN_IF_req_fif_ETC___d564 ;
  assign IF_req_fifo_first__0_BIT_31_34_THEN_IF_req_fif_ETC___d553 =
	     req_fifo$D_OUT[31] ?
	       { IF_req_fifo_first__0_BIT_30_35_THEN_IF_req_fif_ETC___d591[63:56],
		 req_fifo$D_OUT[280:273],
		 IF_req_fifo_first__0_BIT_30_35_THEN_IF_req_fif_ETC___d591[47:0] } :
	       IF_req_fifo_first__0_BIT_30_35_THEN_IF_req_fif_ETC___d591 ;
  assign IF_req_fifo_first__0_BIT_32_32_THEN_req_fifo_f_ETC___d587 =
	     req_fifo$D_OUT[32] ?
	       { req_fifo$D_OUT[288:281],
		 IF_req_fifo_first__0_BIT_31_34_THEN_IF_req_fif_ETC___d553[55:0] } :
	       IF_req_fifo_first__0_BIT_31_34_THEN_IF_req_fif_ETC___d553 ;
  assign IF_req_fifo_first__0_BIT_3_9_THEN_IF_req_fifo__ETC___d583 =
	     req_fifo$D_OUT[3] ?
	       { IF_req_fifo_first__0_BIT_2_0_THEN_IF_req_fifo__ETC___d584[63:24],
		 req_fifo$D_OUT[56:49],
		 IF_req_fifo_first__0_BIT_2_0_THEN_IF_req_fifo__ETC___d584[15:0] } :
	       IF_req_fifo_first__0_BIT_2_0_THEN_IF_req_fifo__ETC___d584 ;
  assign IF_req_fifo_first__0_BIT_4_8_THEN_IF_req_fifo__ETC___d582 =
	     req_fifo$D_OUT[4] ?
	       { IF_req_fifo_first__0_BIT_3_9_THEN_IF_req_fifo__ETC___d583[63:32],
		 req_fifo$D_OUT[64:57],
		 IF_req_fifo_first__0_BIT_3_9_THEN_IF_req_fifo__ETC___d583[23:0] } :
	       IF_req_fifo_first__0_BIT_3_9_THEN_IF_req_fifo__ETC___d583 ;
  assign IF_req_fifo_first__0_BIT_5_7_THEN_IF_req_fifo__ETC___d581 =
	     req_fifo$D_OUT[5] ?
	       { IF_req_fifo_first__0_BIT_4_8_THEN_IF_req_fifo__ETC___d582[63:40],
		 req_fifo$D_OUT[72:65],
		 IF_req_fifo_first__0_BIT_4_8_THEN_IF_req_fifo__ETC___d582[31:0] } :
	       IF_req_fifo_first__0_BIT_4_8_THEN_IF_req_fifo__ETC___d582 ;
  assign IF_req_fifo_first__0_BIT_6_6_THEN_IF_req_fifo__ETC___d593 =
	     req_fifo$D_OUT[6] ?
	       { IF_req_fifo_first__0_BIT_5_7_THEN_IF_req_fifo__ETC___d581[63:48],
		 req_fifo$D_OUT[80:73],
		 IF_req_fifo_first__0_BIT_5_7_THEN_IF_req_fifo__ETC___d581[39:0] } :
	       IF_req_fifo_first__0_BIT_5_7_THEN_IF_req_fifo__ETC___d581 ;
  assign IF_req_fifo_first__0_BIT_7_5_THEN_IF_req_fifo__ETC___d557 =
	     req_fifo$D_OUT[7] ?
	       { IF_req_fifo_first__0_BIT_6_6_THEN_IF_req_fifo__ETC___d593[63:56],
		 req_fifo$D_OUT[88:81],
		 IF_req_fifo_first__0_BIT_6_6_THEN_IF_req_fifo__ETC___d593[47:0] } :
	       IF_req_fifo_first__0_BIT_6_6_THEN_IF_req_fifo__ETC___d593 ;
  assign IF_req_fifo_first__0_BIT_8_3_THEN_req_fifo_fir_ETC___d590 =
	     req_fifo$D_OUT[8] ?
	       { req_fifo$D_OUT[96:89],
		 IF_req_fifo_first__0_BIT_7_5_THEN_IF_req_fifo__ETC___d557[55:0] } :
	       IF_req_fifo_first__0_BIT_7_5_THEN_IF_req_fifo__ETC___d557 ;
  assign IF_req_fifo_first__0_BIT_9_34_THEN_IF_bank_las_ETC___d579 =
	     req_fifo$D_OUT[9] ?
	       { IF_bank_lastReadAddrA_1_read__35_EQ_bank_lastW_ETC___d580[63:8],
		 req_fifo$D_OUT[104:97] } :
	       IF_bank_lastReadAddrA_1_read__35_EQ_bank_lastW_ETC___d580 ;
  assign IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d317 =
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     (tags_lastReadAddrA_read__6_EQ_tags_lastWriteAd_ETC___d622 ?
		tags_lastWriteDataB[0] :
		tags_bram$DOA[0]) ;
  assign IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 =
	     tags_lastReadAddrA_read__6_EQ_tags_lastWriteAd_ETC___d622 ?
	       tags_lastWriteDataB[1] :
	       tags_bram$DOA[1] ;
  assign NOT_req_fifo_first__0_BITS_315_TO_300_5_EQ_IF__ETC___d296 =
	     !req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 ||
	     (tags_lastReadAddrA_read__6_EQ_tags_lastWriteAd_ETC___d622 ?
		!tags_lastWriteDataB[1] :
		!tags_bram$DOA[1]) ;
  assign _dand1req_fifo$EN_deq =
	     WILL_FIRE_RL_getCacheResponse &&
	     (req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	      IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	      req_fifo$D_OUT[0] ||
	      req_fifo$D_OUT[316] && !req_fifo$D_OUT[0]) ;
  assign byteenable__h4327 =
	     req_fifo$D_OUT[0] ? 32'hFFFFFFFF : req_fifo$D_OUT[32:1] ;
  assign req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 =
	     req_fifo$D_OUT[315:300] == x_a_read_tag__h4514 ;
  assign req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d65 =
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 &&
	     req_fifo$D_OUT[0] &&
	     req_fifo$D_OUT[316] ||
	     req_fifo$D_OUT[316] && !req_fifo$D_OUT[0] &&
	     req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	     IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 ;
  assign resp__h13851 =
	     EN_memory_response_put ?
	       memory_response_put :
	       memResp_fifo_taggedReg[255:0] ;
  assign tags_lastReadAddrA_read__6_EQ_tags_lastWriteAd_ETC___d622 =
	     tags_lastReadAddrA == tags_lastWriteAddrB ;
  assign v__h4661 =
	     (req_fifo$D_OUT[316] &&
	      (req_fifo_first__0_BITS_315_TO_300_5_EQ_IF_tags_ETC___d558 &&
	       IF_tags_lastReadAddrA_read__6_EQ_tags_lastWrit_ETC___d607 ||
	       !req_fifo$D_OUT[0])) ?
	       { IF_req_fifo_first__0_BIT_32_32_THEN_req_fifo_f_ETC___d587,
		 IF_req_fifo_first__0_BIT_24_79_THEN_req_fifo_f_ETC___d588,
		 IF_req_fifo_first__0_BIT_16_26_THEN_req_fifo_f_ETC___d589,
		 IF_req_fifo_first__0_BIT_8_3_THEN_req_fifo_fir_ETC___d590 } :
	       { IF_bank_lastReadAddrA_3_read__41_EQ_bank_lastW_ETC___d569,
		 IF_bank_lastReadAddrA_2_read__88_EQ_bank_lastW_ETC___d574,
		 IF_bank_lastReadAddrA_1_read__35_EQ_bank_lastW_ETC___d580,
		 IF_bank_lastReadAddrA_read__2_EQ_bank_lastWrit_ETC___d586 } ;
  assign x_a_read_tag__h4514 =
	     tags_lastReadAddrA_read__6_EQ_tags_lastWriteAd_ETC___d622 ?
	       tags_lastWriteDataB[17:2] :
	       tags_bram$DOA[17:2] ;
  assign x_addr__h12399 =
	     { x_a_read_tag__h4514, req_fifo$D_OUT[299:289], 5'b0 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        bank_lastReadAddrA <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastReadAddrA_1 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastReadAddrA_2 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastReadAddrA_3 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastReadAddrB <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastReadAddrB_1 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastReadAddrB_2 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastReadAddrB_3 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteAddrA <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteAddrA_1 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteAddrA_2 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteAddrA_3 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteAddrB <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteAddrB_1 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteAddrB_2 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteAddrB_3 <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	bank_lastWriteDataA <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	bank_lastWriteDataA_1 <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	bank_lastWriteDataA_2 <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	bank_lastWriteDataA_3 <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	bank_lastWriteDataB <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	bank_lastWriteDataB_1 <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	bank_lastWriteDataB_2 <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	bank_lastWriteDataB_3 <= `BSV_ASSIGNMENT_DELAY 64'hAAAAAAAAAAAAAAAA;
	byteWriteReg_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	byteWriteReg_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	byteWriteReg_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	byteWriteReg_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	cacheState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	count <= `BSV_ASSIGNMENT_DELAY 11'd0;
	memReq_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    318'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	memResp_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	missCached <= `BSV_ASSIGNMENT_DELAY 1'd0;
	missWriteReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	out_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	    257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	tags_lastReadAddrA <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	tags_lastReadAddrB <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	tags_lastWriteAddrA <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	tags_lastWriteAddrB <= `BSV_ASSIGNMENT_DELAY 11'h2AA;
	tags_lastWriteDataA <= `BSV_ASSIGNMENT_DELAY 18'h2AAAA;
	tags_lastWriteDataB <= `BSV_ASSIGNMENT_DELAY 18'h2AAAA;
      end
    else
      begin
        if (bank_lastReadAddrA$EN)
	  bank_lastReadAddrA <= `BSV_ASSIGNMENT_DELAY bank_lastReadAddrA$D_IN;
	if (bank_lastReadAddrA_1$EN)
	  bank_lastReadAddrA_1 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastReadAddrA_1$D_IN;
	if (bank_lastReadAddrA_2$EN)
	  bank_lastReadAddrA_2 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastReadAddrA_2$D_IN;
	if (bank_lastReadAddrA_3$EN)
	  bank_lastReadAddrA_3 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastReadAddrA_3$D_IN;
	if (bank_lastReadAddrB$EN)
	  bank_lastReadAddrB <= `BSV_ASSIGNMENT_DELAY bank_lastReadAddrB$D_IN;
	if (bank_lastReadAddrB_1$EN)
	  bank_lastReadAddrB_1 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastReadAddrB_1$D_IN;
	if (bank_lastReadAddrB_2$EN)
	  bank_lastReadAddrB_2 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastReadAddrB_2$D_IN;
	if (bank_lastReadAddrB_3$EN)
	  bank_lastReadAddrB_3 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastReadAddrB_3$D_IN;
	if (bank_lastWriteAddrA$EN)
	  bank_lastWriteAddrA <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteAddrA$D_IN;
	if (bank_lastWriteAddrA_1$EN)
	  bank_lastWriteAddrA_1 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteAddrA_1$D_IN;
	if (bank_lastWriteAddrA_2$EN)
	  bank_lastWriteAddrA_2 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteAddrA_2$D_IN;
	if (bank_lastWriteAddrA_3$EN)
	  bank_lastWriteAddrA_3 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteAddrA_3$D_IN;
	if (bank_lastWriteAddrB$EN)
	  bank_lastWriteAddrB <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteAddrB$D_IN;
	if (bank_lastWriteAddrB_1$EN)
	  bank_lastWriteAddrB_1 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteAddrB_1$D_IN;
	if (bank_lastWriteAddrB_2$EN)
	  bank_lastWriteAddrB_2 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteAddrB_2$D_IN;
	if (bank_lastWriteAddrB_3$EN)
	  bank_lastWriteAddrB_3 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteAddrB_3$D_IN;
	if (bank_lastWriteDataA$EN)
	  bank_lastWriteDataA <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteDataA$D_IN;
	if (bank_lastWriteDataA_1$EN)
	  bank_lastWriteDataA_1 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteDataA_1$D_IN;
	if (bank_lastWriteDataA_2$EN)
	  bank_lastWriteDataA_2 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteDataA_2$D_IN;
	if (bank_lastWriteDataA_3$EN)
	  bank_lastWriteDataA_3 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteDataA_3$D_IN;
	if (bank_lastWriteDataB$EN)
	  bank_lastWriteDataB <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteDataB$D_IN;
	if (bank_lastWriteDataB_1$EN)
	  bank_lastWriteDataB_1 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteDataB_1$D_IN;
	if (bank_lastWriteDataB_2$EN)
	  bank_lastWriteDataB_2 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteDataB_2$D_IN;
	if (bank_lastWriteDataB_3$EN)
	  bank_lastWriteDataB_3 <= `BSV_ASSIGNMENT_DELAY
	      bank_lastWriteDataB_3$D_IN;
	if (byteWriteReg_0$EN)
	  byteWriteReg_0 <= `BSV_ASSIGNMENT_DELAY byteWriteReg_0$D_IN;
	if (byteWriteReg_1$EN)
	  byteWriteReg_1 <= `BSV_ASSIGNMENT_DELAY byteWriteReg_1$D_IN;
	if (byteWriteReg_2$EN)
	  byteWriteReg_2 <= `BSV_ASSIGNMENT_DELAY byteWriteReg_2$D_IN;
	if (byteWriteReg_3$EN)
	  byteWriteReg_3 <= `BSV_ASSIGNMENT_DELAY byteWriteReg_3$D_IN;
	if (cacheState$EN)
	  cacheState <= `BSV_ASSIGNMENT_DELAY cacheState$D_IN;
	if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (memReq_fifo_taggedReg$EN)
	  memReq_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      memReq_fifo_taggedReg$D_IN;
	if (memResp_fifo_taggedReg$EN)
	  memResp_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY
	      memResp_fifo_taggedReg$D_IN;
	if (missCached$EN)
	  missCached <= `BSV_ASSIGNMENT_DELAY missCached$D_IN;
	if (missWriteReg$EN)
	  missWriteReg <= `BSV_ASSIGNMENT_DELAY missWriteReg$D_IN;
	if (out_fifo_taggedReg$EN)
	  out_fifo_taggedReg <= `BSV_ASSIGNMENT_DELAY out_fifo_taggedReg$D_IN;
	if (tags_lastReadAddrA$EN)
	  tags_lastReadAddrA <= `BSV_ASSIGNMENT_DELAY tags_lastReadAddrA$D_IN;
	if (tags_lastReadAddrB$EN)
	  tags_lastReadAddrB <= `BSV_ASSIGNMENT_DELAY tags_lastReadAddrB$D_IN;
	if (tags_lastWriteAddrA$EN)
	  tags_lastWriteAddrA <= `BSV_ASSIGNMENT_DELAY
	      tags_lastWriteAddrA$D_IN;
	if (tags_lastWriteAddrB$EN)
	  tags_lastWriteAddrB <= `BSV_ASSIGNMENT_DELAY
	      tags_lastWriteAddrB$D_IN;
	if (tags_lastWriteDataA$EN)
	  tags_lastWriteDataA <= `BSV_ASSIGNMENT_DELAY
	      tags_lastWriteDataA$D_IN;
	if (tags_lastWriteDataB$EN)
	  tags_lastWriteDataB <= `BSV_ASSIGNMENT_DELAY
	      tags_lastWriteDataB$D_IN;
      end
    if (addrReg$EN) addrReg <= `BSV_ASSIGNMENT_DELAY addrReg$D_IN;
    if (dataReg$EN) dataReg <= `BSV_ASSIGNMENT_DELAY dataReg$D_IN;
    if (updateReg$EN) updateReg <= `BSV_ASSIGNMENT_DELAY updateReg$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addrReg = 32'hAAAAAAAA;
    bank_lastReadAddrA = 11'h2AA;
    bank_lastReadAddrA_1 = 11'h2AA;
    bank_lastReadAddrA_2 = 11'h2AA;
    bank_lastReadAddrA_3 = 11'h2AA;
    bank_lastReadAddrB = 11'h2AA;
    bank_lastReadAddrB_1 = 11'h2AA;
    bank_lastReadAddrB_2 = 11'h2AA;
    bank_lastReadAddrB_3 = 11'h2AA;
    bank_lastWriteAddrA = 11'h2AA;
    bank_lastWriteAddrA_1 = 11'h2AA;
    bank_lastWriteAddrA_2 = 11'h2AA;
    bank_lastWriteAddrA_3 = 11'h2AA;
    bank_lastWriteAddrB = 11'h2AA;
    bank_lastWriteAddrB_1 = 11'h2AA;
    bank_lastWriteAddrB_2 = 11'h2AA;
    bank_lastWriteAddrB_3 = 11'h2AA;
    bank_lastWriteDataA = 64'hAAAAAAAAAAAAAAAA;
    bank_lastWriteDataA_1 = 64'hAAAAAAAAAAAAAAAA;
    bank_lastWriteDataA_2 = 64'hAAAAAAAAAAAAAAAA;
    bank_lastWriteDataA_3 = 64'hAAAAAAAAAAAAAAAA;
    bank_lastWriteDataB = 64'hAAAAAAAAAAAAAAAA;
    bank_lastWriteDataB_1 = 64'hAAAAAAAAAAAAAAAA;
    bank_lastWriteDataB_2 = 64'hAAAAAAAAAAAAAAAA;
    bank_lastWriteDataB_3 = 64'hAAAAAAAAAAAAAAAA;
    byteWriteReg_0 = 8'hAA;
    byteWriteReg_1 = 8'hAA;
    byteWriteReg_2 = 8'hAA;
    byteWriteReg_3 = 8'hAA;
    cacheState = 2'h2;
    count = 11'h2AA;
    dataReg =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    memReq_fifo_taggedReg =
	318'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    memResp_fifo_taggedReg =
	257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    missCached = 1'h0;
    missWriteReg = 1'h0;
    out_fifo_taggedReg =
	257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    tags_lastReadAddrA = 11'h2AA;
    tags_lastReadAddrB = 11'h2AA;
    tags_lastWriteAddrA = 11'h2AA;
    tags_lastWriteAddrB = 11'h2AA;
    tags_lastWriteDataA = 18'h2AAAA;
    tags_lastWriteDataB = 18'h2AAAA;
    updateReg =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkL2Cache

